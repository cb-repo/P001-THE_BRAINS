
THE_BRAINS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024b4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002574  08002574  00012574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002598  08002598  000200c4  2**0
                  CONTENTS
  4 .ARM          00000008  08002598  08002598  00012598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080025a0  080025a0  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025a0  080025a0  000125a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025a4  080025a4  000125a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  080025a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  200000c4  0800266c  000200c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  0800266c  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000052b5  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000162b  00000000  00000000  000253a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000600  00000000  00000000  000269d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000538  00000000  00000000  00026fd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000027aa  00000000  00000000  00027508  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000072de  00000000  00000000  00029cb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007296f  00000000  00000000  00030f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000ce  00000000  00000000  000a38ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001388  00000000  00000000  000a39d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000c4 	.word	0x200000c4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800255c 	.word	0x0800255c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000c8 	.word	0x200000c8
 8000104:	0800255c 	.word	0x0800255c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f830 	bl	80002b4 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	0415      	lsls	r5, r2, #16
 8000268:	0c2d      	lsrs	r5, r5, #16
 800026a:	002e      	movs	r6, r5
 800026c:	b580      	push	{r7, lr}
 800026e:	0407      	lsls	r7, r0, #16
 8000270:	0c14      	lsrs	r4, r2, #16
 8000272:	0c3f      	lsrs	r7, r7, #16
 8000274:	4699      	mov	r9, r3
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	437e      	muls	r6, r7
 800027a:	435d      	muls	r5, r3
 800027c:	4367      	muls	r7, r4
 800027e:	4363      	muls	r3, r4
 8000280:	197f      	adds	r7, r7, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	19e4      	adds	r4, r4, r7
 8000286:	469c      	mov	ip, r3
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2380      	movs	r3, #128	; 0x80
 800028e:	025b      	lsls	r3, r3, #9
 8000290:	4698      	mov	r8, r3
 8000292:	44c4      	add	ip, r8
 8000294:	464b      	mov	r3, r9
 8000296:	4343      	muls	r3, r0
 8000298:	4351      	muls	r1, r2
 800029a:	0c25      	lsrs	r5, r4, #16
 800029c:	0436      	lsls	r6, r6, #16
 800029e:	4465      	add	r5, ip
 80002a0:	0c36      	lsrs	r6, r6, #16
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	19a4      	adds	r4, r4, r6
 80002a6:	195b      	adds	r3, r3, r5
 80002a8:	1859      	adds	r1, r3, r1
 80002aa:	0020      	movs	r0, r4
 80002ac:	bc0c      	pop	{r2, r3}
 80002ae:	4690      	mov	r8, r2
 80002b0:	4699      	mov	r9, r3
 80002b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b4 <__udivmoddi4>:
 80002b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b6:	464f      	mov	r7, r9
 80002b8:	4646      	mov	r6, r8
 80002ba:	46d6      	mov	lr, sl
 80002bc:	b5c0      	push	{r6, r7, lr}
 80002be:	0004      	movs	r4, r0
 80002c0:	b082      	sub	sp, #8
 80002c2:	000d      	movs	r5, r1
 80002c4:	4691      	mov	r9, r2
 80002c6:	4698      	mov	r8, r3
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d82f      	bhi.n	800032c <__udivmoddi4+0x78>
 80002cc:	d02c      	beq.n	8000328 <__udivmoddi4+0x74>
 80002ce:	4641      	mov	r1, r8
 80002d0:	4648      	mov	r0, r9
 80002d2:	f000 f8b1 	bl	8000438 <__clzdi2>
 80002d6:	0029      	movs	r1, r5
 80002d8:	0006      	movs	r6, r0
 80002da:	0020      	movs	r0, r4
 80002dc:	f000 f8ac 	bl	8000438 <__clzdi2>
 80002e0:	1a33      	subs	r3, r6, r0
 80002e2:	469c      	mov	ip, r3
 80002e4:	3b20      	subs	r3, #32
 80002e6:	469a      	mov	sl, r3
 80002e8:	d500      	bpl.n	80002ec <__udivmoddi4+0x38>
 80002ea:	e076      	b.n	80003da <__udivmoddi4+0x126>
 80002ec:	464b      	mov	r3, r9
 80002ee:	4652      	mov	r2, sl
 80002f0:	4093      	lsls	r3, r2
 80002f2:	001f      	movs	r7, r3
 80002f4:	464b      	mov	r3, r9
 80002f6:	4662      	mov	r2, ip
 80002f8:	4093      	lsls	r3, r2
 80002fa:	001e      	movs	r6, r3
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d828      	bhi.n	8000352 <__udivmoddi4+0x9e>
 8000300:	d025      	beq.n	800034e <__udivmoddi4+0x9a>
 8000302:	4653      	mov	r3, sl
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5a>
 800030c:	e07b      	b.n	8000406 <__udivmoddi4+0x152>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	4652      	mov	r2, sl
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4662      	mov	r2, ip
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e018      	b.n	800035a <__udivmoddi4+0xa6>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9d0      	bls.n	80002ce <__udivmoddi4+0x1a>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8a>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b002      	add	sp, #8
 8000344:	bc1c      	pop	{r2, r3, r4}
 8000346:	4690      	mov	r8, r2
 8000348:	4699      	mov	r9, r3
 800034a:	46a2      	mov	sl, r4
 800034c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800034e:	42a3      	cmp	r3, r4
 8000350:	d9d7      	bls.n	8000302 <__udivmoddi4+0x4e>
 8000352:	2200      	movs	r2, #0
 8000354:	2300      	movs	r3, #0
 8000356:	9200      	str	r2, [sp, #0]
 8000358:	9301      	str	r3, [sp, #4]
 800035a:	4663      	mov	r3, ip
 800035c:	2b00      	cmp	r3, #0
 800035e:	d0e9      	beq.n	8000334 <__udivmoddi4+0x80>
 8000360:	07fb      	lsls	r3, r7, #31
 8000362:	4698      	mov	r8, r3
 8000364:	4641      	mov	r1, r8
 8000366:	0872      	lsrs	r2, r6, #1
 8000368:	430a      	orrs	r2, r1
 800036a:	087b      	lsrs	r3, r7, #1
 800036c:	4666      	mov	r6, ip
 800036e:	e00e      	b.n	800038e <__udivmoddi4+0xda>
 8000370:	42ab      	cmp	r3, r5
 8000372:	d101      	bne.n	8000378 <__udivmoddi4+0xc4>
 8000374:	42a2      	cmp	r2, r4
 8000376:	d80c      	bhi.n	8000392 <__udivmoddi4+0xde>
 8000378:	1aa4      	subs	r4, r4, r2
 800037a:	419d      	sbcs	r5, r3
 800037c:	2001      	movs	r0, #1
 800037e:	1924      	adds	r4, r4, r4
 8000380:	416d      	adcs	r5, r5
 8000382:	2100      	movs	r1, #0
 8000384:	3e01      	subs	r6, #1
 8000386:	1824      	adds	r4, r4, r0
 8000388:	414d      	adcs	r5, r1
 800038a:	2e00      	cmp	r6, #0
 800038c:	d006      	beq.n	800039c <__udivmoddi4+0xe8>
 800038e:	42ab      	cmp	r3, r5
 8000390:	d9ee      	bls.n	8000370 <__udivmoddi4+0xbc>
 8000392:	3e01      	subs	r6, #1
 8000394:	1924      	adds	r4, r4, r4
 8000396:	416d      	adcs	r5, r5
 8000398:	2e00      	cmp	r6, #0
 800039a:	d1f8      	bne.n	800038e <__udivmoddi4+0xda>
 800039c:	9800      	ldr	r0, [sp, #0]
 800039e:	9901      	ldr	r1, [sp, #4]
 80003a0:	4653      	mov	r3, sl
 80003a2:	1900      	adds	r0, r0, r4
 80003a4:	4169      	adcs	r1, r5
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	db23      	blt.n	80003f2 <__udivmoddi4+0x13e>
 80003aa:	002b      	movs	r3, r5
 80003ac:	4652      	mov	r2, sl
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	002a      	movs	r2, r5
 80003b2:	4664      	mov	r4, ip
 80003b4:	40e2      	lsrs	r2, r4
 80003b6:	001c      	movs	r4, r3
 80003b8:	4653      	mov	r3, sl
 80003ba:	0015      	movs	r5, r2
 80003bc:	2b00      	cmp	r3, #0
 80003be:	db2d      	blt.n	800041c <__udivmoddi4+0x168>
 80003c0:	0026      	movs	r6, r4
 80003c2:	4657      	mov	r7, sl
 80003c4:	40be      	lsls	r6, r7
 80003c6:	0033      	movs	r3, r6
 80003c8:	0026      	movs	r6, r4
 80003ca:	4667      	mov	r7, ip
 80003cc:	40be      	lsls	r6, r7
 80003ce:	0032      	movs	r2, r6
 80003d0:	1a80      	subs	r0, r0, r2
 80003d2:	4199      	sbcs	r1, r3
 80003d4:	9000      	str	r0, [sp, #0]
 80003d6:	9101      	str	r1, [sp, #4]
 80003d8:	e7ac      	b.n	8000334 <__udivmoddi4+0x80>
 80003da:	4662      	mov	r2, ip
 80003dc:	2320      	movs	r3, #32
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	464a      	mov	r2, r9
 80003e2:	40da      	lsrs	r2, r3
 80003e4:	4661      	mov	r1, ip
 80003e6:	0013      	movs	r3, r2
 80003e8:	4642      	mov	r2, r8
 80003ea:	408a      	lsls	r2, r1
 80003ec:	0017      	movs	r7, r2
 80003ee:	431f      	orrs	r7, r3
 80003f0:	e780      	b.n	80002f4 <__udivmoddi4+0x40>
 80003f2:	4662      	mov	r2, ip
 80003f4:	2320      	movs	r3, #32
 80003f6:	1a9b      	subs	r3, r3, r2
 80003f8:	002a      	movs	r2, r5
 80003fa:	4666      	mov	r6, ip
 80003fc:	409a      	lsls	r2, r3
 80003fe:	0023      	movs	r3, r4
 8000400:	40f3      	lsrs	r3, r6
 8000402:	4313      	orrs	r3, r2
 8000404:	e7d4      	b.n	80003b0 <__udivmoddi4+0xfc>
 8000406:	4662      	mov	r2, ip
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e780      	b.n	800031e <__udivmoddi4+0x6a>
 800041c:	2320      	movs	r3, #32
 800041e:	4662      	mov	r2, ip
 8000420:	0026      	movs	r6, r4
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	40de      	lsrs	r6, r3
 8000426:	002f      	movs	r7, r5
 8000428:	46b0      	mov	r8, r6
 800042a:	4666      	mov	r6, ip
 800042c:	40b7      	lsls	r7, r6
 800042e:	4646      	mov	r6, r8
 8000430:	003b      	movs	r3, r7
 8000432:	4333      	orrs	r3, r6
 8000434:	e7c8      	b.n	80003c8 <__udivmoddi4+0x114>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__clzdi2>:
 8000438:	b510      	push	{r4, lr}
 800043a:	2900      	cmp	r1, #0
 800043c:	d103      	bne.n	8000446 <__clzdi2+0xe>
 800043e:	f000 f807 	bl	8000450 <__clzsi2>
 8000442:	3020      	adds	r0, #32
 8000444:	e002      	b.n	800044c <__clzdi2+0x14>
 8000446:	1c08      	adds	r0, r1, #0
 8000448:	f000 f802 	bl	8000450 <__clzsi2>
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__clzsi2>:
 8000450:	211c      	movs	r1, #28
 8000452:	2301      	movs	r3, #1
 8000454:	041b      	lsls	r3, r3, #16
 8000456:	4298      	cmp	r0, r3
 8000458:	d301      	bcc.n	800045e <__clzsi2+0xe>
 800045a:	0c00      	lsrs	r0, r0, #16
 800045c:	3910      	subs	r1, #16
 800045e:	0a1b      	lsrs	r3, r3, #8
 8000460:	4298      	cmp	r0, r3
 8000462:	d301      	bcc.n	8000468 <__clzsi2+0x18>
 8000464:	0a00      	lsrs	r0, r0, #8
 8000466:	3908      	subs	r1, #8
 8000468:	091b      	lsrs	r3, r3, #4
 800046a:	4298      	cmp	r0, r3
 800046c:	d301      	bcc.n	8000472 <__clzsi2+0x22>
 800046e:	0900      	lsrs	r0, r0, #4
 8000470:	3904      	subs	r1, #4
 8000472:	a202      	add	r2, pc, #8	; (adr r2, 800047c <__clzsi2+0x2c>)
 8000474:	5c10      	ldrb	r0, [r2, r0]
 8000476:	1840      	adds	r0, r0, r1
 8000478:	4770      	bx	lr
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	02020304 	.word	0x02020304
 8000480:	01010101 	.word	0x01010101
	...

0800048c <MOTOR_Init>:
/*
 * PUBLIC FUNCTIONS
 */

void MOTOR_Init (void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af02      	add	r7, sp, #8
	TIM_Init(TIM_MOTOR, TIM_MOTOR_FREQ, TIM_MOTOR_RELOAD);
 8000492:	4b25      	ldr	r3, [pc, #148]	; (8000528 <MOTOR_Init+0x9c>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	4925      	ldr	r1, [pc, #148]	; (800052c <MOTOR_Init+0xa0>)
 8000498:	22ff      	movs	r2, #255	; 0xff
 800049a:	0018      	movs	r0, r3
 800049c:	f001 fde4 	bl	8002068 <TIM_Init>

	GPIO_EnableOutput(MOTOR_LnSLEEP_GPIO, MOTOR_LnSLEEP_PIN, nSLEEP_LOWPOWER);
 80004a0:	2380      	movs	r3, #128	; 0x80
 80004a2:	005b      	lsls	r3, r3, #1
 80004a4:	4822      	ldr	r0, [pc, #136]	; (8000530 <MOTOR_Init+0xa4>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	0019      	movs	r1, r3
 80004aa:	f001 fd29 	bl	8001f00 <GPIO_EnableOutput>
	GPIO_EnableOutput(MOTOR_RnSLEEP_GPIO, MOTOR_RnSLEEP_PIN, nSLEEP_LOWPOWER);
 80004ae:	4b20      	ldr	r3, [pc, #128]	; (8000530 <MOTOR_Init+0xa4>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	2104      	movs	r1, #4
 80004b4:	0018      	movs	r0, r3
 80004b6:	f001 fd23 	bl	8001f00 <GPIO_EnableOutput>

	TIM_EnablePwm(TIM_MOTOR, MOTOR_LPWM1_CH, MOTOR_LPWM1_GPIO, MOTOR_LPWM1_PIN, TIM_MOTOR_AF);
 80004ba:	4b1b      	ldr	r3, [pc, #108]	; (8000528 <MOTOR_Init+0x9c>)
 80004bc:	6818      	ldr	r0, [r3, #0]
 80004be:	2380      	movs	r3, #128	; 0x80
 80004c0:	0219      	lsls	r1, r3, #8
 80004c2:	23a0      	movs	r3, #160	; 0xa0
 80004c4:	05da      	lsls	r2, r3, #23
 80004c6:	2302      	movs	r3, #2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	000b      	movs	r3, r1
 80004cc:	2100      	movs	r1, #0
 80004ce:	f001 fe4f 	bl	8002170 <TIM_EnablePwm>
	TIM_EnablePwm(TIM_MOTOR, MOTOR_LPWM2_CH, MOTOR_LPWM2_GPIO, MOTOR_LPWM2_PIN, TIM_MOTOR_AF);
 80004d2:	4b15      	ldr	r3, [pc, #84]	; (8000528 <MOTOR_Init+0x9c>)
 80004d4:	6818      	ldr	r0, [r3, #0]
 80004d6:	4a16      	ldr	r2, [pc, #88]	; (8000530 <MOTOR_Init+0xa4>)
 80004d8:	2302      	movs	r3, #2
 80004da:	9300      	str	r3, [sp, #0]
 80004dc:	2308      	movs	r3, #8
 80004de:	2101      	movs	r1, #1
 80004e0:	f001 fe46 	bl	8002170 <TIM_EnablePwm>
	TIM_EnablePwm(TIM_MOTOR, MOTOR_RPWM1_CH, MOTOR_RPWM1_GPIO, MOTOR_RPWM1_PIN, TIM_MOTOR_AF);
 80004e4:	4b10      	ldr	r3, [pc, #64]	; (8000528 <MOTOR_Init+0x9c>)
 80004e6:	6818      	ldr	r0, [r3, #0]
 80004e8:	2380      	movs	r3, #128	; 0x80
 80004ea:	00da      	lsls	r2, r3, #3
 80004ec:	4910      	ldr	r1, [pc, #64]	; (8000530 <MOTOR_Init+0xa4>)
 80004ee:	2302      	movs	r3, #2
 80004f0:	9300      	str	r3, [sp, #0]
 80004f2:	0013      	movs	r3, r2
 80004f4:	000a      	movs	r2, r1
 80004f6:	2102      	movs	r1, #2
 80004f8:	f001 fe3a 	bl	8002170 <TIM_EnablePwm>
	TIM_EnablePwm(TIM_MOTOR, MOTOR_RPWM2_CH, MOTOR_RPWM2_GPIO, MOTOR_RPWM2_PIN, TIM_MOTOR_AF);
 80004fc:	4b0a      	ldr	r3, [pc, #40]	; (8000528 <MOTOR_Init+0x9c>)
 80004fe:	6818      	ldr	r0, [r3, #0]
 8000500:	2380      	movs	r3, #128	; 0x80
 8000502:	011a      	lsls	r2, r3, #4
 8000504:	490a      	ldr	r1, [pc, #40]	; (8000530 <MOTOR_Init+0xa4>)
 8000506:	2302      	movs	r3, #2
 8000508:	9300      	str	r3, [sp, #0]
 800050a:	0013      	movs	r3, r2
 800050c:	000a      	movs	r2, r1
 800050e:	2103      	movs	r1, #3
 8000510:	f001 fe2e 	bl	8002170 <TIM_EnablePwm>

	TIM_Start(TIM_MOTOR);
 8000514:	4b04      	ldr	r3, [pc, #16]	; (8000528 <MOTOR_Init+0x9c>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	0018      	movs	r0, r3
 800051a:	f001 fe77 	bl	800220c <TIM_Start>
	MOTOR_Sleep();
 800051e:	f000 f81a 	bl	8000556 <MOTOR_Sleep>
}
 8000522:	46c0      	nop			; (mov r8, r8)
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	2000006c 	.word	0x2000006c
 800052c:	004e2000 	.word	0x004e2000
 8000530:	50000400 	.word	0x50000400

08000534 <MOTOR_Update>:
	MOTOR_M1_Update(MOTOR_OFF);
	MOTOR_M2_Update(MOTOR_OFF);
}

void MOTOR_Update (int32_t M1, int32_t M2)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	6039      	str	r1, [r7, #0]
	MOTOR_M1_Update(M1);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	0018      	movs	r0, r3
 8000542:	f000 f893 	bl	800066c <MOTOR_M1_Update>
	MOTOR_M2_Update(M2);
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	0018      	movs	r0, r3
 800054a:	f000 f8d7 	bl	80006fc <MOTOR_M2_Update>
}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	46bd      	mov	sp, r7
 8000552:	b002      	add	sp, #8
 8000554:	bd80      	pop	{r7, pc}

08000556 <MOTOR_Sleep>:
/*
 * PRIVATE FUNCTIONS
 */

void MOTOR_Sleep (void)
{
 8000556:	b580      	push	{r7, lr}
 8000558:	af00      	add	r7, sp, #0
	MOTOR_M1_Sleep();
 800055a:	f000 f805 	bl	8000568 <MOTOR_M1_Sleep>
	MOTOR_M2_Sleep();
 800055e:	f000 f821 	bl	80005a4 <MOTOR_M2_Sleep>
}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}

08000568 <MOTOR_M1_Sleep>:

void MOTOR_M1_Sleep (void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
	GPIO_Write(MOTOR_LnSLEEP_GPIO, MOTOR_LnSLEEP_PIN, nSLEEP_LOWPOWER);
 800056c:	2380      	movs	r3, #128	; 0x80
 800056e:	005b      	lsls	r3, r3, #1
 8000570:	480a      	ldr	r0, [pc, #40]	; (800059c <MOTOR_M1_Sleep+0x34>)
 8000572:	2200      	movs	r2, #0
 8000574:	0019      	movs	r1, r3
 8000576:	f001 fca7 	bl	8001ec8 <GPIO_Write>
	TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM1_CH, PWM_LOWPOWER);
 800057a:	4b09      	ldr	r3, [pc, #36]	; (80005a0 <MOTOR_M1_Sleep+0x38>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	2200      	movs	r2, #0
 8000580:	2100      	movs	r1, #0
 8000582:	0018      	movs	r0, r3
 8000584:	f001 fe1b 	bl	80021be <TIM_SetPulse>
	TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM2_CH, PWM_LOWPOWER);
 8000588:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <MOTOR_M1_Sleep+0x38>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	2200      	movs	r2, #0
 800058e:	2101      	movs	r1, #1
 8000590:	0018      	movs	r0, r3
 8000592:	f001 fe14 	bl	80021be <TIM_SetPulse>
}
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	50000400 	.word	0x50000400
 80005a0:	2000006c 	.word	0x2000006c

080005a4 <MOTOR_M2_Sleep>:

void MOTOR_M2_Sleep (void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
	GPIO_Write(MOTOR_RnSLEEP_GPIO, MOTOR_RnSLEEP_PIN, nSLEEP_LOWPOWER);
 80005a8:	4b0b      	ldr	r3, [pc, #44]	; (80005d8 <MOTOR_M2_Sleep+0x34>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	2104      	movs	r1, #4
 80005ae:	0018      	movs	r0, r3
 80005b0:	f001 fc8a 	bl	8001ec8 <GPIO_Write>
	TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM1_CH, PWM_LOWPOWER);
 80005b4:	4b09      	ldr	r3, [pc, #36]	; (80005dc <MOTOR_M2_Sleep+0x38>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2200      	movs	r2, #0
 80005ba:	2102      	movs	r1, #2
 80005bc:	0018      	movs	r0, r3
 80005be:	f001 fdfe 	bl	80021be <TIM_SetPulse>
	TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM2_CH, PWM_LOWPOWER);
 80005c2:	4b06      	ldr	r3, [pc, #24]	; (80005dc <MOTOR_M2_Sleep+0x38>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	2200      	movs	r2, #0
 80005c8:	2103      	movs	r1, #3
 80005ca:	0018      	movs	r0, r3
 80005cc:	f001 fdf7 	bl	80021be <TIM_SetPulse>
}
 80005d0:	46c0      	nop			; (mov r8, r8)
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	46c0      	nop			; (mov r8, r8)
 80005d8:	50000400 	.word	0x50000400
 80005dc:	2000006c 	.word	0x2000006c

080005e0 <MOTOR_Brake>:


void MOTOR_Brake (void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	MOTOR_M1_Brake();
 80005e4:	f000 f806 	bl	80005f4 <MOTOR_M1_Brake>
	MOTOR_M2_Brake();
 80005e8:	f000 f822 	bl	8000630 <MOTOR_M2_Brake>
}
 80005ec:	46c0      	nop			; (mov r8, r8)
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
	...

080005f4 <MOTOR_M1_Brake>:

void MOTOR_M1_Brake (void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
	GPIO_Write(MOTOR_LnSLEEP_GPIO, MOTOR_LnSLEEP_PIN, nSLEEP_BRAKE);
 80005f8:	2380      	movs	r3, #128	; 0x80
 80005fa:	005b      	lsls	r3, r3, #1
 80005fc:	480a      	ldr	r0, [pc, #40]	; (8000628 <MOTOR_M1_Brake+0x34>)
 80005fe:	2200      	movs	r2, #0
 8000600:	0019      	movs	r1, r3
 8000602:	f001 fc61 	bl	8001ec8 <GPIO_Write>
	TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM1_CH, PWM_BRAKE);
 8000606:	4b09      	ldr	r3, [pc, #36]	; (800062c <MOTOR_M1_Brake+0x38>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	2201      	movs	r2, #1
 800060c:	2100      	movs	r1, #0
 800060e:	0018      	movs	r0, r3
 8000610:	f001 fdd5 	bl	80021be <TIM_SetPulse>
	TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM2_CH, PWM_BRAKE);
 8000614:	4b05      	ldr	r3, [pc, #20]	; (800062c <MOTOR_M1_Brake+0x38>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2201      	movs	r2, #1
 800061a:	2101      	movs	r1, #1
 800061c:	0018      	movs	r0, r3
 800061e:	f001 fdce 	bl	80021be <TIM_SetPulse>
}
 8000622:	46c0      	nop			; (mov r8, r8)
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	50000400 	.word	0x50000400
 800062c:	2000006c 	.word	0x2000006c

08000630 <MOTOR_M2_Brake>:

void MOTOR_M2_Brake (void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	GPIO_Write(MOTOR_RnSLEEP_GPIO, MOTOR_RnSLEEP_PIN, nSLEEP_BRAKE);
 8000634:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <MOTOR_M2_Brake+0x34>)
 8000636:	2200      	movs	r2, #0
 8000638:	2104      	movs	r1, #4
 800063a:	0018      	movs	r0, r3
 800063c:	f001 fc44 	bl	8001ec8 <GPIO_Write>
	TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM1_CH, PWM_BRAKE);
 8000640:	4b09      	ldr	r3, [pc, #36]	; (8000668 <MOTOR_M2_Brake+0x38>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2201      	movs	r2, #1
 8000646:	2102      	movs	r1, #2
 8000648:	0018      	movs	r0, r3
 800064a:	f001 fdb8 	bl	80021be <TIM_SetPulse>
	TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM2_CH, PWM_BRAKE);
 800064e:	4b06      	ldr	r3, [pc, #24]	; (8000668 <MOTOR_M2_Brake+0x38>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	2201      	movs	r2, #1
 8000654:	2103      	movs	r1, #3
 8000656:	0018      	movs	r0, r3
 8000658:	f001 fdb1 	bl	80021be <TIM_SetPulse>
}
 800065c:	46c0      	nop			; (mov r8, r8)
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	50000400 	.word	0x50000400
 8000668:	2000006c 	.word	0x2000006c

0800066c <MOTOR_M1_Update>:
	TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM1_CH, PWM_COAST);
	TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM2_CH, PWM_COAST);
}

void MOTOR_M1_Update (int32_t throttle)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	bool reverse = false;
 8000674:	230f      	movs	r3, #15
 8000676:	18fb      	adds	r3, r7, r3
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]

	// Check if reversing
	if (throttle < 0) {
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	2b00      	cmp	r3, #0
 8000680:	da06      	bge.n	8000690 <MOTOR_M1_Update+0x24>
		reverse = true;
 8000682:	230f      	movs	r3, #15
 8000684:	18fb      	adds	r3, r7, r3
 8000686:	2201      	movs	r2, #1
 8000688:	701a      	strb	r2, [r3, #0]
		throttle = -throttle;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	425b      	negs	r3, r3
 800068e:	607b      	str	r3, [r7, #4]
	}

	// Clamp maximum speed
	if (throttle > MOTOR_MAX) {
 8000690:	687a      	ldr	r2, [r7, #4]
 8000692:	2380      	movs	r3, #128	; 0x80
 8000694:	005b      	lsls	r3, r3, #1
 8000696:	429a      	cmp	r2, r3
 8000698:	dd02      	ble.n	80006a0 <MOTOR_M1_Update+0x34>
		throttle = MOTOR_MAX;
 800069a:	2380      	movs	r3, #128	; 0x80
 800069c:	005b      	lsls	r3, r3, #1
 800069e:	607b      	str	r3, [r7, #4]
	}

	if (throttle <= MOTOR_OFF + MOTOR_STALL) {
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	2b32      	cmp	r3, #50	; 0x32
 80006a4:	dc02      	bgt.n	80006ac <MOTOR_M1_Update+0x40>
		if (MOTOR_BRAKE) {
			MOTOR_Brake();
 80006a6:	f7ff ff9b 	bl	80005e0 <MOTOR_Brake>
		TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM2_CH, throttle);
	} else {
		TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM1_CH, throttle);
		TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM2_CH, 0);
	}
}
 80006aa:	e021      	b.n	80006f0 <MOTOR_M1_Update+0x84>
	} else if (reverse) {
 80006ac:	230f      	movs	r3, #15
 80006ae:	18fb      	adds	r3, r7, r3
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d00e      	beq.n	80006d4 <MOTOR_M1_Update+0x68>
		TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM1_CH, 0);
 80006b6:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <MOTOR_M1_Update+0x8c>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	2200      	movs	r2, #0
 80006bc:	2100      	movs	r1, #0
 80006be:	0018      	movs	r0, r3
 80006c0:	f001 fd7d 	bl	80021be <TIM_SetPulse>
		TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM2_CH, throttle);
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MOTOR_M1_Update+0x8c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	687a      	ldr	r2, [r7, #4]
 80006ca:	2101      	movs	r1, #1
 80006cc:	0018      	movs	r0, r3
 80006ce:	f001 fd76 	bl	80021be <TIM_SetPulse>
}
 80006d2:	e00d      	b.n	80006f0 <MOTOR_M1_Update+0x84>
		TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM1_CH, throttle);
 80006d4:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <MOTOR_M1_Update+0x8c>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	2100      	movs	r1, #0
 80006dc:	0018      	movs	r0, r3
 80006de:	f001 fd6e 	bl	80021be <TIM_SetPulse>
		TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM2_CH, 0);
 80006e2:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <MOTOR_M1_Update+0x8c>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	2200      	movs	r2, #0
 80006e8:	2101      	movs	r1, #1
 80006ea:	0018      	movs	r0, r3
 80006ec:	f001 fd67 	bl	80021be <TIM_SetPulse>
}
 80006f0:	46c0      	nop			; (mov r8, r8)
 80006f2:	46bd      	mov	sp, r7
 80006f4:	b004      	add	sp, #16
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	2000006c 	.word	0x2000006c

080006fc <MOTOR_M2_Update>:

void MOTOR_M2_Update (int32_t throttle)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	bool reverse = false;
 8000704:	230f      	movs	r3, #15
 8000706:	18fb      	adds	r3, r7, r3
 8000708:	2200      	movs	r2, #0
 800070a:	701a      	strb	r2, [r3, #0]

	// Check if reversing
	if (throttle < 0) {
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2b00      	cmp	r3, #0
 8000710:	da06      	bge.n	8000720 <MOTOR_M2_Update+0x24>
		reverse = true;
 8000712:	230f      	movs	r3, #15
 8000714:	18fb      	adds	r3, r7, r3
 8000716:	2201      	movs	r2, #1
 8000718:	701a      	strb	r2, [r3, #0]
		throttle = -throttle;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	425b      	negs	r3, r3
 800071e:	607b      	str	r3, [r7, #4]
	}

	// Clamp maximum speed
	if (throttle > MOTOR_MAX) {
 8000720:	687a      	ldr	r2, [r7, #4]
 8000722:	2380      	movs	r3, #128	; 0x80
 8000724:	005b      	lsls	r3, r3, #1
 8000726:	429a      	cmp	r2, r3
 8000728:	dd02      	ble.n	8000730 <MOTOR_M2_Update+0x34>
		throttle = MOTOR_MAX;
 800072a:	2380      	movs	r3, #128	; 0x80
 800072c:	005b      	lsls	r3, r3, #1
 800072e:	607b      	str	r3, [r7, #4]
	}

	if (throttle <= MOTOR_OFF + MOTOR_STALL) {
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	2b32      	cmp	r3, #50	; 0x32
 8000734:	dc02      	bgt.n	800073c <MOTOR_M2_Update+0x40>
		if (MOTOR_BRAKE) {
			MOTOR_Brake();
 8000736:	f7ff ff53 	bl	80005e0 <MOTOR_Brake>
		TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM2_CH, throttle);
	} else {
		TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM1_CH, throttle);
		TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM2_CH, 0);
	}
}
 800073a:	e021      	b.n	8000780 <MOTOR_M2_Update+0x84>
	} else if (reverse) {
 800073c:	230f      	movs	r3, #15
 800073e:	18fb      	adds	r3, r7, r3
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d00e      	beq.n	8000764 <MOTOR_M2_Update+0x68>
		TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM1_CH, 0);
 8000746:	4b10      	ldr	r3, [pc, #64]	; (8000788 <MOTOR_M2_Update+0x8c>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	2200      	movs	r2, #0
 800074c:	2102      	movs	r1, #2
 800074e:	0018      	movs	r0, r3
 8000750:	f001 fd35 	bl	80021be <TIM_SetPulse>
		TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM2_CH, throttle);
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <MOTOR_M2_Update+0x8c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	2103      	movs	r1, #3
 800075c:	0018      	movs	r0, r3
 800075e:	f001 fd2e 	bl	80021be <TIM_SetPulse>
}
 8000762:	e00d      	b.n	8000780 <MOTOR_M2_Update+0x84>
		TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM1_CH, throttle);
 8000764:	4b08      	ldr	r3, [pc, #32]	; (8000788 <MOTOR_M2_Update+0x8c>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	687a      	ldr	r2, [r7, #4]
 800076a:	2102      	movs	r1, #2
 800076c:	0018      	movs	r0, r3
 800076e:	f001 fd26 	bl	80021be <TIM_SetPulse>
		TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM2_CH, 0);
 8000772:	4b05      	ldr	r3, [pc, #20]	; (8000788 <MOTOR_M2_Update+0x8c>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2200      	movs	r2, #0
 8000778:	2103      	movs	r1, #3
 800077a:	0018      	movs	r0, r3
 800077c:	f001 fd1f 	bl	80021be <TIM_SetPulse>
}
 8000780:	46c0      	nop			; (mov r8, r8)
 8000782:	46bd      	mov	sp, r7
 8000784:	b004      	add	sp, #16
 8000786:	bd80      	pop	{r7, pc}
 8000788:	2000006c 	.word	0x2000006c

0800078c <GPIO_Read>:
{
	gpio->BRR = (uint32_t)pin;
}

static inline bool GPIO_Read(GPIO_t * gpio, uint32_t pin)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	6039      	str	r1, [r7, #0]
	return ((gpio->IDR & pin) > 0);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	691b      	ldr	r3, [r3, #16]
 800079a:	683a      	ldr	r2, [r7, #0]
 800079c:	4013      	ands	r3, r2
 800079e:	1e5a      	subs	r2, r3, #1
 80007a0:	4193      	sbcs	r3, r2
 80007a2:	b2db      	uxtb	r3, r3
}
 80007a4:	0018      	movs	r0, r3
 80007a6:	46bd      	mov	sp, r7
 80007a8:	b002      	add	sp, #8
 80007aa:	bd80      	pop	{r7, pc}

080007ac <TIM_GetCounter>:
/*
 * INLINE FUNCTION DEFINITIONS
 */

static inline uint32_t TIM_GetCounter(TIM_t * tim)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
	return tim->Instance->CNT;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80007ba:	0018      	movs	r0, r3
 80007bc:	46bd      	mov	sp, r7
 80007be:	b002      	add	sp, #8
 80007c0:	bd80      	pop	{r7, pc}
	...

080007c4 <RADIO_Init>:
/*
 * PUBLIC FUNCTIONS
 */

void RADIO_Init (void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af02      	add	r7, sp, #8
	TIM_Init(TIM_RADIO, TIM_RADIO_FREQ, TIM_RADIO_RELOAD);
 80007ca:	4b1d      	ldr	r3, [pc, #116]	; (8000840 <RADIO_Init+0x7c>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4a1d      	ldr	r2, [pc, #116]	; (8000844 <RADIO_Init+0x80>)
 80007d0:	491d      	ldr	r1, [pc, #116]	; (8000848 <RADIO_Init+0x84>)
 80007d2:	0018      	movs	r0, r3
 80007d4:	f001 fc48 	bl	8002068 <TIM_Init>
	TIM_Start(TIM_RADIO);
 80007d8:	4b19      	ldr	r3, [pc, #100]	; (8000840 <RADIO_Init+0x7c>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	0018      	movs	r0, r3
 80007de:	f001 fd15 	bl	800220c <TIM_Start>
	GPIO_EnableIRQ(RADIO_S1_GPIO, RADIO_S1_PIN, GPIO_NOPULL, GPIO_IT_BOTH, RADIO_S1_IRQ);
 80007e2:	4a1a      	ldr	r2, [pc, #104]	; (800084c <RADIO_Init+0x88>)
 80007e4:	2380      	movs	r3, #128	; 0x80
 80007e6:	00d9      	lsls	r1, r3, #3
 80007e8:	23a0      	movs	r3, #160	; 0xa0
 80007ea:	05d8      	lsls	r0, r3, #23
 80007ec:	4b18      	ldr	r3, [pc, #96]	; (8000850 <RADIO_Init+0x8c>)
 80007ee:	9300      	str	r3, [sp, #0]
 80007f0:	0013      	movs	r3, r2
 80007f2:	2200      	movs	r2, #0
 80007f4:	f001 fbaa 	bl	8001f4c <GPIO_EnableIRQ>
	GPIO_EnableIRQ(RADIO_S2_GPIO, RADIO_S2_PIN, GPIO_NOPULL, GPIO_IT_BOTH, RADIO_S2_IRQ);
 80007f8:	4a14      	ldr	r2, [pc, #80]	; (800084c <RADIO_Init+0x88>)
 80007fa:	2380      	movs	r3, #128	; 0x80
 80007fc:	0099      	lsls	r1, r3, #2
 80007fe:	23a0      	movs	r3, #160	; 0xa0
 8000800:	05d8      	lsls	r0, r3, #23
 8000802:	4b14      	ldr	r3, [pc, #80]	; (8000854 <RADIO_Init+0x90>)
 8000804:	9300      	str	r3, [sp, #0]
 8000806:	0013      	movs	r3, r2
 8000808:	2200      	movs	r2, #0
 800080a:	f001 fb9f 	bl	8001f4c <GPIO_EnableIRQ>
	GPIO_EnableIRQ(RADIO_S3_GPIO, RADIO_S3_PIN, GPIO_NOPULL, GPIO_IT_BOTH, RADIO_S3_IRQ);
 800080e:	4a0f      	ldr	r2, [pc, #60]	; (800084c <RADIO_Init+0x88>)
 8000810:	2380      	movs	r3, #128	; 0x80
 8000812:	0059      	lsls	r1, r3, #1
 8000814:	23a0      	movs	r3, #160	; 0xa0
 8000816:	05d8      	lsls	r0, r3, #23
 8000818:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <RADIO_Init+0x94>)
 800081a:	9300      	str	r3, [sp, #0]
 800081c:	0013      	movs	r3, r2
 800081e:	2200      	movs	r2, #0
 8000820:	f001 fb94 	bl	8001f4c <GPIO_EnableIRQ>
	GPIO_EnableIRQ(RADIO_S4_GPIO, RADIO_S4_PIN, GPIO_NOPULL, GPIO_IT_BOTH, RADIO_S4_IRQ);
 8000824:	4a09      	ldr	r2, [pc, #36]	; (800084c <RADIO_Init+0x88>)
 8000826:	2380      	movs	r3, #128	; 0x80
 8000828:	0219      	lsls	r1, r3, #8
 800082a:	480c      	ldr	r0, [pc, #48]	; (800085c <RADIO_Init+0x98>)
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <RADIO_Init+0x9c>)
 800082e:	9300      	str	r3, [sp, #0]
 8000830:	0013      	movs	r3, r2
 8000832:	2200      	movs	r2, #0
 8000834:	f001 fb8a 	bl	8001f4c <GPIO_EnableIRQ>
}
 8000838:	46c0      	nop			; (mov r8, r8)
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	46c0      	nop			; (mov r8, r8)
 8000840:	20000088 	.word	0x20000088
 8000844:	0000ffff 	.word	0x0000ffff
 8000848:	000f4240 	.word	0x000f4240
 800084c:	10310000 	.word	0x10310000
 8000850:	08000865 	.word	0x08000865
 8000854:	080008bd 	.word	0x080008bd
 8000858:	08000915 	.word	0x08000915
 800085c:	50000400 	.word	0x50000400
 8000860:	0800096d 	.word	0x0800096d

08000864 <RADIO_S1_IRQ>:
/*
 * INTERRUPT ROUTINES
 */

void RADIO_S1_IRQ (void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
	uint16_t now = TIM_GetCounter(TIM_RADIO);
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <RADIO_S1_IRQ+0x4c>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	0018      	movs	r0, r3
 8000870:	f7ff ff9c 	bl	80007ac <TIM_GetCounter>
 8000874:	0002      	movs	r2, r0
 8000876:	1dbb      	adds	r3, r7, #6
 8000878:	801a      	strh	r2, [r3, #0]
	if (GPIO_Read(RADIO_S1_GPIO, RADIO_S1_PIN))
 800087a:	2380      	movs	r3, #128	; 0x80
 800087c:	00da      	lsls	r2, r3, #3
 800087e:	23a0      	movs	r3, #160	; 0xa0
 8000880:	05db      	lsls	r3, r3, #23
 8000882:	0011      	movs	r1, r2
 8000884:	0018      	movs	r0, r3
 8000886:	f7ff ff81 	bl	800078c <GPIO_Read>
 800088a:	1e03      	subs	r3, r0, #0
 800088c:	d004      	beq.n	8000898 <RADIO_S1_IRQ+0x34>
	{
		radio_S1tick = now;
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <RADIO_S1_IRQ+0x50>)
 8000890:	1dba      	adds	r2, r7, #6
 8000892:	8812      	ldrh	r2, [r2, #0]
 8000894:	801a      	strh	r2, [r3, #0]
	}
	else
	{
		radio_S1 = now - radio_S1tick;
	}
}
 8000896:	e007      	b.n	80008a8 <RADIO_S1_IRQ+0x44>
		radio_S1 = now - radio_S1tick;
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <RADIO_S1_IRQ+0x50>)
 800089a:	881b      	ldrh	r3, [r3, #0]
 800089c:	1dba      	adds	r2, r7, #6
 800089e:	8812      	ldrh	r2, [r2, #0]
 80008a0:	1ad3      	subs	r3, r2, r3
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	4b04      	ldr	r3, [pc, #16]	; (80008b8 <RADIO_S1_IRQ+0x54>)
 80008a6:	801a      	strh	r2, [r3, #0]
}
 80008a8:	46c0      	nop			; (mov r8, r8)
 80008aa:	46bd      	mov	sp, r7
 80008ac:	b002      	add	sp, #8
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000088 	.word	0x20000088
 80008b4:	200000e0 	.word	0x200000e0
 80008b8:	20000000 	.word	0x20000000

080008bc <RADIO_S2_IRQ>:

void RADIO_S2_IRQ (void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
	uint16_t now = TIM_GetCounter(TIM_RADIO);
 80008c2:	4b11      	ldr	r3, [pc, #68]	; (8000908 <RADIO_S2_IRQ+0x4c>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	0018      	movs	r0, r3
 80008c8:	f7ff ff70 	bl	80007ac <TIM_GetCounter>
 80008cc:	0002      	movs	r2, r0
 80008ce:	1dbb      	adds	r3, r7, #6
 80008d0:	801a      	strh	r2, [r3, #0]
	if (GPIO_Read(RADIO_S2_GPIO, RADIO_S2_PIN))
 80008d2:	2380      	movs	r3, #128	; 0x80
 80008d4:	009a      	lsls	r2, r3, #2
 80008d6:	23a0      	movs	r3, #160	; 0xa0
 80008d8:	05db      	lsls	r3, r3, #23
 80008da:	0011      	movs	r1, r2
 80008dc:	0018      	movs	r0, r3
 80008de:	f7ff ff55 	bl	800078c <GPIO_Read>
 80008e2:	1e03      	subs	r3, r0, #0
 80008e4:	d004      	beq.n	80008f0 <RADIO_S2_IRQ+0x34>
	{
		radio_S2tick = now;
 80008e6:	4b09      	ldr	r3, [pc, #36]	; (800090c <RADIO_S2_IRQ+0x50>)
 80008e8:	1dba      	adds	r2, r7, #6
 80008ea:	8812      	ldrh	r2, [r2, #0]
 80008ec:	801a      	strh	r2, [r3, #0]
	}
	else
	{
		radio_S2 = now - radio_S2tick;
	}
}
 80008ee:	e007      	b.n	8000900 <RADIO_S2_IRQ+0x44>
		radio_S2 = now - radio_S2tick;
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <RADIO_S2_IRQ+0x50>)
 80008f2:	881b      	ldrh	r3, [r3, #0]
 80008f4:	1dba      	adds	r2, r7, #6
 80008f6:	8812      	ldrh	r2, [r2, #0]
 80008f8:	1ad3      	subs	r3, r2, r3
 80008fa:	b29a      	uxth	r2, r3
 80008fc:	4b04      	ldr	r3, [pc, #16]	; (8000910 <RADIO_S2_IRQ+0x54>)
 80008fe:	801a      	strh	r2, [r3, #0]
}
 8000900:	46c0      	nop			; (mov r8, r8)
 8000902:	46bd      	mov	sp, r7
 8000904:	b002      	add	sp, #8
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000088 	.word	0x20000088
 800090c:	200000e2 	.word	0x200000e2
 8000910:	20000002 	.word	0x20000002

08000914 <RADIO_S3_IRQ>:

void RADIO_S3_IRQ (void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
	uint16_t now = TIM_GetCounter(TIM_RADIO);
 800091a:	4b11      	ldr	r3, [pc, #68]	; (8000960 <RADIO_S3_IRQ+0x4c>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	0018      	movs	r0, r3
 8000920:	f7ff ff44 	bl	80007ac <TIM_GetCounter>
 8000924:	0002      	movs	r2, r0
 8000926:	1dbb      	adds	r3, r7, #6
 8000928:	801a      	strh	r2, [r3, #0]
	if (GPIO_Read(RADIO_S3_GPIO, RADIO_S3_PIN))
 800092a:	2380      	movs	r3, #128	; 0x80
 800092c:	005a      	lsls	r2, r3, #1
 800092e:	23a0      	movs	r3, #160	; 0xa0
 8000930:	05db      	lsls	r3, r3, #23
 8000932:	0011      	movs	r1, r2
 8000934:	0018      	movs	r0, r3
 8000936:	f7ff ff29 	bl	800078c <GPIO_Read>
 800093a:	1e03      	subs	r3, r0, #0
 800093c:	d004      	beq.n	8000948 <RADIO_S3_IRQ+0x34>
	{
		radio_S3tick = now;
 800093e:	4b09      	ldr	r3, [pc, #36]	; (8000964 <RADIO_S3_IRQ+0x50>)
 8000940:	1dba      	adds	r2, r7, #6
 8000942:	8812      	ldrh	r2, [r2, #0]
 8000944:	801a      	strh	r2, [r3, #0]
	}
	else
	{
		radio_S3 = now - radio_S3tick;
	}
}
 8000946:	e007      	b.n	8000958 <RADIO_S3_IRQ+0x44>
		radio_S3 = now - radio_S3tick;
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <RADIO_S3_IRQ+0x50>)
 800094a:	881b      	ldrh	r3, [r3, #0]
 800094c:	1dba      	adds	r2, r7, #6
 800094e:	8812      	ldrh	r2, [r2, #0]
 8000950:	1ad3      	subs	r3, r2, r3
 8000952:	b29a      	uxth	r2, r3
 8000954:	4b04      	ldr	r3, [pc, #16]	; (8000968 <RADIO_S3_IRQ+0x54>)
 8000956:	801a      	strh	r2, [r3, #0]
}
 8000958:	46c0      	nop			; (mov r8, r8)
 800095a:	46bd      	mov	sp, r7
 800095c:	b002      	add	sp, #8
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000088 	.word	0x20000088
 8000964:	200000e4 	.word	0x200000e4
 8000968:	20000004 	.word	0x20000004

0800096c <RADIO_S4_IRQ>:

void RADIO_S4_IRQ (void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
	uint16_t now = TIM_GetCounter(TIM_RADIO);
 8000972:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <RADIO_S4_IRQ+0x4c>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	0018      	movs	r0, r3
 8000978:	f7ff ff18 	bl	80007ac <TIM_GetCounter>
 800097c:	0002      	movs	r2, r0
 800097e:	1dbb      	adds	r3, r7, #6
 8000980:	801a      	strh	r2, [r3, #0]
	if (GPIO_Read(RADIO_S4_GPIO, RADIO_S4_PIN))
 8000982:	2380      	movs	r3, #128	; 0x80
 8000984:	021b      	lsls	r3, r3, #8
 8000986:	4a0d      	ldr	r2, [pc, #52]	; (80009bc <RADIO_S4_IRQ+0x50>)
 8000988:	0019      	movs	r1, r3
 800098a:	0010      	movs	r0, r2
 800098c:	f7ff fefe 	bl	800078c <GPIO_Read>
 8000990:	1e03      	subs	r3, r0, #0
 8000992:	d004      	beq.n	800099e <RADIO_S4_IRQ+0x32>
	{
		radio_S4tick = now;
 8000994:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <RADIO_S4_IRQ+0x54>)
 8000996:	1dba      	adds	r2, r7, #6
 8000998:	8812      	ldrh	r2, [r2, #0]
 800099a:	801a      	strh	r2, [r3, #0]
	}
	else
	{
		radio_S4 = now - radio_S4tick;
	}
}
 800099c:	e007      	b.n	80009ae <RADIO_S4_IRQ+0x42>
		radio_S4 = now - radio_S4tick;
 800099e:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <RADIO_S4_IRQ+0x54>)
 80009a0:	881b      	ldrh	r3, [r3, #0]
 80009a2:	1dba      	adds	r2, r7, #6
 80009a4:	8812      	ldrh	r2, [r2, #0]
 80009a6:	1ad3      	subs	r3, r2, r3
 80009a8:	b29a      	uxth	r2, r3
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <RADIO_S4_IRQ+0x58>)
 80009ac:	801a      	strh	r2, [r3, #0]
}
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	46bd      	mov	sp, r7
 80009b2:	b002      	add	sp, #8
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	20000088 	.word	0x20000088
 80009bc:	50000400 	.word	0x50000400
 80009c0:	200000e6 	.word	0x200000e6
 80009c4:	20000006 	.word	0x20000006

080009c8 <GPIO_Set>:
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	6039      	str	r1, [r7, #0]
	gpio->BSRR = (uint32_t)pin;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	683a      	ldr	r2, [r7, #0]
 80009d6:	619a      	str	r2, [r3, #24]
}
 80009d8:	46c0      	nop			; (mov r8, r8)
 80009da:	46bd      	mov	sp, r7
 80009dc:	b002      	add	sp, #8
 80009de:	bd80      	pop	{r7, pc}

080009e0 <GPIO_Reset>:
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	6039      	str	r1, [r7, #0]
	gpio->BRR = (uint32_t)pin;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	683a      	ldr	r2, [r7, #0]
 80009ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80009f0:	46c0      	nop			; (mov r8, r8)
 80009f2:	46bd      	mov	sp, r7
 80009f4:	b002      	add	sp, #8
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <SERVO_Init>:
/*
 * PUBLIC FUNCTIONS
 */

void SERVO_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
	GPIO_EnableOutput(SERVO1_GPIO, SERVO1_PIN, GPIO_PIN_RESET);
 80009fc:	23a0      	movs	r3, #160	; 0xa0
 80009fe:	05db      	lsls	r3, r3, #23
 8000a00:	2200      	movs	r2, #0
 8000a02:	2102      	movs	r1, #2
 8000a04:	0018      	movs	r0, r3
 8000a06:	f001 fa7b 	bl	8001f00 <GPIO_EnableOutput>
	TIM_Init(TIM_SERVO1, TIM_SERVO1_FREQ, TIM_SERVO1_RELOAD);
 8000a0a:	4b21      	ldr	r3, [pc, #132]	; (8000a90 <SERVO_Init+0x98>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a21      	ldr	r2, [pc, #132]	; (8000a94 <SERVO_Init+0x9c>)
 8000a10:	4921      	ldr	r1, [pc, #132]	; (8000a98 <SERVO_Init+0xa0>)
 8000a12:	0018      	movs	r0, r3
 8000a14:	f001 fb28 	bl	8002068 <TIM_Init>
	TIM_OnReload(TIM_SERVO1, SERVO1_TimerReloadISR);
 8000a18:	4b1d      	ldr	r3, [pc, #116]	; (8000a90 <SERVO_Init+0x98>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a1f      	ldr	r2, [pc, #124]	; (8000a9c <SERVO_Init+0xa4>)
 8000a1e:	0011      	movs	r1, r2
 8000a20:	0018      	movs	r0, r3
 8000a22:	f001 fb71 	bl	8002108 <TIM_OnReload>
	TIM_OnPulse(TIM_SERVO1, 0, SERVO1_TimerPulseISR);
 8000a26:	4b1a      	ldr	r3, [pc, #104]	; (8000a90 <SERVO_Init+0x98>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a1d      	ldr	r2, [pc, #116]	; (8000aa0 <SERVO_Init+0xa8>)
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f001 fb7e 	bl	8002130 <TIM_OnPulse>
	SERVO_S1_Update(0);
 8000a34:	2000      	movs	r0, #0
 8000a36:	f000 f83d 	bl	8000ab4 <SERVO_S1_Update>
	TIM_Start(TIM_SERVO1);
 8000a3a:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <SERVO_Init+0x98>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f001 fbe4 	bl	800220c <TIM_Start>

	GPIO_EnableOutput(SERVO2_GPIO, SERVO2_GPIO, GPIO_PIN_RESET);
 8000a44:	4917      	ldr	r1, [pc, #92]	; (8000aa4 <SERVO_Init+0xac>)
 8000a46:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <SERVO_Init+0xac>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f001 fa58 	bl	8001f00 <GPIO_EnableOutput>
	TIM_Init(TIM_SERVO2, TIM_SERVO2_FREQ, TIM_SERVO2_RELOAD);
 8000a50:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <SERVO_Init+0xb0>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a0f      	ldr	r2, [pc, #60]	; (8000a94 <SERVO_Init+0x9c>)
 8000a56:	4910      	ldr	r1, [pc, #64]	; (8000a98 <SERVO_Init+0xa0>)
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f001 fb05 	bl	8002068 <TIM_Init>
	TIM_OnReload(TIM_SERVO2, SERVO2_TimerReloadISR);
 8000a5e:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <SERVO_Init+0xb0>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a12      	ldr	r2, [pc, #72]	; (8000aac <SERVO_Init+0xb4>)
 8000a64:	0011      	movs	r1, r2
 8000a66:	0018      	movs	r0, r3
 8000a68:	f001 fb4e 	bl	8002108 <TIM_OnReload>
	TIM_OnPulse(TIM_SERVO2, 0, SERVO2_TimerPulseISR);
 8000a6c:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <SERVO_Init+0xb0>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a0f      	ldr	r2, [pc, #60]	; (8000ab0 <SERVO_Init+0xb8>)
 8000a72:	2100      	movs	r1, #0
 8000a74:	0018      	movs	r0, r3
 8000a76:	f001 fb5b 	bl	8002130 <TIM_OnPulse>
	SERVO_S2_Update(0);
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f000 f848 	bl	8000b10 <SERVO_S2_Update>
	TIM_Start(TIM_SERVO2);
 8000a80:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <SERVO_Init+0xb0>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	0018      	movs	r0, r3
 8000a86:	f001 fbc1 	bl	800220c <TIM_Start>
}
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	200000a4 	.word	0x200000a4
 8000a94:	00002710 	.word	0x00002710
 8000a98:	000f4240 	.word	0x000f4240
 8000a9c:	08000b6d 	.word	0x08000b6d
 8000aa0:	08000b83 	.word	0x08000b83
 8000aa4:	50000800 	.word	0x50000800
 8000aa8:	200000c0 	.word	0x200000c0
 8000aac:	08000b99 	.word	0x08000b99
 8000ab0:	08000bb5 	.word	0x08000bb5

08000ab4 <SERVO_S1_Update>:
	TIM_Deinit(TIM_SERVO2);
	GPIO_Disable(SERVO2_GPIO, SERVO2_PIN);
}

void SERVO_S1_Update(int16_t pulse)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	0002      	movs	r2, r0
 8000abc:	1dbb      	adds	r3, r7, #6
 8000abe:	801a      	strh	r2, [r3, #0]
	if (pulse > PULSE_MAX)
 8000ac0:	1dbb      	adds	r3, r7, #6
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	5e9a      	ldrsh	r2, [r3, r2]
 8000ac6:	23fa      	movs	r3, #250	; 0xfa
 8000ac8:	00db      	lsls	r3, r3, #3
 8000aca:	429a      	cmp	r2, r3
 8000acc:	dd04      	ble.n	8000ad8 <SERVO_S1_Update+0x24>
	{
		pulse = PULSE_MAX;
 8000ace:	1dbb      	adds	r3, r7, #6
 8000ad0:	22fa      	movs	r2, #250	; 0xfa
 8000ad2:	00d2      	lsls	r2, r2, #3
 8000ad4:	801a      	strh	r2, [r3, #0]
 8000ad6:	e009      	b.n	8000aec <SERVO_S1_Update+0x38>
	}
	else if (pulse < PULSE_MIN)
 8000ad8:	1dbb      	adds	r3, r7, #6
 8000ada:	2200      	movs	r2, #0
 8000adc:	5e9b      	ldrsh	r3, [r3, r2]
 8000ade:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <SERVO_S1_Update+0x54>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	dc03      	bgt.n	8000aec <SERVO_S1_Update+0x38>
	{
		pulse = PULSE_MIN;
 8000ae4:	1dbb      	adds	r3, r7, #6
 8000ae6:	22fa      	movs	r2, #250	; 0xfa
 8000ae8:	0092      	lsls	r2, r2, #2
 8000aea:	801a      	strh	r2, [r3, #0]
	}
	TIM_SetPulse(TIM_SERVO1, 0, pulse);
 8000aec:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <SERVO_S1_Update+0x58>)
 8000aee:	6818      	ldr	r0, [r3, #0]
 8000af0:	1dbb      	adds	r3, r7, #6
 8000af2:	2200      	movs	r2, #0
 8000af4:	5e9b      	ldrsh	r3, [r3, r2]
 8000af6:	001a      	movs	r2, r3
 8000af8:	2100      	movs	r1, #0
 8000afa:	f001 fb60 	bl	80021be <TIM_SetPulse>
}
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	46bd      	mov	sp, r7
 8000b02:	b002      	add	sp, #8
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	000003e7 	.word	0x000003e7
 8000b0c:	200000a4 	.word	0x200000a4

08000b10 <SERVO_S2_Update>:

void SERVO_S2_Update(int16_t pulse)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	0002      	movs	r2, r0
 8000b18:	1dbb      	adds	r3, r7, #6
 8000b1a:	801a      	strh	r2, [r3, #0]
	if (pulse > PULSE_MAX)
 8000b1c:	1dbb      	adds	r3, r7, #6
 8000b1e:	2200      	movs	r2, #0
 8000b20:	5e9a      	ldrsh	r2, [r3, r2]
 8000b22:	23fa      	movs	r3, #250	; 0xfa
 8000b24:	00db      	lsls	r3, r3, #3
 8000b26:	429a      	cmp	r2, r3
 8000b28:	dd04      	ble.n	8000b34 <SERVO_S2_Update+0x24>
	{
		pulse = PULSE_MAX;
 8000b2a:	1dbb      	adds	r3, r7, #6
 8000b2c:	22fa      	movs	r2, #250	; 0xfa
 8000b2e:	00d2      	lsls	r2, r2, #3
 8000b30:	801a      	strh	r2, [r3, #0]
 8000b32:	e009      	b.n	8000b48 <SERVO_S2_Update+0x38>
	}
	else if (pulse < PULSE_MIN)
 8000b34:	1dbb      	adds	r3, r7, #6
 8000b36:	2200      	movs	r2, #0
 8000b38:	5e9b      	ldrsh	r3, [r3, r2]
 8000b3a:	4a0a      	ldr	r2, [pc, #40]	; (8000b64 <SERVO_S2_Update+0x54>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	dc03      	bgt.n	8000b48 <SERVO_S2_Update+0x38>
	{
		pulse = PULSE_MIN;
 8000b40:	1dbb      	adds	r3, r7, #6
 8000b42:	22fa      	movs	r2, #250	; 0xfa
 8000b44:	0092      	lsls	r2, r2, #2
 8000b46:	801a      	strh	r2, [r3, #0]
	}
	TIM_SetPulse(TIM_SERVO2, 0, pulse);
 8000b48:	4b07      	ldr	r3, [pc, #28]	; (8000b68 <SERVO_S2_Update+0x58>)
 8000b4a:	6818      	ldr	r0, [r3, #0]
 8000b4c:	1dbb      	adds	r3, r7, #6
 8000b4e:	2200      	movs	r2, #0
 8000b50:	5e9b      	ldrsh	r3, [r3, r2]
 8000b52:	001a      	movs	r2, r3
 8000b54:	2100      	movs	r1, #0
 8000b56:	f001 fb32 	bl	80021be <TIM_SetPulse>
}
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	b002      	add	sp, #8
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	46c0      	nop			; (mov r8, r8)
 8000b64:	000003e7 	.word	0x000003e7
 8000b68:	200000c0 	.word	0x200000c0

08000b6c <SERVO1_TimerReloadISR>:
/*
 * INTERRUPT ROUTINES
 */

static void SERVO1_TimerReloadISR(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
	GPIO_Set(SERVO1_GPIO, SERVO1_PIN);
 8000b70:	23a0      	movs	r3, #160	; 0xa0
 8000b72:	05db      	lsls	r3, r3, #23
 8000b74:	2102      	movs	r1, #2
 8000b76:	0018      	movs	r0, r3
 8000b78:	f7ff ff26 	bl	80009c8 <GPIO_Set>
}
 8000b7c:	46c0      	nop			; (mov r8, r8)
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <SERVO1_TimerPulseISR>:

static void SERVO1_TimerPulseISR(void)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	af00      	add	r7, sp, #0
	GPIO_Reset(SERVO1_GPIO, SERVO1_PIN);
 8000b86:	23a0      	movs	r3, #160	; 0xa0
 8000b88:	05db      	lsls	r3, r3, #23
 8000b8a:	2102      	movs	r1, #2
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f7ff ff27 	bl	80009e0 <GPIO_Reset>
}
 8000b92:	46c0      	nop			; (mov r8, r8)
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <SERVO2_TimerReloadISR>:

static void SERVO2_TimerReloadISR(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
	GPIO_Set(SERVO2_GPIO, SERVO2_PIN);
 8000b9c:	2380      	movs	r3, #128	; 0x80
 8000b9e:	019b      	lsls	r3, r3, #6
 8000ba0:	4a03      	ldr	r2, [pc, #12]	; (8000bb0 <SERVO2_TimerReloadISR+0x18>)
 8000ba2:	0019      	movs	r1, r3
 8000ba4:	0010      	movs	r0, r2
 8000ba6:	f7ff ff0f 	bl	80009c8 <GPIO_Set>
}
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	50000800 	.word	0x50000800

08000bb4 <SERVO2_TimerPulseISR>:

static void SERVO2_TimerPulseISR(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
	GPIO_Reset(SERVO2_GPIO, SERVO2_PIN);
 8000bb8:	2380      	movs	r3, #128	; 0x80
 8000bba:	019b      	lsls	r3, r3, #6
 8000bbc:	4a03      	ldr	r2, [pc, #12]	; (8000bcc <SERVO2_TimerPulseISR+0x18>)
 8000bbe:	0019      	movs	r1, r3
 8000bc0:	0010      	movs	r0, r2
 8000bc2:	f7ff ff0d 	bl	80009e0 <GPIO_Reset>
}
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	50000800 	.word	0x50000800

08000bd0 <main>:
/*
 * PRIVATE FUNCTIONS
 */

int main (void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
	CORE_Init();
 8000bd4:	f001 f856 	bl	8001c84 <CORE_Init>
	RADIO_Init();
 8000bd8:	f7ff fdf4 	bl	80007c4 <RADIO_Init>
	MOTOR_Init();
 8000bdc:	f7ff fc56 	bl	800048c <MOTOR_Init>
	SERVO_Init();
 8000be0:	f7ff ff0a 	bl	80009f8 <SERVO_Init>

	while (1)
	{
//		MOTOR_Update(radio2motor(radio_S3), radio2motor(radio_S2));
		MOTOR_Update(MOTOR_MAX, MOTOR_MAX);
 8000be4:	2380      	movs	r3, #128	; 0x80
 8000be6:	005a      	lsls	r2, r3, #1
 8000be8:	2380      	movs	r3, #128	; 0x80
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	0011      	movs	r1, r2
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f7ff fca0 	bl	8000534 <MOTOR_Update>
		SERVO_S1_Update(radio_S1);
 8000bf4:	4b07      	ldr	r3, [pc, #28]	; (8000c14 <main+0x44>)
 8000bf6:	881b      	ldrh	r3, [r3, #0]
 8000bf8:	b21b      	sxth	r3, r3
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f7ff ff5a 	bl	8000ab4 <SERVO_S1_Update>
		SERVO_S2_Update(radio_S4);
 8000c00:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <main+0x48>)
 8000c02:	881b      	ldrh	r3, [r3, #0]
 8000c04:	b21b      	sxth	r3, r3
 8000c06:	0018      	movs	r0, r3
 8000c08:	f7ff ff82 	bl	8000b10 <SERVO_S2_Update>

		CORE_Idle();
 8000c0c:	f001 f85c 	bl	8001cc8 <CORE_Idle>
		MOTOR_Update(MOTOR_MAX, MOTOR_MAX);
 8000c10:	e7e8      	b.n	8000be4 <main+0x14>
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	20000000 	.word	0x20000000
 8000c18:	20000006 	.word	0x20000006

08000c1c <SystemInit>:
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	46c0      	nop			; (mov r8, r8)
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
	...

08000c28 <Reset_Handler>:
 8000c28:	480d      	ldr	r0, [pc, #52]	; (8000c60 <LoopForever+0x2>)
 8000c2a:	4685      	mov	sp, r0
 8000c2c:	480d      	ldr	r0, [pc, #52]	; (8000c64 <LoopForever+0x6>)
 8000c2e:	490e      	ldr	r1, [pc, #56]	; (8000c68 <LoopForever+0xa>)
 8000c30:	4a0e      	ldr	r2, [pc, #56]	; (8000c6c <LoopForever+0xe>)
 8000c32:	2300      	movs	r3, #0
 8000c34:	e002      	b.n	8000c3c <LoopCopyDataInit>

08000c36 <CopyDataInit>:
 8000c36:	58d4      	ldr	r4, [r2, r3]
 8000c38:	50c4      	str	r4, [r0, r3]
 8000c3a:	3304      	adds	r3, #4

08000c3c <LoopCopyDataInit>:
 8000c3c:	18c4      	adds	r4, r0, r3
 8000c3e:	428c      	cmp	r4, r1
 8000c40:	d3f9      	bcc.n	8000c36 <CopyDataInit>
 8000c42:	4a0b      	ldr	r2, [pc, #44]	; (8000c70 <LoopForever+0x12>)
 8000c44:	4c0b      	ldr	r4, [pc, #44]	; (8000c74 <LoopForever+0x16>)
 8000c46:	2300      	movs	r3, #0
 8000c48:	e001      	b.n	8000c4e <LoopFillZerobss>

08000c4a <FillZerobss>:
 8000c4a:	6013      	str	r3, [r2, #0]
 8000c4c:	3204      	adds	r2, #4

08000c4e <LoopFillZerobss>:
 8000c4e:	42a2      	cmp	r2, r4
 8000c50:	d3fb      	bcc.n	8000c4a <FillZerobss>
 8000c52:	f7ff ffe3 	bl	8000c1c <SystemInit>
 8000c56:	f001 fc55 	bl	8002504 <__libc_init_array>
 8000c5a:	f7ff ffb9 	bl	8000bd0 <main>

08000c5e <LoopForever>:
 8000c5e:	e7fe      	b.n	8000c5e <LoopForever>
 8000c60:	20002000 	.word	0x20002000
 8000c64:	20000000 	.word	0x20000000
 8000c68:	200000c4 	.word	0x200000c4
 8000c6c:	080025a8 	.word	0x080025a8
 8000c70:	200000c4 	.word	0x200000c4
 8000c74:	200000ec 	.word	0x200000ec

08000c78 <ADC1_COMP_IRQHandler>:
 8000c78:	e7fe      	b.n	8000c78 <ADC1_COMP_IRQHandler>
	...

08000c7c <HAL_InitTick>:
 8000c7c:	b590      	push	{r4, r7, lr}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <HAL_InitTick+0x5c>)
 8000c86:	681c      	ldr	r4, [r3, #0]
 8000c88:	4b14      	ldr	r3, [pc, #80]	; (8000cdc <HAL_InitTick+0x60>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	0019      	movs	r1, r3
 8000c8e:	23fa      	movs	r3, #250	; 0xfa
 8000c90:	0098      	lsls	r0, r3, #2
 8000c92:	f7ff fa39 	bl	8000108 <__udivsi3>
 8000c96:	0003      	movs	r3, r0
 8000c98:	0019      	movs	r1, r3
 8000c9a:	0020      	movs	r0, r4
 8000c9c:	f7ff fa34 	bl	8000108 <__udivsi3>
 8000ca0:	0003      	movs	r3, r0
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	f000 f8ef 	bl	8000e86 <HAL_SYSTICK_Config>
 8000ca8:	1e03      	subs	r3, r0, #0
 8000caa:	d001      	beq.n	8000cb0 <HAL_InitTick+0x34>
 8000cac:	2301      	movs	r3, #1
 8000cae:	e00f      	b.n	8000cd0 <HAL_InitTick+0x54>
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2b03      	cmp	r3, #3
 8000cb4:	d80b      	bhi.n	8000cce <HAL_InitTick+0x52>
 8000cb6:	6879      	ldr	r1, [r7, #4]
 8000cb8:	2301      	movs	r3, #1
 8000cba:	425b      	negs	r3, r3
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f000 f8bc 	bl	8000e3c <HAL_NVIC_SetPriority>
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_InitTick+0x64>)
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	2300      	movs	r3, #0
 8000ccc:	e000      	b.n	8000cd0 <HAL_InitTick+0x54>
 8000cce:	2301      	movs	r3, #1
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	b003      	add	sp, #12
 8000cd6:	bd90      	pop	{r4, r7, pc}
 8000cd8:	20000008 	.word	0x20000008
 8000cdc:	20000010 	.word	0x20000010
 8000ce0:	2000000c 	.word	0x2000000c

08000ce4 <__NVIC_EnableIRQ>:
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	0002      	movs	r2, r0
 8000cec:	1dfb      	adds	r3, r7, #7
 8000cee:	701a      	strb	r2, [r3, #0]
 8000cf0:	1dfb      	adds	r3, r7, #7
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2b7f      	cmp	r3, #127	; 0x7f
 8000cf6:	d809      	bhi.n	8000d0c <__NVIC_EnableIRQ+0x28>
 8000cf8:	1dfb      	adds	r3, r7, #7
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	001a      	movs	r2, r3
 8000cfe:	231f      	movs	r3, #31
 8000d00:	401a      	ands	r2, r3
 8000d02:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <__NVIC_EnableIRQ+0x30>)
 8000d04:	2101      	movs	r1, #1
 8000d06:	4091      	lsls	r1, r2
 8000d08:	000a      	movs	r2, r1
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	46c0      	nop			; (mov r8, r8)
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	b002      	add	sp, #8
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	e000e100 	.word	0xe000e100

08000d18 <__NVIC_SetPriority>:
 8000d18:	b590      	push	{r4, r7, lr}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	0002      	movs	r2, r0
 8000d20:	6039      	str	r1, [r7, #0]
 8000d22:	1dfb      	adds	r3, r7, #7
 8000d24:	701a      	strb	r2, [r3, #0]
 8000d26:	1dfb      	adds	r3, r7, #7
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	2b7f      	cmp	r3, #127	; 0x7f
 8000d2c:	d828      	bhi.n	8000d80 <__NVIC_SetPriority+0x68>
 8000d2e:	4a2f      	ldr	r2, [pc, #188]	; (8000dec <__NVIC_SetPriority+0xd4>)
 8000d30:	1dfb      	adds	r3, r7, #7
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	b25b      	sxtb	r3, r3
 8000d36:	089b      	lsrs	r3, r3, #2
 8000d38:	33c0      	adds	r3, #192	; 0xc0
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	589b      	ldr	r3, [r3, r2]
 8000d3e:	1dfa      	adds	r2, r7, #7
 8000d40:	7812      	ldrb	r2, [r2, #0]
 8000d42:	0011      	movs	r1, r2
 8000d44:	2203      	movs	r2, #3
 8000d46:	400a      	ands	r2, r1
 8000d48:	00d2      	lsls	r2, r2, #3
 8000d4a:	21ff      	movs	r1, #255	; 0xff
 8000d4c:	4091      	lsls	r1, r2
 8000d4e:	000a      	movs	r2, r1
 8000d50:	43d2      	mvns	r2, r2
 8000d52:	401a      	ands	r2, r3
 8000d54:	0011      	movs	r1, r2
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	019b      	lsls	r3, r3, #6
 8000d5a:	22ff      	movs	r2, #255	; 0xff
 8000d5c:	401a      	ands	r2, r3
 8000d5e:	1dfb      	adds	r3, r7, #7
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	0018      	movs	r0, r3
 8000d64:	2303      	movs	r3, #3
 8000d66:	4003      	ands	r3, r0
 8000d68:	00db      	lsls	r3, r3, #3
 8000d6a:	409a      	lsls	r2, r3
 8000d6c:	481f      	ldr	r0, [pc, #124]	; (8000dec <__NVIC_SetPriority+0xd4>)
 8000d6e:	1dfb      	adds	r3, r7, #7
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	b25b      	sxtb	r3, r3
 8000d74:	089b      	lsrs	r3, r3, #2
 8000d76:	430a      	orrs	r2, r1
 8000d78:	33c0      	adds	r3, #192	; 0xc0
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	501a      	str	r2, [r3, r0]
 8000d7e:	e031      	b.n	8000de4 <__NVIC_SetPriority+0xcc>
 8000d80:	4a1b      	ldr	r2, [pc, #108]	; (8000df0 <__NVIC_SetPriority+0xd8>)
 8000d82:	1dfb      	adds	r3, r7, #7
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	0019      	movs	r1, r3
 8000d88:	230f      	movs	r3, #15
 8000d8a:	400b      	ands	r3, r1
 8000d8c:	3b08      	subs	r3, #8
 8000d8e:	089b      	lsrs	r3, r3, #2
 8000d90:	3306      	adds	r3, #6
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	18d3      	adds	r3, r2, r3
 8000d96:	3304      	adds	r3, #4
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	1dfa      	adds	r2, r7, #7
 8000d9c:	7812      	ldrb	r2, [r2, #0]
 8000d9e:	0011      	movs	r1, r2
 8000da0:	2203      	movs	r2, #3
 8000da2:	400a      	ands	r2, r1
 8000da4:	00d2      	lsls	r2, r2, #3
 8000da6:	21ff      	movs	r1, #255	; 0xff
 8000da8:	4091      	lsls	r1, r2
 8000daa:	000a      	movs	r2, r1
 8000dac:	43d2      	mvns	r2, r2
 8000dae:	401a      	ands	r2, r3
 8000db0:	0011      	movs	r1, r2
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	019b      	lsls	r3, r3, #6
 8000db6:	22ff      	movs	r2, #255	; 0xff
 8000db8:	401a      	ands	r2, r3
 8000dba:	1dfb      	adds	r3, r7, #7
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	4003      	ands	r3, r0
 8000dc4:	00db      	lsls	r3, r3, #3
 8000dc6:	409a      	lsls	r2, r3
 8000dc8:	4809      	ldr	r0, [pc, #36]	; (8000df0 <__NVIC_SetPriority+0xd8>)
 8000dca:	1dfb      	adds	r3, r7, #7
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	001c      	movs	r4, r3
 8000dd0:	230f      	movs	r3, #15
 8000dd2:	4023      	ands	r3, r4
 8000dd4:	3b08      	subs	r3, #8
 8000dd6:	089b      	lsrs	r3, r3, #2
 8000dd8:	430a      	orrs	r2, r1
 8000dda:	3306      	adds	r3, #6
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	18c3      	adds	r3, r0, r3
 8000de0:	3304      	adds	r3, #4
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	46c0      	nop			; (mov r8, r8)
 8000de6:	46bd      	mov	sp, r7
 8000de8:	b003      	add	sp, #12
 8000dea:	bd90      	pop	{r4, r7, pc}
 8000dec:	e000e100 	.word	0xe000e100
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <SysTick_Config>:
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	1e5a      	subs	r2, r3, #1
 8000e00:	2380      	movs	r3, #128	; 0x80
 8000e02:	045b      	lsls	r3, r3, #17
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d301      	bcc.n	8000e0c <SysTick_Config+0x18>
 8000e08:	2301      	movs	r3, #1
 8000e0a:	e010      	b.n	8000e2e <SysTick_Config+0x3a>
 8000e0c:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <SysTick_Config+0x44>)
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	3a01      	subs	r2, #1
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	2301      	movs	r3, #1
 8000e16:	425b      	negs	r3, r3
 8000e18:	2103      	movs	r1, #3
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	f7ff ff7c 	bl	8000d18 <__NVIC_SetPriority>
 8000e20:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <SysTick_Config+0x44>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
 8000e26:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <SysTick_Config+0x44>)
 8000e28:	2207      	movs	r2, #7
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	0018      	movs	r0, r3
 8000e30:	46bd      	mov	sp, r7
 8000e32:	b002      	add	sp, #8
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	46c0      	nop			; (mov r8, r8)
 8000e38:	e000e010 	.word	0xe000e010

08000e3c <HAL_NVIC_SetPriority>:
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60b9      	str	r1, [r7, #8]
 8000e44:	607a      	str	r2, [r7, #4]
 8000e46:	210f      	movs	r1, #15
 8000e48:	187b      	adds	r3, r7, r1
 8000e4a:	1c02      	adds	r2, r0, #0
 8000e4c:	701a      	strb	r2, [r3, #0]
 8000e4e:	68ba      	ldr	r2, [r7, #8]
 8000e50:	187b      	adds	r3, r7, r1
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	b25b      	sxtb	r3, r3
 8000e56:	0011      	movs	r1, r2
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f7ff ff5d 	bl	8000d18 <__NVIC_SetPriority>
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	46bd      	mov	sp, r7
 8000e62:	b004      	add	sp, #16
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <HAL_NVIC_EnableIRQ>:
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b082      	sub	sp, #8
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	0002      	movs	r2, r0
 8000e6e:	1dfb      	adds	r3, r7, #7
 8000e70:	701a      	strb	r2, [r3, #0]
 8000e72:	1dfb      	adds	r3, r7, #7
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	b25b      	sxtb	r3, r3
 8000e78:	0018      	movs	r0, r3
 8000e7a:	f7ff ff33 	bl	8000ce4 <__NVIC_EnableIRQ>
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	46bd      	mov	sp, r7
 8000e82:	b002      	add	sp, #8
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <HAL_SYSTICK_Config>:
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b082      	sub	sp, #8
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	0018      	movs	r0, r3
 8000e92:	f7ff ffaf 	bl	8000df4 <SysTick_Config>
 8000e96:	0003      	movs	r3, r0
 8000e98:	0018      	movs	r0, r3
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	b002      	add	sp, #8
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <HAL_GPIO_Init>:
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	e14f      	b.n	8001158 <HAL_GPIO_Init+0x2b8>
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	697a      	ldr	r2, [r7, #20]
 8000ec0:	4091      	lsls	r1, r2
 8000ec2:	000a      	movs	r2, r1
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d100      	bne.n	8000ed0 <HAL_GPIO_Init+0x30>
 8000ece:	e140      	b.n	8001152 <HAL_GPIO_Init+0x2b2>
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d00b      	beq.n	8000ef0 <HAL_GPIO_Init+0x50>
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	d007      	beq.n	8000ef0 <HAL_GPIO_Init+0x50>
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	2b11      	cmp	r3, #17
 8000ee6:	d003      	beq.n	8000ef0 <HAL_GPIO_Init+0x50>
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	2b12      	cmp	r3, #18
 8000eee:	d130      	bne.n	8000f52 <HAL_GPIO_Init+0xb2>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	2203      	movs	r2, #3
 8000efc:	409a      	lsls	r2, r3
 8000efe:	0013      	movs	r3, r2
 8000f00:	43da      	mvns	r2, r3
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	4013      	ands	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	68da      	ldr	r2, [r3, #12]
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	409a      	lsls	r2, r3
 8000f12:	0013      	movs	r3, r2
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	613b      	str	r3, [r7, #16]
 8000f26:	2201      	movs	r2, #1
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	409a      	lsls	r2, r3
 8000f2c:	0013      	movs	r3, r2
 8000f2e:	43da      	mvns	r2, r3
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	4013      	ands	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	091b      	lsrs	r3, r3, #4
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	401a      	ands	r2, r3
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	409a      	lsls	r2, r3
 8000f44:	0013      	movs	r3, r2
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	68db      	ldr	r3, [r3, #12]
 8000f56:	613b      	str	r3, [r7, #16]
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	2203      	movs	r2, #3
 8000f5e:	409a      	lsls	r2, r3
 8000f60:	0013      	movs	r3, r2
 8000f62:	43da      	mvns	r2, r3
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	4013      	ands	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	689a      	ldr	r2, [r3, #8]
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	409a      	lsls	r2, r3
 8000f74:	0013      	movs	r3, r2
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d003      	beq.n	8000f92 <HAL_GPIO_Init+0xf2>
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	2b12      	cmp	r3, #18
 8000f90:	d123      	bne.n	8000fda <HAL_GPIO_Init+0x13a>
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	08da      	lsrs	r2, r3, #3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	3208      	adds	r2, #8
 8000f9a:	0092      	lsls	r2, r2, #2
 8000f9c:	58d3      	ldr	r3, [r2, r3]
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	2207      	movs	r2, #7
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	220f      	movs	r2, #15
 8000faa:	409a      	lsls	r2, r3
 8000fac:	0013      	movs	r3, r2
 8000fae:	43da      	mvns	r2, r3
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	691a      	ldr	r2, [r3, #16]
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	2107      	movs	r1, #7
 8000fbe:	400b      	ands	r3, r1
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	409a      	lsls	r2, r3
 8000fc4:	0013      	movs	r3, r2
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	08da      	lsrs	r2, r3, #3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3208      	adds	r2, #8
 8000fd4:	0092      	lsls	r2, r2, #2
 8000fd6:	6939      	ldr	r1, [r7, #16]
 8000fd8:	50d1      	str	r1, [r2, r3]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	2203      	movs	r2, #3
 8000fe6:	409a      	lsls	r2, r3
 8000fe8:	0013      	movs	r3, r2
 8000fea:	43da      	mvns	r2, r3
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	401a      	ands	r2, r3
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	409a      	lsls	r2, r3
 8001000:	0013      	movs	r3, r2
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4313      	orrs	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685a      	ldr	r2, [r3, #4]
 8001012:	2380      	movs	r3, #128	; 0x80
 8001014:	055b      	lsls	r3, r3, #21
 8001016:	4013      	ands	r3, r2
 8001018:	d100      	bne.n	800101c <HAL_GPIO_Init+0x17c>
 800101a:	e09a      	b.n	8001152 <HAL_GPIO_Init+0x2b2>
 800101c:	4b54      	ldr	r3, [pc, #336]	; (8001170 <HAL_GPIO_Init+0x2d0>)
 800101e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001020:	4b53      	ldr	r3, [pc, #332]	; (8001170 <HAL_GPIO_Init+0x2d0>)
 8001022:	2101      	movs	r1, #1
 8001024:	430a      	orrs	r2, r1
 8001026:	635a      	str	r2, [r3, #52]	; 0x34
 8001028:	4a52      	ldr	r2, [pc, #328]	; (8001174 <HAL_GPIO_Init+0x2d4>)
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	089b      	lsrs	r3, r3, #2
 800102e:	3302      	adds	r3, #2
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	589b      	ldr	r3, [r3, r2]
 8001034:	613b      	str	r3, [r7, #16]
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	2203      	movs	r2, #3
 800103a:	4013      	ands	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	220f      	movs	r2, #15
 8001040:	409a      	lsls	r2, r3
 8001042:	0013      	movs	r3, r2
 8001044:	43da      	mvns	r2, r3
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	4013      	ands	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	23a0      	movs	r3, #160	; 0xa0
 8001050:	05db      	lsls	r3, r3, #23
 8001052:	429a      	cmp	r2, r3
 8001054:	d019      	beq.n	800108a <HAL_GPIO_Init+0x1ea>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a47      	ldr	r2, [pc, #284]	; (8001178 <HAL_GPIO_Init+0x2d8>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d013      	beq.n	8001086 <HAL_GPIO_Init+0x1e6>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a46      	ldr	r2, [pc, #280]	; (800117c <HAL_GPIO_Init+0x2dc>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d00d      	beq.n	8001082 <HAL_GPIO_Init+0x1e2>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a45      	ldr	r2, [pc, #276]	; (8001180 <HAL_GPIO_Init+0x2e0>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d007      	beq.n	800107e <HAL_GPIO_Init+0x1de>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a44      	ldr	r2, [pc, #272]	; (8001184 <HAL_GPIO_Init+0x2e4>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d101      	bne.n	800107a <HAL_GPIO_Init+0x1da>
 8001076:	2305      	movs	r3, #5
 8001078:	e008      	b.n	800108c <HAL_GPIO_Init+0x1ec>
 800107a:	2306      	movs	r3, #6
 800107c:	e006      	b.n	800108c <HAL_GPIO_Init+0x1ec>
 800107e:	2303      	movs	r3, #3
 8001080:	e004      	b.n	800108c <HAL_GPIO_Init+0x1ec>
 8001082:	2302      	movs	r3, #2
 8001084:	e002      	b.n	800108c <HAL_GPIO_Init+0x1ec>
 8001086:	2301      	movs	r3, #1
 8001088:	e000      	b.n	800108c <HAL_GPIO_Init+0x1ec>
 800108a:	2300      	movs	r3, #0
 800108c:	697a      	ldr	r2, [r7, #20]
 800108e:	2103      	movs	r1, #3
 8001090:	400a      	ands	r2, r1
 8001092:	0092      	lsls	r2, r2, #2
 8001094:	4093      	lsls	r3, r2
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	4313      	orrs	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	4935      	ldr	r1, [pc, #212]	; (8001174 <HAL_GPIO_Init+0x2d4>)
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	089b      	lsrs	r3, r3, #2
 80010a2:	3302      	adds	r3, #2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	505a      	str	r2, [r3, r1]
 80010aa:	4b37      	ldr	r3, [pc, #220]	; (8001188 <HAL_GPIO_Init+0x2e8>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	613b      	str	r3, [r7, #16]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	43da      	mvns	r2, r3
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	4013      	ands	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685a      	ldr	r2, [r3, #4]
 80010be:	2380      	movs	r3, #128	; 0x80
 80010c0:	025b      	lsls	r3, r3, #9
 80010c2:	4013      	ands	r3, r2
 80010c4:	d003      	beq.n	80010ce <HAL_GPIO_Init+0x22e>
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
 80010ce:	4b2e      	ldr	r3, [pc, #184]	; (8001188 <HAL_GPIO_Init+0x2e8>)
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	4b2c      	ldr	r3, [pc, #176]	; (8001188 <HAL_GPIO_Init+0x2e8>)
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	613b      	str	r3, [r7, #16]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	43da      	mvns	r2, r3
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	4013      	ands	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685a      	ldr	r2, [r3, #4]
 80010e8:	2380      	movs	r3, #128	; 0x80
 80010ea:	029b      	lsls	r3, r3, #10
 80010ec:	4013      	ands	r3, r2
 80010ee:	d003      	beq.n	80010f8 <HAL_GPIO_Init+0x258>
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	4b23      	ldr	r3, [pc, #140]	; (8001188 <HAL_GPIO_Init+0x2e8>)
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	4b22      	ldr	r3, [pc, #136]	; (8001188 <HAL_GPIO_Init+0x2e8>)
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	613b      	str	r3, [r7, #16]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	43da      	mvns	r2, r3
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	4013      	ands	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685a      	ldr	r2, [r3, #4]
 8001112:	2380      	movs	r3, #128	; 0x80
 8001114:	035b      	lsls	r3, r3, #13
 8001116:	4013      	ands	r3, r2
 8001118:	d003      	beq.n	8001122 <HAL_GPIO_Init+0x282>
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4313      	orrs	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
 8001122:	4b19      	ldr	r3, [pc, #100]	; (8001188 <HAL_GPIO_Init+0x2e8>)
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	4b17      	ldr	r3, [pc, #92]	; (8001188 <HAL_GPIO_Init+0x2e8>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	613b      	str	r3, [r7, #16]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	43da      	mvns	r2, r3
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	4013      	ands	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685a      	ldr	r2, [r3, #4]
 800113c:	2380      	movs	r3, #128	; 0x80
 800113e:	039b      	lsls	r3, r3, #14
 8001140:	4013      	ands	r3, r2
 8001142:	d003      	beq.n	800114c <HAL_GPIO_Init+0x2ac>
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	4313      	orrs	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
 800114c:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <HAL_GPIO_Init+0x2e8>)
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	3301      	adds	r3, #1
 8001156:	617b      	str	r3, [r7, #20]
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	40da      	lsrs	r2, r3
 8001160:	1e13      	subs	r3, r2, #0
 8001162:	d000      	beq.n	8001166 <HAL_GPIO_Init+0x2c6>
 8001164:	e6a8      	b.n	8000eb8 <HAL_GPIO_Init+0x18>
 8001166:	46c0      	nop			; (mov r8, r8)
 8001168:	46c0      	nop			; (mov r8, r8)
 800116a:	46bd      	mov	sp, r7
 800116c:	b006      	add	sp, #24
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40021000 	.word	0x40021000
 8001174:	40010000 	.word	0x40010000
 8001178:	50000400 	.word	0x50000400
 800117c:	50000800 	.word	0x50000800
 8001180:	50000c00 	.word	0x50000c00
 8001184:	50001c00 	.word	0x50001c00
 8001188:	40010400 	.word	0x40010400

0800118c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800118c:	b5b0      	push	{r4, r5, r7, lr}
 800118e:	b08a      	sub	sp, #40	; 0x28
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d102      	bne.n	80011a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	f000 fb62 	bl	8001864 <HAL_RCC_OscConfig+0x6d8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011a0:	4bc2      	ldr	r3, [pc, #776]	; (80014ac <HAL_RCC_OscConfig+0x320>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	220c      	movs	r2, #12
 80011a6:	4013      	ands	r3, r2
 80011a8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011aa:	4bc0      	ldr	r3, [pc, #768]	; (80014ac <HAL_RCC_OscConfig+0x320>)
 80011ac:	68da      	ldr	r2, [r3, #12]
 80011ae:	2380      	movs	r3, #128	; 0x80
 80011b0:	025b      	lsls	r3, r3, #9
 80011b2:	4013      	ands	r3, r2
 80011b4:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2201      	movs	r2, #1
 80011bc:	4013      	ands	r3, r2
 80011be:	d100      	bne.n	80011c2 <HAL_RCC_OscConfig+0x36>
 80011c0:	e07c      	b.n	80012bc <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011c2:	6a3b      	ldr	r3, [r7, #32]
 80011c4:	2b08      	cmp	r3, #8
 80011c6:	d007      	beq.n	80011d8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80011c8:	6a3b      	ldr	r3, [r7, #32]
 80011ca:	2b0c      	cmp	r3, #12
 80011cc:	d111      	bne.n	80011f2 <HAL_RCC_OscConfig+0x66>
 80011ce:	69fa      	ldr	r2, [r7, #28]
 80011d0:	2380      	movs	r3, #128	; 0x80
 80011d2:	025b      	lsls	r3, r3, #9
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d10c      	bne.n	80011f2 <HAL_RCC_OscConfig+0x66>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d8:	4bb4      	ldr	r3, [pc, #720]	; (80014ac <HAL_RCC_OscConfig+0x320>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	2380      	movs	r3, #128	; 0x80
 80011de:	029b      	lsls	r3, r3, #10
 80011e0:	4013      	ands	r3, r2
 80011e2:	d100      	bne.n	80011e6 <HAL_RCC_OscConfig+0x5a>
 80011e4:	e069      	b.n	80012ba <HAL_RCC_OscConfig+0x12e>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d165      	bne.n	80012ba <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e338      	b.n	8001864 <HAL_RCC_OscConfig+0x6d8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685a      	ldr	r2, [r3, #4]
 80011f6:	2380      	movs	r3, #128	; 0x80
 80011f8:	025b      	lsls	r3, r3, #9
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d107      	bne.n	800120e <HAL_RCC_OscConfig+0x82>
 80011fe:	4bab      	ldr	r3, [pc, #684]	; (80014ac <HAL_RCC_OscConfig+0x320>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	4baa      	ldr	r3, [pc, #680]	; (80014ac <HAL_RCC_OscConfig+0x320>)
 8001204:	2180      	movs	r1, #128	; 0x80
 8001206:	0249      	lsls	r1, r1, #9
 8001208:	430a      	orrs	r2, r1
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	e027      	b.n	800125e <HAL_RCC_OscConfig+0xd2>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685a      	ldr	r2, [r3, #4]
 8001212:	23a0      	movs	r3, #160	; 0xa0
 8001214:	02db      	lsls	r3, r3, #11
 8001216:	429a      	cmp	r2, r3
 8001218:	d10e      	bne.n	8001238 <HAL_RCC_OscConfig+0xac>
 800121a:	4ba4      	ldr	r3, [pc, #656]	; (80014ac <HAL_RCC_OscConfig+0x320>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	4ba3      	ldr	r3, [pc, #652]	; (80014ac <HAL_RCC_OscConfig+0x320>)
 8001220:	2180      	movs	r1, #128	; 0x80
 8001222:	02c9      	lsls	r1, r1, #11
 8001224:	430a      	orrs	r2, r1
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	4ba0      	ldr	r3, [pc, #640]	; (80014ac <HAL_RCC_OscConfig+0x320>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	4b9f      	ldr	r3, [pc, #636]	; (80014ac <HAL_RCC_OscConfig+0x320>)
 800122e:	2180      	movs	r1, #128	; 0x80
 8001230:	0249      	lsls	r1, r1, #9
 8001232:	430a      	orrs	r2, r1
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	e012      	b.n	800125e <HAL_RCC_OscConfig+0xd2>
 8001238:	4b9c      	ldr	r3, [pc, #624]	; (80014ac <HAL_RCC_OscConfig+0x320>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	4b9b      	ldr	r3, [pc, #620]	; (80014ac <HAL_RCC_OscConfig+0x320>)
 800123e:	499c      	ldr	r1, [pc, #624]	; (80014b0 <HAL_RCC_OscConfig+0x324>)
 8001240:	400a      	ands	r2, r1
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	4b99      	ldr	r3, [pc, #612]	; (80014ac <HAL_RCC_OscConfig+0x320>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	2380      	movs	r3, #128	; 0x80
 800124a:	025b      	lsls	r3, r3, #9
 800124c:	4013      	ands	r3, r2
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	4b96      	ldr	r3, [pc, #600]	; (80014ac <HAL_RCC_OscConfig+0x320>)
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	4b95      	ldr	r3, [pc, #596]	; (80014ac <HAL_RCC_OscConfig+0x320>)
 8001258:	4996      	ldr	r1, [pc, #600]	; (80014b4 <HAL_RCC_OscConfig+0x328>)
 800125a:	400a      	ands	r2, r1
 800125c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d014      	beq.n	8001290 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001266:	f000 fe01 	bl	8001e6c <HAL_GetTick>
 800126a:	0003      	movs	r3, r0
 800126c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0xf6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001270:	f000 fdfc 	bl	8001e6c <HAL_GetTick>
 8001274:	0002      	movs	r2, r0
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b64      	cmp	r3, #100	; 0x64
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e2f0      	b.n	8001864 <HAL_RCC_OscConfig+0x6d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001282:	4b8a      	ldr	r3, [pc, #552]	; (80014ac <HAL_RCC_OscConfig+0x320>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	2380      	movs	r3, #128	; 0x80
 8001288:	029b      	lsls	r3, r3, #10
 800128a:	4013      	ands	r3, r2
 800128c:	d0f0      	beq.n	8001270 <HAL_RCC_OscConfig+0xe4>
 800128e:	e015      	b.n	80012bc <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001290:	f000 fdec 	bl	8001e6c <HAL_GetTick>
 8001294:	0003      	movs	r3, r0
 8001296:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001298:	e008      	b.n	80012ac <HAL_RCC_OscConfig+0x120>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800129a:	f000 fde7 	bl	8001e6c <HAL_GetTick>
 800129e:	0002      	movs	r2, r0
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	2b64      	cmp	r3, #100	; 0x64
 80012a6:	d901      	bls.n	80012ac <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80012a8:	2303      	movs	r3, #3
 80012aa:	e2db      	b.n	8001864 <HAL_RCC_OscConfig+0x6d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80012ac:	4b7f      	ldr	r3, [pc, #508]	; (80014ac <HAL_RCC_OscConfig+0x320>)
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	2380      	movs	r3, #128	; 0x80
 80012b2:	029b      	lsls	r3, r3, #10
 80012b4:	4013      	ands	r3, r2
 80012b6:	d1f0      	bne.n	800129a <HAL_RCC_OscConfig+0x10e>
 80012b8:	e000      	b.n	80012bc <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ba:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2202      	movs	r2, #2
 80012c2:	4013      	ands	r3, r2
 80012c4:	d100      	bne.n	80012c8 <HAL_RCC_OscConfig+0x13c>
 80012c6:	e08c      	b.n	80013e2 <HAL_RCC_OscConfig+0x256>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012ce:	6a3b      	ldr	r3, [r7, #32]
 80012d0:	2b04      	cmp	r3, #4
 80012d2:	d005      	beq.n	80012e0 <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80012d4:	6a3b      	ldr	r3, [r7, #32]
 80012d6:	2b0c      	cmp	r3, #12
 80012d8:	d13f      	bne.n	800135a <HAL_RCC_OscConfig+0x1ce>
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d13c      	bne.n	800135a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80012e0:	4b72      	ldr	r3, [pc, #456]	; (80014ac <HAL_RCC_OscConfig+0x320>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2204      	movs	r2, #4
 80012e6:	4013      	ands	r3, r2
 80012e8:	d004      	beq.n	80012f4 <HAL_RCC_OscConfig+0x168>
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d101      	bne.n	80012f4 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e2b7      	b.n	8001864 <HAL_RCC_OscConfig+0x6d8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f4:	4b6d      	ldr	r3, [pc, #436]	; (80014ac <HAL_RCC_OscConfig+0x320>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	4a6f      	ldr	r2, [pc, #444]	; (80014b8 <HAL_RCC_OscConfig+0x32c>)
 80012fa:	4013      	ands	r3, r2
 80012fc:	0019      	movs	r1, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	691b      	ldr	r3, [r3, #16]
 8001302:	021a      	lsls	r2, r3, #8
 8001304:	4b69      	ldr	r3, [pc, #420]	; (80014ac <HAL_RCC_OscConfig+0x320>)
 8001306:	430a      	orrs	r2, r1
 8001308:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800130a:	4b68      	ldr	r3, [pc, #416]	; (80014ac <HAL_RCC_OscConfig+0x320>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2209      	movs	r2, #9
 8001310:	4393      	bics	r3, r2
 8001312:	0019      	movs	r1, r3
 8001314:	4b65      	ldr	r3, [pc, #404]	; (80014ac <HAL_RCC_OscConfig+0x320>)
 8001316:	697a      	ldr	r2, [r7, #20]
 8001318:	430a      	orrs	r2, r1
 800131a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800131c:	f000 fbf0 	bl	8001b00 <HAL_RCC_GetSysClockFreq>
 8001320:	0001      	movs	r1, r0
 8001322:	4b62      	ldr	r3, [pc, #392]	; (80014ac <HAL_RCC_OscConfig+0x320>)
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	091b      	lsrs	r3, r3, #4
 8001328:	220f      	movs	r2, #15
 800132a:	4013      	ands	r3, r2
 800132c:	4a63      	ldr	r2, [pc, #396]	; (80014bc <HAL_RCC_OscConfig+0x330>)
 800132e:	5cd3      	ldrb	r3, [r2, r3]
 8001330:	000a      	movs	r2, r1
 8001332:	40da      	lsrs	r2, r3
 8001334:	4b62      	ldr	r3, [pc, #392]	; (80014c0 <HAL_RCC_OscConfig+0x334>)
 8001336:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001338:	4b62      	ldr	r3, [pc, #392]	; (80014c4 <HAL_RCC_OscConfig+0x338>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2513      	movs	r5, #19
 800133e:	197c      	adds	r4, r7, r5
 8001340:	0018      	movs	r0, r3
 8001342:	f7ff fc9b 	bl	8000c7c <HAL_InitTick>
 8001346:	0003      	movs	r3, r0
 8001348:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800134a:	197b      	adds	r3, r7, r5
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d047      	beq.n	80013e2 <HAL_RCC_OscConfig+0x256>
      {
        return status;
 8001352:	2313      	movs	r3, #19
 8001354:	18fb      	adds	r3, r7, r3
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	e284      	b.n	8001864 <HAL_RCC_OscConfig+0x6d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d027      	beq.n	80013b0 <HAL_RCC_OscConfig+0x224>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001360:	4b52      	ldr	r3, [pc, #328]	; (80014ac <HAL_RCC_OscConfig+0x320>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2209      	movs	r2, #9
 8001366:	4393      	bics	r3, r2
 8001368:	0019      	movs	r1, r3
 800136a:	4b50      	ldr	r3, [pc, #320]	; (80014ac <HAL_RCC_OscConfig+0x320>)
 800136c:	697a      	ldr	r2, [r7, #20]
 800136e:	430a      	orrs	r2, r1
 8001370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001372:	f000 fd7b 	bl	8001e6c <HAL_GetTick>
 8001376:	0003      	movs	r3, r0
 8001378:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800137c:	f000 fd76 	bl	8001e6c <HAL_GetTick>
 8001380:	0002      	movs	r2, r0
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b02      	cmp	r3, #2
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e26a      	b.n	8001864 <HAL_RCC_OscConfig+0x6d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800138e:	4b47      	ldr	r3, [pc, #284]	; (80014ac <HAL_RCC_OscConfig+0x320>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2204      	movs	r2, #4
 8001394:	4013      	ands	r3, r2
 8001396:	d0f1      	beq.n	800137c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001398:	4b44      	ldr	r3, [pc, #272]	; (80014ac <HAL_RCC_OscConfig+0x320>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	4a46      	ldr	r2, [pc, #280]	; (80014b8 <HAL_RCC_OscConfig+0x32c>)
 800139e:	4013      	ands	r3, r2
 80013a0:	0019      	movs	r1, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	691b      	ldr	r3, [r3, #16]
 80013a6:	021a      	lsls	r2, r3, #8
 80013a8:	4b40      	ldr	r3, [pc, #256]	; (80014ac <HAL_RCC_OscConfig+0x320>)
 80013aa:	430a      	orrs	r2, r1
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	e018      	b.n	80013e2 <HAL_RCC_OscConfig+0x256>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013b0:	4b3e      	ldr	r3, [pc, #248]	; (80014ac <HAL_RCC_OscConfig+0x320>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	4b3d      	ldr	r3, [pc, #244]	; (80014ac <HAL_RCC_OscConfig+0x320>)
 80013b6:	2101      	movs	r1, #1
 80013b8:	438a      	bics	r2, r1
 80013ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013bc:	f000 fd56 	bl	8001e6c <HAL_GetTick>
 80013c0:	0003      	movs	r3, r0
 80013c2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80013c4:	e008      	b.n	80013d8 <HAL_RCC_OscConfig+0x24c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013c6:	f000 fd51 	bl	8001e6c <HAL_GetTick>
 80013ca:	0002      	movs	r2, r0
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d901      	bls.n	80013d8 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e245      	b.n	8001864 <HAL_RCC_OscConfig+0x6d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80013d8:	4b34      	ldr	r3, [pc, #208]	; (80014ac <HAL_RCC_OscConfig+0x320>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2204      	movs	r2, #4
 80013de:	4013      	ands	r3, r2
 80013e0:	d1f1      	bne.n	80013c6 <HAL_RCC_OscConfig+0x23a>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2210      	movs	r2, #16
 80013e8:	4013      	ands	r3, r2
 80013ea:	d100      	bne.n	80013ee <HAL_RCC_OscConfig+0x262>
 80013ec:	e0a3      	b.n	8001536 <HAL_RCC_OscConfig+0x3aa>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013ee:	6a3b      	ldr	r3, [r7, #32]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d141      	bne.n	8001478 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013f4:	4b2d      	ldr	r3, [pc, #180]	; (80014ac <HAL_RCC_OscConfig+0x320>)
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	2380      	movs	r3, #128	; 0x80
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4013      	ands	r3, r2
 80013fe:	d005      	beq.n	800140c <HAL_RCC_OscConfig+0x280>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d101      	bne.n	800140c <HAL_RCC_OscConfig+0x280>
      {
        return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e22b      	b.n	8001864 <HAL_RCC_OscConfig+0x6d8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800140c:	4b27      	ldr	r3, [pc, #156]	; (80014ac <HAL_RCC_OscConfig+0x320>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	4a2d      	ldr	r2, [pc, #180]	; (80014c8 <HAL_RCC_OscConfig+0x33c>)
 8001412:	4013      	ands	r3, r2
 8001414:	0019      	movs	r1, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a1a      	ldr	r2, [r3, #32]
 800141a:	4b24      	ldr	r3, [pc, #144]	; (80014ac <HAL_RCC_OscConfig+0x320>)
 800141c:	430a      	orrs	r2, r1
 800141e:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001420:	4b22      	ldr	r3, [pc, #136]	; (80014ac <HAL_RCC_OscConfig+0x320>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	021b      	lsls	r3, r3, #8
 8001426:	0a19      	lsrs	r1, r3, #8
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	69db      	ldr	r3, [r3, #28]
 800142c:	061a      	lsls	r2, r3, #24
 800142e:	4b1f      	ldr	r3, [pc, #124]	; (80014ac <HAL_RCC_OscConfig+0x320>)
 8001430:	430a      	orrs	r2, r1
 8001432:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6a1b      	ldr	r3, [r3, #32]
 8001438:	0b5b      	lsrs	r3, r3, #13
 800143a:	3301      	adds	r3, #1
 800143c:	2280      	movs	r2, #128	; 0x80
 800143e:	0212      	lsls	r2, r2, #8
 8001440:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001442:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <HAL_RCC_OscConfig+0x320>)
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	091b      	lsrs	r3, r3, #4
 8001448:	210f      	movs	r1, #15
 800144a:	400b      	ands	r3, r1
 800144c:	491b      	ldr	r1, [pc, #108]	; (80014bc <HAL_RCC_OscConfig+0x330>)
 800144e:	5ccb      	ldrb	r3, [r1, r3]
 8001450:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001452:	4b1b      	ldr	r3, [pc, #108]	; (80014c0 <HAL_RCC_OscConfig+0x334>)
 8001454:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001456:	4b1b      	ldr	r3, [pc, #108]	; (80014c4 <HAL_RCC_OscConfig+0x338>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2513      	movs	r5, #19
 800145c:	197c      	adds	r4, r7, r5
 800145e:	0018      	movs	r0, r3
 8001460:	f7ff fc0c 	bl	8000c7c <HAL_InitTick>
 8001464:	0003      	movs	r3, r0
 8001466:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001468:	197b      	adds	r3, r7, r5
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d062      	beq.n	8001536 <HAL_RCC_OscConfig+0x3aa>
        {
          return status;
 8001470:	2313      	movs	r3, #19
 8001472:	18fb      	adds	r3, r7, r3
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	e1f5      	b.n	8001864 <HAL_RCC_OscConfig+0x6d8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d040      	beq.n	8001502 <HAL_RCC_OscConfig+0x376>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001480:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <HAL_RCC_OscConfig+0x320>)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	4b09      	ldr	r3, [pc, #36]	; (80014ac <HAL_RCC_OscConfig+0x320>)
 8001486:	2180      	movs	r1, #128	; 0x80
 8001488:	0049      	lsls	r1, r1, #1
 800148a:	430a      	orrs	r2, r1
 800148c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148e:	f000 fced 	bl	8001e6c <HAL_GetTick>
 8001492:	0003      	movs	r3, r0
 8001494:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001496:	e019      	b.n	80014cc <HAL_RCC_OscConfig+0x340>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001498:	f000 fce8 	bl	8001e6c <HAL_GetTick>
 800149c:	0002      	movs	r2, r0
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d912      	bls.n	80014cc <HAL_RCC_OscConfig+0x340>
          {
            return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e1dc      	b.n	8001864 <HAL_RCC_OscConfig+0x6d8>
 80014aa:	46c0      	nop			; (mov r8, r8)
 80014ac:	40021000 	.word	0x40021000
 80014b0:	fffeffff 	.word	0xfffeffff
 80014b4:	fffbffff 	.word	0xfffbffff
 80014b8:	ffffe0ff 	.word	0xffffe0ff
 80014bc:	08002574 	.word	0x08002574
 80014c0:	20000008 	.word	0x20000008
 80014c4:	2000000c 	.word	0x2000000c
 80014c8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80014cc:	4bca      	ldr	r3, [pc, #808]	; (80017f8 <HAL_RCC_OscConfig+0x66c>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	2380      	movs	r3, #128	; 0x80
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4013      	ands	r3, r2
 80014d6:	d0df      	beq.n	8001498 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014d8:	4bc7      	ldr	r3, [pc, #796]	; (80017f8 <HAL_RCC_OscConfig+0x66c>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	4ac7      	ldr	r2, [pc, #796]	; (80017fc <HAL_RCC_OscConfig+0x670>)
 80014de:	4013      	ands	r3, r2
 80014e0:	0019      	movs	r1, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a1a      	ldr	r2, [r3, #32]
 80014e6:	4bc4      	ldr	r3, [pc, #784]	; (80017f8 <HAL_RCC_OscConfig+0x66c>)
 80014e8:	430a      	orrs	r2, r1
 80014ea:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014ec:	4bc2      	ldr	r3, [pc, #776]	; (80017f8 <HAL_RCC_OscConfig+0x66c>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	021b      	lsls	r3, r3, #8
 80014f2:	0a19      	lsrs	r1, r3, #8
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	69db      	ldr	r3, [r3, #28]
 80014f8:	061a      	lsls	r2, r3, #24
 80014fa:	4bbf      	ldr	r3, [pc, #764]	; (80017f8 <HAL_RCC_OscConfig+0x66c>)
 80014fc:	430a      	orrs	r2, r1
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	e019      	b.n	8001536 <HAL_RCC_OscConfig+0x3aa>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001502:	4bbd      	ldr	r3, [pc, #756]	; (80017f8 <HAL_RCC_OscConfig+0x66c>)
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	4bbc      	ldr	r3, [pc, #752]	; (80017f8 <HAL_RCC_OscConfig+0x66c>)
 8001508:	49bd      	ldr	r1, [pc, #756]	; (8001800 <HAL_RCC_OscConfig+0x674>)
 800150a:	400a      	ands	r2, r1
 800150c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150e:	f000 fcad 	bl	8001e6c <HAL_GetTick>
 8001512:	0003      	movs	r3, r0
 8001514:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x39e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001518:	f000 fca8 	bl	8001e6c <HAL_GetTick>
 800151c:	0002      	movs	r2, r0
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x39e>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e19c      	b.n	8001864 <HAL_RCC_OscConfig+0x6d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800152a:	4bb3      	ldr	r3, [pc, #716]	; (80017f8 <HAL_RCC_OscConfig+0x66c>)
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	2380      	movs	r3, #128	; 0x80
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4013      	ands	r3, r2
 8001534:	d1f0      	bne.n	8001518 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2208      	movs	r2, #8
 800153c:	4013      	ands	r3, r2
 800153e:	d036      	beq.n	80015ae <HAL_RCC_OscConfig+0x422>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	695b      	ldr	r3, [r3, #20]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d019      	beq.n	800157c <HAL_RCC_OscConfig+0x3f0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001548:	4bab      	ldr	r3, [pc, #684]	; (80017f8 <HAL_RCC_OscConfig+0x66c>)
 800154a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800154c:	4baa      	ldr	r3, [pc, #680]	; (80017f8 <HAL_RCC_OscConfig+0x66c>)
 800154e:	2101      	movs	r1, #1
 8001550:	430a      	orrs	r2, r1
 8001552:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001554:	f000 fc8a 	bl	8001e6c <HAL_GetTick>
 8001558:	0003      	movs	r3, r0
 800155a:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800155c:	e008      	b.n	8001570 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800155e:	f000 fc85 	bl	8001e6c <HAL_GetTick>
 8001562:	0002      	movs	r2, r0
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e179      	b.n	8001864 <HAL_RCC_OscConfig+0x6d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001570:	4ba1      	ldr	r3, [pc, #644]	; (80017f8 <HAL_RCC_OscConfig+0x66c>)
 8001572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001574:	2202      	movs	r2, #2
 8001576:	4013      	ands	r3, r2
 8001578:	d0f1      	beq.n	800155e <HAL_RCC_OscConfig+0x3d2>
 800157a:	e018      	b.n	80015ae <HAL_RCC_OscConfig+0x422>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800157c:	4b9e      	ldr	r3, [pc, #632]	; (80017f8 <HAL_RCC_OscConfig+0x66c>)
 800157e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001580:	4b9d      	ldr	r3, [pc, #628]	; (80017f8 <HAL_RCC_OscConfig+0x66c>)
 8001582:	2101      	movs	r1, #1
 8001584:	438a      	bics	r2, r1
 8001586:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001588:	f000 fc70 	bl	8001e6c <HAL_GetTick>
 800158c:	0003      	movs	r3, r0
 800158e:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001590:	e008      	b.n	80015a4 <HAL_RCC_OscConfig+0x418>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001592:	f000 fc6b 	bl	8001e6c <HAL_GetTick>
 8001596:	0002      	movs	r2, r0
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x418>
        {
          return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e15f      	b.n	8001864 <HAL_RCC_OscConfig+0x6d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015a4:	4b94      	ldr	r3, [pc, #592]	; (80017f8 <HAL_RCC_OscConfig+0x66c>)
 80015a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015a8:	2202      	movs	r2, #2
 80015aa:	4013      	ands	r3, r2
 80015ac:	d1f1      	bne.n	8001592 <HAL_RCC_OscConfig+0x406>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2204      	movs	r2, #4
 80015b4:	4013      	ands	r3, r2
 80015b6:	d100      	bne.n	80015ba <HAL_RCC_OscConfig+0x42e>
 80015b8:	e0af      	b.n	800171a <HAL_RCC_OscConfig+0x58e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015ba:	2327      	movs	r3, #39	; 0x27
 80015bc:	18fb      	adds	r3, r7, r3
 80015be:	2200      	movs	r2, #0
 80015c0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015c2:	4b8d      	ldr	r3, [pc, #564]	; (80017f8 <HAL_RCC_OscConfig+0x66c>)
 80015c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015c6:	2380      	movs	r3, #128	; 0x80
 80015c8:	055b      	lsls	r3, r3, #21
 80015ca:	4013      	ands	r3, r2
 80015cc:	d10a      	bne.n	80015e4 <HAL_RCC_OscConfig+0x458>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ce:	4b8a      	ldr	r3, [pc, #552]	; (80017f8 <HAL_RCC_OscConfig+0x66c>)
 80015d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015d2:	4b89      	ldr	r3, [pc, #548]	; (80017f8 <HAL_RCC_OscConfig+0x66c>)
 80015d4:	2180      	movs	r1, #128	; 0x80
 80015d6:	0549      	lsls	r1, r1, #21
 80015d8:	430a      	orrs	r2, r1
 80015da:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80015dc:	2327      	movs	r3, #39	; 0x27
 80015de:	18fb      	adds	r3, r7, r3
 80015e0:	2201      	movs	r2, #1
 80015e2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e4:	4b87      	ldr	r3, [pc, #540]	; (8001804 <HAL_RCC_OscConfig+0x678>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	2380      	movs	r3, #128	; 0x80
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	4013      	ands	r3, r2
 80015ee:	d11a      	bne.n	8001626 <HAL_RCC_OscConfig+0x49a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015f0:	4b84      	ldr	r3, [pc, #528]	; (8001804 <HAL_RCC_OscConfig+0x678>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	4b83      	ldr	r3, [pc, #524]	; (8001804 <HAL_RCC_OscConfig+0x678>)
 80015f6:	2180      	movs	r1, #128	; 0x80
 80015f8:	0049      	lsls	r1, r1, #1
 80015fa:	430a      	orrs	r2, r1
 80015fc:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015fe:	f000 fc35 	bl	8001e6c <HAL_GetTick>
 8001602:	0003      	movs	r3, r0
 8001604:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0x48e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001608:	f000 fc30 	bl	8001e6c <HAL_GetTick>
 800160c:	0002      	movs	r2, r0
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b64      	cmp	r3, #100	; 0x64
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e124      	b.n	8001864 <HAL_RCC_OscConfig+0x6d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800161a:	4b7a      	ldr	r3, [pc, #488]	; (8001804 <HAL_RCC_OscConfig+0x678>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	2380      	movs	r3, #128	; 0x80
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	4013      	ands	r3, r2
 8001624:	d0f0      	beq.n	8001608 <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	689a      	ldr	r2, [r3, #8]
 800162a:	2380      	movs	r3, #128	; 0x80
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	429a      	cmp	r2, r3
 8001630:	d107      	bne.n	8001642 <HAL_RCC_OscConfig+0x4b6>
 8001632:	4b71      	ldr	r3, [pc, #452]	; (80017f8 <HAL_RCC_OscConfig+0x66c>)
 8001634:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001636:	4b70      	ldr	r3, [pc, #448]	; (80017f8 <HAL_RCC_OscConfig+0x66c>)
 8001638:	2180      	movs	r1, #128	; 0x80
 800163a:	0049      	lsls	r1, r1, #1
 800163c:	430a      	orrs	r2, r1
 800163e:	651a      	str	r2, [r3, #80]	; 0x50
 8001640:	e031      	b.n	80016a6 <HAL_RCC_OscConfig+0x51a>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d10c      	bne.n	8001664 <HAL_RCC_OscConfig+0x4d8>
 800164a:	4b6b      	ldr	r3, [pc, #428]	; (80017f8 <HAL_RCC_OscConfig+0x66c>)
 800164c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800164e:	4b6a      	ldr	r3, [pc, #424]	; (80017f8 <HAL_RCC_OscConfig+0x66c>)
 8001650:	496b      	ldr	r1, [pc, #428]	; (8001800 <HAL_RCC_OscConfig+0x674>)
 8001652:	400a      	ands	r2, r1
 8001654:	651a      	str	r2, [r3, #80]	; 0x50
 8001656:	4b68      	ldr	r3, [pc, #416]	; (80017f8 <HAL_RCC_OscConfig+0x66c>)
 8001658:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800165a:	4b67      	ldr	r3, [pc, #412]	; (80017f8 <HAL_RCC_OscConfig+0x66c>)
 800165c:	496a      	ldr	r1, [pc, #424]	; (8001808 <HAL_RCC_OscConfig+0x67c>)
 800165e:	400a      	ands	r2, r1
 8001660:	651a      	str	r2, [r3, #80]	; 0x50
 8001662:	e020      	b.n	80016a6 <HAL_RCC_OscConfig+0x51a>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	23a0      	movs	r3, #160	; 0xa0
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	429a      	cmp	r2, r3
 800166e:	d10e      	bne.n	800168e <HAL_RCC_OscConfig+0x502>
 8001670:	4b61      	ldr	r3, [pc, #388]	; (80017f8 <HAL_RCC_OscConfig+0x66c>)
 8001672:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001674:	4b60      	ldr	r3, [pc, #384]	; (80017f8 <HAL_RCC_OscConfig+0x66c>)
 8001676:	2180      	movs	r1, #128	; 0x80
 8001678:	00c9      	lsls	r1, r1, #3
 800167a:	430a      	orrs	r2, r1
 800167c:	651a      	str	r2, [r3, #80]	; 0x50
 800167e:	4b5e      	ldr	r3, [pc, #376]	; (80017f8 <HAL_RCC_OscConfig+0x66c>)
 8001680:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001682:	4b5d      	ldr	r3, [pc, #372]	; (80017f8 <HAL_RCC_OscConfig+0x66c>)
 8001684:	2180      	movs	r1, #128	; 0x80
 8001686:	0049      	lsls	r1, r1, #1
 8001688:	430a      	orrs	r2, r1
 800168a:	651a      	str	r2, [r3, #80]	; 0x50
 800168c:	e00b      	b.n	80016a6 <HAL_RCC_OscConfig+0x51a>
 800168e:	4b5a      	ldr	r3, [pc, #360]	; (80017f8 <HAL_RCC_OscConfig+0x66c>)
 8001690:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001692:	4b59      	ldr	r3, [pc, #356]	; (80017f8 <HAL_RCC_OscConfig+0x66c>)
 8001694:	495a      	ldr	r1, [pc, #360]	; (8001800 <HAL_RCC_OscConfig+0x674>)
 8001696:	400a      	ands	r2, r1
 8001698:	651a      	str	r2, [r3, #80]	; 0x50
 800169a:	4b57      	ldr	r3, [pc, #348]	; (80017f8 <HAL_RCC_OscConfig+0x66c>)
 800169c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800169e:	4b56      	ldr	r3, [pc, #344]	; (80017f8 <HAL_RCC_OscConfig+0x66c>)
 80016a0:	4959      	ldr	r1, [pc, #356]	; (8001808 <HAL_RCC_OscConfig+0x67c>)
 80016a2:	400a      	ands	r2, r1
 80016a4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d015      	beq.n	80016da <HAL_RCC_OscConfig+0x54e>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ae:	f000 fbdd 	bl	8001e6c <HAL_GetTick>
 80016b2:	0003      	movs	r3, r0
 80016b4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80016b6:	e009      	b.n	80016cc <HAL_RCC_OscConfig+0x540>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016b8:	f000 fbd8 	bl	8001e6c <HAL_GetTick>
 80016bc:	0002      	movs	r2, r0
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	4a52      	ldr	r2, [pc, #328]	; (800180c <HAL_RCC_OscConfig+0x680>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x540>
        {
          return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e0cb      	b.n	8001864 <HAL_RCC_OscConfig+0x6d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80016cc:	4b4a      	ldr	r3, [pc, #296]	; (80017f8 <HAL_RCC_OscConfig+0x66c>)
 80016ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016d0:	2380      	movs	r3, #128	; 0x80
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	4013      	ands	r3, r2
 80016d6:	d0ef      	beq.n	80016b8 <HAL_RCC_OscConfig+0x52c>
 80016d8:	e014      	b.n	8001704 <HAL_RCC_OscConfig+0x578>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016da:	f000 fbc7 	bl	8001e6c <HAL_GetTick>
 80016de:	0003      	movs	r3, r0
 80016e0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80016e2:	e009      	b.n	80016f8 <HAL_RCC_OscConfig+0x56c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016e4:	f000 fbc2 	bl	8001e6c <HAL_GetTick>
 80016e8:	0002      	movs	r2, r0
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	4a47      	ldr	r2, [pc, #284]	; (800180c <HAL_RCC_OscConfig+0x680>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x56c>
        {
          return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e0b5      	b.n	8001864 <HAL_RCC_OscConfig+0x6d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80016f8:	4b3f      	ldr	r3, [pc, #252]	; (80017f8 <HAL_RCC_OscConfig+0x66c>)
 80016fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016fc:	2380      	movs	r3, #128	; 0x80
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4013      	ands	r3, r2
 8001702:	d1ef      	bne.n	80016e4 <HAL_RCC_OscConfig+0x558>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001704:	2327      	movs	r3, #39	; 0x27
 8001706:	18fb      	adds	r3, r7, r3
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d105      	bne.n	800171a <HAL_RCC_OscConfig+0x58e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800170e:	4b3a      	ldr	r3, [pc, #232]	; (80017f8 <HAL_RCC_OscConfig+0x66c>)
 8001710:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001712:	4b39      	ldr	r3, [pc, #228]	; (80017f8 <HAL_RCC_OscConfig+0x66c>)
 8001714:	493e      	ldr	r1, [pc, #248]	; (8001810 <HAL_RCC_OscConfig+0x684>)
 8001716:	400a      	ands	r2, r1
 8001718:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171e:	2b00      	cmp	r3, #0
 8001720:	d100      	bne.n	8001724 <HAL_RCC_OscConfig+0x598>
 8001722:	e09e      	b.n	8001862 <HAL_RCC_OscConfig+0x6d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001724:	6a3b      	ldr	r3, [r7, #32]
 8001726:	2b0c      	cmp	r3, #12
 8001728:	d100      	bne.n	800172c <HAL_RCC_OscConfig+0x5a0>
 800172a:	e077      	b.n	800181c <HAL_RCC_OscConfig+0x690>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001730:	2b02      	cmp	r3, #2
 8001732:	d145      	bne.n	80017c0 <HAL_RCC_OscConfig+0x634>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001734:	4b30      	ldr	r3, [pc, #192]	; (80017f8 <HAL_RCC_OscConfig+0x66c>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	4b2f      	ldr	r3, [pc, #188]	; (80017f8 <HAL_RCC_OscConfig+0x66c>)
 800173a:	4936      	ldr	r1, [pc, #216]	; (8001814 <HAL_RCC_OscConfig+0x688>)
 800173c:	400a      	ands	r2, r1
 800173e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001740:	f000 fb94 	bl	8001e6c <HAL_GetTick>
 8001744:	0003      	movs	r3, r0
 8001746:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800174a:	f000 fb8f 	bl	8001e6c <HAL_GetTick>
 800174e:	0002      	movs	r2, r0
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e083      	b.n	8001864 <HAL_RCC_OscConfig+0x6d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800175c:	4b26      	ldr	r3, [pc, #152]	; (80017f8 <HAL_RCC_OscConfig+0x66c>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	2380      	movs	r3, #128	; 0x80
 8001762:	049b      	lsls	r3, r3, #18
 8001764:	4013      	ands	r3, r2
 8001766:	d1f0      	bne.n	800174a <HAL_RCC_OscConfig+0x5be>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001768:	4b23      	ldr	r3, [pc, #140]	; (80017f8 <HAL_RCC_OscConfig+0x66c>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	4a2a      	ldr	r2, [pc, #168]	; (8001818 <HAL_RCC_OscConfig+0x68c>)
 800176e:	4013      	ands	r3, r2
 8001770:	0019      	movs	r1, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177a:	431a      	orrs	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001780:	431a      	orrs	r2, r3
 8001782:	4b1d      	ldr	r3, [pc, #116]	; (80017f8 <HAL_RCC_OscConfig+0x66c>)
 8001784:	430a      	orrs	r2, r1
 8001786:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001788:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <HAL_RCC_OscConfig+0x66c>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4b1a      	ldr	r3, [pc, #104]	; (80017f8 <HAL_RCC_OscConfig+0x66c>)
 800178e:	2180      	movs	r1, #128	; 0x80
 8001790:	0449      	lsls	r1, r1, #17
 8001792:	430a      	orrs	r2, r1
 8001794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001796:	f000 fb69 	bl	8001e6c <HAL_GetTick>
 800179a:	0003      	movs	r3, r0
 800179c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x626>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017a0:	f000 fb64 	bl	8001e6c <HAL_GetTick>
 80017a4:	0002      	movs	r2, r0
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x626>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e058      	b.n	8001864 <HAL_RCC_OscConfig+0x6d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80017b2:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <HAL_RCC_OscConfig+0x66c>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	2380      	movs	r3, #128	; 0x80
 80017b8:	049b      	lsls	r3, r3, #18
 80017ba:	4013      	ands	r3, r2
 80017bc:	d0f0      	beq.n	80017a0 <HAL_RCC_OscConfig+0x614>
 80017be:	e050      	b.n	8001862 <HAL_RCC_OscConfig+0x6d6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017c0:	4b0d      	ldr	r3, [pc, #52]	; (80017f8 <HAL_RCC_OscConfig+0x66c>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <HAL_RCC_OscConfig+0x66c>)
 80017c6:	4913      	ldr	r1, [pc, #76]	; (8001814 <HAL_RCC_OscConfig+0x688>)
 80017c8:	400a      	ands	r2, r1
 80017ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017cc:	f000 fb4e 	bl	8001e6c <HAL_GetTick>
 80017d0:	0003      	movs	r3, r0
 80017d2:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017d6:	f000 fb49 	bl	8001e6c <HAL_GetTick>
 80017da:	0002      	movs	r2, r0
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e03d      	b.n	8001864 <HAL_RCC_OscConfig+0x6d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80017e8:	4b03      	ldr	r3, [pc, #12]	; (80017f8 <HAL_RCC_OscConfig+0x66c>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	2380      	movs	r3, #128	; 0x80
 80017ee:	049b      	lsls	r3, r3, #18
 80017f0:	4013      	ands	r3, r2
 80017f2:	d1f0      	bne.n	80017d6 <HAL_RCC_OscConfig+0x64a>
 80017f4:	e035      	b.n	8001862 <HAL_RCC_OscConfig+0x6d6>
 80017f6:	46c0      	nop			; (mov r8, r8)
 80017f8:	40021000 	.word	0x40021000
 80017fc:	ffff1fff 	.word	0xffff1fff
 8001800:	fffffeff 	.word	0xfffffeff
 8001804:	40007000 	.word	0x40007000
 8001808:	fffffbff 	.word	0xfffffbff
 800180c:	00001388 	.word	0x00001388
 8001810:	efffffff 	.word	0xefffffff
 8001814:	feffffff 	.word	0xfeffffff
 8001818:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001820:	2b01      	cmp	r3, #1
 8001822:	d101      	bne.n	8001828 <HAL_RCC_OscConfig+0x69c>
      {
        return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e01d      	b.n	8001864 <HAL_RCC_OscConfig+0x6d8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001828:	4b10      	ldr	r3, [pc, #64]	; (800186c <HAL_RCC_OscConfig+0x6e0>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800182e:	69fa      	ldr	r2, [r7, #28]
 8001830:	2380      	movs	r3, #128	; 0x80
 8001832:	025b      	lsls	r3, r3, #9
 8001834:	401a      	ands	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183a:	429a      	cmp	r2, r3
 800183c:	d10f      	bne.n	800185e <HAL_RCC_OscConfig+0x6d2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800183e:	69fa      	ldr	r2, [r7, #28]
 8001840:	23f0      	movs	r3, #240	; 0xf0
 8001842:	039b      	lsls	r3, r3, #14
 8001844:	401a      	ands	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800184a:	429a      	cmp	r2, r3
 800184c:	d107      	bne.n	800185e <HAL_RCC_OscConfig+0x6d2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800184e:	69fa      	ldr	r2, [r7, #28]
 8001850:	23c0      	movs	r3, #192	; 0xc0
 8001852:	041b      	lsls	r3, r3, #16
 8001854:	401a      	ands	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800185a:	429a      	cmp	r2, r3
 800185c:	d001      	beq.n	8001862 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e000      	b.n	8001864 <HAL_RCC_OscConfig+0x6d8>
        }
      }
    }
  }
  return HAL_OK;
 8001862:	2300      	movs	r3, #0
}
 8001864:	0018      	movs	r0, r3
 8001866:	46bd      	mov	sp, r7
 8001868:	b00a      	add	sp, #40	; 0x28
 800186a:	bdb0      	pop	{r4, r5, r7, pc}
 800186c:	40021000 	.word	0x40021000

08001870 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001870:	b5b0      	push	{r4, r5, r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d101      	bne.n	8001884 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e129      	b.n	8001ad8 <HAL_RCC_ClockConfig+0x268>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001884:	4b96      	ldr	r3, [pc, #600]	; (8001ae0 <HAL_RCC_ClockConfig+0x270>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2201      	movs	r2, #1
 800188a:	4013      	ands	r3, r2
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	429a      	cmp	r2, r3
 8001890:	d91e      	bls.n	80018d0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001892:	4b93      	ldr	r3, [pc, #588]	; (8001ae0 <HAL_RCC_ClockConfig+0x270>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2201      	movs	r2, #1
 8001898:	4393      	bics	r3, r2
 800189a:	0019      	movs	r1, r3
 800189c:	4b90      	ldr	r3, [pc, #576]	; (8001ae0 <HAL_RCC_ClockConfig+0x270>)
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	430a      	orrs	r2, r1
 80018a2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80018a4:	f000 fae2 	bl	8001e6c <HAL_GetTick>
 80018a8:	0003      	movs	r3, r0
 80018aa:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ac:	e009      	b.n	80018c2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018ae:	f000 fadd 	bl	8001e6c <HAL_GetTick>
 80018b2:	0002      	movs	r2, r0
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	4a8a      	ldr	r2, [pc, #552]	; (8001ae4 <HAL_RCC_ClockConfig+0x274>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e10a      	b.n	8001ad8 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c2:	4b87      	ldr	r3, [pc, #540]	; (8001ae0 <HAL_RCC_ClockConfig+0x270>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2201      	movs	r2, #1
 80018c8:	4013      	ands	r3, r2
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d1ee      	bne.n	80018ae <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2202      	movs	r2, #2
 80018d6:	4013      	ands	r3, r2
 80018d8:	d009      	beq.n	80018ee <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018da:	4b83      	ldr	r3, [pc, #524]	; (8001ae8 <HAL_RCC_ClockConfig+0x278>)
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	22f0      	movs	r2, #240	; 0xf0
 80018e0:	4393      	bics	r3, r2
 80018e2:	0019      	movs	r1, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	4b7f      	ldr	r3, [pc, #508]	; (8001ae8 <HAL_RCC_ClockConfig+0x278>)
 80018ea:	430a      	orrs	r2, r1
 80018ec:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2201      	movs	r2, #1
 80018f4:	4013      	ands	r3, r2
 80018f6:	d100      	bne.n	80018fa <HAL_RCC_ClockConfig+0x8a>
 80018f8:	e089      	b.n	8001a0e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d107      	bne.n	8001912 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001902:	4b79      	ldr	r3, [pc, #484]	; (8001ae8 <HAL_RCC_ClockConfig+0x278>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	2380      	movs	r3, #128	; 0x80
 8001908:	029b      	lsls	r3, r3, #10
 800190a:	4013      	ands	r3, r2
 800190c:	d120      	bne.n	8001950 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e0e2      	b.n	8001ad8 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	2b03      	cmp	r3, #3
 8001918:	d107      	bne.n	800192a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800191a:	4b73      	ldr	r3, [pc, #460]	; (8001ae8 <HAL_RCC_ClockConfig+0x278>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	2380      	movs	r3, #128	; 0x80
 8001920:	049b      	lsls	r3, r3, #18
 8001922:	4013      	ands	r3, r2
 8001924:	d114      	bne.n	8001950 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e0d6      	b.n	8001ad8 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d106      	bne.n	8001940 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001932:	4b6d      	ldr	r3, [pc, #436]	; (8001ae8 <HAL_RCC_ClockConfig+0x278>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2204      	movs	r2, #4
 8001938:	4013      	ands	r3, r2
 800193a:	d109      	bne.n	8001950 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e0cb      	b.n	8001ad8 <HAL_RCC_ClockConfig+0x268>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001940:	4b69      	ldr	r3, [pc, #420]	; (8001ae8 <HAL_RCC_ClockConfig+0x278>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	2380      	movs	r3, #128	; 0x80
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	4013      	ands	r3, r2
 800194a:	d101      	bne.n	8001950 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e0c3      	b.n	8001ad8 <HAL_RCC_ClockConfig+0x268>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001950:	4b65      	ldr	r3, [pc, #404]	; (8001ae8 <HAL_RCC_ClockConfig+0x278>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	2203      	movs	r2, #3
 8001956:	4393      	bics	r3, r2
 8001958:	0019      	movs	r1, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685a      	ldr	r2, [r3, #4]
 800195e:	4b62      	ldr	r3, [pc, #392]	; (8001ae8 <HAL_RCC_ClockConfig+0x278>)
 8001960:	430a      	orrs	r2, r1
 8001962:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001964:	f000 fa82 	bl	8001e6c <HAL_GetTick>
 8001968:	0003      	movs	r3, r0
 800196a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	2b02      	cmp	r3, #2
 8001972:	d111      	bne.n	8001998 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001974:	e009      	b.n	800198a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001976:	f000 fa79 	bl	8001e6c <HAL_GetTick>
 800197a:	0002      	movs	r2, r0
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	4a58      	ldr	r2, [pc, #352]	; (8001ae4 <HAL_RCC_ClockConfig+0x274>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d901      	bls.n	800198a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e0a6      	b.n	8001ad8 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800198a:	4b57      	ldr	r3, [pc, #348]	; (8001ae8 <HAL_RCC_ClockConfig+0x278>)
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	220c      	movs	r2, #12
 8001990:	4013      	ands	r3, r2
 8001992:	2b08      	cmp	r3, #8
 8001994:	d1ef      	bne.n	8001976 <HAL_RCC_ClockConfig+0x106>
 8001996:	e03a      	b.n	8001a0e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	2b03      	cmp	r3, #3
 800199e:	d111      	bne.n	80019c4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019a0:	e009      	b.n	80019b6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019a2:	f000 fa63 	bl	8001e6c <HAL_GetTick>
 80019a6:	0002      	movs	r2, r0
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	4a4d      	ldr	r2, [pc, #308]	; (8001ae4 <HAL_RCC_ClockConfig+0x274>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e090      	b.n	8001ad8 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019b6:	4b4c      	ldr	r3, [pc, #304]	; (8001ae8 <HAL_RCC_ClockConfig+0x278>)
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	220c      	movs	r2, #12
 80019bc:	4013      	ands	r3, r2
 80019be:	2b0c      	cmp	r3, #12
 80019c0:	d1ef      	bne.n	80019a2 <HAL_RCC_ClockConfig+0x132>
 80019c2:	e024      	b.n	8001a0e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d11b      	bne.n	8001a04 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80019cc:	e009      	b.n	80019e2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ce:	f000 fa4d 	bl	8001e6c <HAL_GetTick>
 80019d2:	0002      	movs	r2, r0
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	4a42      	ldr	r2, [pc, #264]	; (8001ae4 <HAL_RCC_ClockConfig+0x274>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e07a      	b.n	8001ad8 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80019e2:	4b41      	ldr	r3, [pc, #260]	; (8001ae8 <HAL_RCC_ClockConfig+0x278>)
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	220c      	movs	r2, #12
 80019e8:	4013      	ands	r3, r2
 80019ea:	2b04      	cmp	r3, #4
 80019ec:	d1ef      	bne.n	80019ce <HAL_RCC_ClockConfig+0x15e>
 80019ee:	e00e      	b.n	8001a0e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019f0:	f000 fa3c 	bl	8001e6c <HAL_GetTick>
 80019f4:	0002      	movs	r2, r0
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	4a3a      	ldr	r2, [pc, #232]	; (8001ae4 <HAL_RCC_ClockConfig+0x274>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e069      	b.n	8001ad8 <HAL_RCC_ClockConfig+0x268>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001a04:	4b38      	ldr	r3, [pc, #224]	; (8001ae8 <HAL_RCC_ClockConfig+0x278>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	220c      	movs	r2, #12
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	d1f0      	bne.n	80019f0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a0e:	4b34      	ldr	r3, [pc, #208]	; (8001ae0 <HAL_RCC_ClockConfig+0x270>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2201      	movs	r2, #1
 8001a14:	4013      	ands	r3, r2
 8001a16:	683a      	ldr	r2, [r7, #0]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d21e      	bcs.n	8001a5a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a1c:	4b30      	ldr	r3, [pc, #192]	; (8001ae0 <HAL_RCC_ClockConfig+0x270>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2201      	movs	r2, #1
 8001a22:	4393      	bics	r3, r2
 8001a24:	0019      	movs	r1, r3
 8001a26:	4b2e      	ldr	r3, [pc, #184]	; (8001ae0 <HAL_RCC_ClockConfig+0x270>)
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a2e:	f000 fa1d 	bl	8001e6c <HAL_GetTick>
 8001a32:	0003      	movs	r3, r0
 8001a34:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a36:	e009      	b.n	8001a4c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a38:	f000 fa18 	bl	8001e6c <HAL_GetTick>
 8001a3c:	0002      	movs	r2, r0
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	4a28      	ldr	r2, [pc, #160]	; (8001ae4 <HAL_RCC_ClockConfig+0x274>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e045      	b.n	8001ad8 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a4c:	4b24      	ldr	r3, [pc, #144]	; (8001ae0 <HAL_RCC_ClockConfig+0x270>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2201      	movs	r2, #1
 8001a52:	4013      	ands	r3, r2
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d1ee      	bne.n	8001a38 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2204      	movs	r2, #4
 8001a60:	4013      	ands	r3, r2
 8001a62:	d009      	beq.n	8001a78 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a64:	4b20      	ldr	r3, [pc, #128]	; (8001ae8 <HAL_RCC_ClockConfig+0x278>)
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	4a20      	ldr	r2, [pc, #128]	; (8001aec <HAL_RCC_ClockConfig+0x27c>)
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	0019      	movs	r1, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	68da      	ldr	r2, [r3, #12]
 8001a72:	4b1d      	ldr	r3, [pc, #116]	; (8001ae8 <HAL_RCC_ClockConfig+0x278>)
 8001a74:	430a      	orrs	r2, r1
 8001a76:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2208      	movs	r2, #8
 8001a7e:	4013      	ands	r3, r2
 8001a80:	d00a      	beq.n	8001a98 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a82:	4b19      	ldr	r3, [pc, #100]	; (8001ae8 <HAL_RCC_ClockConfig+0x278>)
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	4a1a      	ldr	r2, [pc, #104]	; (8001af0 <HAL_RCC_ClockConfig+0x280>)
 8001a88:	4013      	ands	r3, r2
 8001a8a:	0019      	movs	r1, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	00da      	lsls	r2, r3, #3
 8001a92:	4b15      	ldr	r3, [pc, #84]	; (8001ae8 <HAL_RCC_ClockConfig+0x278>)
 8001a94:	430a      	orrs	r2, r1
 8001a96:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a98:	f000 f832 	bl	8001b00 <HAL_RCC_GetSysClockFreq>
 8001a9c:	0001      	movs	r1, r0
 8001a9e:	4b12      	ldr	r3, [pc, #72]	; (8001ae8 <HAL_RCC_ClockConfig+0x278>)
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	091b      	lsrs	r3, r3, #4
 8001aa4:	220f      	movs	r2, #15
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	4a12      	ldr	r2, [pc, #72]	; (8001af4 <HAL_RCC_ClockConfig+0x284>)
 8001aaa:	5cd3      	ldrb	r3, [r2, r3]
 8001aac:	000a      	movs	r2, r1
 8001aae:	40da      	lsrs	r2, r3
 8001ab0:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <HAL_RCC_ClockConfig+0x288>)
 8001ab2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ab4:	4b11      	ldr	r3, [pc, #68]	; (8001afc <HAL_RCC_ClockConfig+0x28c>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	250b      	movs	r5, #11
 8001aba:	197c      	adds	r4, r7, r5
 8001abc:	0018      	movs	r0, r3
 8001abe:	f7ff f8dd 	bl	8000c7c <HAL_InitTick>
 8001ac2:	0003      	movs	r3, r0
 8001ac4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001ac6:	197b      	adds	r3, r7, r5
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0x266>
  {
    return status;
 8001ace:	230b      	movs	r3, #11
 8001ad0:	18fb      	adds	r3, r7, r3
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	e000      	b.n	8001ad8 <HAL_RCC_ClockConfig+0x268>
  }

  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	0018      	movs	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	b004      	add	sp, #16
 8001ade:	bdb0      	pop	{r4, r5, r7, pc}
 8001ae0:	40022000 	.word	0x40022000
 8001ae4:	00001388 	.word	0x00001388
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	fffff8ff 	.word	0xfffff8ff
 8001af0:	ffffc7ff 	.word	0xffffc7ff
 8001af4:	08002574 	.word	0x08002574
 8001af8:	20000008 	.word	0x20000008
 8001afc:	2000000c 	.word	0x2000000c

08001b00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b02:	b08f      	sub	sp, #60	; 0x3c
 8001b04:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001b06:	4b4a      	ldr	r3, [pc, #296]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x130>)
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b0e:	230c      	movs	r3, #12
 8001b10:	4013      	ands	r3, r2
 8001b12:	2b08      	cmp	r3, #8
 8001b14:	d00f      	beq.n	8001b36 <HAL_RCC_GetSysClockFreq+0x36>
 8001b16:	2b0c      	cmp	r3, #12
 8001b18:	d010      	beq.n	8001b3c <HAL_RCC_GetSysClockFreq+0x3c>
 8001b1a:	2b04      	cmp	r3, #4
 8001b1c:	d000      	beq.n	8001b20 <HAL_RCC_GetSysClockFreq+0x20>
 8001b1e:	e073      	b.n	8001c08 <HAL_RCC_GetSysClockFreq+0x108>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001b20:	4b43      	ldr	r3, [pc, #268]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x130>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2210      	movs	r2, #16
 8001b26:	4013      	ands	r3, r2
 8001b28:	d002      	beq.n	8001b30 <HAL_RCC_GetSysClockFreq+0x30>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001b2a:	4b42      	ldr	r3, [pc, #264]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x134>)
 8001b2c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001b2e:	e079      	b.n	8001c24 <HAL_RCC_GetSysClockFreq+0x124>
        sysclockfreq =  HSI_VALUE;
 8001b30:	4b41      	ldr	r3, [pc, #260]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x138>)
 8001b32:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b34:	e076      	b.n	8001c24 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b36:	4b41      	ldr	r3, [pc, #260]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001b38:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b3a:	e073      	b.n	8001c24 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b3e:	0c9a      	lsrs	r2, r3, #18
 8001b40:	230f      	movs	r3, #15
 8001b42:	401a      	ands	r2, r3
 8001b44:	4b3e      	ldr	r3, [pc, #248]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x140>)
 8001b46:	5c9b      	ldrb	r3, [r3, r2]
 8001b48:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b4c:	0d9a      	lsrs	r2, r3, #22
 8001b4e:	2303      	movs	r3, #3
 8001b50:	4013      	ands	r3, r2
 8001b52:	3301      	adds	r3, #1
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b56:	4b36      	ldr	r3, [pc, #216]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x130>)
 8001b58:	68da      	ldr	r2, [r3, #12]
 8001b5a:	2380      	movs	r3, #128	; 0x80
 8001b5c:	025b      	lsls	r3, r3, #9
 8001b5e:	4013      	ands	r3, r2
 8001b60:	d019      	beq.n	8001b96 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b64:	61bb      	str	r3, [r7, #24]
 8001b66:	2300      	movs	r3, #0
 8001b68:	61fb      	str	r3, [r7, #28]
 8001b6a:	4a34      	ldr	r2, [pc, #208]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	69b8      	ldr	r0, [r7, #24]
 8001b70:	69f9      	ldr	r1, [r7, #28]
 8001b72:	f7fe fb75 	bl	8000260 <__aeabi_lmul>
 8001b76:	0003      	movs	r3, r0
 8001b78:	000c      	movs	r4, r1
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	0021      	movs	r1, r4
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b80:	613b      	str	r3, [r7, #16]
 8001b82:	2300      	movs	r3, #0
 8001b84:	617b      	str	r3, [r7, #20]
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	f7fe fb49 	bl	8000220 <__aeabi_uldivmod>
 8001b8e:	0003      	movs	r3, r0
 8001b90:	000c      	movs	r4, r1
 8001b92:	637b      	str	r3, [r7, #52]	; 0x34
 8001b94:	e035      	b.n	8001c02 <HAL_RCC_GetSysClockFreq+0x102>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001b96:	4b26      	ldr	r3, [pc, #152]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x130>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2210      	movs	r2, #16
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	d019      	beq.n	8001bd4 <HAL_RCC_GetSysClockFreq+0xd4>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ba2:	60bb      	str	r3, [r7, #8]
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	4a22      	ldr	r2, [pc, #136]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x134>)
 8001baa:	2300      	movs	r3, #0
 8001bac:	68b8      	ldr	r0, [r7, #8]
 8001bae:	68f9      	ldr	r1, [r7, #12]
 8001bb0:	f7fe fb56 	bl	8000260 <__aeabi_lmul>
 8001bb4:	0003      	movs	r3, r0
 8001bb6:	000c      	movs	r4, r1
 8001bb8:	0018      	movs	r0, r3
 8001bba:	0021      	movs	r1, r4
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbe:	603b      	str	r3, [r7, #0]
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	607b      	str	r3, [r7, #4]
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f7fe fb2a 	bl	8000220 <__aeabi_uldivmod>
 8001bcc:	0003      	movs	r3, r0
 8001bce:	000c      	movs	r4, r1
 8001bd0:	637b      	str	r3, [r7, #52]	; 0x34
 8001bd2:	e016      	b.n	8001c02 <HAL_RCC_GetSysClockFreq+0x102>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	2300      	movs	r3, #0
 8001bda:	0019      	movs	r1, r3
 8001bdc:	4a16      	ldr	r2, [pc, #88]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x138>)
 8001bde:	2300      	movs	r3, #0
 8001be0:	f7fe fb3e 	bl	8000260 <__aeabi_lmul>
 8001be4:	0003      	movs	r3, r0
 8001be6:	000c      	movs	r4, r1
 8001be8:	0018      	movs	r0, r3
 8001bea:	0021      	movs	r1, r4
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	001d      	movs	r5, r3
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	001e      	movs	r6, r3
 8001bf4:	002a      	movs	r2, r5
 8001bf6:	0033      	movs	r3, r6
 8001bf8:	f7fe fb12 	bl	8000220 <__aeabi_uldivmod>
 8001bfc:	0003      	movs	r3, r0
 8001bfe:	000c      	movs	r4, r1
 8001c00:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c04:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c06:	e00d      	b.n	8001c24 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001c08:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x130>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	0b5b      	lsrs	r3, r3, #13
 8001c0e:	2207      	movs	r2, #7
 8001c10:	4013      	ands	r3, r2
 8001c12:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001c14:	6a3b      	ldr	r3, [r7, #32]
 8001c16:	3301      	adds	r3, #1
 8001c18:	2280      	movs	r2, #128	; 0x80
 8001c1a:	0212      	lsls	r2, r2, #8
 8001c1c:	409a      	lsls	r2, r3
 8001c1e:	0013      	movs	r3, r2
 8001c20:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c22:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001c26:	0018      	movs	r0, r3
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	b00f      	add	sp, #60	; 0x3c
 8001c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c2e:	46c0      	nop			; (mov r8, r8)
 8001c30:	40021000 	.word	0x40021000
 8001c34:	003d0900 	.word	0x003d0900
 8001c38:	00f42400 	.word	0x00f42400
 8001c3c:	007a1200 	.word	0x007a1200
 8001c40:	0800258c 	.word	0x0800258c

08001c44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c48:	4b02      	ldr	r3, [pc, #8]	; (8001c54 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
}
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	46c0      	nop			; (mov r8, r8)
 8001c54:	20000008 	.word	0x20000008

08001c58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c5c:	f7ff fff2 	bl	8001c44 <HAL_RCC_GetHCLKFreq>
 8001c60:	0001      	movs	r1, r0
 8001c62:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	0a1b      	lsrs	r3, r3, #8
 8001c68:	2207      	movs	r2, #7
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	4a04      	ldr	r2, [pc, #16]	; (8001c80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c6e:	5cd3      	ldrb	r3, [r2, r3]
 8001c70:	40d9      	lsrs	r1, r3
 8001c72:	000b      	movs	r3, r1
}
 8001c74:	0018      	movs	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	46c0      	nop			; (mov r8, r8)
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	08002584 	.word	0x08002584

08001c84 <CORE_Init>:
/*
 * PUBLIC FUNCTIONS
 */

void CORE_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
	__HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001c88:	4b0d      	ldr	r3, [pc, #52]	; (8001cc0 <CORE_Init+0x3c>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <CORE_Init+0x3c>)
 8001c8e:	2140      	movs	r1, #64	; 0x40
 8001c90:	430a      	orrs	r2, r1
 8001c92:	601a      	str	r2, [r3, #0]
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c94:	4b0b      	ldr	r3, [pc, #44]	; (8001cc4 <CORE_Init+0x40>)
 8001c96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c98:	4b0a      	ldr	r3, [pc, #40]	; (8001cc4 <CORE_Init+0x40>)
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_RCC_PWR_CLK_ENABLE();
 8001ca0:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <CORE_Init+0x40>)
 8001ca2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ca4:	4b07      	ldr	r3, [pc, #28]	; (8001cc4 <CORE_Init+0x40>)
 8001ca6:	2180      	movs	r1, #128	; 0x80
 8001ca8:	0549      	lsls	r1, r1, #21
 8001caa:	430a      	orrs	r2, r1
 8001cac:	639a      	str	r2, [r3, #56]	; 0x38

	CORE_InitSysTick();
 8001cae:	f000 f811 	bl	8001cd4 <CORE_InitSysTick>
	CORE_InitSysClk();
 8001cb2:	f000 f887 	bl	8001dc4 <CORE_InitSysClk>
	CORE_InitGPIO();
 8001cb6:	f000 f825 	bl	8001d04 <CORE_InitGPIO>
}
 8001cba:	46c0      	nop			; (mov r8, r8)
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40022000 	.word	0x40022000
 8001cc4:	40021000 	.word	0x40021000

08001cc8 <CORE_Idle>:

void CORE_Idle(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
	// As long as systick is on, this will at least return each millisecond.
	__WFI();
 8001ccc:	bf30      	wfi
}
 8001cce:	46c0      	nop			; (mov r8, r8)
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <CORE_InitSysTick>:
/*
 * PRIVATE FUNCTIONS
 */

void CORE_InitSysTick(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / CORE_SYSTICK_FREQ);
 8001cd8:	f7ff ffb4 	bl	8001c44 <HAL_RCC_GetHCLKFreq>
 8001cdc:	0002      	movs	r2, r0
 8001cde:	23fa      	movs	r3, #250	; 0xfa
 8001ce0:	0099      	lsls	r1, r3, #2
 8001ce2:	0010      	movs	r0, r2
 8001ce4:	f7fe fa10 	bl	8000108 <__udivsi3>
 8001ce8:	0003      	movs	r3, r0
 8001cea:	0018      	movs	r0, r3
 8001cec:	f7ff f8cb 	bl	8000e86 <HAL_SYSTICK_Config>
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	425b      	negs	r3, r3
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	0018      	movs	r0, r3
 8001cfa:	f7ff f89f 	bl	8000e3c <HAL_NVIC_SetPriority>
}
 8001cfe:	46c0      	nop			; (mov r8, r8)
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <CORE_InitGPIO>:

void CORE_InitGPIO(void)
{
 8001d04:	b590      	push	{r4, r7, lr}
 8001d06:	b089      	sub	sp, #36	; 0x24
 8001d08:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0a:	4b29      	ldr	r3, [pc, #164]	; (8001db0 <CORE_InitGPIO+0xac>)
 8001d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d0e:	4b28      	ldr	r3, [pc, #160]	; (8001db0 <CORE_InitGPIO+0xac>)
 8001d10:	2101      	movs	r1, #1
 8001d12:	430a      	orrs	r2, r1
 8001d14:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d16:	4b26      	ldr	r3, [pc, #152]	; (8001db0 <CORE_InitGPIO+0xac>)
 8001d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	60bb      	str	r3, [r7, #8]
 8001d20:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001d22:	4b23      	ldr	r3, [pc, #140]	; (8001db0 <CORE_InitGPIO+0xac>)
 8001d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d26:	4b22      	ldr	r3, [pc, #136]	; (8001db0 <CORE_InitGPIO+0xac>)
 8001d28:	2102      	movs	r1, #2
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d2e:	4b20      	ldr	r3, [pc, #128]	; (8001db0 <CORE_InitGPIO+0xac>)
 8001d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d32:	2202      	movs	r2, #2
 8001d34:	4013      	ands	r3, r2
 8001d36:	607b      	str	r3, [r7, #4]
 8001d38:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001d3a:	4b1d      	ldr	r3, [pc, #116]	; (8001db0 <CORE_InitGPIO+0xac>)
 8001d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d3e:	4b1c      	ldr	r3, [pc, #112]	; (8001db0 <CORE_InitGPIO+0xac>)
 8001d40:	2104      	movs	r1, #4
 8001d42:	430a      	orrs	r2, r1
 8001d44:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d46:	4b1a      	ldr	r3, [pc, #104]	; (8001db0 <CORE_InitGPIO+0xac>)
 8001d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4a:	2204      	movs	r2, #4
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	603b      	str	r3, [r7, #0]
 8001d50:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef gpio = {0};
 8001d52:	240c      	movs	r4, #12
 8001d54:	193b      	adds	r3, r7, r4
 8001d56:	0018      	movs	r0, r3
 8001d58:	2314      	movs	r3, #20
 8001d5a:	001a      	movs	r2, r3
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	f000 fbf5 	bl	800254c <memset>
	gpio.Mode = GPIO_MODE_ANALOG;
 8001d62:	193b      	adds	r3, r7, r4
 8001d64:	2203      	movs	r2, #3
 8001d66:	605a      	str	r2, [r3, #4]
	gpio.Pull = GPIO_NOPULL;
 8001d68:	193b      	adds	r3, r7, r4
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	609a      	str	r2, [r3, #8]

	// SWCLK and SWDIO on PA13, PA14
	gpio.Pin = GPIO_PIN_All & ~(GPIO_PIN_13 | GPIO_PIN_14);
 8001d6e:	193b      	adds	r3, r7, r4
 8001d70:	4a10      	ldr	r2, [pc, #64]	; (8001db4 <CORE_InitGPIO+0xb0>)
 8001d72:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(GPIOA, &gpio);
 8001d74:	193a      	adds	r2, r7, r4
 8001d76:	23a0      	movs	r3, #160	; 0xa0
 8001d78:	05db      	lsls	r3, r3, #23
 8001d7a:	0011      	movs	r1, r2
 8001d7c:	0018      	movs	r0, r3
 8001d7e:	f7ff f88f 	bl	8000ea0 <HAL_GPIO_Init>

	gpio.Pin = GPIO_PIN_All;
 8001d82:	193b      	adds	r3, r7, r4
 8001d84:	4a0c      	ldr	r2, [pc, #48]	; (8001db8 <CORE_InitGPIO+0xb4>)
 8001d86:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(GPIOB, &gpio);
 8001d88:	193b      	adds	r3, r7, r4
 8001d8a:	4a0c      	ldr	r2, [pc, #48]	; (8001dbc <CORE_InitGPIO+0xb8>)
 8001d8c:	0019      	movs	r1, r3
 8001d8e:	0010      	movs	r0, r2
 8001d90:	f7ff f886 	bl	8000ea0 <HAL_GPIO_Init>

	gpio.Pin = GPIO_PIN_All;
 8001d94:	193b      	adds	r3, r7, r4
 8001d96:	4a08      	ldr	r2, [pc, #32]	; (8001db8 <CORE_InitGPIO+0xb4>)
 8001d98:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(GPIOC, &gpio);
 8001d9a:	193b      	adds	r3, r7, r4
 8001d9c:	4a08      	ldr	r2, [pc, #32]	; (8001dc0 <CORE_InitGPIO+0xbc>)
 8001d9e:	0019      	movs	r1, r3
 8001da0:	0010      	movs	r0, r2
 8001da2:	f7ff f87d 	bl	8000ea0 <HAL_GPIO_Init>
}
 8001da6:	46c0      	nop			; (mov r8, r8)
 8001da8:	46bd      	mov	sp, r7
 8001daa:	b009      	add	sp, #36	; 0x24
 8001dac:	bd90      	pop	{r4, r7, pc}
 8001dae:	46c0      	nop			; (mov r8, r8)
 8001db0:	40021000 	.word	0x40021000
 8001db4:	00009fff 	.word	0x00009fff
 8001db8:	0000ffff 	.word	0x0000ffff
 8001dbc:	50000400 	.word	0x50000400
 8001dc0:	50000800 	.word	0x50000800

08001dc4 <CORE_InitSysClk>:

void CORE_InitSysClk(void)
{
 8001dc4:	b590      	push	{r4, r7, lr}
 8001dc6:	b093      	sub	sp, #76	; 0x4c
 8001dc8:	af00      	add	r7, sp, #0
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dca:	4b26      	ldr	r3, [pc, #152]	; (8001e64 <CORE_InitSysClk+0xa0>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a26      	ldr	r2, [pc, #152]	; (8001e68 <CORE_InitSysClk+0xa4>)
 8001dd0:	401a      	ands	r2, r3
 8001dd2:	4b24      	ldr	r3, [pc, #144]	; (8001e64 <CORE_InitSysClk+0xa0>)
 8001dd4:	2180      	movs	r1, #128	; 0x80
 8001dd6:	0109      	lsls	r1, r1, #4
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	601a      	str	r2, [r3, #0]

	RCC_OscInitTypeDef osc = {0};
 8001ddc:	2414      	movs	r4, #20
 8001dde:	193b      	adds	r3, r7, r4
 8001de0:	0018      	movs	r0, r3
 8001de2:	2334      	movs	r3, #52	; 0x34
 8001de4:	001a      	movs	r2, r3
 8001de6:	2100      	movs	r1, #0
 8001de8:	f000 fbb0 	bl	800254c <memset>
	osc.PLL.PLLState 		= RCC_PLL_ON;
	osc.PLL.PLLSource 		= RCC_PLLSOURCE_HSE;
	osc.PLL.PLLMUL 			= RCC_PLL_MUL2;
	osc.PLL.PLLDIV 			= RCC_PLL_DIV1;
#else
	osc.OscillatorType 		= RCC_OSCILLATORTYPE_HSI;
 8001dec:	0021      	movs	r1, r4
 8001dee:	187b      	adds	r3, r7, r1
 8001df0:	2202      	movs	r2, #2
 8001df2:	601a      	str	r2, [r3, #0]
	osc.HSIState 			= RCC_HSI_ON;
 8001df4:	187b      	adds	r3, r7, r1
 8001df6:	2201      	movs	r2, #1
 8001df8:	60da      	str	r2, [r3, #12]
	osc.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001dfa:	187b      	adds	r3, r7, r1
 8001dfc:	2210      	movs	r2, #16
 8001dfe:	611a      	str	r2, [r3, #16]
	osc.PLL.PLLState 		= RCC_PLL_ON;
 8001e00:	187b      	adds	r3, r7, r1
 8001e02:	2202      	movs	r2, #2
 8001e04:	625a      	str	r2, [r3, #36]	; 0x24
	osc.PLL.PLLSource 		= RCC_PLLSOURCE_HSI;
 8001e06:	187b      	adds	r3, r7, r1
 8001e08:	2200      	movs	r2, #0
 8001e0a:	629a      	str	r2, [r3, #40]	; 0x28
	osc.PLL.PLLMUL 			= RCC_PLL_MUL4;
 8001e0c:	187b      	adds	r3, r7, r1
 8001e0e:	2280      	movs	r2, #128	; 0x80
 8001e10:	02d2      	lsls	r2, r2, #11
 8001e12:	62da      	str	r2, [r3, #44]	; 0x2c
	osc.PLL.PLLDIV			= RCC_PLL_DIV2;
 8001e14:	187b      	adds	r3, r7, r1
 8001e16:	2280      	movs	r2, #128	; 0x80
 8001e18:	03d2      	lsls	r2, r2, #15
 8001e1a:	631a      	str	r2, [r3, #48]	; 0x30

#endif //CORE_USE_HSE
	HAL_RCC_OscConfig(&osc);
 8001e1c:	187b      	adds	r3, r7, r1
 8001e1e:	0018      	movs	r0, r3
 8001e20:	f7ff f9b4 	bl	800118c <HAL_RCC_OscConfig>

	RCC_ClkInitTypeDef clk = {0};
 8001e24:	003b      	movs	r3, r7
 8001e26:	0018      	movs	r0, r3
 8001e28:	2314      	movs	r3, #20
 8001e2a:	001a      	movs	r2, r3
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	f000 fb8d 	bl	800254c <memset>
	clk.ClockType 		= RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e32:	003b      	movs	r3, r7
 8001e34:	220f      	movs	r2, #15
 8001e36:	601a      	str	r2, [r3, #0]
	clk.SYSCLKSource 	= RCC_SYSCLKSOURCE_PLLCLK;
 8001e38:	003b      	movs	r3, r7
 8001e3a:	2203      	movs	r2, #3
 8001e3c:	605a      	str	r2, [r3, #4]
	clk.AHBCLKDivider 	= RCC_SYSCLK_DIV1;
 8001e3e:	003b      	movs	r3, r7
 8001e40:	2200      	movs	r2, #0
 8001e42:	609a      	str	r2, [r3, #8]
	clk.APB1CLKDivider 	= RCC_HCLK_DIV1;
 8001e44:	003b      	movs	r3, r7
 8001e46:	2200      	movs	r2, #0
 8001e48:	60da      	str	r2, [r3, #12]
	clk.APB2CLKDivider  = RCC_HCLK_DIV1;
 8001e4a:	003b      	movs	r3, r7
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	611a      	str	r2, [r3, #16]
	HAL_RCC_ClockConfig(&clk, FLASH_LATENCY_1);
 8001e50:	003b      	movs	r3, r7
 8001e52:	2101      	movs	r1, #1
 8001e54:	0018      	movs	r0, r3
 8001e56:	f7ff fd0b 	bl	8001870 <HAL_RCC_ClockConfig>
}
 8001e5a:	46c0      	nop			; (mov r8, r8)
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	b013      	add	sp, #76	; 0x4c
 8001e60:	bd90      	pop	{r4, r7, pc}
 8001e62:	46c0      	nop			; (mov r8, r8)
 8001e64:	40007000 	.word	0x40007000
 8001e68:	ffffe7ff 	.word	0xffffe7ff

08001e6c <HAL_GetTick>:
/*
 * CALLBACK FUNCTIONS
 */

uint32_t HAL_GetTick(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
	return gTicks;
 8001e70:	4b02      	ldr	r3, [pc, #8]	; (8001e7c <HAL_GetTick+0x10>)
 8001e72:	681b      	ldr	r3, [r3, #0]
}
 8001e74:	0018      	movs	r0, r3
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	46c0      	nop			; (mov r8, r8)
 8001e7c:	200000e8 	.word	0x200000e8

08001e80 <SysTick_Handler>:
/*
 * INTERRUPT ROUTINES
 */

void SysTick_Handler(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
	gTicks += MS_PER_SYSTICK;
 8001e84:	4b03      	ldr	r3, [pc, #12]	; (8001e94 <SysTick_Handler+0x14>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	1c5a      	adds	r2, r3, #1
 8001e8a:	4b02      	ldr	r3, [pc, #8]	; (8001e94 <SysTick_Handler+0x14>)
 8001e8c:	601a      	str	r2, [r3, #0]
	if (gTickCallback != NULL)
	{
		gTickCallback();
	}
#endif
}
 8001e8e:	46c0      	nop			; (mov r8, r8)
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	200000e8 	.word	0x200000e8

08001e98 <GPIO_Set>:
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
	gpio->BSRR = (uint32_t)pin;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	619a      	str	r2, [r3, #24]
}
 8001ea8:	46c0      	nop			; (mov r8, r8)
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	b002      	add	sp, #8
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <GPIO_Reset>:
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
	gpio->BRR = (uint32_t)pin;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ec0:	46c0      	nop			; (mov r8, r8)
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	b002      	add	sp, #8
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <GPIO_Write>:
/*
 * PUBLIC FUNCTIONS
 */

void GPIO_Write(GPIO_t * gpio, uint32_t pin, GPIO_PinState state)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	1dfb      	adds	r3, r7, #7
 8001ed4:	701a      	strb	r2, [r3, #0]
	if (state != GPIO_PIN_RESET)
 8001ed6:	1dfb      	adds	r3, r7, #7
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d006      	beq.n	8001eec <GPIO_Write+0x24>
	{
		GPIO_Set(gpio, pin);
 8001ede:	68ba      	ldr	r2, [r7, #8]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	0011      	movs	r1, r2
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	f7ff ffd7 	bl	8001e98 <GPIO_Set>
	}
	else
	{
		GPIO_Reset(gpio, pin);
	}
}
 8001eea:	e005      	b.n	8001ef8 <GPIO_Write+0x30>
		GPIO_Reset(gpio, pin);
 8001eec:	68ba      	ldr	r2, [r7, #8]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	0011      	movs	r1, r2
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	f7ff ffdc 	bl	8001eb0 <GPIO_Reset>
}
 8001ef8:	46c0      	nop			; (mov r8, r8)
 8001efa:	46bd      	mov	sp, r7
 8001efc:	b004      	add	sp, #16
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <GPIO_EnableOutput>:

void GPIO_EnableOutput(GPIO_t * gpio, uint32_t pin, GPIO_PinState state)
{
 8001f00:	b590      	push	{r4, r7, lr}
 8001f02:	b08b      	sub	sp, #44	; 0x2c
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	1dfb      	adds	r3, r7, #7
 8001f0c:	701a      	strb	r2, [r3, #0]
	GPIO_InitTypeDef init = {
 8001f0e:	2414      	movs	r4, #20
 8001f10:	193b      	adds	r3, r7, r4
 8001f12:	0018      	movs	r0, r3
 8001f14:	2314      	movs	r3, #20
 8001f16:	001a      	movs	r2, r3
 8001f18:	2100      	movs	r1, #0
 8001f1a:	f000 fb17 	bl	800254c <memset>
 8001f1e:	193b      	adds	r3, r7, r4
 8001f20:	68ba      	ldr	r2, [r7, #8]
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	193b      	adds	r3, r7, r4
 8001f26:	2201      	movs	r2, #1
 8001f28:	605a      	str	r2, [r3, #4]
	  .Mode = GPIO_MODE_OUTPUT_PP,
	  .Pin = pin,
	  .Pull = GPIO_NOPULL,
	  .Speed = GPIO_SPEED_LOW,
	};
	HAL_GPIO_Init(gpio, &init);
 8001f2a:	193a      	adds	r2, r7, r4
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	0011      	movs	r1, r2
 8001f30:	0018      	movs	r0, r3
 8001f32:	f7fe ffb5 	bl	8000ea0 <HAL_GPIO_Init>
	GPIO_Write(gpio, pin, state);
 8001f36:	1dfb      	adds	r3, r7, #7
 8001f38:	781a      	ldrb	r2, [r3, #0]
 8001f3a:	68b9      	ldr	r1, [r7, #8]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	0018      	movs	r0, r3
 8001f40:	f7ff ffc2 	bl	8001ec8 <GPIO_Write>
}
 8001f44:	46c0      	nop			; (mov r8, r8)
 8001f46:	46bd      	mov	sp, r7
 8001f48:	b00b      	add	sp, #44	; 0x2c
 8001f4a:	bd90      	pop	{r4, r7, pc}

08001f4c <GPIO_EnableIRQ>:
	HAL_GPIO_Init(gpio, &init);
}

#ifdef USE_GPIO_IRQS
void GPIO_EnableIRQ(GPIO_t * gpio, uint32_t pin, uint32_t pullup, GPIO_IT_Dir_t dir, VoidFunction_t callback)
{
 8001f4c:	b590      	push	{r4, r7, lr}
 8001f4e:	b08b      	sub	sp, #44	; 0x2c
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
 8001f58:	603b      	str	r3, [r7, #0]
	int n = 0;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24
	while ((pin & (1 << n)) == 0) { n++; }
 8001f5e:	e002      	b.n	8001f66 <GPIO_EnableIRQ+0x1a>
 8001f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f62:	3301      	adds	r3, #1
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24
 8001f66:	2201      	movs	r2, #1
 8001f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6a:	409a      	lsls	r2, r3
 8001f6c:	0013      	movs	r3, r2
 8001f6e:	001a      	movs	r2, r3
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	4013      	ands	r3, r2
 8001f74:	d0f4      	beq.n	8001f60 <GPIO_EnableIRQ+0x14>

	gCallback[n] = callback;
 8001f76:	4b14      	ldr	r3, [pc, #80]	; (8001fc8 <GPIO_EnableIRQ+0x7c>)
 8001f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f7a:	0092      	lsls	r2, r2, #2
 8001f7c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001f7e:	50d1      	str	r1, [r2, r3]

	GPIO_InitTypeDef init = {
 8001f80:	2410      	movs	r4, #16
 8001f82:	193b      	adds	r3, r7, r4
 8001f84:	0018      	movs	r0, r3
 8001f86:	2314      	movs	r3, #20
 8001f88:	001a      	movs	r2, r3
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	f000 fade 	bl	800254c <memset>
 8001f90:	0021      	movs	r1, r4
 8001f92:	187b      	adds	r3, r7, r1
 8001f94:	68ba      	ldr	r2, [r7, #8]
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	187b      	adds	r3, r7, r1
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	187b      	adds	r3, r7, r1
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	609a      	str	r2, [r3, #8]
 8001fa4:	187b      	adds	r3, r7, r1
 8001fa6:	2203      	movs	r2, #3
 8001fa8:	60da      	str	r2, [r3, #12]
	  .Mode = dir,
	  .Pin = pin,
	  .Pull = pullup,
	  .Speed = GPIO_SPEED_HIGH,
	};
	HAL_GPIO_Init(gpio, &init);
 8001faa:	187a      	adds	r2, r7, r1
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	0011      	movs	r1, r2
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	f7fe ff75 	bl	8000ea0 <HAL_GPIO_Init>
	EXTIx_EnableIRQn(n);
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	0018      	movs	r0, r3
 8001fba:	f000 f825 	bl	8002008 <EXTIx_EnableIRQn>
}
 8001fbe:	46c0      	nop			; (mov r8, r8)
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	b00b      	add	sp, #44	; 0x2c
 8001fc4:	bd90      	pop	{r4, r7, pc}
 8001fc6:	46c0      	nop			; (mov r8, r8)
 8001fc8:	20000014 	.word	0x20000014

08001fcc <EXTIx_IRQHandler>:
 * PRIVATE FUNCTIONS
 */

#ifdef USE_GPIO_IRQS
static inline void EXTIx_IRQHandler(int n)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
	if (__HAL_GPIO_EXTI_GET_IT(1 << n) != RESET)
 8001fd4:	4b0a      	ldr	r3, [pc, #40]	; (8002000 <EXTIx_IRQHandler+0x34>)
 8001fd6:	695b      	ldr	r3, [r3, #20]
 8001fd8:	2101      	movs	r1, #1
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	4091      	lsls	r1, r2
 8001fde:	000a      	movs	r2, r1
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	d009      	beq.n	8001ff8 <EXTIx_IRQHandler+0x2c>
	{
		__HAL_GPIO_EXTI_CLEAR_IT(1 << n);
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	409a      	lsls	r2, r3
 8001fea:	4b05      	ldr	r3, [pc, #20]	; (8002000 <EXTIx_IRQHandler+0x34>)
 8001fec:	615a      	str	r2, [r3, #20]
		gCallback[n]();
 8001fee:	4b05      	ldr	r3, [pc, #20]	; (8002004 <EXTIx_IRQHandler+0x38>)
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	0092      	lsls	r2, r2, #2
 8001ff4:	58d3      	ldr	r3, [r2, r3]
 8001ff6:	4798      	blx	r3
	}
}
 8001ff8:	46c0      	nop			; (mov r8, r8)
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	b002      	add	sp, #8
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40010400 	.word	0x40010400
 8002004:	20000014 	.word	0x20000014

08002008 <EXTIx_EnableIRQn>:

static void EXTIx_EnableIRQn(int n)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
	if (n <= 1)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b01      	cmp	r3, #1
 8002014:	dc03      	bgt.n	800201e <EXTIx_EnableIRQn+0x16>
	{
		HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8002016:	2005      	movs	r0, #5
 8002018:	f7fe ff25 	bl	8000e66 <HAL_NVIC_EnableIRQ>
	}
	else
	{
		HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
	}
}
 800201c:	e009      	b.n	8002032 <EXTIx_EnableIRQn+0x2a>
	else if (n <= 3)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2b03      	cmp	r3, #3
 8002022:	dc03      	bgt.n	800202c <EXTIx_EnableIRQn+0x24>
		HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8002024:	2006      	movs	r0, #6
 8002026:	f7fe ff1e 	bl	8000e66 <HAL_NVIC_EnableIRQ>
}
 800202a:	e002      	b.n	8002032 <EXTIx_EnableIRQn+0x2a>
		HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800202c:	2007      	movs	r0, #7
 800202e:	f7fe ff1a 	bl	8000e66 <HAL_NVIC_EnableIRQ>
}
 8002032:	46c0      	nop			; (mov r8, r8)
 8002034:	46bd      	mov	sp, r7
 8002036:	b002      	add	sp, #8
 8002038:	bd80      	pop	{r7, pc}

0800203a <EXTIx_DefaultHandler>:

static void EXTIx_DefaultHandler(void)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	af00      	add	r7, sp, #0
#ifdef DEBUG
	__BKPT();
 800203e:	be00      	bkpt	0x0000
#endif
}
 8002040:	46c0      	nop			; (mov r8, r8)
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <EXTI4_15_IRQHandler>:
#if    defined(USE_EXTI_4) || defined(USE_EXTI_5) || defined(USE_EXTI_6)   \
    || defined(USE_EXTI_7) || defined(USE_EXTI_8) || defined(USE_EXTI_9)   \
	|| defined(USE_EXTI_10) || defined(USE_EXTI_11) || defined(USE_EXTI_12)\
	|| defined(USE_EXTI_13) || defined(USE_EXTI_14) || defined(USE_EXTI_15)
void EXTI4_15_IRQHandler(void)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	af00      	add	r7, sp, #0
#endif
#ifdef USE_EXTI_7
	EXTIx_IRQHandler(7);
#endif
#ifdef USE_EXTI_8
	EXTIx_IRQHandler(8);
 800204a:	2008      	movs	r0, #8
 800204c:	f7ff ffbe 	bl	8001fcc <EXTIx_IRQHandler>
#endif
#ifdef USE_EXTI_9
	EXTIx_IRQHandler(9);
 8002050:	2009      	movs	r0, #9
 8002052:	f7ff ffbb 	bl	8001fcc <EXTIx_IRQHandler>
#endif
#ifdef USE_EXTI_10
	EXTIx_IRQHandler(10);
 8002056:	200a      	movs	r0, #10
 8002058:	f7ff ffb8 	bl	8001fcc <EXTIx_IRQHandler>
#endif
#ifdef USE_EXTI_14
	EXTIx_IRQHandler(14);
#endif
#ifdef USE_EXTI_15
	EXTIx_IRQHandler(15);
 800205c:	200f      	movs	r0, #15
 800205e:	f7ff ffb5 	bl	8001fcc <EXTIx_IRQHandler>
#endif
}
 8002062:	46c0      	nop			; (mov r8, r8)
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <TIM_Init>:
/*
 * PUBLIC FUNCTIONS
 */

void TIM_Init(TIM_t * tim, uint32_t freq, uint32_t reload)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
	TIMx_Init(tim);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	0018      	movs	r0, r3
 8002078:	f000 f97e 	bl	8002378 <TIMx_Init>

	uint32_t cr1 = tim->Instance->CR1;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	617b      	str	r3, [r7, #20]
	cr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS | TIM_CR1_CKD | TIM_CR1_ARPE);
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	4a0d      	ldr	r2, [pc, #52]	; (80020bc <TIM_Init+0x54>)
 8002088:	4013      	ands	r3, r2
 800208a:	617b      	str	r3, [r7, #20]
	cr1 |= TIM_AUTORELOAD_PRELOAD_ENABLE | TIM_CLOCKDIVISION_DIV1 | TIM_COUNTERMODE_UP;
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	2280      	movs	r2, #128	; 0x80
 8002090:	4313      	orrs	r3, r2
 8002092:	617b      	str	r3, [r7, #20]
	tim->Instance->CR1 = cr1;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	697a      	ldr	r2, [r7, #20]
 800209a:	601a      	str	r2, [r3, #0]

	TIM_SetFreq(tim, freq);
 800209c:	68ba      	ldr	r2, [r7, #8]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	0011      	movs	r1, r2
 80020a2:	0018      	movs	r0, r3
 80020a4:	f000 f80c 	bl	80020c0 <TIM_SetFreq>
	TIM_SetReload(tim, reload);
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	0011      	movs	r1, r2
 80020ae:	0018      	movs	r0, r3
 80020b0:	f000 f81d 	bl	80020ee <TIM_SetReload>
}
 80020b4:	46c0      	nop			; (mov r8, r8)
 80020b6:	46bd      	mov	sp, r7
 80020b8:	b006      	add	sp, #24
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	fffffc0f 	.word	0xfffffc0f

080020c0 <TIM_SetFreq>:

void TIM_SetFreq(TIM_t * tim, uint32_t freq)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
	uint32_t sysclk = HAL_RCC_GetPCLK1Freq();
 80020ca:	f7ff fdc5 	bl	8001c58 <HAL_RCC_GetPCLK1Freq>
 80020ce:	0003      	movs	r3, r0
 80020d0:	60fb      	str	r3, [r7, #12]
	tim->Instance->PSC = (sysclk / freq) - 1;
 80020d2:	6839      	ldr	r1, [r7, #0]
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	f7fe f817 	bl	8000108 <__udivsi3>
 80020da:	0003      	movs	r3, r0
 80020dc:	001a      	movs	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	3a01      	subs	r2, #1
 80020e4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020e6:	46c0      	nop			; (mov r8, r8)
 80020e8:	46bd      	mov	sp, r7
 80020ea:	b004      	add	sp, #16
 80020ec:	bd80      	pop	{r7, pc}

080020ee <TIM_SetReload>:

void TIM_SetReload(TIM_t * tim, uint32_t reload)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b082      	sub	sp, #8
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
 80020f6:	6039      	str	r1, [r7, #0]
	tim->Instance->ARR = reload;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002100:	46c0      	nop			; (mov r8, r8)
 8002102:	46bd      	mov	sp, r7
 8002104:	b002      	add	sp, #8
 8002106:	bd80      	pop	{r7, pc}

08002108 <TIM_OnReload>:

#ifdef USE_TIM_IRQS
void TIM_OnReload(TIM_t * tim, VoidFunction_t callback)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
	__HAL_TIM_ENABLE_IT(tim, TIM_IT_UPDATE);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68da      	ldr	r2, [r3, #12]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2101      	movs	r1, #1
 800211e:	430a      	orrs	r2, r1
 8002120:	60da      	str	r2, [r3, #12]
	tim->ReloadCallback = callback;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	605a      	str	r2, [r3, #4]
}
 8002128:	46c0      	nop			; (mov r8, r8)
 800212a:	46bd      	mov	sp, r7
 800212c:	b002      	add	sp, #8
 800212e:	bd80      	pop	{r7, pc}

08002130 <TIM_OnPulse>:

void TIM_OnPulse(TIM_t * tim, uint32_t ch, VoidFunction_t callback)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
	// WARN: This will fail horribly if ch is greater than 4.
	TIM_EnableOCx(tim, ch, TIM_OCMODE_ACTIVE);
 800213c:	68b9      	ldr	r1, [r7, #8]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2210      	movs	r2, #16
 8002142:	0018      	movs	r0, r3
 8002144:	f000 f876 	bl	8002234 <TIM_EnableOCx>
	// Note that the channels IT's are 1 << 1 through 1 << 4
	__HAL_TIM_ENABLE_IT(tim, TIM_IT_CC1 << ch);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68d9      	ldr	r1, [r3, #12]
 800214e:	2202      	movs	r2, #2
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	409a      	lsls	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	430a      	orrs	r2, r1
 800215a:	60da      	str	r2, [r3, #12]
	tim->PulseCallback[ch] = callback;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	68ba      	ldr	r2, [r7, #8]
 8002160:	3202      	adds	r2, #2
 8002162:	0092      	lsls	r2, r2, #2
 8002164:	6879      	ldr	r1, [r7, #4]
 8002166:	50d1      	str	r1, [r2, r3]
}
 8002168:	46c0      	nop			; (mov r8, r8)
 800216a:	46bd      	mov	sp, r7
 800216c:	b004      	add	sp, #16
 800216e:	bd80      	pop	{r7, pc}

08002170 <TIM_EnablePwm>:
#endif //USE_TIM_IRQS

void TIM_EnablePwm(TIM_t * tim, uint32_t ch, GPIO_t * gpio, uint32_t pin, uint32_t af)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08a      	sub	sp, #40	; 0x28
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
 800217c:	603b      	str	r3, [r7, #0]
	// TIM_CCMR1_OC1PE is the output compare preload
	TIM_EnableOCx(tim, ch, TIM_OCMODE_PWM1 | TIM_CCMR1_OC1PE | TIM_OCFAST_ENABLE);
 800217e:	68b9      	ldr	r1, [r7, #8]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	226c      	movs	r2, #108	; 0x6c
 8002184:	0018      	movs	r0, r3
 8002186:	f000 f855 	bl	8002234 <TIM_EnableOCx>

	GPIO_InitTypeDef init = {
 800218a:	2114      	movs	r1, #20
 800218c:	187b      	adds	r3, r7, r1
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	187b      	adds	r3, r7, r1
 8002194:	2202      	movs	r2, #2
 8002196:	605a      	str	r2, [r3, #4]
 8002198:	187b      	adds	r3, r7, r1
 800219a:	2200      	movs	r2, #0
 800219c:	609a      	str	r2, [r3, #8]
 800219e:	187b      	adds	r3, r7, r1
 80021a0:	2202      	movs	r2, #2
 80021a2:	60da      	str	r2, [r3, #12]
 80021a4:	187b      	adds	r3, r7, r1
 80021a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021a8:	611a      	str	r2, [r3, #16]
			.Pull = GPIO_NOPULL,
			.Speed = GPIO_SPEED_FREQ_HIGH,
			.Mode = GPIO_MODE_AF_PP,
			.Alternate = af,
	};
	HAL_GPIO_Init(gpio, &init);
 80021aa:	187a      	adds	r2, r7, r1
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	0011      	movs	r1, r2
 80021b0:	0018      	movs	r0, r3
 80021b2:	f7fe fe75 	bl	8000ea0 <HAL_GPIO_Init>
}
 80021b6:	46c0      	nop			; (mov r8, r8)
 80021b8:	46bd      	mov	sp, r7
 80021ba:	b00a      	add	sp, #40	; 0x28
 80021bc:	bd80      	pop	{r7, pc}

080021be <TIM_SetPulse>:


void TIM_SetPulse(TIM_t * tim, uint32_t ch, uint32_t pulse)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b084      	sub	sp, #16
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	60f8      	str	r0, [r7, #12]
 80021c6:	60b9      	str	r1, [r7, #8]
 80021c8:	607a      	str	r2, [r7, #4]
	switch (ch)
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d00a      	beq.n	80021e6 <TIM_SetPulse+0x28>
 80021d0:	d304      	bcc.n	80021dc <TIM_SetPulse+0x1e>
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d00c      	beq.n	80021f0 <TIM_SetPulse+0x32>
 80021d6:	2b03      	cmp	r3, #3
 80021d8:	d00f      	beq.n	80021fa <TIM_SetPulse+0x3c>
	case 3:
		tim->Instance->CCR4 = pulse;
		break;
	}

}
 80021da:	e013      	b.n	8002204 <TIM_SetPulse+0x46>
		tim->Instance->CCR1 = pulse;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80021e4:	e00e      	b.n	8002204 <TIM_SetPulse+0x46>
		tim->Instance->CCR2 = pulse;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 80021ee:	e009      	b.n	8002204 <TIM_SetPulse+0x46>
		tim->Instance->CCR3 = pulse;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 80021f8:	e004      	b.n	8002204 <TIM_SetPulse+0x46>
		tim->Instance->CCR4 = pulse;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8002202:	46c0      	nop			; (mov r8, r8)
}
 8002204:	46c0      	nop			; (mov r8, r8)
 8002206:	46bd      	mov	sp, r7
 8002208:	b004      	add	sp, #16
 800220a:	bd80      	pop	{r7, pc}

0800220c <TIM_Start>:

void TIM_Start(TIM_t * tim)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
	TIM_Reload(tim);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	0018      	movs	r0, r3
 8002218:	f000 f890 	bl	800233c <TIM_Reload>
	__HAL_TIM_ENABLE(tim);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2101      	movs	r1, #1
 8002228:	430a      	orrs	r2, r1
 800222a:	601a      	str	r2, [r3, #0]
}
 800222c:	46c0      	nop			; (mov r8, r8)
 800222e:	46bd      	mov	sp, r7
 8002230:	b002      	add	sp, #8
 8002232:	bd80      	pop	{r7, pc}

08002234 <TIM_EnableOCx>:
/*
 * PRIVATE FUNCTIONS
 */

static void TIM_EnableOCx(TIM_t * tim, uint32_t oc, uint32_t mode)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
	// Disable the channel during the update.
	TIM_DISABLE_CCx(tim, oc);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6a1a      	ldr	r2, [r3, #32]
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	2101      	movs	r1, #1
 800224c:	4099      	lsls	r1, r3
 800224e:	000b      	movs	r3, r1
 8002250:	43d9      	mvns	r1, r3
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	400a      	ands	r2, r1
 8002258:	621a      	str	r2, [r3, #32]
	switch (oc)
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d019      	beq.n	8002294 <TIM_EnableOCx+0x60>
 8002260:	d304      	bcc.n	800226c <TIM_EnableOCx+0x38>
 8002262:	2b02      	cmp	r3, #2
 8002264:	d02b      	beq.n	80022be <TIM_EnableOCx+0x8a>
 8002266:	2b03      	cmp	r3, #3
 8002268:	d03d      	beq.n	80022e6 <TIM_EnableOCx+0xb2>
 800226a:	e051      	b.n	8002310 <TIM_EnableOCx+0xdc>
	{
	case 0:
		MODIFY_REG(tim->Instance->CCMR1, TIM_CCMRx_MSK, mode);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	227f      	movs	r2, #127	; 0x7f
 8002274:	4393      	bics	r3, r2
 8002276:	0019      	movs	r1, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	430a      	orrs	r2, r1
 8002280:	619a      	str	r2, [r3, #24]
		MODIFY_REG(tim->Instance->CCER, TIM_CCER_CC1P, TIM_OCPOLARITY_HIGH);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	6a1a      	ldr	r2, [r3, #32]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2102      	movs	r1, #2
 800228e:	438a      	bics	r2, r1
 8002290:	621a      	str	r2, [r3, #32]
		break;
 8002292:	e03d      	b.n	8002310 <TIM_EnableOCx+0xdc>
	case 1:
		MODIFY_REG(tim->Instance->CCMR1, TIM_CCMRx_MSK << 8, mode << 8);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	4a25      	ldr	r2, [pc, #148]	; (8002330 <TIM_EnableOCx+0xfc>)
 800229c:	4013      	ands	r3, r2
 800229e:	0019      	movs	r1, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	021a      	lsls	r2, r3, #8
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	430a      	orrs	r2, r1
 80022aa:	619a      	str	r2, [r3, #24]
		MODIFY_REG(tim->Instance->CCER, TIM_CCER_CC2P, TIM_OCPOLARITY_HIGH << 4);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6a1a      	ldr	r2, [r3, #32]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2120      	movs	r1, #32
 80022b8:	438a      	bics	r2, r1
 80022ba:	621a      	str	r2, [r3, #32]
		break;
 80022bc:	e028      	b.n	8002310 <TIM_EnableOCx+0xdc>
	case 2:
		MODIFY_REG(tim->Instance->CCMR2, TIM_CCMRx_MSK, mode);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	69db      	ldr	r3, [r3, #28]
 80022c4:	227f      	movs	r2, #127	; 0x7f
 80022c6:	4393      	bics	r3, r2
 80022c8:	0019      	movs	r1, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	61da      	str	r2, [r3, #28]
		MODIFY_REG(tim->Instance->CCER, TIM_CCER_CC3P, TIM_OCPOLARITY_HIGH << 8);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	6a1a      	ldr	r2, [r3, #32]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4915      	ldr	r1, [pc, #84]	; (8002334 <TIM_EnableOCx+0x100>)
 80022e0:	400a      	ands	r2, r1
 80022e2:	621a      	str	r2, [r3, #32]
		break;
 80022e4:	e014      	b.n	8002310 <TIM_EnableOCx+0xdc>
	case 3:
		MODIFY_REG(tim->Instance->CCMR2, TIM_CCMRx_MSK << 8, mode << 8);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	69db      	ldr	r3, [r3, #28]
 80022ec:	4a10      	ldr	r2, [pc, #64]	; (8002330 <TIM_EnableOCx+0xfc>)
 80022ee:	4013      	ands	r3, r2
 80022f0:	0019      	movs	r1, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	021a      	lsls	r2, r3, #8
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	61da      	str	r2, [r3, #28]
		MODIFY_REG(tim->Instance->CCER, TIM_CCER_CC4P, TIM_OCPOLARITY_HIGH << 12);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6a1a      	ldr	r2, [r3, #32]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	490b      	ldr	r1, [pc, #44]	; (8002338 <TIM_EnableOCx+0x104>)
 800230a:	400a      	ands	r2, r1
 800230c:	621a      	str	r2, [r3, #32]
		break;
 800230e:	46c0      	nop			; (mov r8, r8)
	}
	TIM_ENABLE_CCx(tim, oc);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6a19      	ldr	r1, [r3, #32]
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	2201      	movs	r2, #1
 800231c:	409a      	lsls	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	430a      	orrs	r2, r1
 8002324:	621a      	str	r2, [r3, #32]
	//	MODIFY_REG(tmpcr2, TIM_CR2_OIS1 | TIM_CR2_OIS1N, TIM_OCIDLESTATE_SET | TIM_OCNIDLESTATE_SET);
	//	TIMx->CR2 = tmpcr2;
	//}


}
 8002326:	46c0      	nop			; (mov r8, r8)
 8002328:	46bd      	mov	sp, r7
 800232a:	b004      	add	sp, #16
 800232c:	bd80      	pop	{r7, pc}
 800232e:	46c0      	nop			; (mov r8, r8)
 8002330:	ffff80ff 	.word	0xffff80ff
 8002334:	fffffdff 	.word	0xfffffdff
 8002338:	ffffdfff 	.word	0xffffdfff

0800233c <TIM_Reload>:

static void TIM_Reload(TIM_t * tim)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
	// Disable all timer event sources.
	uint32_t itSources = tim->Instance->DIER;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	60fb      	str	r3, [r7, #12]
	tim->Instance->DIER = 0;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2200      	movs	r2, #0
 8002352:	60da      	str	r2, [r3, #12]

	// Update the prescalar
	tim->Instance->EGR = TIM_EGR_UG;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2201      	movs	r2, #1
 800235a:	615a      	str	r2, [r3, #20]

	// Clear the event before it occurrs.
	__HAL_TIM_CLEAR_IT(tim, TIM_IT_UPDATE);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2202      	movs	r2, #2
 8002362:	4252      	negs	r2, r2
 8002364:	611a      	str	r2, [r3, #16]
	tim->Instance->DIER = itSources;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	60da      	str	r2, [r3, #12]
}
 800236e:	46c0      	nop			; (mov r8, r8)
 8002370:	46bd      	mov	sp, r7
 8002372:	b004      	add	sp, #16
 8002374:	bd80      	pop	{r7, pc}
	...

08002378 <TIMx_Init>:

static void TIMx_Init(TIM_t * tim)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
		__HAL_RCC_TIM1_CLK_ENABLE();
	}

#endif
#ifdef USE_TIM2
	if (tim == TIM_2)
 8002380:	4b1d      	ldr	r3, [pc, #116]	; (80023f8 <TIMx_Init+0x80>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	429a      	cmp	r2, r3
 8002388:	d108      	bne.n	800239c <TIMx_Init+0x24>
	{
		HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800238a:	200f      	movs	r0, #15
 800238c:	f7fe fd6b 	bl	8000e66 <HAL_NVIC_EnableIRQ>
		__HAL_RCC_TIM2_CLK_ENABLE();
 8002390:	4b1a      	ldr	r3, [pc, #104]	; (80023fc <TIMx_Init+0x84>)
 8002392:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002394:	4b19      	ldr	r3, [pc, #100]	; (80023fc <TIMx_Init+0x84>)
 8002396:	2101      	movs	r1, #1
 8002398:	430a      	orrs	r2, r1
 800239a:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
		__HAL_RCC_TIM3_CLK_ENABLE();
	}
#endif
#ifdef USE_TIM6
	if (tim == TIM_6)
 800239c:	4b18      	ldr	r3, [pc, #96]	; (8002400 <TIMx_Init+0x88>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d108      	bne.n	80023b8 <TIMx_Init+0x40>
	{
		HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80023a6:	2011      	movs	r0, #17
 80023a8:	f7fe fd5d 	bl	8000e66 <HAL_NVIC_EnableIRQ>
		__HAL_RCC_TIM6_CLK_ENABLE();
 80023ac:	4b13      	ldr	r3, [pc, #76]	; (80023fc <TIMx_Init+0x84>)
 80023ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023b0:	4b12      	ldr	r3, [pc, #72]	; (80023fc <TIMx_Init+0x84>)
 80023b2:	2110      	movs	r1, #16
 80023b4:	430a      	orrs	r2, r1
 80023b6:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_NVIC_EnableIRQ(TIM17_IRQn);
		__HAL_RCC_TIM17_CLK_ENABLE();
	}
#endif
#ifdef USE_TIM21
	if (tim == TIM_21)
 80023b8:	4b12      	ldr	r3, [pc, #72]	; (8002404 <TIMx_Init+0x8c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d108      	bne.n	80023d4 <TIMx_Init+0x5c>
	{
		HAL_NVIC_EnableIRQ(TIM21_IRQn);
 80023c2:	2014      	movs	r0, #20
 80023c4:	f7fe fd4f 	bl	8000e66 <HAL_NVIC_EnableIRQ>
		__HAL_RCC_TIM21_CLK_ENABLE();
 80023c8:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <TIMx_Init+0x84>)
 80023ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023cc:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <TIMx_Init+0x84>)
 80023ce:	2104      	movs	r1, #4
 80023d0:	430a      	orrs	r2, r1
 80023d2:	635a      	str	r2, [r3, #52]	; 0x34
	}
#endif
#ifdef USE_TIM22
	if (tim == TIM_22)
 80023d4:	4b0c      	ldr	r3, [pc, #48]	; (8002408 <TIMx_Init+0x90>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d108      	bne.n	80023f0 <TIMx_Init+0x78>
	{
		HAL_NVIC_EnableIRQ(TIM22_IRQn);
 80023de:	2016      	movs	r0, #22
 80023e0:	f7fe fd41 	bl	8000e66 <HAL_NVIC_EnableIRQ>
		__HAL_RCC_TIM22_CLK_ENABLE();
 80023e4:	4b05      	ldr	r3, [pc, #20]	; (80023fc <TIMx_Init+0x84>)
 80023e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023e8:	4b04      	ldr	r3, [pc, #16]	; (80023fc <TIMx_Init+0x84>)
 80023ea:	2120      	movs	r1, #32
 80023ec:	430a      	orrs	r2, r1
 80023ee:	635a      	str	r2, [r3, #52]	; 0x34
	}
#endif
}
 80023f0:	46c0      	nop			; (mov r8, r8)
 80023f2:	46bd      	mov	sp, r7
 80023f4:	b002      	add	sp, #8
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	2000006c 	.word	0x2000006c
 80023fc:	40021000 	.word	0x40021000
 8002400:	20000088 	.word	0x20000088
 8002404:	200000a4 	.word	0x200000a4
 8002408:	200000c0 	.word	0x200000c0

0800240c <TIM_IRQHandler>:
 */

#ifdef USE_TIM_IRQS

static void TIM_IRQHandler(TIM_t * tim)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
	uint32_t irqs = TIM_GET_IRQ_SOURCES(tim);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	691a      	ldr	r2, [r3, #16]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	4013      	ands	r3, r2
 8002422:	60fb      	str	r3, [r7, #12]
	if(irqs & TIM_FLAG_CC1)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2202      	movs	r2, #2
 8002428:	4013      	ands	r3, r2
 800242a:	d007      	beq.n	800243c <TIM_IRQHandler+0x30>
	{
		__HAL_TIM_CLEAR_IT(tim, TIM_IT_CC1);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2203      	movs	r2, #3
 8002432:	4252      	negs	r2, r2
 8002434:	611a      	str	r2, [r3, #16]
		tim->PulseCallback[0]();
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	4798      	blx	r3
	}
	if(irqs & TIM_FLAG_CC2)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2204      	movs	r2, #4
 8002440:	4013      	ands	r3, r2
 8002442:	d007      	beq.n	8002454 <TIM_IRQHandler+0x48>
	{
		__HAL_TIM_CLEAR_IT(tim, TIM_IT_CC2);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2205      	movs	r2, #5
 800244a:	4252      	negs	r2, r2
 800244c:	611a      	str	r2, [r3, #16]
		tim->PulseCallback[1]();
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	4798      	blx	r3
	}
	if(irqs & TIM_FLAG_CC3)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2208      	movs	r2, #8
 8002458:	4013      	ands	r3, r2
 800245a:	d007      	beq.n	800246c <TIM_IRQHandler+0x60>
	{
		__HAL_TIM_CLEAR_IT(tim, TIM_IT_CC3);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2209      	movs	r2, #9
 8002462:	4252      	negs	r2, r2
 8002464:	611a      	str	r2, [r3, #16]
		tim->PulseCallback[2]();
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	4798      	blx	r3
	}
	if(irqs & TIM_FLAG_CC4)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2210      	movs	r2, #16
 8002470:	4013      	ands	r3, r2
 8002472:	d007      	beq.n	8002484 <TIM_IRQHandler+0x78>
	{
		__HAL_TIM_CLEAR_IT(tim, TIM_IT_CC4);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2211      	movs	r2, #17
 800247a:	4252      	negs	r2, r2
 800247c:	611a      	str	r2, [r3, #16]
		tim->PulseCallback[3]();
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	4798      	blx	r3
	}
	if(irqs & TIM_FLAG_UPDATE)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2201      	movs	r2, #1
 8002488:	4013      	ands	r3, r2
 800248a:	d007      	beq.n	800249c <TIM_IRQHandler+0x90>
	{
		__HAL_TIM_CLEAR_IT(tim, TIM_IT_UPDATE);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2202      	movs	r2, #2
 8002492:	4252      	negs	r2, r2
 8002494:	611a      	str	r2, [r3, #16]
		tim->ReloadCallback();
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	4798      	blx	r3
	}
}
 800249c:	46c0      	nop			; (mov r8, r8)
 800249e:	46bd      	mov	sp, r7
 80024a0:	b004      	add	sp, #16
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <TIM2_IRQHandler>:
	TIM_IRQHandler(TIM_1);
}
#endif
#ifdef USE_TIM2
void TIM2_IRQHandler(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
	TIM_IRQHandler(TIM_2);
 80024a8:	4b03      	ldr	r3, [pc, #12]	; (80024b8 <TIM2_IRQHandler+0x14>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	0018      	movs	r0, r3
 80024ae:	f7ff ffad 	bl	800240c <TIM_IRQHandler>
}
 80024b2:	46c0      	nop			; (mov r8, r8)
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	2000006c 	.word	0x2000006c

080024bc <TIM6_IRQHandler>:
	TIM_IRQHandler(TIM_3);
}
#endif
#ifdef USE_TIM6
void TIM6_IRQHandler(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
	TIM_IRQHandler(TIM_6);
 80024c0:	4b03      	ldr	r3, [pc, #12]	; (80024d0 <TIM6_IRQHandler+0x14>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	0018      	movs	r0, r3
 80024c6:	f7ff ffa1 	bl	800240c <TIM_IRQHandler>
}
 80024ca:	46c0      	nop			; (mov r8, r8)
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	20000088 	.word	0x20000088

080024d4 <TIM21_IRQHandler>:
	TIM_IRQHandler(TIM_17);
}
#endif
#ifdef USE_TIM21
void TIM21_IRQHandler(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
	TIM_IRQHandler(TIM_21);
 80024d8:	4b03      	ldr	r3, [pc, #12]	; (80024e8 <TIM21_IRQHandler+0x14>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	0018      	movs	r0, r3
 80024de:	f7ff ff95 	bl	800240c <TIM_IRQHandler>
}
 80024e2:	46c0      	nop			; (mov r8, r8)
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	200000a4 	.word	0x200000a4

080024ec <TIM22_IRQHandler>:
#endif
#ifdef USE_TIM22
void TIM22_IRQHandler(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
	TIM_IRQHandler(TIM_22);
 80024f0:	4b03      	ldr	r3, [pc, #12]	; (8002500 <TIM22_IRQHandler+0x14>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	0018      	movs	r0, r3
 80024f6:	f7ff ff89 	bl	800240c <TIM_IRQHandler>
}
 80024fa:	46c0      	nop			; (mov r8, r8)
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	200000c0 	.word	0x200000c0

08002504 <__libc_init_array>:
 8002504:	b570      	push	{r4, r5, r6, lr}
 8002506:	2600      	movs	r6, #0
 8002508:	4d0c      	ldr	r5, [pc, #48]	; (800253c <__libc_init_array+0x38>)
 800250a:	4c0d      	ldr	r4, [pc, #52]	; (8002540 <__libc_init_array+0x3c>)
 800250c:	1b64      	subs	r4, r4, r5
 800250e:	10a4      	asrs	r4, r4, #2
 8002510:	42a6      	cmp	r6, r4
 8002512:	d109      	bne.n	8002528 <__libc_init_array+0x24>
 8002514:	2600      	movs	r6, #0
 8002516:	f000 f821 	bl	800255c <_init>
 800251a:	4d0a      	ldr	r5, [pc, #40]	; (8002544 <__libc_init_array+0x40>)
 800251c:	4c0a      	ldr	r4, [pc, #40]	; (8002548 <__libc_init_array+0x44>)
 800251e:	1b64      	subs	r4, r4, r5
 8002520:	10a4      	asrs	r4, r4, #2
 8002522:	42a6      	cmp	r6, r4
 8002524:	d105      	bne.n	8002532 <__libc_init_array+0x2e>
 8002526:	bd70      	pop	{r4, r5, r6, pc}
 8002528:	00b3      	lsls	r3, r6, #2
 800252a:	58eb      	ldr	r3, [r5, r3]
 800252c:	4798      	blx	r3
 800252e:	3601      	adds	r6, #1
 8002530:	e7ee      	b.n	8002510 <__libc_init_array+0xc>
 8002532:	00b3      	lsls	r3, r6, #2
 8002534:	58eb      	ldr	r3, [r5, r3]
 8002536:	4798      	blx	r3
 8002538:	3601      	adds	r6, #1
 800253a:	e7f2      	b.n	8002522 <__libc_init_array+0x1e>
 800253c:	080025a0 	.word	0x080025a0
 8002540:	080025a0 	.word	0x080025a0
 8002544:	080025a0 	.word	0x080025a0
 8002548:	080025a4 	.word	0x080025a4

0800254c <memset>:
 800254c:	0003      	movs	r3, r0
 800254e:	1812      	adds	r2, r2, r0
 8002550:	4293      	cmp	r3, r2
 8002552:	d100      	bne.n	8002556 <memset+0xa>
 8002554:	4770      	bx	lr
 8002556:	7019      	strb	r1, [r3, #0]
 8002558:	3301      	adds	r3, #1
 800255a:	e7f9      	b.n	8002550 <memset+0x4>

0800255c <_init>:
 800255c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800255e:	46c0      	nop			; (mov r8, r8)
 8002560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002562:	bc08      	pop	{r3}
 8002564:	469e      	mov	lr, r3
 8002566:	4770      	bx	lr

08002568 <_fini>:
 8002568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800256a:	46c0      	nop			; (mov r8, r8)
 800256c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800256e:	bc08      	pop	{r3}
 8002570:	469e      	mov	lr, r3
 8002572:	4770      	bx	lr
