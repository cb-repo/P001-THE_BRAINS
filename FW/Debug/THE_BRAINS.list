
THE_BRAINS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000252c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080025ec  080025ec  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080025ec  080025ec  00020190  2**0
                  CONTENTS
  4 .ARM          00000000  080025ec  080025ec  00020190  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025ec  080025ec  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025ec  080025ec  000125ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025f0  080025f0  000125f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  080025f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  20000190  08002784  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  08002784  00020274  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008d48  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000220e  00000000  00000000  00028f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d0  00000000  00000000  0002b110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006b8  00000000  00000000  0002b8e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014d20  00000000  00000000  0002bf98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b5b0  00000000  00000000  00040cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ef2e  00000000  00000000  0004c268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cb196  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018f0  00000000  00000000  000cb1ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000190 	.word	0x20000190
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080025d4 	.word	0x080025d4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000194 	.word	0x20000194
 8000104:	080025d4 	.word	0x080025d4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <GPIO_EnableInput>:
 * INLINE FUNCTION DEFINITIONS
 */

// Init calls
static inline void GPIO_EnableInput(GPIO_t * gpio, uint32_t pin, GPIO_Pull_t pull)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	60f8      	str	r0, [r7, #12]
 80003fc:	60b9      	str	r1, [r7, #8]
 80003fe:	1dfb      	adds	r3, r7, #7
 8000400:	701a      	strb	r2, [r3, #0]
	GPIO_Init(gpio, pin, GPIO_Mode_Input | pull);
 8000402:	1dfb      	adds	r3, r7, #7
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	b29a      	uxth	r2, r3
 8000408:	68b9      	ldr	r1, [r7, #8]
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	0018      	movs	r0, r3
 800040e:	f001 fc2f 	bl	8001c70 <GPIO_Init>
}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	46bd      	mov	sp, r7
 8000416:	b004      	add	sp, #16
 8000418:	bd80      	pop	{r7, pc}

0800041a <GPIO_Deinit>:

static inline void GPIO_Deinit(GPIO_t * gpio, uint32_t pin)
{
 800041a:	b580      	push	{r7, lr}
 800041c:	b082      	sub	sp, #8
 800041e:	af00      	add	r7, sp, #0
 8000420:	6078      	str	r0, [r7, #4]
 8000422:	6039      	str	r1, [r7, #0]
	GPIO_Init(gpio, pin, GPIO_Mode_Analog);
 8000424:	6839      	ldr	r1, [r7, #0]
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	2203      	movs	r2, #3
 800042a:	0018      	movs	r0, r3
 800042c:	f001 fc20 	bl	8001c70 <GPIO_Init>
}
 8000430:	46c0      	nop			; (mov r8, r8)
 8000432:	46bd      	mov	sp, r7
 8000434:	b002      	add	sp, #8
 8000436:	bd80      	pop	{r7, pc}

08000438 <GPIO_Read>:
{
	gpio->BRR = (uint32_t)pin;
}

static inline GPIO_State_t GPIO_Read(GPIO_t * gpio, uint32_t pin)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
 8000440:	6039      	str	r1, [r7, #0]
	return ((gpio->IDR & pin) > 0);
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	691b      	ldr	r3, [r3, #16]
 8000446:	683a      	ldr	r2, [r7, #0]
 8000448:	4013      	ands	r3, r2
 800044a:	1e5a      	subs	r2, r3, #1
 800044c:	4193      	sbcs	r3, r2
 800044e:	b2db      	uxtb	r3, r3
}
 8000450:	0018      	movs	r0, r3
 8000452:	46bd      	mov	sp, r7
 8000454:	b002      	add	sp, #8
 8000456:	bd80      	pop	{r7, pc}

08000458 <CONFIG_Init>:
/*
 * PUBLIC FUNCTIONS
 */

void CONFIG_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
	EEPROM_Read(CONFIG_OFFSET, &config, sizeof(config));
 800045c:	4b14      	ldr	r3, [pc, #80]	; (80004b0 <CONFIG_Init+0x58>)
 800045e:	2204      	movs	r2, #4
 8000460:	0019      	movs	r1, r3
 8000462:	2000      	movs	r0, #0
 8000464:	f001 fb6e 	bl	8001b44 <EEPROM_Read>

	GPIO_EnableInput(CALIBRATE_GPIO, CALIBRATE_PIN, GPIO_Pull_Up);
 8000468:	23a0      	movs	r3, #160	; 0xa0
 800046a:	05db      	lsls	r3, r3, #23
 800046c:	2210      	movs	r2, #16
 800046e:	2108      	movs	r1, #8
 8000470:	0018      	movs	r0, r3
 8000472:	f7ff ffbf 	bl	80003f4 <GPIO_EnableInput>
	CORE_Delay(10);
 8000476:	200a      	movs	r0, #10
 8000478:	f001 fac8 	bl	8001a0c <CORE_Delay>
	if (GPIO_Read(CALIBRATE_GPIO, CALIBRATE_PIN) == false)
 800047c:	23a0      	movs	r3, #160	; 0xa0
 800047e:	05db      	lsls	r3, r3, #23
 8000480:	2108      	movs	r1, #8
 8000482:	0018      	movs	r0, r3
 8000484:	f7ff ffd8 	bl	8000438 <GPIO_Read>
 8000488:	0003      	movs	r3, r0
 800048a:	001a      	movs	r2, r3
 800048c:	2301      	movs	r3, #1
 800048e:	4053      	eors	r3, r2
 8000490:	b2db      	uxtb	r3, r3
 8000492:	2b00      	cmp	r3, #0
 8000494:	d002      	beq.n	800049c <CONFIG_Init+0x44>
	{
		configSetFlag = true;
 8000496:	4b07      	ldr	r3, [pc, #28]	; (80004b4 <CONFIG_Init+0x5c>)
 8000498:	2201      	movs	r2, #1
 800049a:	701a      	strb	r2, [r3, #0]
	}
	GPIO_Deinit(CALIBRATE_GPIO, CALIBRATE_PIN);
 800049c:	23a0      	movs	r3, #160	; 0xa0
 800049e:	05db      	lsls	r3, r3, #23
 80004a0:	2108      	movs	r1, #8
 80004a2:	0018      	movs	r0, r3
 80004a4:	f7ff ffb9 	bl	800041a <GPIO_Deinit>
}
 80004a8:	46c0      	nop			; (mov r8, r8)
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	20000260 	.word	0x20000260
 80004b4:	200001ac 	.word	0x200001ac

080004b8 <CONFIG_Set>:


void CONFIG_Set(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0

}
 80004bc:	46c0      	nop			; (mov r8, r8)
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}

080004c2 <GPIO_EnableOutput>:
{
 80004c2:	b580      	push	{r7, lr}
 80004c4:	b084      	sub	sp, #16
 80004c6:	af00      	add	r7, sp, #0
 80004c8:	60f8      	str	r0, [r7, #12]
 80004ca:	60b9      	str	r1, [r7, #8]
 80004cc:	1dfb      	adds	r3, r7, #7
 80004ce:	701a      	strb	r2, [r3, #0]
	GPIO_Write(gpio, pin, state);
 80004d0:	1dfb      	adds	r3, r7, #7
 80004d2:	781a      	ldrb	r2, [r3, #0]
 80004d4:	68b9      	ldr	r1, [r7, #8]
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	0018      	movs	r0, r3
 80004da:	f001 fb63 	bl	8001ba4 <GPIO_Write>
	GPIO_Init(gpio, pin, GPIO_Mode_Output);
 80004de:	68b9      	ldr	r1, [r7, #8]
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	2201      	movs	r2, #1
 80004e4:	0018      	movs	r0, r3
 80004e6:	f001 fbc3 	bl	8001c70 <GPIO_Init>
}
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	46bd      	mov	sp, r7
 80004ee:	b004      	add	sp, #16
 80004f0:	bd80      	pop	{r7, pc}

080004f2 <GPIO_Read>:
{
 80004f2:	b580      	push	{r7, lr}
 80004f4:	b082      	sub	sp, #8
 80004f6:	af00      	add	r7, sp, #0
 80004f8:	6078      	str	r0, [r7, #4]
 80004fa:	6039      	str	r1, [r7, #0]
	return ((gpio->IDR & pin) > 0);
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	691b      	ldr	r3, [r3, #16]
 8000500:	683a      	ldr	r2, [r7, #0]
 8000502:	4013      	ands	r3, r2
 8000504:	1e5a      	subs	r2, r3, #1
 8000506:	4193      	sbcs	r3, r2
 8000508:	b2db      	uxtb	r3, r3
}
 800050a:	0018      	movs	r0, r3
 800050c:	46bd      	mov	sp, r7
 800050e:	b002      	add	sp, #8
 8000510:	bd80      	pop	{r7, pc}
	...

08000514 <LED_Init>:
 * PUBLIC FUNCTIONS
 */


void LED_Init (void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	GPIO_EnableOutput(LED_STATUS_GPIO, LED_STATUS_PIN, false);
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	01db      	lsls	r3, r3, #7
 800051c:	4807      	ldr	r0, [pc, #28]	; (800053c <LED_Init+0x28>)
 800051e:	2200      	movs	r2, #0
 8000520:	0019      	movs	r1, r3
 8000522:	f7ff ffce 	bl	80004c2 <GPIO_EnableOutput>
	GPIO_EnableOutput(LED_FAULT_GPIO, LED_FAULT_PIN, false);
 8000526:	23a0      	movs	r3, #160	; 0xa0
 8000528:	05db      	lsls	r3, r3, #23
 800052a:	2200      	movs	r2, #0
 800052c:	2101      	movs	r1, #1
 800052e:	0018      	movs	r0, r3
 8000530:	f7ff ffc7 	bl	80004c2 <GPIO_EnableOutput>
}
 8000534:	46c0      	nop			; (mov r8, r8)
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	50000800 	.word	0x50000800

08000540 <LED_GreenON>:

void LED_GreenON (void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	GPIO_Write(LED_STATUS_GPIO, LED_STATUS_PIN, true);
 8000544:	2380      	movs	r3, #128	; 0x80
 8000546:	01db      	lsls	r3, r3, #7
 8000548:	4803      	ldr	r0, [pc, #12]	; (8000558 <LED_GreenON+0x18>)
 800054a:	2201      	movs	r2, #1
 800054c:	0019      	movs	r1, r3
 800054e:	f001 fb29 	bl	8001ba4 <GPIO_Write>
}
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	50000800 	.word	0x50000800

0800055c <LED_RedON>:

void LED_RedON (void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
	GPIO_Write(LED_FAULT_GPIO, LED_FAULT_PIN, true);
 8000560:	23a0      	movs	r3, #160	; 0xa0
 8000562:	05db      	lsls	r3, r3, #23
 8000564:	2201      	movs	r2, #1
 8000566:	2101      	movs	r1, #1
 8000568:	0018      	movs	r0, r3
 800056a:	f001 fb1b 	bl	8001ba4 <GPIO_Write>
}
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}

08000574 <LED_GreenOFF>:

void LED_GreenOFF (void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	GPIO_Write(LED_STATUS_GPIO, LED_STATUS_PIN, false);
 8000578:	2380      	movs	r3, #128	; 0x80
 800057a:	01db      	lsls	r3, r3, #7
 800057c:	4803      	ldr	r0, [pc, #12]	; (800058c <LED_GreenOFF+0x18>)
 800057e:	2200      	movs	r2, #0
 8000580:	0019      	movs	r1, r3
 8000582:	f001 fb0f 	bl	8001ba4 <GPIO_Write>
}
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	50000800 	.word	0x50000800

08000590 <LED_RedOFF>:

void LED_RedOFF (void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	GPIO_Write(LED_FAULT_GPIO, LED_FAULT_PIN, false);
 8000594:	23a0      	movs	r3, #160	; 0xa0
 8000596:	05db      	lsls	r3, r3, #23
 8000598:	2200      	movs	r2, #0
 800059a:	2101      	movs	r1, #1
 800059c:	0018      	movs	r0, r3
 800059e:	f001 fb01 	bl	8001ba4 <GPIO_Write>
}
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <LED_GreenState>:

bool LED_GreenState (void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	return GPIO_Read(LED_STATUS_GPIO, LED_STATUS_PIN);
 80005ac:	2380      	movs	r3, #128	; 0x80
 80005ae:	01db      	lsls	r3, r3, #7
 80005b0:	4a04      	ldr	r2, [pc, #16]	; (80005c4 <LED_GreenState+0x1c>)
 80005b2:	0019      	movs	r1, r3
 80005b4:	0010      	movs	r0, r2
 80005b6:	f7ff ff9c 	bl	80004f2 <GPIO_Read>
 80005ba:	0003      	movs	r3, r0
}
 80005bc:	0018      	movs	r0, r3
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	50000800 	.word	0x50000800

080005c8 <GPIO_EnableOutput>:
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	60f8      	str	r0, [r7, #12]
 80005d0:	60b9      	str	r1, [r7, #8]
 80005d2:	1dfb      	adds	r3, r7, #7
 80005d4:	701a      	strb	r2, [r3, #0]
	GPIO_Write(gpio, pin, state);
 80005d6:	1dfb      	adds	r3, r7, #7
 80005d8:	781a      	ldrb	r2, [r3, #0]
 80005da:	68b9      	ldr	r1, [r7, #8]
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	0018      	movs	r0, r3
 80005e0:	f001 fae0 	bl	8001ba4 <GPIO_Write>
	GPIO_Init(gpio, pin, GPIO_Mode_Output);
 80005e4:	68b9      	ldr	r1, [r7, #8]
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	2201      	movs	r2, #1
 80005ea:	0018      	movs	r0, r3
 80005ec:	f001 fb40 	bl	8001c70 <GPIO_Init>
}
 80005f0:	46c0      	nop			; (mov r8, r8)
 80005f2:	46bd      	mov	sp, r7
 80005f4:	b004      	add	sp, #16
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <MOTOR_Init>:
/*
 * PUBLIC FUNCTIONS
 */

void MOTOR_Init (void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af02      	add	r7, sp, #8
	TIM_Init(TIM_MOTOR, TIM_MOTOR_FREQ, TIM_MOTOR_RELOAD);
 80005fe:	4b24      	ldr	r3, [pc, #144]	; (8000690 <MOTOR_Init+0x98>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4924      	ldr	r1, [pc, #144]	; (8000694 <MOTOR_Init+0x9c>)
 8000604:	22ff      	movs	r2, #255	; 0xff
 8000606:	0018      	movs	r0, r3
 8000608:	f001 fcce 	bl	8001fa8 <TIM_Init>

	GPIO_EnableOutput(MOTOR_LMODE_GPIO, MOTOR_LMODE_PIN, MODE_BRAKE);
 800060c:	2380      	movs	r3, #128	; 0x80
 800060e:	005b      	lsls	r3, r3, #1
 8000610:	4821      	ldr	r0, [pc, #132]	; (8000698 <MOTOR_Init+0xa0>)
 8000612:	2200      	movs	r2, #0
 8000614:	0019      	movs	r1, r3
 8000616:	f7ff ffd7 	bl	80005c8 <GPIO_EnableOutput>
	GPIO_EnableOutput(MOTOR_RMODE_GPIO, MOTOR_RMODE_PIN, MODE_BRAKE);
 800061a:	4b1f      	ldr	r3, [pc, #124]	; (8000698 <MOTOR_Init+0xa0>)
 800061c:	2200      	movs	r2, #0
 800061e:	2104      	movs	r1, #4
 8000620:	0018      	movs	r0, r3
 8000622:	f7ff ffd1 	bl	80005c8 <GPIO_EnableOutput>

	TIM_EnablePwm(TIM_MOTOR, MOTOR_LPWM1_CH, MOTOR_LPWM1_GPIO, MOTOR_LPWM1_PIN, TIM_MOTOR_AF5);
 8000626:	4b1a      	ldr	r3, [pc, #104]	; (8000690 <MOTOR_Init+0x98>)
 8000628:	6818      	ldr	r0, [r3, #0]
 800062a:	2380      	movs	r3, #128	; 0x80
 800062c:	021b      	lsls	r3, r3, #8
 800062e:	22a0      	movs	r2, #160	; 0xa0
 8000630:	05d2      	lsls	r2, r2, #23
 8000632:	2105      	movs	r1, #5
 8000634:	9100      	str	r1, [sp, #0]
 8000636:	2100      	movs	r1, #0
 8000638:	f001 fd41 	bl	80020be <TIM_EnablePwm>
	TIM_EnablePwm(TIM_MOTOR, MOTOR_LPWM2_CH, MOTOR_LPWM2_GPIO, MOTOR_LPWM2_PIN, TIM_MOTOR_AF2);
 800063c:	4b14      	ldr	r3, [pc, #80]	; (8000690 <MOTOR_Init+0x98>)
 800063e:	6818      	ldr	r0, [r3, #0]
 8000640:	4a15      	ldr	r2, [pc, #84]	; (8000698 <MOTOR_Init+0xa0>)
 8000642:	2302      	movs	r3, #2
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2308      	movs	r3, #8
 8000648:	2101      	movs	r1, #1
 800064a:	f001 fd38 	bl	80020be <TIM_EnablePwm>
	TIM_EnablePwm(TIM_MOTOR, MOTOR_RPWM1_CH, MOTOR_RPWM1_GPIO, MOTOR_RPWM1_PIN, TIM_MOTOR_AF2);
 800064e:	4b10      	ldr	r3, [pc, #64]	; (8000690 <MOTOR_Init+0x98>)
 8000650:	6818      	ldr	r0, [r3, #0]
 8000652:	2380      	movs	r3, #128	; 0x80
 8000654:	00db      	lsls	r3, r3, #3
 8000656:	4910      	ldr	r1, [pc, #64]	; (8000698 <MOTOR_Init+0xa0>)
 8000658:	2202      	movs	r2, #2
 800065a:	9200      	str	r2, [sp, #0]
 800065c:	000a      	movs	r2, r1
 800065e:	2102      	movs	r1, #2
 8000660:	f001 fd2d 	bl	80020be <TIM_EnablePwm>
	TIM_EnablePwm(TIM_MOTOR, MOTOR_RPWM2_CH, MOTOR_RPWM2_GPIO, MOTOR_RPWM2_PIN, TIM_MOTOR_AF2);
 8000664:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <MOTOR_Init+0x98>)
 8000666:	6818      	ldr	r0, [r3, #0]
 8000668:	2380      	movs	r3, #128	; 0x80
 800066a:	011b      	lsls	r3, r3, #4
 800066c:	490a      	ldr	r1, [pc, #40]	; (8000698 <MOTOR_Init+0xa0>)
 800066e:	2202      	movs	r2, #2
 8000670:	9200      	str	r2, [sp, #0]
 8000672:	000a      	movs	r2, r1
 8000674:	2103      	movs	r1, #3
 8000676:	f001 fd22 	bl	80020be <TIM_EnablePwm>

	MOTOR_Stop();
 800067a:	f000 f80f 	bl	800069c <MOTOR_Stop>
	TIM_Start(TIM_MOTOR);
 800067e:	4b04      	ldr	r3, [pc, #16]	; (8000690 <MOTOR_Init+0x98>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	0018      	movs	r0, r3
 8000684:	f001 fd64 	bl	8002150 <TIM_Start>
}
 8000688:	46c0      	nop			; (mov r8, r8)
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	20000020 	.word	0x20000020
 8000694:	004e2000 	.word	0x004e2000
 8000698:	50000400 	.word	0x50000400

0800069c <MOTOR_Stop>:
	GPIO_Deinit(MOTOR_RPWM2_GPIO, MOTOR_RPWM2_PIN);
	TIM_Deinit(TIM_MOTOR);
}

void MOTOR_Stop (void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	MOTOR_M1_Update(MOTOR_OFF);
 80006a0:	2000      	movs	r0, #0
 80006a2:	f000 f853 	bl	800074c <MOTOR_M1_Update>
	MOTOR_M2_Update(MOTOR_OFF);
 80006a6:	2000      	movs	r0, #0
 80006a8:	f000 f898 	bl	80007dc <MOTOR_M2_Update>
}
 80006ac:	46c0      	nop			; (mov r8, r8)
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <MOTOR_Update>:
//	{
//	}
//}

void MOTOR_Update (int32_t M1, int32_t M2)
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	b082      	sub	sp, #8
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	6078      	str	r0, [r7, #4]
 80006ba:	6039      	str	r1, [r7, #0]
	MOTOR_M1_Update(M1);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	0018      	movs	r0, r3
 80006c0:	f000 f844 	bl	800074c <MOTOR_M1_Update>
	MOTOR_M2_Update(M2);
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	0018      	movs	r0, r3
 80006c8:	f000 f888 	bl	80007dc <MOTOR_M2_Update>
}
 80006cc:	46c0      	nop			; (mov r8, r8)
 80006ce:	46bd      	mov	sp, r7
 80006d0:	b002      	add	sp, #8
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <MOTOR_M1_Brake>:
	MOTOR_M1_Brake();
	MOTOR_M2_Brake();
}

void MOTOR_M1_Brake (void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
	GPIO_Write(MOTOR_LMODE_GPIO, MOTOR_LMODE_PIN, MODE_BRAKE);
 80006d8:	2380      	movs	r3, #128	; 0x80
 80006da:	005b      	lsls	r3, r3, #1
 80006dc:	480a      	ldr	r0, [pc, #40]	; (8000708 <MOTOR_M1_Brake+0x34>)
 80006de:	2200      	movs	r2, #0
 80006e0:	0019      	movs	r1, r3
 80006e2:	f001 fa5f 	bl	8001ba4 <GPIO_Write>
	TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM1_CH, PWM_BRAKE);
 80006e6:	4b09      	ldr	r3, [pc, #36]	; (800070c <MOTOR_M1_Brake+0x38>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	2201      	movs	r2, #1
 80006ec:	2100      	movs	r1, #0
 80006ee:	0018      	movs	r0, r3
 80006f0:	f001 fd00 	bl	80020f4 <TIM_SetPulse>
	TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM2_CH, PWM_BRAKE);
 80006f4:	4b05      	ldr	r3, [pc, #20]	; (800070c <MOTOR_M1_Brake+0x38>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2201      	movs	r2, #1
 80006fa:	2101      	movs	r1, #1
 80006fc:	0018      	movs	r0, r3
 80006fe:	f001 fcf9 	bl	80020f4 <TIM_SetPulse>
}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	50000400 	.word	0x50000400
 800070c:	20000020 	.word	0x20000020

08000710 <MOTOR_M2_Brake>:

void MOTOR_M2_Brake (void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	GPIO_Write(MOTOR_RMODE_GPIO, MOTOR_RMODE_PIN, MODE_BRAKE);
 8000714:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <MOTOR_M2_Brake+0x34>)
 8000716:	2200      	movs	r2, #0
 8000718:	2104      	movs	r1, #4
 800071a:	0018      	movs	r0, r3
 800071c:	f001 fa42 	bl	8001ba4 <GPIO_Write>
	TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM1_CH, PWM_BRAKE);
 8000720:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MOTOR_M2_Brake+0x38>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2201      	movs	r2, #1
 8000726:	2102      	movs	r1, #2
 8000728:	0018      	movs	r0, r3
 800072a:	f001 fce3 	bl	80020f4 <TIM_SetPulse>
	TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM2_CH, PWM_BRAKE);
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MOTOR_M2_Brake+0x38>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2201      	movs	r2, #1
 8000734:	2103      	movs	r1, #3
 8000736:	0018      	movs	r0, r3
 8000738:	f001 fcdc 	bl	80020f4 <TIM_SetPulse>
}
 800073c:	46c0      	nop			; (mov r8, r8)
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	50000400 	.word	0x50000400
 8000748:	20000020 	.word	0x20000020

0800074c <MOTOR_M1_Update>:
	TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM1_CH, PWM_COAST);
	TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM2_CH, PWM_COAST);
}

void MOTOR_M1_Update (int32_t throttle)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
	bool reverse = false;
 8000754:	210f      	movs	r1, #15
 8000756:	187b      	adds	r3, r7, r1
 8000758:	2200      	movs	r2, #0
 800075a:	701a      	strb	r2, [r3, #0]

	// Check if reversing
	if (throttle < 0) {
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2b00      	cmp	r3, #0
 8000760:	da05      	bge.n	800076e <MOTOR_M1_Update+0x22>
		reverse = true;
 8000762:	187b      	adds	r3, r7, r1
 8000764:	2201      	movs	r2, #1
 8000766:	701a      	strb	r2, [r3, #0]
		throttle = -throttle;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	425b      	negs	r3, r3
 800076c:	607b      	str	r3, [r7, #4]
	}

	// Clamp maximum speed
	if (throttle > MOTOR_MAX) {
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	2380      	movs	r3, #128	; 0x80
 8000772:	005b      	lsls	r3, r3, #1
 8000774:	429a      	cmp	r2, r3
 8000776:	dd02      	ble.n	800077e <MOTOR_M1_Update+0x32>
		throttle = MOTOR_MAX;
 8000778:	2380      	movs	r3, #128	; 0x80
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	607b      	str	r3, [r7, #4]
	}

	if (throttle <= MOTOR_OFF + MOTOR_STALL) {
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	2b32      	cmp	r3, #50	; 0x32
 8000782:	dc02      	bgt.n	800078a <MOTOR_M1_Update+0x3e>
		if (MOTOR_BRAKE) {
			MOTOR_M1_Brake();
 8000784:	f7ff ffa6 	bl	80006d4 <MOTOR_M1_Brake>
		TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM2_CH, throttle);
	} else {
		TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM1_CH, throttle);
		TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM2_CH, 0);
	}
}
 8000788:	e021      	b.n	80007ce <MOTOR_M1_Update+0x82>
	} else if (reverse) {
 800078a:	230f      	movs	r3, #15
 800078c:	18fb      	adds	r3, r7, r3
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d00e      	beq.n	80007b2 <MOTOR_M1_Update+0x66>
		TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM1_CH, 0);
 8000794:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <MOTOR_M1_Update+0x8c>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	2200      	movs	r2, #0
 800079a:	2100      	movs	r1, #0
 800079c:	0018      	movs	r0, r3
 800079e:	f001 fca9 	bl	80020f4 <TIM_SetPulse>
		TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM2_CH, throttle);
 80007a2:	4b0d      	ldr	r3, [pc, #52]	; (80007d8 <MOTOR_M1_Update+0x8c>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	2101      	movs	r1, #1
 80007aa:	0018      	movs	r0, r3
 80007ac:	f001 fca2 	bl	80020f4 <TIM_SetPulse>
}
 80007b0:	e00d      	b.n	80007ce <MOTOR_M1_Update+0x82>
		TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM1_CH, throttle);
 80007b2:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <MOTOR_M1_Update+0x8c>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	2100      	movs	r1, #0
 80007ba:	0018      	movs	r0, r3
 80007bc:	f001 fc9a 	bl	80020f4 <TIM_SetPulse>
		TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM2_CH, 0);
 80007c0:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <MOTOR_M1_Update+0x8c>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2200      	movs	r2, #0
 80007c6:	2101      	movs	r1, #1
 80007c8:	0018      	movs	r0, r3
 80007ca:	f001 fc93 	bl	80020f4 <TIM_SetPulse>
}
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	46bd      	mov	sp, r7
 80007d2:	b004      	add	sp, #16
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	20000020 	.word	0x20000020

080007dc <MOTOR_M2_Update>:

void MOTOR_M2_Update (int32_t throttle)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	bool reverse = false;
 80007e4:	210f      	movs	r1, #15
 80007e6:	187b      	adds	r3, r7, r1
 80007e8:	2200      	movs	r2, #0
 80007ea:	701a      	strb	r2, [r3, #0]

	// Check if reversing
	if (throttle < 0) {
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	da05      	bge.n	80007fe <MOTOR_M2_Update+0x22>
		reverse = true;
 80007f2:	187b      	adds	r3, r7, r1
 80007f4:	2201      	movs	r2, #1
 80007f6:	701a      	strb	r2, [r3, #0]
		throttle = -throttle;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	425b      	negs	r3, r3
 80007fc:	607b      	str	r3, [r7, #4]
	}

	// Clamp maximum speed
	if (throttle > MOTOR_MAX) {
 80007fe:	687a      	ldr	r2, [r7, #4]
 8000800:	2380      	movs	r3, #128	; 0x80
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	429a      	cmp	r2, r3
 8000806:	dd02      	ble.n	800080e <MOTOR_M2_Update+0x32>
		throttle = MOTOR_MAX;
 8000808:	2380      	movs	r3, #128	; 0x80
 800080a:	005b      	lsls	r3, r3, #1
 800080c:	607b      	str	r3, [r7, #4]
	}

	if (throttle <= MOTOR_OFF + MOTOR_STALL) {
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	2b32      	cmp	r3, #50	; 0x32
 8000812:	dc02      	bgt.n	800081a <MOTOR_M2_Update+0x3e>
		if (MOTOR_BRAKE) {
			MOTOR_M2_Brake();
 8000814:	f7ff ff7c 	bl	8000710 <MOTOR_M2_Brake>
		TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM2_CH, throttle);
	} else {
		TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM1_CH, throttle);
		TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM2_CH, 0);
	}
}
 8000818:	e021      	b.n	800085e <MOTOR_M2_Update+0x82>
	} else if (reverse) {
 800081a:	230f      	movs	r3, #15
 800081c:	18fb      	adds	r3, r7, r3
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d00e      	beq.n	8000842 <MOTOR_M2_Update+0x66>
		TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM1_CH, 0);
 8000824:	4b10      	ldr	r3, [pc, #64]	; (8000868 <MOTOR_M2_Update+0x8c>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2200      	movs	r2, #0
 800082a:	2102      	movs	r1, #2
 800082c:	0018      	movs	r0, r3
 800082e:	f001 fc61 	bl	80020f4 <TIM_SetPulse>
		TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM2_CH, throttle);
 8000832:	4b0d      	ldr	r3, [pc, #52]	; (8000868 <MOTOR_M2_Update+0x8c>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	2103      	movs	r1, #3
 800083a:	0018      	movs	r0, r3
 800083c:	f001 fc5a 	bl	80020f4 <TIM_SetPulse>
}
 8000840:	e00d      	b.n	800085e <MOTOR_M2_Update+0x82>
		TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM1_CH, throttle);
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MOTOR_M2_Update+0x8c>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	687a      	ldr	r2, [r7, #4]
 8000848:	2102      	movs	r1, #2
 800084a:	0018      	movs	r0, r3
 800084c:	f001 fc52 	bl	80020f4 <TIM_SetPulse>
		TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM2_CH, 0);
 8000850:	4b05      	ldr	r3, [pc, #20]	; (8000868 <MOTOR_M2_Update+0x8c>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	2200      	movs	r2, #0
 8000856:	2103      	movs	r1, #3
 8000858:	0018      	movs	r0, r3
 800085a:	f001 fc4b 	bl	80020f4 <TIM_SetPulse>
}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	46bd      	mov	sp, r7
 8000862:	b004      	add	sp, #16
 8000864:	bd80      	pop	{r7, pc}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	20000020 	.word	0x20000020

0800086c <GPIO_Read>:
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	6039      	str	r1, [r7, #0]
	return ((gpio->IDR & pin) > 0);
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	691b      	ldr	r3, [r3, #16]
 800087a:	683a      	ldr	r2, [r7, #0]
 800087c:	4013      	ands	r3, r2
 800087e:	1e5a      	subs	r2, r3, #1
 8000880:	4193      	sbcs	r3, r2
 8000882:	b2db      	uxtb	r3, r3
}
 8000884:	0018      	movs	r0, r3
 8000886:	46bd      	mov	sp, r7
 8000888:	b002      	add	sp, #8
 800088a:	bd80      	pop	{r7, pc}

0800088c <TIM_Read>:
/*
 * INLINE FUNCTION DEFINITIONS
 */

static inline uint32_t TIM_Read(TIM_t * tim)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	return tim->Instance->CNT;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800089a:	0018      	movs	r0, r3
 800089c:	46bd      	mov	sp, r7
 800089e:	b002      	add	sp, #8
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <CORE_GetTick>:
/*
 * INLINE FUNCTION DEFINITIONS
 */

static inline uint32_t CORE_GetTick(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
	return gTicks;
 80008a8:	4b02      	ldr	r3, [pc, #8]	; (80008b4 <CORE_GetTick+0x10>)
 80008aa:	681b      	ldr	r3, [r3, #0]
}
 80008ac:	0018      	movs	r0, r3
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	2000021c 	.word	0x2000021c

080008b8 <RADIO_Init>:
/*
 * PUBLIC FUNCTIONS
 */

void RADIO_Init (void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
	TIM_Init(TIM_RADIO, TIM_RADIO_FREQ, TIM_RADIO_RELOAD);
 80008bc:	4b16      	ldr	r3, [pc, #88]	; (8000918 <RADIO_Init+0x60>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a16      	ldr	r2, [pc, #88]	; (800091c <RADIO_Init+0x64>)
 80008c2:	4917      	ldr	r1, [pc, #92]	; (8000920 <RADIO_Init+0x68>)
 80008c4:	0018      	movs	r0, r3
 80008c6:	f001 fb6f 	bl	8001fa8 <TIM_Init>
	TIM_Start(TIM_RADIO);
 80008ca:	4b13      	ldr	r3, [pc, #76]	; (8000918 <RADIO_Init+0x60>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	0018      	movs	r0, r3
 80008d0:	f001 fc3e 	bl	8002150 <TIM_Start>
	GPIO_OnChange(RADIO_S1_GPIO, RADIO_S1_PIN, GPIO_IT_Both, RADIO_SPWM1_IRQ);
 80008d4:	4b13      	ldr	r3, [pc, #76]	; (8000924 <RADIO_Init+0x6c>)
 80008d6:	2280      	movs	r2, #128	; 0x80
 80008d8:	00d1      	lsls	r1, r2, #3
 80008da:	22a0      	movs	r2, #160	; 0xa0
 80008dc:	05d0      	lsls	r0, r2, #23
 80008de:	2203      	movs	r2, #3
 80008e0:	f001 f99a 	bl	8001c18 <GPIO_OnChange>
	GPIO_OnChange(RADIO_S2_GPIO, RADIO_S2_PIN, GPIO_IT_Both, RADIO_SPWM2_IRQ);
 80008e4:	4b10      	ldr	r3, [pc, #64]	; (8000928 <RADIO_Init+0x70>)
 80008e6:	2280      	movs	r2, #128	; 0x80
 80008e8:	0091      	lsls	r1, r2, #2
 80008ea:	22a0      	movs	r2, #160	; 0xa0
 80008ec:	05d0      	lsls	r0, r2, #23
 80008ee:	2203      	movs	r2, #3
 80008f0:	f001 f992 	bl	8001c18 <GPIO_OnChange>
	GPIO_OnChange(RADIO_S3_GPIO, RADIO_S3_PIN, GPIO_IT_Both, RADIO_SPWM3_IRQ);
 80008f4:	4b0d      	ldr	r3, [pc, #52]	; (800092c <RADIO_Init+0x74>)
 80008f6:	2280      	movs	r2, #128	; 0x80
 80008f8:	0051      	lsls	r1, r2, #1
 80008fa:	22a0      	movs	r2, #160	; 0xa0
 80008fc:	05d0      	lsls	r0, r2, #23
 80008fe:	2203      	movs	r2, #3
 8000900:	f001 f98a 	bl	8001c18 <GPIO_OnChange>
	GPIO_OnChange(RADIO_S4_GPIO, RADIO_S4_PIN, GPIO_IT_Both, RADIO_SPWM4_IRQ);
 8000904:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <RADIO_Init+0x78>)
 8000906:	2280      	movs	r2, #128	; 0x80
 8000908:	0211      	lsls	r1, r2, #8
 800090a:	480a      	ldr	r0, [pc, #40]	; (8000934 <RADIO_Init+0x7c>)
 800090c:	2203      	movs	r2, #3
 800090e:	f001 f983 	bl	8001c18 <GPIO_OnChange>
}
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	2000003c 	.word	0x2000003c
 800091c:	0000ffff 	.word	0x0000ffff
 8000920:	000f4240 	.word	0x000f4240
 8000924:	08000939 	.word	0x08000939
 8000928:	080009c5 	.word	0x080009c5
 800092c:	08000a51 	.word	0x08000a51
 8000930:	08000add 	.word	0x08000add
 8000934:	50000400 	.word	0x50000400

08000938 <RADIO_SPWM1_IRQ>:
/*
 * INTERRUPT ROUTINES
 */

void RADIO_SPWM1_IRQ (void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
	uint16_t now = TIM_Read(TIM_RADIO);
 800093e:	4b1c      	ldr	r3, [pc, #112]	; (80009b0 <RADIO_SPWM1_IRQ+0x78>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	0018      	movs	r0, r3
 8000944:	f7ff ffa2 	bl	800088c <TIM_Read>
 8000948:	0002      	movs	r2, r0
 800094a:	1dbb      	adds	r3, r7, #6
 800094c:	801a      	strh	r2, [r3, #0]
	uint16_t pulse = 0;
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	2200      	movs	r2, #0
 8000952:	801a      	strh	r2, [r3, #0]
	static uint16_t tick;

	if (GPIO_Read(RADIO_S1_GPIO, RADIO_S1_PIN))
 8000954:	2380      	movs	r3, #128	; 0x80
 8000956:	00da      	lsls	r2, r3, #3
 8000958:	23a0      	movs	r3, #160	; 0xa0
 800095a:	05db      	lsls	r3, r3, #23
 800095c:	0011      	movs	r1, r2
 800095e:	0018      	movs	r0, r3
 8000960:	f7ff ff84 	bl	800086c <GPIO_Read>
 8000964:	1e03      	subs	r3, r0, #0
 8000966:	d004      	beq.n	8000972 <RADIO_SPWM1_IRQ+0x3a>
	{
		tick = now;
 8000968:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <RADIO_SPWM1_IRQ+0x7c>)
 800096a:	1dba      	adds	r2, r7, #6
 800096c:	8812      	ldrh	r2, [r2, #0]
 800096e:	801a      	strh	r2, [r3, #0]
		{
			inputS1 = pulse;
			inputHeartbeat = CORE_GetTick();
		}
	}
}
 8000970:	e01a      	b.n	80009a8 <RADIO_SPWM1_IRQ+0x70>
		pulse = now - tick;
 8000972:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <RADIO_SPWM1_IRQ+0x7c>)
 8000974:	881a      	ldrh	r2, [r3, #0]
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	1db9      	adds	r1, r7, #6
 800097a:	8809      	ldrh	r1, [r1, #0]
 800097c:	1a8a      	subs	r2, r1, r2
 800097e:	801a      	strh	r2, [r3, #0]
		if (pulse <= (RADIO_MAX + RADIO_THRESH) && pulse >= (RADIO_MIN - RADIO_THRESH))
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	881b      	ldrh	r3, [r3, #0]
 8000984:	4a0c      	ldr	r2, [pc, #48]	; (80009b8 <RADIO_SPWM1_IRQ+0x80>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d80e      	bhi.n	80009a8 <RADIO_SPWM1_IRQ+0x70>
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	881a      	ldrh	r2, [r3, #0]
 800098e:	23fa      	movs	r3, #250	; 0xfa
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	429a      	cmp	r2, r3
 8000994:	d308      	bcc.n	80009a8 <RADIO_SPWM1_IRQ+0x70>
			inputS1 = pulse;
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <RADIO_SPWM1_IRQ+0x84>)
 8000998:	1d3a      	adds	r2, r7, #4
 800099a:	8812      	ldrh	r2, [r2, #0]
 800099c:	801a      	strh	r2, [r3, #0]
			inputHeartbeat = CORE_GetTick();
 800099e:	f7ff ff81 	bl	80008a4 <CORE_GetTick>
 80009a2:	0002      	movs	r2, r0
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <RADIO_SPWM1_IRQ+0x88>)
 80009a6:	601a      	str	r2, [r3, #0]
}
 80009a8:	46c0      	nop			; (mov r8, r8)
 80009aa:	46bd      	mov	sp, r7
 80009ac:	b002      	add	sp, #8
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	2000003c 	.word	0x2000003c
 80009b4:	200001b4 	.word	0x200001b4
 80009b8:	000009c4 	.word	0x000009c4
 80009bc:	20000000 	.word	0x20000000
 80009c0:	200001b0 	.word	0x200001b0

080009c4 <RADIO_SPWM2_IRQ>:

void RADIO_SPWM2_IRQ (void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
	uint16_t now = TIM_Read(TIM_RADIO);
 80009ca:	4b1c      	ldr	r3, [pc, #112]	; (8000a3c <RADIO_SPWM2_IRQ+0x78>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	0018      	movs	r0, r3
 80009d0:	f7ff ff5c 	bl	800088c <TIM_Read>
 80009d4:	0002      	movs	r2, r0
 80009d6:	1dbb      	adds	r3, r7, #6
 80009d8:	801a      	strh	r2, [r3, #0]
	uint16_t pulse = 0;
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	2200      	movs	r2, #0
 80009de:	801a      	strh	r2, [r3, #0]
	static uint16_t tick;

	if (GPIO_Read(RADIO_S2_GPIO, RADIO_S2_PIN))
 80009e0:	2380      	movs	r3, #128	; 0x80
 80009e2:	009a      	lsls	r2, r3, #2
 80009e4:	23a0      	movs	r3, #160	; 0xa0
 80009e6:	05db      	lsls	r3, r3, #23
 80009e8:	0011      	movs	r1, r2
 80009ea:	0018      	movs	r0, r3
 80009ec:	f7ff ff3e 	bl	800086c <GPIO_Read>
 80009f0:	1e03      	subs	r3, r0, #0
 80009f2:	d004      	beq.n	80009fe <RADIO_SPWM2_IRQ+0x3a>
	{
		tick = now;
 80009f4:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <RADIO_SPWM2_IRQ+0x7c>)
 80009f6:	1dba      	adds	r2, r7, #6
 80009f8:	8812      	ldrh	r2, [r2, #0]
 80009fa:	801a      	strh	r2, [r3, #0]
		{
			inputS2 = pulse;
			inputHeartbeat = CORE_GetTick();
		}
	}
}
 80009fc:	e01a      	b.n	8000a34 <RADIO_SPWM2_IRQ+0x70>
		pulse = now - tick;
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <RADIO_SPWM2_IRQ+0x7c>)
 8000a00:	881a      	ldrh	r2, [r3, #0]
 8000a02:	1d3b      	adds	r3, r7, #4
 8000a04:	1db9      	adds	r1, r7, #6
 8000a06:	8809      	ldrh	r1, [r1, #0]
 8000a08:	1a8a      	subs	r2, r1, r2
 8000a0a:	801a      	strh	r2, [r3, #0]
		if (pulse <= (RADIO_MAX + RADIO_THRESH) && pulse >= (RADIO_MIN - RADIO_THRESH))
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	881b      	ldrh	r3, [r3, #0]
 8000a10:	4a0c      	ldr	r2, [pc, #48]	; (8000a44 <RADIO_SPWM2_IRQ+0x80>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d80e      	bhi.n	8000a34 <RADIO_SPWM2_IRQ+0x70>
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	881a      	ldrh	r2, [r3, #0]
 8000a1a:	23fa      	movs	r3, #250	; 0xfa
 8000a1c:	005b      	lsls	r3, r3, #1
 8000a1e:	429a      	cmp	r2, r3
 8000a20:	d308      	bcc.n	8000a34 <RADIO_SPWM2_IRQ+0x70>
			inputS2 = pulse;
 8000a22:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <RADIO_SPWM2_IRQ+0x84>)
 8000a24:	1d3a      	adds	r2, r7, #4
 8000a26:	8812      	ldrh	r2, [r2, #0]
 8000a28:	801a      	strh	r2, [r3, #0]
			inputHeartbeat = CORE_GetTick();
 8000a2a:	f7ff ff3b 	bl	80008a4 <CORE_GetTick>
 8000a2e:	0002      	movs	r2, r0
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <RADIO_SPWM2_IRQ+0x88>)
 8000a32:	601a      	str	r2, [r3, #0]
}
 8000a34:	46c0      	nop			; (mov r8, r8)
 8000a36:	46bd      	mov	sp, r7
 8000a38:	b002      	add	sp, #8
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	2000003c 	.word	0x2000003c
 8000a40:	200001b6 	.word	0x200001b6
 8000a44:	000009c4 	.word	0x000009c4
 8000a48:	20000002 	.word	0x20000002
 8000a4c:	200001b0 	.word	0x200001b0

08000a50 <RADIO_SPWM3_IRQ>:

void RADIO_SPWM3_IRQ (void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
	uint16_t now = TIM_Read(TIM_RADIO);
 8000a56:	4b1c      	ldr	r3, [pc, #112]	; (8000ac8 <RADIO_SPWM3_IRQ+0x78>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f7ff ff16 	bl	800088c <TIM_Read>
 8000a60:	0002      	movs	r2, r0
 8000a62:	1dbb      	adds	r3, r7, #6
 8000a64:	801a      	strh	r2, [r3, #0]
	uint16_t pulse = 0;
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	2200      	movs	r2, #0
 8000a6a:	801a      	strh	r2, [r3, #0]
	static uint16_t tick;

	if (GPIO_Read(RADIO_S3_GPIO, RADIO_S3_PIN))
 8000a6c:	2380      	movs	r3, #128	; 0x80
 8000a6e:	005a      	lsls	r2, r3, #1
 8000a70:	23a0      	movs	r3, #160	; 0xa0
 8000a72:	05db      	lsls	r3, r3, #23
 8000a74:	0011      	movs	r1, r2
 8000a76:	0018      	movs	r0, r3
 8000a78:	f7ff fef8 	bl	800086c <GPIO_Read>
 8000a7c:	1e03      	subs	r3, r0, #0
 8000a7e:	d004      	beq.n	8000a8a <RADIO_SPWM3_IRQ+0x3a>
	{
		tick = now;
 8000a80:	4b12      	ldr	r3, [pc, #72]	; (8000acc <RADIO_SPWM3_IRQ+0x7c>)
 8000a82:	1dba      	adds	r2, r7, #6
 8000a84:	8812      	ldrh	r2, [r2, #0]
 8000a86:	801a      	strh	r2, [r3, #0]
		{
			inputS3 = pulse;
			inputHeartbeat = CORE_GetTick();
		}
	}
}
 8000a88:	e01a      	b.n	8000ac0 <RADIO_SPWM3_IRQ+0x70>
		pulse = now - tick;
 8000a8a:	4b10      	ldr	r3, [pc, #64]	; (8000acc <RADIO_SPWM3_IRQ+0x7c>)
 8000a8c:	881a      	ldrh	r2, [r3, #0]
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	1db9      	adds	r1, r7, #6
 8000a92:	8809      	ldrh	r1, [r1, #0]
 8000a94:	1a8a      	subs	r2, r1, r2
 8000a96:	801a      	strh	r2, [r3, #0]
		if (pulse <= (RADIO_MAX + RADIO_THRESH) && pulse >= (RADIO_MIN - RADIO_THRESH))
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	881b      	ldrh	r3, [r3, #0]
 8000a9c:	4a0c      	ldr	r2, [pc, #48]	; (8000ad0 <RADIO_SPWM3_IRQ+0x80>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d80e      	bhi.n	8000ac0 <RADIO_SPWM3_IRQ+0x70>
 8000aa2:	1d3b      	adds	r3, r7, #4
 8000aa4:	881a      	ldrh	r2, [r3, #0]
 8000aa6:	23fa      	movs	r3, #250	; 0xfa
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	d308      	bcc.n	8000ac0 <RADIO_SPWM3_IRQ+0x70>
			inputS3 = pulse;
 8000aae:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <RADIO_SPWM3_IRQ+0x84>)
 8000ab0:	1d3a      	adds	r2, r7, #4
 8000ab2:	8812      	ldrh	r2, [r2, #0]
 8000ab4:	801a      	strh	r2, [r3, #0]
			inputHeartbeat = CORE_GetTick();
 8000ab6:	f7ff fef5 	bl	80008a4 <CORE_GetTick>
 8000aba:	0002      	movs	r2, r0
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <RADIO_SPWM3_IRQ+0x88>)
 8000abe:	601a      	str	r2, [r3, #0]
}
 8000ac0:	46c0      	nop			; (mov r8, r8)
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	b002      	add	sp, #8
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	2000003c 	.word	0x2000003c
 8000acc:	200001b8 	.word	0x200001b8
 8000ad0:	000009c4 	.word	0x000009c4
 8000ad4:	20000004 	.word	0x20000004
 8000ad8:	200001b0 	.word	0x200001b0

08000adc <RADIO_SPWM4_IRQ>:

void RADIO_SPWM4_IRQ (void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
	uint16_t now = TIM_Read(TIM_RADIO);
 8000ae2:	4b1c      	ldr	r3, [pc, #112]	; (8000b54 <RADIO_SPWM4_IRQ+0x78>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f7ff fed0 	bl	800088c <TIM_Read>
 8000aec:	0002      	movs	r2, r0
 8000aee:	1dbb      	adds	r3, r7, #6
 8000af0:	801a      	strh	r2, [r3, #0]
	uint16_t pulse = 0;
 8000af2:	1d3b      	adds	r3, r7, #4
 8000af4:	2200      	movs	r2, #0
 8000af6:	801a      	strh	r2, [r3, #0]
	static uint16_t tick;

	if (GPIO_Read(RADIO_S4_GPIO, RADIO_S4_PIN))
 8000af8:	2380      	movs	r3, #128	; 0x80
 8000afa:	021b      	lsls	r3, r3, #8
 8000afc:	4a16      	ldr	r2, [pc, #88]	; (8000b58 <RADIO_SPWM4_IRQ+0x7c>)
 8000afe:	0019      	movs	r1, r3
 8000b00:	0010      	movs	r0, r2
 8000b02:	f7ff feb3 	bl	800086c <GPIO_Read>
 8000b06:	1e03      	subs	r3, r0, #0
 8000b08:	d004      	beq.n	8000b14 <RADIO_SPWM4_IRQ+0x38>
	{
		tick = now;
 8000b0a:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <RADIO_SPWM4_IRQ+0x80>)
 8000b0c:	1dba      	adds	r2, r7, #6
 8000b0e:	8812      	ldrh	r2, [r2, #0]
 8000b10:	801a      	strh	r2, [r3, #0]
		{
			inputS4 = pulse;
			inputHeartbeat = CORE_GetTick();
		}
	}
}
 8000b12:	e01a      	b.n	8000b4a <RADIO_SPWM4_IRQ+0x6e>
		pulse = now - tick;
 8000b14:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <RADIO_SPWM4_IRQ+0x80>)
 8000b16:	881a      	ldrh	r2, [r3, #0]
 8000b18:	1d3b      	adds	r3, r7, #4
 8000b1a:	1db9      	adds	r1, r7, #6
 8000b1c:	8809      	ldrh	r1, [r1, #0]
 8000b1e:	1a8a      	subs	r2, r1, r2
 8000b20:	801a      	strh	r2, [r3, #0]
		if (pulse <= (RADIO_MAX + RADIO_THRESH) && pulse >= (RADIO_MIN - RADIO_THRESH))
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	881b      	ldrh	r3, [r3, #0]
 8000b26:	4a0e      	ldr	r2, [pc, #56]	; (8000b60 <RADIO_SPWM4_IRQ+0x84>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d80e      	bhi.n	8000b4a <RADIO_SPWM4_IRQ+0x6e>
 8000b2c:	1d3b      	adds	r3, r7, #4
 8000b2e:	881a      	ldrh	r2, [r3, #0]
 8000b30:	23fa      	movs	r3, #250	; 0xfa
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d308      	bcc.n	8000b4a <RADIO_SPWM4_IRQ+0x6e>
			inputS4 = pulse;
 8000b38:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <RADIO_SPWM4_IRQ+0x88>)
 8000b3a:	1d3a      	adds	r2, r7, #4
 8000b3c:	8812      	ldrh	r2, [r2, #0]
 8000b3e:	801a      	strh	r2, [r3, #0]
			inputHeartbeat = CORE_GetTick();
 8000b40:	f7ff feb0 	bl	80008a4 <CORE_GetTick>
 8000b44:	0002      	movs	r2, r0
 8000b46:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <RADIO_SPWM4_IRQ+0x8c>)
 8000b48:	601a      	str	r2, [r3, #0]
}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	b002      	add	sp, #8
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	46c0      	nop			; (mov r8, r8)
 8000b54:	2000003c 	.word	0x2000003c
 8000b58:	50000400 	.word	0x50000400
 8000b5c:	200001ba 	.word	0x200001ba
 8000b60:	000009c4 	.word	0x000009c4
 8000b64:	20000006 	.word	0x20000006
 8000b68:	200001b0 	.word	0x200001b0

08000b6c <GPIO_EnableOutput>:
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	1dfb      	adds	r3, r7, #7
 8000b78:	701a      	strb	r2, [r3, #0]
	GPIO_Write(gpio, pin, state);
 8000b7a:	1dfb      	adds	r3, r7, #7
 8000b7c:	781a      	ldrb	r2, [r3, #0]
 8000b7e:	68b9      	ldr	r1, [r7, #8]
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	0018      	movs	r0, r3
 8000b84:	f001 f80e 	bl	8001ba4 <GPIO_Write>
	GPIO_Init(gpio, pin, GPIO_Mode_Output);
 8000b88:	68b9      	ldr	r1, [r7, #8]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	0018      	movs	r0, r3
 8000b90:	f001 f86e 	bl	8001c70 <GPIO_Init>
}
 8000b94:	46c0      	nop			; (mov r8, r8)
 8000b96:	46bd      	mov	sp, r7
 8000b98:	b004      	add	sp, #16
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <GPIO_Set>:
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	6039      	str	r1, [r7, #0]
	gpio->BSRR = (uint32_t)pin;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	683a      	ldr	r2, [r7, #0]
 8000baa:	619a      	str	r2, [r3, #24]
}
 8000bac:	46c0      	nop			; (mov r8, r8)
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	b002      	add	sp, #8
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <GPIO_Reset>:
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	6039      	str	r1, [r7, #0]
	gpio->BRR = (uint32_t)pin;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	683a      	ldr	r2, [r7, #0]
 8000bc2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000bc4:	46c0      	nop			; (mov r8, r8)
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	b002      	add	sp, #8
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <SERVO_Init>:
/*
 * PUBLIC FUNCTIONS
 */

void SERVO_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
	GPIO_EnableOutput(SERVO1_GPIO, SERVO1_PIN, GPIO_PIN_RESET);
 8000bd0:	23a0      	movs	r3, #160	; 0xa0
 8000bd2:	05db      	lsls	r3, r3, #23
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2102      	movs	r1, #2
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f7ff ffc7 	bl	8000b6c <GPIO_EnableOutput>
	TIM_Init(TIM_SERVO1, TIM_SERVO1_FREQ, TIM_SERVO1_RELOAD);
 8000bde:	4b22      	ldr	r3, [pc, #136]	; (8000c68 <SERVO_Init+0x9c>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a22      	ldr	r2, [pc, #136]	; (8000c6c <SERVO_Init+0xa0>)
 8000be4:	4922      	ldr	r1, [pc, #136]	; (8000c70 <SERVO_Init+0xa4>)
 8000be6:	0018      	movs	r0, r3
 8000be8:	f001 f9de 	bl	8001fa8 <TIM_Init>
	TIM_OnReload(TIM_SERVO1, SERVO1_TimerReloadISR);
 8000bec:	4b1e      	ldr	r3, [pc, #120]	; (8000c68 <SERVO_Init+0x9c>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a20      	ldr	r2, [pc, #128]	; (8000c74 <SERVO_Init+0xa8>)
 8000bf2:	0011      	movs	r1, r2
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f001 fa27 	bl	8002048 <TIM_OnReload>
	TIM_OnPulse(TIM_SERVO1, 0, SERVO1_TimerPulseISR);
 8000bfa:	4b1b      	ldr	r3, [pc, #108]	; (8000c68 <SERVO_Init+0x9c>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a1e      	ldr	r2, [pc, #120]	; (8000c78 <SERVO_Init+0xac>)
 8000c00:	2100      	movs	r1, #0
 8000c02:	0018      	movs	r0, r3
 8000c04:	f001 fa34 	bl	8002070 <TIM_OnPulse>
	SERVO_S1_Update(0);
 8000c08:	2000      	movs	r0, #0
 8000c0a:	f000 f857 	bl	8000cbc <SERVO_S1_Update>
	TIM_Start(TIM_SERVO1);
 8000c0e:	4b16      	ldr	r3, [pc, #88]	; (8000c68 <SERVO_Init+0x9c>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	0018      	movs	r0, r3
 8000c14:	f001 fa9c 	bl	8002150 <TIM_Start>

	GPIO_EnableOutput(SERVO2_GPIO, SERVO2_PIN, GPIO_PIN_RESET);
 8000c18:	2380      	movs	r3, #128	; 0x80
 8000c1a:	019b      	lsls	r3, r3, #6
 8000c1c:	4817      	ldr	r0, [pc, #92]	; (8000c7c <SERVO_Init+0xb0>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	0019      	movs	r1, r3
 8000c22:	f7ff ffa3 	bl	8000b6c <GPIO_EnableOutput>
	TIM_Init(TIM_SERVO2, TIM_SERVO2_FREQ, TIM_SERVO2_RELOAD);
 8000c26:	4b16      	ldr	r3, [pc, #88]	; (8000c80 <SERVO_Init+0xb4>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a10      	ldr	r2, [pc, #64]	; (8000c6c <SERVO_Init+0xa0>)
 8000c2c:	4910      	ldr	r1, [pc, #64]	; (8000c70 <SERVO_Init+0xa4>)
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f001 f9ba 	bl	8001fa8 <TIM_Init>
	TIM_OnReload(TIM_SERVO2, SERVO2_TimerReloadISR);
 8000c34:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <SERVO_Init+0xb4>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a12      	ldr	r2, [pc, #72]	; (8000c84 <SERVO_Init+0xb8>)
 8000c3a:	0011      	movs	r1, r2
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	f001 fa03 	bl	8002048 <TIM_OnReload>
	TIM_OnPulse(TIM_SERVO2, 0, SERVO2_TimerPulseISR);
 8000c42:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <SERVO_Init+0xb4>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a10      	ldr	r2, [pc, #64]	; (8000c88 <SERVO_Init+0xbc>)
 8000c48:	2100      	movs	r1, #0
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f001 fa10 	bl	8002070 <TIM_OnPulse>
	SERVO_S2_Update(0);
 8000c50:	2000      	movs	r0, #0
 8000c52:	f000 f85d 	bl	8000d10 <SERVO_S2_Update>
	TIM_Start(TIM_SERVO2);
 8000c56:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <SERVO_Init+0xb4>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f001 fa78 	bl	8002150 <TIM_Start>
}
 8000c60:	46c0      	nop			; (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	20000058 	.word	0x20000058
 8000c6c:	00002710 	.word	0x00002710
 8000c70:	000f4240 	.word	0x000f4240
 8000c74:	08000d65 	.word	0x08000d65
 8000c78:	08000d7b 	.word	0x08000d7b
 8000c7c:	50000800 	.word	0x50000800
 8000c80:	20000074 	.word	0x20000074
 8000c84:	08000d91 	.word	0x08000d91
 8000c88:	08000dad 	.word	0x08000dad

08000c8c <SERVO_Update>:
	TIM_Deinit(TIM_SERVO2);
	GPIO_Deinit(SERVO2_GPIO, SERVO2_PIN);
}

void SERVO_Update(uint16_t S1, uint16_t S2)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	0002      	movs	r2, r0
 8000c94:	1dbb      	adds	r3, r7, #6
 8000c96:	801a      	strh	r2, [r3, #0]
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	1c0a      	adds	r2, r1, #0
 8000c9c:	801a      	strh	r2, [r3, #0]
	SERVO_S1_Update(S1);
 8000c9e:	1dbb      	adds	r3, r7, #6
 8000ca0:	881b      	ldrh	r3, [r3, #0]
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	f000 f80a 	bl	8000cbc <SERVO_S1_Update>
	SERVO_S2_Update(S2);
 8000ca8:	1d3b      	adds	r3, r7, #4
 8000caa:	881b      	ldrh	r3, [r3, #0]
 8000cac:	0018      	movs	r0, r3
 8000cae:	f000 f82f 	bl	8000d10 <SERVO_S2_Update>
}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	b002      	add	sp, #8
 8000cb8:	bd80      	pop	{r7, pc}
	...

08000cbc <SERVO_S1_Update>:
/*
 * PRIVATE FUNCTIONS
 */

void SERVO_S1_Update(uint16_t pulse)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	0002      	movs	r2, r0
 8000cc4:	1dbb      	adds	r3, r7, #6
 8000cc6:	801a      	strh	r2, [r3, #0]
	if (pulse > SERVO_MAX)
 8000cc8:	1dbb      	adds	r3, r7, #6
 8000cca:	881a      	ldrh	r2, [r3, #0]
 8000ccc:	23fa      	movs	r3, #250	; 0xfa
 8000cce:	00db      	lsls	r3, r3, #3
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d904      	bls.n	8000cde <SERVO_S1_Update+0x22>
	{
		pulse = SERVO_MAX;
 8000cd4:	1dbb      	adds	r3, r7, #6
 8000cd6:	22fa      	movs	r2, #250	; 0xfa
 8000cd8:	00d2      	lsls	r2, r2, #3
 8000cda:	801a      	strh	r2, [r3, #0]
 8000cdc:	e009      	b.n	8000cf2 <SERVO_S1_Update+0x36>
	}
	else if (pulse < SERVO_MIN)
 8000cde:	1dbb      	adds	r3, r7, #6
 8000ce0:	881a      	ldrh	r2, [r3, #0]
 8000ce2:	23fa      	movs	r3, #250	; 0xfa
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d203      	bcs.n	8000cf2 <SERVO_S1_Update+0x36>
	{
		pulse = SERVO_MIN;
 8000cea:	1dbb      	adds	r3, r7, #6
 8000cec:	22fa      	movs	r2, #250	; 0xfa
 8000cee:	0092      	lsls	r2, r2, #2
 8000cf0:	801a      	strh	r2, [r3, #0]
	}
	TIM_SetPulse(TIM_SERVO1, 0, pulse);
 8000cf2:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <SERVO_S1_Update+0x50>)
 8000cf4:	6818      	ldr	r0, [r3, #0]
 8000cf6:	1dbb      	adds	r3, r7, #6
 8000cf8:	881b      	ldrh	r3, [r3, #0]
 8000cfa:	001a      	movs	r2, r3
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	f001 f9f9 	bl	80020f4 <TIM_SetPulse>
}
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	46bd      	mov	sp, r7
 8000d06:	b002      	add	sp, #8
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	20000058 	.word	0x20000058

08000d10 <SERVO_S2_Update>:

void SERVO_S2_Update(uint16_t pulse)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	0002      	movs	r2, r0
 8000d18:	1dbb      	adds	r3, r7, #6
 8000d1a:	801a      	strh	r2, [r3, #0]
	if (pulse > SERVO_MAX)
 8000d1c:	1dbb      	adds	r3, r7, #6
 8000d1e:	881a      	ldrh	r2, [r3, #0]
 8000d20:	23fa      	movs	r3, #250	; 0xfa
 8000d22:	00db      	lsls	r3, r3, #3
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d904      	bls.n	8000d32 <SERVO_S2_Update+0x22>
	{
		pulse = SERVO_MAX;
 8000d28:	1dbb      	adds	r3, r7, #6
 8000d2a:	22fa      	movs	r2, #250	; 0xfa
 8000d2c:	00d2      	lsls	r2, r2, #3
 8000d2e:	801a      	strh	r2, [r3, #0]
 8000d30:	e009      	b.n	8000d46 <SERVO_S2_Update+0x36>
	}
	else if (pulse < SERVO_MIN)
 8000d32:	1dbb      	adds	r3, r7, #6
 8000d34:	881a      	ldrh	r2, [r3, #0]
 8000d36:	23fa      	movs	r3, #250	; 0xfa
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	d203      	bcs.n	8000d46 <SERVO_S2_Update+0x36>
	{
		pulse = SERVO_MIN;
 8000d3e:	1dbb      	adds	r3, r7, #6
 8000d40:	22fa      	movs	r2, #250	; 0xfa
 8000d42:	0092      	lsls	r2, r2, #2
 8000d44:	801a      	strh	r2, [r3, #0]
	}
	TIM_SetPulse(TIM_SERVO2, 0, pulse);
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <SERVO_S2_Update+0x50>)
 8000d48:	6818      	ldr	r0, [r3, #0]
 8000d4a:	1dbb      	adds	r3, r7, #6
 8000d4c:	881b      	ldrh	r3, [r3, #0]
 8000d4e:	001a      	movs	r2, r3
 8000d50:	2100      	movs	r1, #0
 8000d52:	f001 f9cf 	bl	80020f4 <TIM_SetPulse>
}
 8000d56:	46c0      	nop			; (mov r8, r8)
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	b002      	add	sp, #8
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	46c0      	nop			; (mov r8, r8)
 8000d60:	20000074 	.word	0x20000074

08000d64 <SERVO1_TimerReloadISR>:
/*
 * INTERRUPT ROUTINES
 */

static void SERVO1_TimerReloadISR(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
	GPIO_Set(SERVO1_GPIO, SERVO1_PIN);
 8000d68:	23a0      	movs	r3, #160	; 0xa0
 8000d6a:	05db      	lsls	r3, r3, #23
 8000d6c:	2102      	movs	r1, #2
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f7ff ff14 	bl	8000b9c <GPIO_Set>
}
 8000d74:	46c0      	nop			; (mov r8, r8)
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <SERVO1_TimerPulseISR>:

static void SERVO1_TimerPulseISR(void)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	af00      	add	r7, sp, #0
	GPIO_Reset(SERVO1_GPIO, SERVO1_PIN);
 8000d7e:	23a0      	movs	r3, #160	; 0xa0
 8000d80:	05db      	lsls	r3, r3, #23
 8000d82:	2102      	movs	r1, #2
 8000d84:	0018      	movs	r0, r3
 8000d86:	f7ff ff15 	bl	8000bb4 <GPIO_Reset>
}
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <SERVO2_TimerReloadISR>:

static void SERVO2_TimerReloadISR(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
	GPIO_Set(SERVO2_GPIO, SERVO2_PIN);
 8000d94:	2380      	movs	r3, #128	; 0x80
 8000d96:	019b      	lsls	r3, r3, #6
 8000d98:	4a03      	ldr	r2, [pc, #12]	; (8000da8 <SERVO2_TimerReloadISR+0x18>)
 8000d9a:	0019      	movs	r1, r3
 8000d9c:	0010      	movs	r0, r2
 8000d9e:	f7ff fefd 	bl	8000b9c <GPIO_Set>
}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	50000800 	.word	0x50000800

08000dac <SERVO2_TimerPulseISR>:

static void SERVO2_TimerPulseISR(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
	GPIO_Reset(SERVO2_GPIO, SERVO2_PIN);
 8000db0:	2380      	movs	r3, #128	; 0x80
 8000db2:	019b      	lsls	r3, r3, #6
 8000db4:	4a03      	ldr	r2, [pc, #12]	; (8000dc4 <SERVO2_TimerPulseISR+0x18>)
 8000db6:	0019      	movs	r1, r3
 8000db8:	0010      	movs	r0, r2
 8000dba:	f7ff fefb 	bl	8000bb4 <GPIO_Reset>
}
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	50000800 	.word	0x50000800

08000dc8 <CORE_GetTick>:
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
	return gTicks;
 8000dcc:	4b02      	ldr	r3, [pc, #8]	; (8000dd8 <CORE_GetTick+0x10>)
 8000dce:	681b      	ldr	r3, [r3, #0]
}
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	46c0      	nop			; (mov r8, r8)
 8000dd8:	2000021c 	.word	0x2000021c

08000ddc <SYSTEM_Init>:
 * PUBLIC FUNCTIONS
 */


void SYSTEM_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
	CONFIG_Init();
 8000de2:	f7ff fb39 	bl	8000458 <CONFIG_Init>
	ADC_Init();
 8000de6:	f000 fc17 	bl	8001618 <ADC_Init>
	LED_Init();
 8000dea:	f7ff fb93 	bl	8000514 <LED_Init>

	CORE_Delay(10); // Let stabilize before taking reading
 8000dee:	200a      	movs	r0, #10
 8000df0:	f000 fe0c 	bl	8001a0c <CORE_Delay>
	uint32_t volt = AIN_AinToDivider(ADC_Read(BATTERY_CHANNEL),BATTERY_DET_RLOW, BATTERY_DET_RHIGH);
 8000df4:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <SYSTEM_Init+0x84>)
 8000df6:	0018      	movs	r0, r3
 8000df8:	f000 fc6c 	bl	80016d4 <ADC_Read>
 8000dfc:	0003      	movs	r3, r0
 8000dfe:	4a19      	ldr	r2, [pc, #100]	; (8000e64 <SYSTEM_Init+0x88>)
 8000e00:	4918      	ldr	r1, [pc, #96]	; (8000e64 <SYSTEM_Init+0x88>)
 8000e02:	0018      	movs	r0, r3
 8000e04:	f000 fc88 	bl	8001718 <AIN_AinToDivider>
 8000e08:	0003      	movs	r3, r0
 8000e0a:	607b      	str	r3, [r7, #4]
	if (volt >= BATT_1S_LOW && volt <= BATT_1S_HIGH)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4a16      	ldr	r2, [pc, #88]	; (8000e68 <SYSTEM_Init+0x8c>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d90a      	bls.n	8000e2a <SYSTEM_Init+0x4e>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4a15      	ldr	r2, [pc, #84]	; (8000e6c <SYSTEM_Init+0x90>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d806      	bhi.n	8000e2a <SYSTEM_Init+0x4e>
	{
		battery_fault = BATT_1S_LOW;
 8000e1c:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <SYSTEM_Init+0x94>)
 8000e1e:	4a15      	ldr	r2, [pc, #84]	; (8000e74 <SYSTEM_Init+0x98>)
 8000e20:	601a      	str	r2, [r3, #0]
		battery_warn = BATT_1S_LOW + BATT_WARNING;
 8000e22:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <SYSTEM_Init+0x9c>)
 8000e24:	4a15      	ldr	r2, [pc, #84]	; (8000e7c <SYSTEM_Init+0xa0>)
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	e015      	b.n	8000e56 <SYSTEM_Init+0x7a>
	}
	else if (volt >= BATT_2S_LOW && volt <= BATT_2S_HIGH)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a14      	ldr	r2, [pc, #80]	; (8000e80 <SYSTEM_Init+0xa4>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d90a      	bls.n	8000e48 <SYSTEM_Init+0x6c>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a13      	ldr	r2, [pc, #76]	; (8000e84 <SYSTEM_Init+0xa8>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d806      	bhi.n	8000e48 <SYSTEM_Init+0x6c>
	{
		battery_fault = BATT_2S_LOW;
 8000e3a:	4b0d      	ldr	r3, [pc, #52]	; (8000e70 <SYSTEM_Init+0x94>)
 8000e3c:	4a12      	ldr	r2, [pc, #72]	; (8000e88 <SYSTEM_Init+0xac>)
 8000e3e:	601a      	str	r2, [r3, #0]
		battery_warn = BATT_2S_LOW + BATT_WARNING;
 8000e40:	4b0d      	ldr	r3, [pc, #52]	; (8000e78 <SYSTEM_Init+0x9c>)
 8000e42:	4a12      	ldr	r2, [pc, #72]	; (8000e8c <SYSTEM_Init+0xb0>)
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	e006      	b.n	8000e56 <SYSTEM_Init+0x7a>
	}
	else
	{
		battery_fault = BATT_1S_LOW;
 8000e48:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <SYSTEM_Init+0x94>)
 8000e4a:	4a0a      	ldr	r2, [pc, #40]	; (8000e74 <SYSTEM_Init+0x98>)
 8000e4c:	601a      	str	r2, [r3, #0]
		battery_warn = BATT_1S_LOW + BATT_WARNING;
 8000e4e:	4b0a      	ldr	r3, [pc, #40]	; (8000e78 <SYSTEM_Init+0x9c>)
 8000e50:	4a0a      	ldr	r2, [pc, #40]	; (8000e7c <SYSTEM_Init+0xa0>)
 8000e52:	601a      	str	r2, [r3, #0]
	}
}
 8000e54:	46c0      	nop			; (mov r8, r8)
 8000e56:	46c0      	nop			; (mov r8, r8)
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	b002      	add	sp, #8
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	10000010 	.word	0x10000010
 8000e64:	00002710 	.word	0x00002710
 8000e68:	00000ce3 	.word	0x00000ce3
 8000e6c:	00001068 	.word	0x00001068
 8000e70:	20000268 	.word	0x20000268
 8000e74:	00000ce4 	.word	0x00000ce4
 8000e78:	20000264 	.word	0x20000264
 8000e7c:	00000dac 	.word	0x00000dac
 8000e80:	000019c7 	.word	0x000019c7
 8000e84:	000020d0 	.word	0x000020d0
 8000e88:	000019c8 	.word	0x000019c8
 8000e8c:	00001a90 	.word	0x00001a90

08000e90 <SYSTEM_Update>:


void SYSTEM_Update(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
	int32_t SystemVolt = AIN_AinToDivider(ADC_Read(BATTERY_CHANNEL),BATTERY_DET_RLOW, BATTERY_DET_RHIGH);
 8000e96:	4b79      	ldr	r3, [pc, #484]	; (800107c <SYSTEM_Update+0x1ec>)
 8000e98:	0018      	movs	r0, r3
 8000e9a:	f000 fc1b 	bl	80016d4 <ADC_Read>
 8000e9e:	0003      	movs	r3, r0
 8000ea0:	4a77      	ldr	r2, [pc, #476]	; (8001080 <SYSTEM_Update+0x1f0>)
 8000ea2:	4977      	ldr	r1, [pc, #476]	; (8001080 <SYSTEM_Update+0x1f0>)
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	f000 fc37 	bl	8001718 <AIN_AinToDivider>
 8000eaa:	0003      	movs	r3, r0
 8000eac:	60fb      	str	r3, [r7, #12]
	int32_t SystemTemp = ADC_ReadDieTemp();
 8000eae:	f000 fc5f 	bl	8001770 <ADC_ReadDieTemp>
 8000eb2:	0003      	movs	r3, r0
 8000eb4:	60bb      	str	r3, [r7, #8]

	if (status.faultBatt == false) {
 8000eb6:	4b73      	ldr	r3, [pc, #460]	; (8001084 <SYSTEM_Update+0x1f4>)
 8000eb8:	785b      	ldrb	r3, [r3, #1]
 8000eba:	2201      	movs	r2, #1
 8000ebc:	4053      	eors	r3, r2
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d008      	beq.n	8000ed6 <SYSTEM_Update+0x46>
		if (SystemVolt <= battery_fault) { status.faultBatt = true; }
 8000ec4:	68fa      	ldr	r2, [r7, #12]
 8000ec6:	4b70      	ldr	r3, [pc, #448]	; (8001088 <SYSTEM_Update+0x1f8>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d80d      	bhi.n	8000eea <SYSTEM_Update+0x5a>
 8000ece:	4b6d      	ldr	r3, [pc, #436]	; (8001084 <SYSTEM_Update+0x1f4>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	705a      	strb	r2, [r3, #1]
 8000ed4:	e009      	b.n	8000eea <SYSTEM_Update+0x5a>
	}
	else { //status.faultBatt == true
		if (SystemVolt >= (battery_fault + BATT_HYST)) { status.faultBatt = false; }
 8000ed6:	4b6c      	ldr	r3, [pc, #432]	; (8001088 <SYSTEM_Update+0x1f8>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	3364      	adds	r3, #100	; 0x64
 8000edc:	001a      	movs	r2, r3
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d802      	bhi.n	8000eea <SYSTEM_Update+0x5a>
 8000ee4:	4b67      	ldr	r3, [pc, #412]	; (8001084 <SYSTEM_Update+0x1f4>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	705a      	strb	r2, [r3, #1]
	}

	if (status.warnBatt == false) {
 8000eea:	4b66      	ldr	r3, [pc, #408]	; (8001084 <SYSTEM_Update+0x1f4>)
 8000eec:	789b      	ldrb	r3, [r3, #2]
 8000eee:	2201      	movs	r2, #1
 8000ef0:	4053      	eors	r3, r2
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d008      	beq.n	8000f0a <SYSTEM_Update+0x7a>
		if (SystemVolt <= battery_warn) { status.warnBatt = true; }
 8000ef8:	68fa      	ldr	r2, [r7, #12]
 8000efa:	4b64      	ldr	r3, [pc, #400]	; (800108c <SYSTEM_Update+0x1fc>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d80d      	bhi.n	8000f1e <SYSTEM_Update+0x8e>
 8000f02:	4b60      	ldr	r3, [pc, #384]	; (8001084 <SYSTEM_Update+0x1f4>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	709a      	strb	r2, [r3, #2]
 8000f08:	e009      	b.n	8000f1e <SYSTEM_Update+0x8e>
	}
	else { //status.warnBatt == true
		if (SystemVolt >= (battery_warn + BATT_HYST)) { status.warnBatt = false; }
 8000f0a:	4b60      	ldr	r3, [pc, #384]	; (800108c <SYSTEM_Update+0x1fc>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	3364      	adds	r3, #100	; 0x64
 8000f10:	001a      	movs	r2, r3
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d802      	bhi.n	8000f1e <SYSTEM_Update+0x8e>
 8000f18:	4b5a      	ldr	r3, [pc, #360]	; (8001084 <SYSTEM_Update+0x1f4>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	709a      	strb	r2, [r3, #2]
	}

	if (status.faultTemp == false) {
 8000f1e:	4b59      	ldr	r3, [pc, #356]	; (8001084 <SYSTEM_Update+0x1f4>)
 8000f20:	78db      	ldrb	r3, [r3, #3]
 8000f22:	2201      	movs	r2, #1
 8000f24:	4053      	eors	r3, r2
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d008      	beq.n	8000f3e <SYSTEM_Update+0xae>
		if (SystemTemp <= battery_fault) { status.faultTemp = true; }
 8000f2c:	68ba      	ldr	r2, [r7, #8]
 8000f2e:	4b56      	ldr	r3, [pc, #344]	; (8001088 <SYSTEM_Update+0x1f8>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d80d      	bhi.n	8000f52 <SYSTEM_Update+0xc2>
 8000f36:	4b53      	ldr	r3, [pc, #332]	; (8001084 <SYSTEM_Update+0x1f4>)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	70da      	strb	r2, [r3, #3]
 8000f3c:	e009      	b.n	8000f52 <SYSTEM_Update+0xc2>
	}
	else { //status.faultTemp == true
		if (SystemTemp >= (battery_fault + BATT_HYST)) { status.faultTemp = false; }
 8000f3e:	4b52      	ldr	r3, [pc, #328]	; (8001088 <SYSTEM_Update+0x1f8>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	3364      	adds	r3, #100	; 0x64
 8000f44:	001a      	movs	r2, r3
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d802      	bhi.n	8000f52 <SYSTEM_Update+0xc2>
 8000f4c:	4b4d      	ldr	r3, [pc, #308]	; (8001084 <SYSTEM_Update+0x1f4>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	70da      	strb	r2, [r3, #3]
	}

	if (status.warnTemp== false) {
 8000f52:	4b4c      	ldr	r3, [pc, #304]	; (8001084 <SYSTEM_Update+0x1f4>)
 8000f54:	791b      	ldrb	r3, [r3, #4]
 8000f56:	2201      	movs	r2, #1
 8000f58:	4053      	eors	r3, r2
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d008      	beq.n	8000f72 <SYSTEM_Update+0xe2>
		if (SystemTemp <= battery_warn) { status.warnTemp = true; }
 8000f60:	68ba      	ldr	r2, [r7, #8]
 8000f62:	4b4a      	ldr	r3, [pc, #296]	; (800108c <SYSTEM_Update+0x1fc>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d80d      	bhi.n	8000f86 <SYSTEM_Update+0xf6>
 8000f6a:	4b46      	ldr	r3, [pc, #280]	; (8001084 <SYSTEM_Update+0x1f4>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	711a      	strb	r2, [r3, #4]
 8000f70:	e009      	b.n	8000f86 <SYSTEM_Update+0xf6>
	}
	else { //status.warnTemp == true
		if (SystemTemp >= (battery_warn + BATT_HYST)) { status.warnTemp = false; }
 8000f72:	4b46      	ldr	r3, [pc, #280]	; (800108c <SYSTEM_Update+0x1fc>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	3364      	adds	r3, #100	; 0x64
 8000f78:	001a      	movs	r2, r3
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d802      	bhi.n	8000f86 <SYSTEM_Update+0xf6>
 8000f80:	4b40      	ldr	r3, [pc, #256]	; (8001084 <SYSTEM_Update+0x1f4>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	711a      	strb	r2, [r3, #4]
	}

	if (INPUT_TIMEOUT <= CORE_GetTick() - inputHeartbeat)
 8000f86:	f7ff ff1f 	bl	8000dc8 <CORE_GetTick>
 8000f8a:	0002      	movs	r2, r0
 8000f8c:	4b40      	ldr	r3, [pc, #256]	; (8001090 <SYSTEM_Update+0x200>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	2b31      	cmp	r3, #49	; 0x31
 8000f94:	d903      	bls.n	8000f9e <SYSTEM_Update+0x10e>
	{
		status.faultInput = true;
 8000f96:	4b3b      	ldr	r3, [pc, #236]	; (8001084 <SYSTEM_Update+0x1f4>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	701a      	strb	r2, [r3, #0]
 8000f9c:	e002      	b.n	8000fa4 <SYSTEM_Update+0x114>
	}
	else
	{
		status.faultInput = false;
 8000f9e:	4b39      	ldr	r3, [pc, #228]	; (8001084 <SYSTEM_Update+0x1f4>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	701a      	strb	r2, [r3, #0]
	}


	static uint32_t tick;
	uint32_t now = CORE_GetTick();
 8000fa4:	f7ff ff10 	bl	8000dc8 <CORE_GetTick>
 8000fa8:	0003      	movs	r3, r0
 8000faa:	607b      	str	r3, [r7, #4]

	if (status.faultTemp)
 8000fac:	4b35      	ldr	r3, [pc, #212]	; (8001084 <SYSTEM_Update+0x1f4>)
 8000fae:	78db      	ldrb	r3, [r3, #3]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d014      	beq.n	8000fde <SYSTEM_Update+0x14e>
	{
		LED_RedOFF();
 8000fb4:	f7ff faec 	bl	8000590 <LED_RedOFF>
		if (FAULT_LED_FLASH_FAST <= (now - tick))
 8000fb8:	4b36      	ldr	r3, [pc, #216]	; (8001094 <SYSTEM_Update+0x204>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	2b63      	cmp	r3, #99	; 0x63
 8000fc2:	d956      	bls.n	8001072 <SYSTEM_Update+0x1e2>
		{
			if (LED_GreenState())
 8000fc4:	f7ff faf0 	bl	80005a8 <LED_GreenState>
 8000fc8:	1e03      	subs	r3, r0, #0
 8000fca:	d002      	beq.n	8000fd2 <SYSTEM_Update+0x142>
			{
				LED_GreenOFF();
 8000fcc:	f7ff fad2 	bl	8000574 <LED_GreenOFF>
 8000fd0:	e001      	b.n	8000fd6 <SYSTEM_Update+0x146>
			}
			else
			{
				LED_GreenON();
 8000fd2:	f7ff fab5 	bl	8000540 <LED_GreenON>
			}
			tick = now;
 8000fd6:	4b2f      	ldr	r3, [pc, #188]	; (8001094 <SYSTEM_Update+0x204>)
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	601a      	str	r2, [r3, #0]
	else
	{
		LED_RedON();
		LED_GreenOFF();
	}
}
 8000fdc:	e049      	b.n	8001072 <SYSTEM_Update+0x1e2>
	else if (status.faultInput)
 8000fde:	4b29      	ldr	r3, [pc, #164]	; (8001084 <SYSTEM_Update+0x1f4>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d016      	beq.n	8001014 <SYSTEM_Update+0x184>
		LED_RedOFF();
 8000fe6:	f7ff fad3 	bl	8000590 <LED_RedOFF>
		if (FAULT_LED_FLASH_SLOW <= (now - tick))
 8000fea:	4b2a      	ldr	r3, [pc, #168]	; (8001094 <SYSTEM_Update+0x204>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	1ad2      	subs	r2, r2, r3
 8000ff2:	23fa      	movs	r3, #250	; 0xfa
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	d33b      	bcc.n	8001072 <SYSTEM_Update+0x1e2>
			if (LED_GreenState())
 8000ffa:	f7ff fad5 	bl	80005a8 <LED_GreenState>
 8000ffe:	1e03      	subs	r3, r0, #0
 8001000:	d002      	beq.n	8001008 <SYSTEM_Update+0x178>
				LED_GreenOFF();
 8001002:	f7ff fab7 	bl	8000574 <LED_GreenOFF>
 8001006:	e001      	b.n	800100c <SYSTEM_Update+0x17c>
				LED_GreenON();
 8001008:	f7ff fa9a 	bl	8000540 <LED_GreenON>
			tick = now;
 800100c:	4b21      	ldr	r3, [pc, #132]	; (8001094 <SYSTEM_Update+0x204>)
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	601a      	str	r2, [r3, #0]
}
 8001012:	e02e      	b.n	8001072 <SYSTEM_Update+0x1e2>
	else if (status.faultBatt)
 8001014:	4b1b      	ldr	r3, [pc, #108]	; (8001084 <SYSTEM_Update+0x1f4>)
 8001016:	785b      	ldrb	r3, [r3, #1]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d004      	beq.n	8001026 <SYSTEM_Update+0x196>
		LED_RedOFF();
 800101c:	f7ff fab8 	bl	8000590 <LED_RedOFF>
		LED_GreenON();
 8001020:	f7ff fa8e 	bl	8000540 <LED_GreenON>
}
 8001024:	e025      	b.n	8001072 <SYSTEM_Update+0x1e2>
	else if (status.warnTemp)
 8001026:	4b17      	ldr	r3, [pc, #92]	; (8001084 <SYSTEM_Update+0x1f4>)
 8001028:	791b      	ldrb	r3, [r3, #4]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d014      	beq.n	8001058 <SYSTEM_Update+0x1c8>
		LED_RedON();
 800102e:	f7ff fa95 	bl	800055c <LED_RedON>
		if (FAULT_LED_FLASH_FAST <= (now - tick))
 8001032:	4b18      	ldr	r3, [pc, #96]	; (8001094 <SYSTEM_Update+0x204>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	2b63      	cmp	r3, #99	; 0x63
 800103c:	d919      	bls.n	8001072 <SYSTEM_Update+0x1e2>
			if (LED_GreenState())
 800103e:	f7ff fab3 	bl	80005a8 <LED_GreenState>
 8001042:	1e03      	subs	r3, r0, #0
 8001044:	d002      	beq.n	800104c <SYSTEM_Update+0x1bc>
				LED_GreenOFF();
 8001046:	f7ff fa95 	bl	8000574 <LED_GreenOFF>
 800104a:	e001      	b.n	8001050 <SYSTEM_Update+0x1c0>
				LED_GreenON();
 800104c:	f7ff fa78 	bl	8000540 <LED_GreenON>
			tick = now;
 8001050:	4b10      	ldr	r3, [pc, #64]	; (8001094 <SYSTEM_Update+0x204>)
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	601a      	str	r2, [r3, #0]
}
 8001056:	e00c      	b.n	8001072 <SYSTEM_Update+0x1e2>
	else if (status.warnBatt)
 8001058:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <SYSTEM_Update+0x1f4>)
 800105a:	789b      	ldrb	r3, [r3, #2]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d004      	beq.n	800106a <SYSTEM_Update+0x1da>
		LED_RedON();
 8001060:	f7ff fa7c 	bl	800055c <LED_RedON>
		LED_GreenON();
 8001064:	f7ff fa6c 	bl	8000540 <LED_GreenON>
}
 8001068:	e003      	b.n	8001072 <SYSTEM_Update+0x1e2>
		LED_RedON();
 800106a:	f7ff fa77 	bl	800055c <LED_RedON>
		LED_GreenOFF();
 800106e:	f7ff fa81 	bl	8000574 <LED_GreenOFF>
}
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	46bd      	mov	sp, r7
 8001076:	b004      	add	sp, #16
 8001078:	bd80      	pop	{r7, pc}
 800107a:	46c0      	nop			; (mov r8, r8)
 800107c:	10000010 	.word	0x10000010
 8001080:	00002710 	.word	0x00002710
 8001084:	2000026c 	.word	0x2000026c
 8001088:	20000268 	.word	0x20000268
 800108c:	20000264 	.word	0x20000264
 8001090:	200001b0 	.word	0x200001b0
 8001094:	200001bc 	.word	0x200001bc

08001098 <main>:
/*
 * PUBLIC FUNCTIONS
 */

int main (void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	CORE_Init();
 800109c:	f000 fc7a 	bl	8001994 <CORE_Init>
	SYSTEM_Init();
 80010a0:	f7ff fe9c 	bl	8000ddc <SYSTEM_Init>
	RADIO_Init();
 80010a4:	f7ff fc08 	bl	80008b8 <RADIO_Init>
	MOTOR_Init();
 80010a8:	f7ff faa6 	bl	80005f8 <MOTOR_Init>
	SERVO_Init();
 80010ac:	f7ff fd8e 	bl	8000bcc <SERVO_Init>

	if (configSetFlag)
 80010b0:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <main+0x58>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <main+0x24>
	{
		CONFIG_Set();
 80010b8:	f7ff f9fe 	bl	80004b8 <CONFIG_Set>
	}

	while (1)
	{
		SYSTEM_Update();
 80010bc:	f7ff fee8 	bl	8000e90 <SYSTEM_Update>
		MOTOR_Update(inputS1, inputS2);
 80010c0:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <main+0x5c>)
 80010c2:	881b      	ldrh	r3, [r3, #0]
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	001a      	movs	r2, r3
 80010c8:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <main+0x60>)
 80010ca:	881b      	ldrh	r3, [r3, #0]
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	0019      	movs	r1, r3
 80010d0:	0010      	movs	r0, r2
 80010d2:	f7ff faee 	bl	80006b2 <MOTOR_Update>
		SERVO_Update(inputS3, inputS4);
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <main+0x64>)
 80010d8:	881b      	ldrh	r3, [r3, #0]
 80010da:	b29a      	uxth	r2, r3
 80010dc:	4b08      	ldr	r3, [pc, #32]	; (8001100 <main+0x68>)
 80010de:	881b      	ldrh	r3, [r3, #0]
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	0019      	movs	r1, r3
 80010e4:	0010      	movs	r0, r2
 80010e6:	f7ff fdd1 	bl	8000c8c <SERVO_Update>
		CORE_Idle();
 80010ea:	f000 fc89 	bl	8001a00 <CORE_Idle>
		SYSTEM_Update();
 80010ee:	e7e5      	b.n	80010bc <main+0x24>
 80010f0:	200001ac 	.word	0x200001ac
 80010f4:	20000000 	.word	0x20000000
 80010f8:	20000002 	.word	0x20000002
 80010fc:	20000004 	.word	0x20000004
 8001100:	20000006 	.word	0x20000006

08001104 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001108:	46c0      	nop			; (mov r8, r8)
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
	...

08001110 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001110:	480d      	ldr	r0, [pc, #52]	; (8001148 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001112:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001114:	480d      	ldr	r0, [pc, #52]	; (800114c <LoopForever+0x6>)
  ldr r1, =_edata
 8001116:	490e      	ldr	r1, [pc, #56]	; (8001150 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001118:	4a0e      	ldr	r2, [pc, #56]	; (8001154 <LoopForever+0xe>)
  movs r3, #0
 800111a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800111c:	e002      	b.n	8001124 <LoopCopyDataInit>

0800111e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800111e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001120:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001122:	3304      	adds	r3, #4

08001124 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001124:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001126:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001128:	d3f9      	bcc.n	800111e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800112a:	4a0b      	ldr	r2, [pc, #44]	; (8001158 <LoopForever+0x12>)
  ldr r4, =_ebss
 800112c:	4c0b      	ldr	r4, [pc, #44]	; (800115c <LoopForever+0x16>)
  movs r3, #0
 800112e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001130:	e001      	b.n	8001136 <LoopFillZerobss>

08001132 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001132:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001134:	3204      	adds	r2, #4

08001136 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001136:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001138:	d3fb      	bcc.n	8001132 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800113a:	f7ff ffe3 	bl	8001104 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800113e:	f001 fa1b 	bl	8002578 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001142:	f7ff ffa9 	bl	8001098 <main>

08001146 <LoopForever>:

LoopForever:
    b LoopForever
 8001146:	e7fe      	b.n	8001146 <LoopForever>
   ldr   r0, =_estack
 8001148:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800114c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001150:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8001154:	080025f4 	.word	0x080025f4
  ldr r2, =_sbss
 8001158:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 800115c:	20000274 	.word	0x20000274

08001160 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001160:	e7fe      	b.n	8001160 <ADC1_COMP_IRQHandler>
	...

08001164 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d101      	bne.n	8001176 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e159      	b.n	800142a <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800117a:	2b00      	cmp	r3, #0
 800117c:	d10a      	bne.n	8001194 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2250      	movs	r2, #80	; 0x50
 8001188:	2100      	movs	r1, #0
 800118a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	0018      	movs	r0, r3
 8001190:	f000 f95c 	bl	800144c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001198:	2210      	movs	r2, #16
 800119a:	4013      	ands	r3, r2
 800119c:	2b10      	cmp	r3, #16
 800119e:	d005      	beq.n	80011ac <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	2204      	movs	r2, #4
 80011a8:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80011aa:	d00b      	beq.n	80011c4 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011b0:	2210      	movs	r2, #16
 80011b2:	431a      	orrs	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2250      	movs	r2, #80	; 0x50
 80011bc:	2100      	movs	r1, #0
 80011be:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e132      	b.n	800142a <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011c8:	4a9a      	ldr	r2, [pc, #616]	; (8001434 <HAL_ADC_Init+0x2d0>)
 80011ca:	4013      	ands	r3, r2
 80011cc:	2202      	movs	r2, #2
 80011ce:	431a      	orrs	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	2203      	movs	r2, #3
 80011dc:	4013      	ands	r3, r2
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d108      	bne.n	80011f4 <HAL_ADC_Init+0x90>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2201      	movs	r2, #1
 80011ea:	4013      	ands	r3, r2
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d101      	bne.n	80011f4 <HAL_ADC_Init+0x90>
 80011f0:	2301      	movs	r3, #1
 80011f2:	e000      	b.n	80011f6 <HAL_ADC_Init+0x92>
 80011f4:	2300      	movs	r3, #0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d149      	bne.n	800128e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685a      	ldr	r2, [r3, #4]
 80011fe:	23c0      	movs	r3, #192	; 0xc0
 8001200:	061b      	lsls	r3, r3, #24
 8001202:	429a      	cmp	r2, r3
 8001204:	d00b      	beq.n	800121e <HAL_ADC_Init+0xba>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685a      	ldr	r2, [r3, #4]
 800120a:	2380      	movs	r3, #128	; 0x80
 800120c:	05db      	lsls	r3, r3, #23
 800120e:	429a      	cmp	r2, r3
 8001210:	d005      	beq.n	800121e <HAL_ADC_Init+0xba>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685a      	ldr	r2, [r3, #4]
 8001216:	2380      	movs	r3, #128	; 0x80
 8001218:	061b      	lsls	r3, r3, #24
 800121a:	429a      	cmp	r2, r3
 800121c:	d111      	bne.n	8001242 <HAL_ADC_Init+0xde>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	691a      	ldr	r2, [r3, #16]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	0092      	lsls	r2, r2, #2
 800122a:	0892      	lsrs	r2, r2, #2
 800122c:	611a      	str	r2, [r3, #16]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	6919      	ldr	r1, [r3, #16]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685a      	ldr	r2, [r3, #4]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	430a      	orrs	r2, r1
 800123e:	611a      	str	r2, [r3, #16]
 8001240:	e014      	b.n	800126c <HAL_ADC_Init+0x108>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	691a      	ldr	r2, [r3, #16]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	0092      	lsls	r2, r2, #2
 800124e:	0892      	lsrs	r2, r2, #2
 8001250:	611a      	str	r2, [r3, #16]
 8001252:	4b79      	ldr	r3, [pc, #484]	; (8001438 <HAL_ADC_Init+0x2d4>)
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	4b78      	ldr	r3, [pc, #480]	; (8001438 <HAL_ADC_Init+0x2d4>)
 8001258:	4978      	ldr	r1, [pc, #480]	; (800143c <HAL_ADC_Init+0x2d8>)
 800125a:	400a      	ands	r2, r1
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	4b76      	ldr	r3, [pc, #472]	; (8001438 <HAL_ADC_Init+0x2d4>)
 8001260:	6819      	ldr	r1, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685a      	ldr	r2, [r3, #4]
 8001266:	4b74      	ldr	r3, [pc, #464]	; (8001438 <HAL_ADC_Init+0x2d4>)
 8001268:	430a      	orrs	r2, r1
 800126a:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	68da      	ldr	r2, [r3, #12]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2118      	movs	r1, #24
 8001278:	438a      	bics	r2, r1
 800127a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	68d9      	ldr	r1, [r3, #12]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	689a      	ldr	r2, [r3, #8]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	430a      	orrs	r2, r1
 800128c:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800128e:	4b6a      	ldr	r3, [pc, #424]	; (8001438 <HAL_ADC_Init+0x2d4>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	4b69      	ldr	r3, [pc, #420]	; (8001438 <HAL_ADC_Init+0x2d4>)
 8001294:	496a      	ldr	r1, [pc, #424]	; (8001440 <HAL_ADC_Init+0x2dc>)
 8001296:	400a      	ands	r2, r1
 8001298:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 800129a:	4b67      	ldr	r3, [pc, #412]	; (8001438 <HAL_ADC_Init+0x2d4>)
 800129c:	6819      	ldr	r1, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012a2:	065a      	lsls	r2, r3, #25
 80012a4:	4b64      	ldr	r3, [pc, #400]	; (8001438 <HAL_ADC_Init+0x2d4>)
 80012a6:	430a      	orrs	r2, r1
 80012a8:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	689a      	ldr	r2, [r3, #8]
 80012b0:	2380      	movs	r3, #128	; 0x80
 80012b2:	055b      	lsls	r3, r3, #21
 80012b4:	4013      	ands	r3, r2
 80012b6:	d108      	bne.n	80012ca <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	689a      	ldr	r2, [r3, #8]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2180      	movs	r1, #128	; 0x80
 80012c4:	0549      	lsls	r1, r1, #21
 80012c6:	430a      	orrs	r2, r1
 80012c8:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	68da      	ldr	r2, [r3, #12]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	495b      	ldr	r1, [pc, #364]	; (8001444 <HAL_ADC_Init+0x2e0>)
 80012d6:	400a      	ands	r2, r1
 80012d8:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	68d9      	ldr	r1, [r3, #12]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	691b      	ldr	r3, [r3, #16]
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d101      	bne.n	80012f0 <HAL_ADC_Init+0x18c>
 80012ec:	2304      	movs	r3, #4
 80012ee:	e000      	b.n	80012f2 <HAL_ADC_Init+0x18e>
 80012f0:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80012f2:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2020      	movs	r0, #32
 80012f8:	5c1b      	ldrb	r3, [r3, r0]
 80012fa:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80012fc:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	202c      	movs	r0, #44	; 0x2c
 8001302:	5c1b      	ldrb	r3, [r3, r0]
 8001304:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001306:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800130c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001314:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	69db      	ldr	r3, [r3, #28]
 800131a:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800131c:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	430a      	orrs	r2, r1
 8001324:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800132a:	23c2      	movs	r3, #194	; 0xc2
 800132c:	33ff      	adds	r3, #255	; 0xff
 800132e:	429a      	cmp	r2, r3
 8001330:	d00b      	beq.n	800134a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	68d9      	ldr	r1, [r3, #12]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001340:	431a      	orrs	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	430a      	orrs	r2, r1
 8001348:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2221      	movs	r2, #33	; 0x21
 800134e:	5c9b      	ldrb	r3, [r3, r2]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d11a      	bne.n	800138a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2220      	movs	r2, #32
 8001358:	5c9b      	ldrb	r3, [r3, r2]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d109      	bne.n	8001372 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	68da      	ldr	r2, [r3, #12]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2180      	movs	r1, #128	; 0x80
 800136a:	0249      	lsls	r1, r1, #9
 800136c:	430a      	orrs	r2, r1
 800136e:	60da      	str	r2, [r3, #12]
 8001370:	e00b      	b.n	800138a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001376:	2220      	movs	r2, #32
 8001378:	431a      	orrs	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001382:	2201      	movs	r2, #1
 8001384:	431a      	orrs	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800138e:	2b01      	cmp	r3, #1
 8001390:	d11f      	bne.n	80013d2 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	691a      	ldr	r2, [r3, #16]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	492a      	ldr	r1, [pc, #168]	; (8001448 <HAL_ADC_Init+0x2e4>)
 800139e:	400a      	ands	r2, r1
 80013a0:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6919      	ldr	r1, [r3, #16]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80013b0:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 80013b6:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	430a      	orrs	r2, r1
 80013be:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	691a      	ldr	r2, [r3, #16]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2101      	movs	r1, #1
 80013cc:	430a      	orrs	r2, r1
 80013ce:	611a      	str	r2, [r3, #16]
 80013d0:	e00e      	b.n	80013f0 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	691b      	ldr	r3, [r3, #16]
 80013d8:	2201      	movs	r2, #1
 80013da:	4013      	ands	r3, r2
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d107      	bne.n	80013f0 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	691a      	ldr	r2, [r3, #16]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2101      	movs	r1, #1
 80013ec:	438a      	bics	r2, r1
 80013ee:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	695a      	ldr	r2, [r3, #20]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2107      	movs	r1, #7
 80013fc:	438a      	bics	r2, r1
 80013fe:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	6959      	ldr	r1, [r3, #20]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	430a      	orrs	r2, r1
 8001410:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800141c:	2203      	movs	r2, #3
 800141e:	4393      	bics	r3, r2
 8001420:	2201      	movs	r2, #1
 8001422:	431a      	orrs	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001428:	2300      	movs	r3, #0
}
 800142a:	0018      	movs	r0, r3
 800142c:	46bd      	mov	sp, r7
 800142e:	b002      	add	sp, #8
 8001430:	bd80      	pop	{r7, pc}
 8001432:	46c0      	nop			; (mov r8, r8)
 8001434:	fffffefd 	.word	0xfffffefd
 8001438:	40012708 	.word	0x40012708
 800143c:	ffc3ffff 	.word	0xffc3ffff
 8001440:	fdffffff 	.word	0xfdffffff
 8001444:	fffe0219 	.word	0xfffe0219
 8001448:	fffffc03 	.word	0xfffffc03

0800144c <HAL_ADC_MspInit>:
  * @brief  Initialize the ADC MSP.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspInit must be implemented in the user file.
   */ 
}
 8001454:	46c0      	nop			; (mov r8, r8)
 8001456:	46bd      	mov	sp, r7
 8001458:	b002      	add	sp, #8
 800145a:	bd80      	pop	{r7, pc}

0800145c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	0002      	movs	r2, r0
 8001464:	1dfb      	adds	r3, r7, #7
 8001466:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001468:	1dfb      	adds	r3, r7, #7
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b7f      	cmp	r3, #127	; 0x7f
 800146e:	d809      	bhi.n	8001484 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001470:	1dfb      	adds	r3, r7, #7
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	001a      	movs	r2, r3
 8001476:	231f      	movs	r3, #31
 8001478:	401a      	ands	r2, r3
 800147a:	4b04      	ldr	r3, [pc, #16]	; (800148c <__NVIC_EnableIRQ+0x30>)
 800147c:	2101      	movs	r1, #1
 800147e:	4091      	lsls	r1, r2
 8001480:	000a      	movs	r2, r1
 8001482:	601a      	str	r2, [r3, #0]
  }
}
 8001484:	46c0      	nop			; (mov r8, r8)
 8001486:	46bd      	mov	sp, r7
 8001488:	b002      	add	sp, #8
 800148a:	bd80      	pop	{r7, pc}
 800148c:	e000e100 	.word	0xe000e100

08001490 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001490:	b590      	push	{r4, r7, lr}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	0002      	movs	r2, r0
 8001498:	6039      	str	r1, [r7, #0]
 800149a:	1dfb      	adds	r3, r7, #7
 800149c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800149e:	1dfb      	adds	r3, r7, #7
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b7f      	cmp	r3, #127	; 0x7f
 80014a4:	d828      	bhi.n	80014f8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014a6:	4a2f      	ldr	r2, [pc, #188]	; (8001564 <__NVIC_SetPriority+0xd4>)
 80014a8:	1dfb      	adds	r3, r7, #7
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	b25b      	sxtb	r3, r3
 80014ae:	089b      	lsrs	r3, r3, #2
 80014b0:	33c0      	adds	r3, #192	; 0xc0
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	589b      	ldr	r3, [r3, r2]
 80014b6:	1dfa      	adds	r2, r7, #7
 80014b8:	7812      	ldrb	r2, [r2, #0]
 80014ba:	0011      	movs	r1, r2
 80014bc:	2203      	movs	r2, #3
 80014be:	400a      	ands	r2, r1
 80014c0:	00d2      	lsls	r2, r2, #3
 80014c2:	21ff      	movs	r1, #255	; 0xff
 80014c4:	4091      	lsls	r1, r2
 80014c6:	000a      	movs	r2, r1
 80014c8:	43d2      	mvns	r2, r2
 80014ca:	401a      	ands	r2, r3
 80014cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	019b      	lsls	r3, r3, #6
 80014d2:	22ff      	movs	r2, #255	; 0xff
 80014d4:	401a      	ands	r2, r3
 80014d6:	1dfb      	adds	r3, r7, #7
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	0018      	movs	r0, r3
 80014dc:	2303      	movs	r3, #3
 80014de:	4003      	ands	r3, r0
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014e4:	481f      	ldr	r0, [pc, #124]	; (8001564 <__NVIC_SetPriority+0xd4>)
 80014e6:	1dfb      	adds	r3, r7, #7
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	b25b      	sxtb	r3, r3
 80014ec:	089b      	lsrs	r3, r3, #2
 80014ee:	430a      	orrs	r2, r1
 80014f0:	33c0      	adds	r3, #192	; 0xc0
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80014f6:	e031      	b.n	800155c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014f8:	4a1b      	ldr	r2, [pc, #108]	; (8001568 <__NVIC_SetPriority+0xd8>)
 80014fa:	1dfb      	adds	r3, r7, #7
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	0019      	movs	r1, r3
 8001500:	230f      	movs	r3, #15
 8001502:	400b      	ands	r3, r1
 8001504:	3b08      	subs	r3, #8
 8001506:	089b      	lsrs	r3, r3, #2
 8001508:	3306      	adds	r3, #6
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	18d3      	adds	r3, r2, r3
 800150e:	3304      	adds	r3, #4
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	1dfa      	adds	r2, r7, #7
 8001514:	7812      	ldrb	r2, [r2, #0]
 8001516:	0011      	movs	r1, r2
 8001518:	2203      	movs	r2, #3
 800151a:	400a      	ands	r2, r1
 800151c:	00d2      	lsls	r2, r2, #3
 800151e:	21ff      	movs	r1, #255	; 0xff
 8001520:	4091      	lsls	r1, r2
 8001522:	000a      	movs	r2, r1
 8001524:	43d2      	mvns	r2, r2
 8001526:	401a      	ands	r2, r3
 8001528:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	019b      	lsls	r3, r3, #6
 800152e:	22ff      	movs	r2, #255	; 0xff
 8001530:	401a      	ands	r2, r3
 8001532:	1dfb      	adds	r3, r7, #7
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	0018      	movs	r0, r3
 8001538:	2303      	movs	r3, #3
 800153a:	4003      	ands	r3, r0
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001540:	4809      	ldr	r0, [pc, #36]	; (8001568 <__NVIC_SetPriority+0xd8>)
 8001542:	1dfb      	adds	r3, r7, #7
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	001c      	movs	r4, r3
 8001548:	230f      	movs	r3, #15
 800154a:	4023      	ands	r3, r4
 800154c:	3b08      	subs	r3, #8
 800154e:	089b      	lsrs	r3, r3, #2
 8001550:	430a      	orrs	r2, r1
 8001552:	3306      	adds	r3, #6
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	18c3      	adds	r3, r0, r3
 8001558:	3304      	adds	r3, #4
 800155a:	601a      	str	r2, [r3, #0]
}
 800155c:	46c0      	nop			; (mov r8, r8)
 800155e:	46bd      	mov	sp, r7
 8001560:	b003      	add	sp, #12
 8001562:	bd90      	pop	{r4, r7, pc}
 8001564:	e000e100 	.word	0xe000e100
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	1e5a      	subs	r2, r3, #1
 8001578:	2380      	movs	r3, #128	; 0x80
 800157a:	045b      	lsls	r3, r3, #17
 800157c:	429a      	cmp	r2, r3
 800157e:	d301      	bcc.n	8001584 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001580:	2301      	movs	r3, #1
 8001582:	e010      	b.n	80015a6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001584:	4b0a      	ldr	r3, [pc, #40]	; (80015b0 <SysTick_Config+0x44>)
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	3a01      	subs	r2, #1
 800158a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800158c:	2301      	movs	r3, #1
 800158e:	425b      	negs	r3, r3
 8001590:	2103      	movs	r1, #3
 8001592:	0018      	movs	r0, r3
 8001594:	f7ff ff7c 	bl	8001490 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001598:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <SysTick_Config+0x44>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800159e:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <SysTick_Config+0x44>)
 80015a0:	2207      	movs	r2, #7
 80015a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	0018      	movs	r0, r3
 80015a8:	46bd      	mov	sp, r7
 80015aa:	b002      	add	sp, #8
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	46c0      	nop			; (mov r8, r8)
 80015b0:	e000e010 	.word	0xe000e010

080015b4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60b9      	str	r1, [r7, #8]
 80015bc:	607a      	str	r2, [r7, #4]
 80015be:	210f      	movs	r1, #15
 80015c0:	187b      	adds	r3, r7, r1
 80015c2:	1c02      	adds	r2, r0, #0
 80015c4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80015c6:	68ba      	ldr	r2, [r7, #8]
 80015c8:	187b      	adds	r3, r7, r1
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	b25b      	sxtb	r3, r3
 80015ce:	0011      	movs	r1, r2
 80015d0:	0018      	movs	r0, r3
 80015d2:	f7ff ff5d 	bl	8001490 <__NVIC_SetPriority>
}
 80015d6:	46c0      	nop			; (mov r8, r8)
 80015d8:	46bd      	mov	sp, r7
 80015da:	b004      	add	sp, #16
 80015dc:	bd80      	pop	{r7, pc}

080015de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b082      	sub	sp, #8
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	0002      	movs	r2, r0
 80015e6:	1dfb      	adds	r3, r7, #7
 80015e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015ea:	1dfb      	adds	r3, r7, #7
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	b25b      	sxtb	r3, r3
 80015f0:	0018      	movs	r0, r3
 80015f2:	f7ff ff33 	bl	800145c <__NVIC_EnableIRQ>
}
 80015f6:	46c0      	nop			; (mov r8, r8)
 80015f8:	46bd      	mov	sp, r7
 80015fa:	b002      	add	sp, #8
 80015fc:	bd80      	pop	{r7, pc}

080015fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b082      	sub	sp, #8
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	0018      	movs	r0, r3
 800160a:	f7ff ffaf 	bl	800156c <SysTick_Config>
 800160e:	0003      	movs	r3, r0
}
 8001610:	0018      	movs	r0, r3
 8001612:	46bd      	mov	sp, r7
 8001614:	b002      	add	sp, #8
 8001616:	bd80      	pop	{r7, pc}

08001618 <ADC_Init>:
 * PUBLIC FUNCTIONS
 */


void ADC_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
	CLK_EnableADCCLK();
 800161c:	f000 f992 	bl	8001944 <CLK_EnableADCCLK>
	__HAL_RCC_ADC1_CLK_ENABLE();
 8001620:	4b29      	ldr	r3, [pc, #164]	; (80016c8 <ADC_Init+0xb0>)
 8001622:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001624:	4b28      	ldr	r3, [pc, #160]	; (80016c8 <ADC_Init+0xb0>)
 8001626:	2180      	movs	r1, #128	; 0x80
 8001628:	0089      	lsls	r1, r1, #2
 800162a:	430a      	orrs	r2, r1
 800162c:	635a      	str	r2, [r3, #52]	; 0x34

	gAdc.Instance = ADC1;
 800162e:	4b27      	ldr	r3, [pc, #156]	; (80016cc <ADC_Init+0xb4>)
 8001630:	4a27      	ldr	r2, [pc, #156]	; (80016d0 <ADC_Init+0xb8>)
 8001632:	601a      	str	r2, [r3, #0]
	gAdc.Init.ClockPrescaler = ADC_CLOCK_PRESCALAR;
 8001634:	4b25      	ldr	r3, [pc, #148]	; (80016cc <ADC_Init+0xb4>)
 8001636:	2280      	movs	r2, #128	; 0x80
 8001638:	0312      	lsls	r2, r2, #12
 800163a:	605a      	str	r2, [r3, #4]
	gAdc.Init.Resolution = ADC_RESOLUTION_12B;
 800163c:	4b23      	ldr	r3, [pc, #140]	; (80016cc <ADC_Init+0xb4>)
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
	gAdc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001642:	4b22      	ldr	r3, [pc, #136]	; (80016cc <ADC_Init+0xb4>)
 8001644:	2200      	movs	r2, #0
 8001646:	60da      	str	r2, [r3, #12]
	gAdc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001648:	4b20      	ldr	r3, [pc, #128]	; (80016cc <ADC_Init+0xb4>)
 800164a:	2201      	movs	r2, #1
 800164c:	611a      	str	r2, [r3, #16]
	gAdc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800164e:	4b1f      	ldr	r3, [pc, #124]	; (80016cc <ADC_Init+0xb4>)
 8001650:	2204      	movs	r2, #4
 8001652:	615a      	str	r2, [r3, #20]
	gAdc.Init.LowPowerAutoWait = DISABLE;
 8001654:	4b1d      	ldr	r3, [pc, #116]	; (80016cc <ADC_Init+0xb4>)
 8001656:	2200      	movs	r2, #0
 8001658:	619a      	str	r2, [r3, #24]
	gAdc.Init.LowPowerAutoPowerOff = DISABLE;
 800165a:	4b1c      	ldr	r3, [pc, #112]	; (80016cc <ADC_Init+0xb4>)
 800165c:	2200      	movs	r2, #0
 800165e:	61da      	str	r2, [r3, #28]
	gAdc.Init.ContinuousConvMode = DISABLE;
 8001660:	4b1a      	ldr	r3, [pc, #104]	; (80016cc <ADC_Init+0xb4>)
 8001662:	2220      	movs	r2, #32
 8001664:	2100      	movs	r1, #0
 8001666:	5499      	strb	r1, [r3, r2]
	gAdc.Init.DiscontinuousConvMode = DISABLE;
 8001668:	4b18      	ldr	r3, [pc, #96]	; (80016cc <ADC_Init+0xb4>)
 800166a:	2221      	movs	r2, #33	; 0x21
 800166c:	2100      	movs	r1, #0
 800166e:	5499      	strb	r1, [r3, r2]
	gAdc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001670:	4b16      	ldr	r3, [pc, #88]	; (80016cc <ADC_Init+0xb4>)
 8001672:	22c2      	movs	r2, #194	; 0xc2
 8001674:	32ff      	adds	r2, #255	; 0xff
 8001676:	625a      	str	r2, [r3, #36]	; 0x24
	gAdc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001678:	4b14      	ldr	r3, [pc, #80]	; (80016cc <ADC_Init+0xb4>)
 800167a:	2200      	movs	r2, #0
 800167c:	629a      	str	r2, [r3, #40]	; 0x28
	gAdc.Init.DMAContinuousRequests = DISABLE;
 800167e:	4b13      	ldr	r3, [pc, #76]	; (80016cc <ADC_Init+0xb4>)
 8001680:	222c      	movs	r2, #44	; 0x2c
 8001682:	2100      	movs	r1, #0
 8001684:	5499      	strb	r1, [r3, r2]
	gAdc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001686:	4b11      	ldr	r3, [pc, #68]	; (80016cc <ADC_Init+0xb4>)
 8001688:	2200      	movs	r2, #0
 800168a:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32L0)
	gAdc.Init.LowPowerFrequencyMode = DISABLE;
 800168c:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <ADC_Init+0xb4>)
 800168e:	2200      	movs	r2, #0
 8001690:	635a      	str	r2, [r3, #52]	; 0x34
	gAdc.Init.OversamplingMode = DISABLE;
 8001692:	4b0e      	ldr	r3, [pc, #56]	; (80016cc <ADC_Init+0xb4>)
 8001694:	2200      	movs	r2, #0
 8001696:	63da      	str	r2, [r3, #60]	; 0x3c
	gAdc.Init.SamplingTime = ADC_SAMPLETIME;
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <ADC_Init+0xb4>)
 800169a:	2206      	movs	r2, #6
 800169c:	639a      	str	r2, [r3, #56]	; 0x38
#elif defined(STM32F0)
	gAdc.Init.SamplingTimeCommon = ADC_SAMPLETIME;
#endif
	HAL_ADC_Init(&gAdc);
 800169e:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <ADC_Init+0xb4>)
 80016a0:	0018      	movs	r0, r3
 80016a2:	f7ff fd5f 	bl	8001164 <HAL_ADC_Init>

	ADC_Calibrate();
 80016a6:	f000 f8b9 	bl	800181c <ADC_Calibrate>

	__HAL_ADC_ENABLE(&gAdc);
 80016aa:	4b08      	ldr	r3, [pc, #32]	; (80016cc <ADC_Init+0xb4>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	689a      	ldr	r2, [r3, #8]
 80016b0:	4b06      	ldr	r3, [pc, #24]	; (80016cc <ADC_Init+0xb4>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2101      	movs	r1, #1
 80016b6:	430a      	orrs	r2, r1
 80016b8:	609a      	str	r2, [r3, #8]
	ADC_WaitForFlag(ADC_FLAG_RDY);
 80016ba:	2001      	movs	r0, #1
 80016bc:	f000 f89c 	bl	80017f8 <ADC_WaitForFlag>
}
 80016c0:	46c0      	nop			; (mov r8, r8)
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	46c0      	nop			; (mov r8, r8)
 80016c8:	40021000 	.word	0x40021000
 80016cc:	200001c0 	.word	0x200001c0
 80016d0:	40012400 	.word	0x40012400

080016d4 <ADC_Read>:

uint32_t ADC_Read(uint32_t channel)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
	_ADC_SELECT(gAdc.Instance, channel);
 80016dc:	4b0d      	ldr	r3, [pc, #52]	; (8001714 <ADC_Read+0x40>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	0352      	lsls	r2, r2, #13
 80016e4:	0b52      	lsrs	r2, r2, #13
 80016e6:	629a      	str	r2, [r3, #40]	; 0x28

	__HAL_ADC_CLEAR_FLAG(&gAdc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80016e8:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <ADC_Read+0x40>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	221c      	movs	r2, #28
 80016ee:	601a      	str	r2, [r3, #0]
	gAdc.Instance->CR |= ADC_CR_ADSTART;
 80016f0:	4b08      	ldr	r3, [pc, #32]	; (8001714 <ADC_Read+0x40>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	689a      	ldr	r2, [r3, #8]
 80016f6:	4b07      	ldr	r3, [pc, #28]	; (8001714 <ADC_Read+0x40>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2104      	movs	r1, #4
 80016fc:	430a      	orrs	r2, r1
 80016fe:	609a      	str	r2, [r3, #8]

	ADC_WaitForFlag(ADC_FLAG_EOC);
 8001700:	2004      	movs	r0, #4
 8001702:	f000 f879 	bl	80017f8 <ADC_WaitForFlag>

	return gAdc.Instance->DR;
 8001706:	4b03      	ldr	r3, [pc, #12]	; (8001714 <ADC_Read+0x40>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800170c:	0018      	movs	r0, r3
 800170e:	46bd      	mov	sp, r7
 8001710:	b002      	add	sp, #8
 8001712:	bd80      	pop	{r7, pc}
 8001714:	200001c0 	.word	0x200001c0

08001718 <AIN_AinToDivider>:
	__HAL_RCC_ADC1_CLK_DISABLE();
	CLK_DisableADCCLK();
}

uint32_t AIN_AinToDivider(uint32_t ain, uint32_t rlow, uint32_t rhigh)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
	return AIN_AinToMv(ain) * (rhigh + rlow) / rlow;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	0018      	movs	r0, r3
 8001728:	f000 f80e 	bl	8001748 <AIN_AinToMv>
 800172c:	0001      	movs	r1, r0
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	18d3      	adds	r3, r2, r3
 8001734:	434b      	muls	r3, r1
 8001736:	68b9      	ldr	r1, [r7, #8]
 8001738:	0018      	movs	r0, r3
 800173a:	f7fe fce5 	bl	8000108 <__udivsi3>
 800173e:	0003      	movs	r3, r0
}
 8001740:	0018      	movs	r0, r3
 8001742:	46bd      	mov	sp, r7
 8001744:	b004      	add	sp, #16
 8001746:	bd80      	pop	{r7, pc}

08001748 <AIN_AinToMv>:

uint32_t AIN_AinToMv(uint32_t ain)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
	return (ain * ADC_VREF) / ADC_MAX;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4a05      	ldr	r2, [pc, #20]	; (8001768 <AIN_AinToMv+0x20>)
 8001754:	4353      	muls	r3, r2
 8001756:	4905      	ldr	r1, [pc, #20]	; (800176c <AIN_AinToMv+0x24>)
 8001758:	0018      	movs	r0, r3
 800175a:	f7fe fcd5 	bl	8000108 <__udivsi3>
 800175e:	0003      	movs	r3, r0
}
 8001760:	0018      	movs	r0, r3
 8001762:	46bd      	mov	sp, r7
 8001764:	b002      	add	sp, #8
 8001766:	bd80      	pop	{r7, pc}
 8001768:	00000ce4 	.word	0x00000ce4
 800176c:	00000fff 	.word	0x00000fff

08001770 <ADC_ReadDieTemp>:

int32_t ADC_ReadDieTemp(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
	ADC->CCR |= ADC_CCR_TSEN;
 8001776:	4b19      	ldr	r3, [pc, #100]	; (80017dc <ADC_ReadDieTemp+0x6c>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	4b18      	ldr	r3, [pc, #96]	; (80017dc <ADC_ReadDieTemp+0x6c>)
 800177c:	2180      	movs	r1, #128	; 0x80
 800177e:	0409      	lsls	r1, r1, #16
 8001780:	430a      	orrs	r2, r1
 8001782:	601a      	str	r2, [r3, #0]
	int32_t ain = ADC_Read(ADC_CHANNEL_TEMPSENSOR);
 8001784:	4b16      	ldr	r3, [pc, #88]	; (80017e0 <ADC_ReadDieTemp+0x70>)
 8001786:	0018      	movs	r0, r3
 8001788:	f7ff ffa4 	bl	80016d4 <ADC_Read>
 800178c:	0003      	movs	r3, r0
 800178e:	607b      	str	r3, [r7, #4]
	ADC->CCR &= ~ADC_CCR_TSEN;
 8001790:	4b12      	ldr	r3, [pc, #72]	; (80017dc <ADC_ReadDieTemp+0x6c>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	4b11      	ldr	r3, [pc, #68]	; (80017dc <ADC_ReadDieTemp+0x6c>)
 8001796:	4913      	ldr	r1, [pc, #76]	; (80017e4 <ADC_ReadDieTemp+0x74>)
 8001798:	400a      	ands	r2, r1
 800179a:	601a      	str	r2, [r3, #0]

	// The temp sensor is not ratiometric, so the vref must be adjusted for.
	ain = ain * ADC_VREF / TS_CAL_VREF;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4a12      	ldr	r2, [pc, #72]	; (80017e8 <ADC_ReadDieTemp+0x78>)
 80017a0:	4353      	muls	r3, r2
 80017a2:	4912      	ldr	r1, [pc, #72]	; (80017ec <ADC_ReadDieTemp+0x7c>)
 80017a4:	0018      	movs	r0, r3
 80017a6:	f7fe fd39 	bl	800021c <__divsi3>
 80017aa:	0003      	movs	r3, r0
 80017ac:	607b      	str	r3, [r7, #4]
	return ((ain - TS_CAL1_AIN) * (TS_CAL2_DEG - TS_CAL1_DEG) / (TS_CAL2_AIN - TS_CAL1_AIN)) + TS_CAL1_DEG;
 80017ae:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <ADC_ReadDieTemp+0x80>)
 80017b0:	881b      	ldrh	r3, [r3, #0]
 80017b2:	001a      	movs	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	1a9b      	subs	r3, r3, r2
 80017b8:	2264      	movs	r2, #100	; 0x64
 80017ba:	4353      	muls	r3, r2
 80017bc:	4a0d      	ldr	r2, [pc, #52]	; (80017f4 <ADC_ReadDieTemp+0x84>)
 80017be:	8812      	ldrh	r2, [r2, #0]
 80017c0:	0011      	movs	r1, r2
 80017c2:	4a0b      	ldr	r2, [pc, #44]	; (80017f0 <ADC_ReadDieTemp+0x80>)
 80017c4:	8812      	ldrh	r2, [r2, #0]
 80017c6:	1a8a      	subs	r2, r1, r2
 80017c8:	0011      	movs	r1, r2
 80017ca:	0018      	movs	r0, r3
 80017cc:	f7fe fd26 	bl	800021c <__divsi3>
 80017d0:	0003      	movs	r3, r0
 80017d2:	331e      	adds	r3, #30
}
 80017d4:	0018      	movs	r0, r3
 80017d6:	46bd      	mov	sp, r7
 80017d8:	b002      	add	sp, #8
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40012708 	.word	0x40012708
 80017e0:	48040000 	.word	0x48040000
 80017e4:	ff7fffff 	.word	0xff7fffff
 80017e8:	00000ce4 	.word	0x00000ce4
 80017ec:	00000bb8 	.word	0x00000bb8
 80017f0:	1ff8007a 	.word	0x1ff8007a
 80017f4:	1ff8007e 	.word	0x1ff8007e

080017f8 <ADC_WaitForFlag>:
/*
 * PRIVATE FUNCTIONS
 */

static void ADC_WaitForFlag(uint32_t flag)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
	while (!(gAdc.Instance->ISR & flag)) { }
 8001800:	46c0      	nop			; (mov r8, r8)
 8001802:	4b05      	ldr	r3, [pc, #20]	; (8001818 <ADC_WaitForFlag+0x20>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	4013      	ands	r3, r2
 800180c:	d0f9      	beq.n	8001802 <ADC_WaitForFlag+0xa>
}
 800180e:	46c0      	nop			; (mov r8, r8)
 8001810:	46c0      	nop			; (mov r8, r8)
 8001812:	46bd      	mov	sp, r7
 8001814:	b002      	add	sp, #8
 8001816:	bd80      	pop	{r7, pc}
 8001818:	200001c0 	.word	0x200001c0

0800181c <ADC_Calibrate>:

static void ADC_Calibrate(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
	// Note, ADC must be disabled for this to occurr
	gAdc.Instance->CR |= ADC_CR_ADCAL;
 8001820:	4b09      	ldr	r3, [pc, #36]	; (8001848 <ADC_Calibrate+0x2c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	689a      	ldr	r2, [r3, #8]
 8001826:	4b08      	ldr	r3, [pc, #32]	; (8001848 <ADC_Calibrate+0x2c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2180      	movs	r1, #128	; 0x80
 800182c:	0609      	lsls	r1, r1, #24
 800182e:	430a      	orrs	r2, r1
 8001830:	609a      	str	r2, [r3, #8]
	while(gAdc.Instance->CR & ADC_CR_ADCAL);
 8001832:	46c0      	nop			; (mov r8, r8)
 8001834:	4b04      	ldr	r3, [pc, #16]	; (8001848 <ADC_Calibrate+0x2c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	2b00      	cmp	r3, #0
 800183c:	dbfa      	blt.n	8001834 <ADC_Calibrate+0x18>
}
 800183e:	46c0      	nop			; (mov r8, r8)
 8001840:	46c0      	nop			; (mov r8, r8)
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	46c0      	nop			; (mov r8, r8)
 8001848:	200001c0 	.word	0x200001c0

0800184c <CLK_InitSYSCLK>:
/*
 * PUBLIC FUNCTIONS
 */

void CLK_InitSYSCLK(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
	__HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 8001850:	4b34      	ldr	r3, [pc, #208]	; (8001924 <CLK_InitSYSCLK+0xd8>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	4b33      	ldr	r3, [pc, #204]	; (8001924 <CLK_InitSYSCLK+0xd8>)
 8001856:	2101      	movs	r1, #1
 8001858:	430a      	orrs	r2, r1
 800185a:	601a      	str	r2, [r3, #0]
#ifdef CLK_USE_HSE
	__HAL_RCC_HSE_CONFIG(RCC_HSE_ON);
	while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U);
#endif
#ifdef CLK_USE_HSI
	__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_HSICALIBRATION_DEFAULT);
 800185c:	4b32      	ldr	r3, [pc, #200]	; (8001928 <CLK_InitSYSCLK+0xdc>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	4a32      	ldr	r2, [pc, #200]	; (800192c <CLK_InitSYSCLK+0xe0>)
 8001862:	401a      	ands	r2, r3
 8001864:	4b30      	ldr	r3, [pc, #192]	; (8001928 <CLK_InitSYSCLK+0xdc>)
 8001866:	2180      	movs	r1, #128	; 0x80
 8001868:	0149      	lsls	r1, r1, #5
 800186a:	430a      	orrs	r2, r1
 800186c:	605a      	str	r2, [r3, #4]
	__HAL_RCC_HSI_CONFIG(RCC_HSI_ON);
 800186e:	4b2e      	ldr	r3, [pc, #184]	; (8001928 <CLK_InitSYSCLK+0xdc>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2209      	movs	r2, #9
 8001874:	4393      	bics	r3, r2
 8001876:	001a      	movs	r2, r3
 8001878:	4b2b      	ldr	r3, [pc, #172]	; (8001928 <CLK_InitSYSCLK+0xdc>)
 800187a:	2101      	movs	r1, #1
 800187c:	430a      	orrs	r2, r1
 800187e:	601a      	str	r2, [r3, #0]
	while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U);
 8001880:	46c0      	nop			; (mov r8, r8)
 8001882:	4b29      	ldr	r3, [pc, #164]	; (8001928 <CLK_InitSYSCLK+0xdc>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2204      	movs	r2, #4
 8001888:	4013      	ands	r3, r2
 800188a:	d0fa      	beq.n	8001882 <CLK_InitSYSCLK+0x36>
	__HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_MSICALIBRATION_DEFAULT);
#endif

#ifdef CLK_USE_PLL
	// PLL must be disables for configuration.
	__HAL_RCC_PLL_DISABLE();
 800188c:	4b26      	ldr	r3, [pc, #152]	; (8001928 <CLK_InitSYSCLK+0xdc>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	4b25      	ldr	r3, [pc, #148]	; (8001928 <CLK_InitSYSCLK+0xdc>)
 8001892:	4927      	ldr	r1, [pc, #156]	; (8001930 <CLK_InitSYSCLK+0xe4>)
 8001894:	400a      	ands	r2, r1
 8001896:	601a      	str	r2, [r3, #0]
	while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U);
 8001898:	46c0      	nop			; (mov r8, r8)
 800189a:	4b23      	ldr	r3, [pc, #140]	; (8001928 <CLK_InitSYSCLK+0xdc>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	2380      	movs	r3, #128	; 0x80
 80018a0:	049b      	lsls	r3, r3, #18
 80018a2:	4013      	ands	r3, r2
 80018a4:	d1f9      	bne.n	800189a <CLK_InitSYSCLK+0x4e>
	__HAL_RCC_PLL_CONFIG(CLK_PLL_SRC, CLK_PLL_MUL_CFG, CLK_PLL_DIV_CFG);
 80018a6:	4b20      	ldr	r3, [pc, #128]	; (8001928 <CLK_InitSYSCLK+0xdc>)
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	4a22      	ldr	r2, [pc, #136]	; (8001934 <CLK_InitSYSCLK+0xe8>)
 80018ac:	401a      	ands	r2, r3
 80018ae:	4b1e      	ldr	r3, [pc, #120]	; (8001928 <CLK_InitSYSCLK+0xdc>)
 80018b0:	2188      	movs	r1, #136	; 0x88
 80018b2:	03c9      	lsls	r1, r1, #15
 80018b4:	430a      	orrs	r2, r1
 80018b6:	60da      	str	r2, [r3, #12]
	__HAL_RCC_PLL_ENABLE();
 80018b8:	4b1b      	ldr	r3, [pc, #108]	; (8001928 <CLK_InitSYSCLK+0xdc>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	4b1a      	ldr	r3, [pc, #104]	; (8001928 <CLK_InitSYSCLK+0xdc>)
 80018be:	2180      	movs	r1, #128	; 0x80
 80018c0:	0449      	lsls	r1, r1, #17
 80018c2:	430a      	orrs	r2, r1
 80018c4:	601a      	str	r2, [r3, #0]
	while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U);
 80018c6:	46c0      	nop			; (mov r8, r8)
 80018c8:	4b17      	ldr	r3, [pc, #92]	; (8001928 <CLK_InitSYSCLK+0xdc>)
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	2380      	movs	r3, #128	; 0x80
 80018ce:	049b      	lsls	r3, r3, #18
 80018d0:	4013      	ands	r3, r2
 80018d2:	d0f9      	beq.n	80018c8 <CLK_InitSYSCLK+0x7c>
	 * CONFIGURE CLOCKS
	 * Select the sources and dividers for internal clocks
	 */

	// Configure AHBCLK divider
	MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80018d4:	4b14      	ldr	r3, [pc, #80]	; (8001928 <CLK_InitSYSCLK+0xdc>)
 80018d6:	68da      	ldr	r2, [r3, #12]
 80018d8:	4b13      	ldr	r3, [pc, #76]	; (8001928 <CLK_InitSYSCLK+0xdc>)
 80018da:	21f0      	movs	r1, #240	; 0xf0
 80018dc:	438a      	bics	r2, r1
 80018de:	60da      	str	r2, [r3, #12]

	// Apply SYSCLK source
	__HAL_RCC_SYSCLK_CONFIG(CLK_SYSCLK_SRC);
 80018e0:	4b11      	ldr	r3, [pc, #68]	; (8001928 <CLK_InitSYSCLK+0xdc>)
 80018e2:	68da      	ldr	r2, [r3, #12]
 80018e4:	4b10      	ldr	r3, [pc, #64]	; (8001928 <CLK_InitSYSCLK+0xdc>)
 80018e6:	2103      	movs	r1, #3
 80018e8:	430a      	orrs	r2, r1
 80018ea:	60da      	str	r2, [r3, #12]
#elif (CLK_SYSCLK_SRC == RCC_SYSCLKSOURCE_STATUS_HSI)
	while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI);
#elif (CLK_SYSCLK_SRC == RCC_SYSCLKSOURCE_STATUS_HSE)
	while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE);
#elif (CLK_SYSCLK_SRC == RCC_SYSCLKSOURCE_PLLCLK)
	while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK);
 80018ec:	46c0      	nop			; (mov r8, r8)
 80018ee:	4b0e      	ldr	r3, [pc, #56]	; (8001928 <CLK_InitSYSCLK+0xdc>)
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	220c      	movs	r2, #12
 80018f4:	4013      	ands	r3, r2
 80018f6:	2b0c      	cmp	r3, #12
 80018f8:	d1f9      	bne.n	80018ee <CLK_InitSYSCLK+0xa2>
#endif

	// Configure PCLK dividers (peripheral clock)
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV1);
 80018fa:	4b0b      	ldr	r3, [pc, #44]	; (8001928 <CLK_InitSYSCLK+0xdc>)
 80018fc:	68da      	ldr	r2, [r3, #12]
 80018fe:	4b0a      	ldr	r3, [pc, #40]	; (8001928 <CLK_InitSYSCLK+0xdc>)
 8001900:	490d      	ldr	r1, [pc, #52]	; (8001938 <CLK_InitSYSCLK+0xec>)
 8001902:	400a      	ands	r2, r1
 8001904:	60da      	str	r2, [r3, #12]

#ifdef STM32L0
	// STM32L0's have a second PCLK. The shift by 3 is defined like this in the HAL.
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV1 << 3);
 8001906:	4b08      	ldr	r3, [pc, #32]	; (8001928 <CLK_InitSYSCLK+0xdc>)
 8001908:	68da      	ldr	r2, [r3, #12]
 800190a:	4b07      	ldr	r3, [pc, #28]	; (8001928 <CLK_InitSYSCLK+0xdc>)
 800190c:	490b      	ldr	r1, [pc, #44]	; (800193c <CLK_InitSYSCLK+0xf0>)
 800190e:	400a      	ands	r2, r1
 8001910:	60da      	str	r2, [r3, #12]

#ifndef CLK_USE_HSI
	__HAL_RCC_HSI_CONFIG(RCC_HSI_OFF);
#endif
#ifndef CLK_USE_MSI
	__HAL_RCC_MSI_DISABLE();
 8001912:	4b05      	ldr	r3, [pc, #20]	; (8001928 <CLK_InitSYSCLK+0xdc>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	4b04      	ldr	r3, [pc, #16]	; (8001928 <CLK_InitSYSCLK+0xdc>)
 8001918:	4909      	ldr	r1, [pc, #36]	; (8001940 <CLK_InitSYSCLK+0xf4>)
 800191a:	400a      	ands	r2, r1
 800191c:	601a      	str	r2, [r3, #0]
#endif
}
 800191e:	46c0      	nop			; (mov r8, r8)
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40022000 	.word	0x40022000
 8001928:	40021000 	.word	0x40021000
 800192c:	ffffe0ff 	.word	0xffffe0ff
 8001930:	feffffff 	.word	0xfeffffff
 8001934:	ff02ffff 	.word	0xff02ffff
 8001938:	fffff8ff 	.word	0xfffff8ff
 800193c:	ffffc7ff 	.word	0xffffc7ff
 8001940:	fffffeff 	.word	0xfffffeff

08001944 <CLK_EnableADCCLK>:
	__HAL_RCC_LSI_DISABLE();
#endif
}

void CLK_EnableADCCLK(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
	// ADC CLK is driven off the HSI.
#ifndef CLK_USE_HSI
	__HAL_RCC_HSI_CONFIG(RCC_HSI_ON);
	while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U);
#endif
}
 8001948:	46c0      	nop			; (mov r8, r8)
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
	...

08001950 <CORE_GetTick>:
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
	return gTicks;
 8001954:	4b02      	ldr	r3, [pc, #8]	; (8001960 <CORE_GetTick+0x10>)
 8001956:	681b      	ldr	r3, [r3, #0]
}
 8001958:	0018      	movs	r0, r3
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	46c0      	nop			; (mov r8, r8)
 8001960:	2000021c 	.word	0x2000021c

08001964 <GPIO_Deinit>:
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
	GPIO_Init(gpio, pin, GPIO_Mode_Analog);
 800196e:	6839      	ldr	r1, [r7, #0]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2203      	movs	r2, #3
 8001974:	0018      	movs	r0, r3
 8001976:	f000 f97b 	bl	8001c70 <GPIO_Init>
}
 800197a:	46c0      	nop			; (mov r8, r8)
 800197c:	46bd      	mov	sp, r7
 800197e:	b002      	add	sp, #8
 8001980:	bd80      	pop	{r7, pc}
	...

08001984 <CLK_GetHCLKFreq>:
/*
 * INLINE FUNCTION DEFINITIONS
 */

static inline uint32_t CLK_GetHCLKFreq(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
	return CLK_SYSCLK_FREQ;
 8001988:	4b01      	ldr	r3, [pc, #4]	; (8001990 <CLK_GetHCLKFreq+0xc>)
}
 800198a:	0018      	movs	r0, r3
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	01e84800 	.word	0x01e84800

08001994 <CORE_Init>:
/*
 * PUBLIC FUNCTIONS
 */

void CORE_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
#if defined(STM32L0)
	__HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001998:	4b15      	ldr	r3, [pc, #84]	; (80019f0 <CORE_Init+0x5c>)
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	4b14      	ldr	r3, [pc, #80]	; (80019f0 <CORE_Init+0x5c>)
 800199e:	2140      	movs	r1, #64	; 0x40
 80019a0:	430a      	orrs	r2, r1
 80019a2:	601a      	str	r2, [r3, #0]

#elif defined(STM32F0)
	__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 80019a4:	4b13      	ldr	r3, [pc, #76]	; (80019f4 <CORE_Init+0x60>)
 80019a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019a8:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <CORE_Init+0x60>)
 80019aa:	2101      	movs	r1, #1
 80019ac:	430a      	orrs	r2, r1
 80019ae:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_RCC_PWR_CLK_ENABLE();
 80019b0:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <CORE_Init+0x60>)
 80019b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019b4:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <CORE_Init+0x60>)
 80019b6:	2180      	movs	r1, #128	; 0x80
 80019b8:	0549      	lsls	r1, r1, #21
 80019ba:	430a      	orrs	r2, r1
 80019bc:	639a      	str	r2, [r3, #56]	; 0x38
#ifdef STM32L0
#ifndef USB_ENABLE
	// This seems to disrupt USB. Future investigation needed.
	SET_BIT(PWR->CR, PWR_CR_ULP | PWR_CR_FWU); // Enable Ultra low power mode & Fast wakeup
 80019be:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <CORE_Init+0x64>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	4b0d      	ldr	r3, [pc, #52]	; (80019f8 <CORE_Init+0x64>)
 80019c4:	21c0      	movs	r1, #192	; 0xc0
 80019c6:	00c9      	lsls	r1, r1, #3
 80019c8:	430a      	orrs	r2, r1
 80019ca:	601a      	str	r2, [r3, #0]
#endif
	__HAL_PWR_VOLTAGESCALING_CONFIG(CORE_VOLTAGE_RANGE);
 80019cc:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <CORE_Init+0x64>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a0a      	ldr	r2, [pc, #40]	; (80019fc <CORE_Init+0x68>)
 80019d2:	401a      	ands	r2, r3
 80019d4:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <CORE_Init+0x64>)
 80019d6:	2180      	movs	r1, #128	; 0x80
 80019d8:	0109      	lsls	r1, r1, #4
 80019da:	430a      	orrs	r2, r1
 80019dc:	601a      	str	r2, [r3, #0]
#endif

	CLK_InitSYSCLK();
 80019de:	f7ff ff35 	bl	800184c <CLK_InitSYSCLK>
	CORE_InitSysTick();
 80019e2:	f000 f82e 	bl	8001a42 <CORE_InitSysTick>
	CORE_InitGPIO();
 80019e6:	f000 f845 	bl	8001a74 <CORE_InitGPIO>
#ifdef	US_ENABLE
	US_Init();
#endif
}
 80019ea:	46c0      	nop			; (mov r8, r8)
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40022000 	.word	0x40022000
 80019f4:	40021000 	.word	0x40021000
 80019f8:	40007000 	.word	0x40007000
 80019fc:	ffffe7ff 	.word	0xffffe7ff

08001a00 <CORE_Idle>:

void CORE_Idle(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
	// As long as systick is on, this will at least return each millisecond.
	__WFI();
 8001a04:	bf30      	wfi
}
 8001a06:	46c0      	nop			; (mov r8, r8)
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <CORE_Delay>:
	CLK_InitSYSCLK();
	HAL_ResumeTick();
}

void CORE_Delay(uint32_t ms)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
	ms += MS_PER_SYSTICK; // Add to guarantee a minimum delay
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3301      	adds	r3, #1
 8001a18:	607b      	str	r3, [r7, #4]
	uint32_t start = CORE_GetTick();
 8001a1a:	f7ff ff99 	bl	8001950 <CORE_GetTick>
 8001a1e:	0003      	movs	r3, r0
 8001a20:	60fb      	str	r3, [r7, #12]
	while (CORE_GetTick() - start < ms)
 8001a22:	e001      	b.n	8001a28 <CORE_Delay+0x1c>
	{
		CORE_Idle();
 8001a24:	f7ff ffec 	bl	8001a00 <CORE_Idle>
	while (CORE_GetTick() - start < ms)
 8001a28:	f7ff ff92 	bl	8001950 <CORE_GetTick>
 8001a2c:	0002      	movs	r2, r0
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d8f5      	bhi.n	8001a24 <CORE_Delay+0x18>
	}
}
 8001a38:	46c0      	nop			; (mov r8, r8)
 8001a3a:	46c0      	nop			; (mov r8, r8)
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	b004      	add	sp, #16
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <CORE_InitSysTick>:
/*
 * PRIVATE FUNCTIONS
 */

void CORE_InitSysTick(void)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	af00      	add	r7, sp, #0
	HAL_SYSTICK_Config(CLK_GetHCLKFreq() / CORE_SYSTICK_FREQ);
 8001a46:	f7ff ff9d 	bl	8001984 <CLK_GetHCLKFreq>
 8001a4a:	0002      	movs	r2, r0
 8001a4c:	23fa      	movs	r3, #250	; 0xfa
 8001a4e:	0099      	lsls	r1, r3, #2
 8001a50:	0010      	movs	r0, r2
 8001a52:	f7fe fb59 	bl	8000108 <__udivsi3>
 8001a56:	0003      	movs	r3, r0
 8001a58:	0018      	movs	r0, r3
 8001a5a:	f7ff fdd0 	bl	80015fe <HAL_SYSTICK_Config>
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001a5e:	2301      	movs	r3, #1
 8001a60:	425b      	negs	r3, r3
 8001a62:	2200      	movs	r2, #0
 8001a64:	2100      	movs	r1, #0
 8001a66:	0018      	movs	r0, r3
 8001a68:	f7ff fda4 	bl	80015b4 <HAL_NVIC_SetPriority>
}
 8001a6c:	46c0      	nop			; (mov r8, r8)
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
	...

08001a74 <CORE_InitGPIO>:

void CORE_InitGPIO(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7a:	4b26      	ldr	r3, [pc, #152]	; (8001b14 <CORE_InitGPIO+0xa0>)
 8001a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a7e:	4b25      	ldr	r3, [pc, #148]	; (8001b14 <CORE_InitGPIO+0xa0>)
 8001a80:	2101      	movs	r1, #1
 8001a82:	430a      	orrs	r2, r1
 8001a84:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a86:	4b23      	ldr	r3, [pc, #140]	; (8001b14 <CORE_InitGPIO+0xa0>)
 8001a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]
#ifdef DEBUG
	// SWCLK and SWDIO on PA13, PA14
	GPIO_Deinit(GPIOA, GPIO_PIN_All & ~(GPIO_PIN_13 | GPIO_PIN_14));
 8001a92:	4a21      	ldr	r2, [pc, #132]	; (8001b18 <CORE_InitGPIO+0xa4>)
 8001a94:	23a0      	movs	r3, #160	; 0xa0
 8001a96:	05db      	lsls	r3, r3, #23
 8001a98:	0011      	movs	r1, r2
 8001a9a:	0018      	movs	r0, r3
 8001a9c:	f7ff ff62 	bl	8001964 <GPIO_Deinit>
#else
	GPIO_Deinit(GPIOA, GPIO_PIN_All);
#endif

	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa0:	4b1c      	ldr	r3, [pc, #112]	; (8001b14 <CORE_InitGPIO+0xa0>)
 8001aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aa4:	4b1b      	ldr	r3, [pc, #108]	; (8001b14 <CORE_InitGPIO+0xa0>)
 8001aa6:	2102      	movs	r1, #2
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	62da      	str	r2, [r3, #44]	; 0x2c
 8001aac:	4b19      	ldr	r3, [pc, #100]	; (8001b14 <CORE_InitGPIO+0xa0>)
 8001aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	60bb      	str	r3, [r7, #8]
 8001ab6:	68bb      	ldr	r3, [r7, #8]
	GPIO_Deinit(GPIOB, GPIO_PIN_All);
 8001ab8:	4a18      	ldr	r2, [pc, #96]	; (8001b1c <CORE_InitGPIO+0xa8>)
 8001aba:	4b19      	ldr	r3, [pc, #100]	; (8001b20 <CORE_InitGPIO+0xac>)
 8001abc:	0011      	movs	r1, r2
 8001abe:	0018      	movs	r0, r3
 8001ac0:	f7ff ff50 	bl	8001964 <GPIO_Deinit>

	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001ac4:	4b13      	ldr	r3, [pc, #76]	; (8001b14 <CORE_InitGPIO+0xa0>)
 8001ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ac8:	4b12      	ldr	r3, [pc, #72]	; (8001b14 <CORE_InitGPIO+0xa0>)
 8001aca:	2104      	movs	r1, #4
 8001acc:	430a      	orrs	r2, r1
 8001ace:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ad0:	4b10      	ldr	r3, [pc, #64]	; (8001b14 <CORE_InitGPIO+0xa0>)
 8001ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad4:	2204      	movs	r2, #4
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	607b      	str	r3, [r7, #4]
 8001ada:	687b      	ldr	r3, [r7, #4]
	GPIO_Deinit(GPIOC, GPIO_PIN_All);
 8001adc:	4a0f      	ldr	r2, [pc, #60]	; (8001b1c <CORE_InitGPIO+0xa8>)
 8001ade:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <CORE_InitGPIO+0xb0>)
 8001ae0:	0011      	movs	r1, r2
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	f7ff ff3e 	bl	8001964 <GPIO_Deinit>

#if defined(GPIOD)
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001ae8:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <CORE_InitGPIO+0xa0>)
 8001aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aec:	4b09      	ldr	r3, [pc, #36]	; (8001b14 <CORE_InitGPIO+0xa0>)
 8001aee:	2108      	movs	r1, #8
 8001af0:	430a      	orrs	r2, r1
 8001af2:	62da      	str	r2, [r3, #44]	; 0x2c
 8001af4:	4b07      	ldr	r3, [pc, #28]	; (8001b14 <CORE_InitGPIO+0xa0>)
 8001af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af8:	2208      	movs	r2, #8
 8001afa:	4013      	ands	r3, r2
 8001afc:	603b      	str	r3, [r7, #0]
 8001afe:	683b      	ldr	r3, [r7, #0]
	GPIO_Deinit(GPIOD, GPIO_PIN_All);
 8001b00:	4a06      	ldr	r2, [pc, #24]	; (8001b1c <CORE_InitGPIO+0xa8>)
 8001b02:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <CORE_InitGPIO+0xb4>)
 8001b04:	0011      	movs	r1, r2
 8001b06:	0018      	movs	r0, r3
 8001b08:	f7ff ff2c 	bl	8001964 <GPIO_Deinit>
#endif
}
 8001b0c:	46c0      	nop			; (mov r8, r8)
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	b004      	add	sp, #16
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40021000 	.word	0x40021000
 8001b18:	00009fff 	.word	0x00009fff
 8001b1c:	0000ffff 	.word	0x0000ffff
 8001b20:	50000400 	.word	0x50000400
 8001b24:	50000800 	.word	0x50000800
 8001b28:	50000c00 	.word	0x50000c00

08001b2c <SysTick_Handler>:
/*
 * INTERRUPT ROUTINES
 */

void SysTick_Handler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
	gTicks += MS_PER_SYSTICK;
 8001b30:	4b03      	ldr	r3, [pc, #12]	; (8001b40 <SysTick_Handler+0x14>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	1c5a      	adds	r2, r3, #1
 8001b36:	4b02      	ldr	r3, [pc, #8]	; (8001b40 <SysTick_Handler+0x14>)
 8001b38:	601a      	str	r2, [r3, #0]
	if (gTickCallback != NULL)
	{
		gTickCallback();
	}
#endif
}
 8001b3a:	46c0      	nop			; (mov r8, r8)
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	2000021c 	.word	0x2000021c

08001b44 <EEPROM_Read>:
	}
	EEPROM_Lock();
}

void EEPROM_Read(uint32_t offset, void * data, uint32_t size)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
	uint8_t * eeprom = (uint8_t *)(DATA_EEPROM_BASE + offset);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	4a07      	ldr	r2, [pc, #28]	; (8001b70 <EEPROM_Read+0x2c>)
 8001b54:	4694      	mov	ip, r2
 8001b56:	4463      	add	r3, ip
 8001b58:	617b      	str	r3, [r7, #20]
	memcpy(data, eeprom, size);
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	6979      	ldr	r1, [r7, #20]
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	0018      	movs	r0, r3
 8001b62:	f000 fd2d 	bl	80025c0 <memcpy>
}
 8001b66:	46c0      	nop			; (mov r8, r8)
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	b006      	add	sp, #24
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	46c0      	nop			; (mov r8, r8)
 8001b70:	08080000 	.word	0x08080000

08001b74 <GPIO_Set>:
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
	gpio->BSRR = (uint32_t)pin;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	619a      	str	r2, [r3, #24]
}
 8001b84:	46c0      	nop			; (mov r8, r8)
 8001b86:	46bd      	mov	sp, r7
 8001b88:	b002      	add	sp, #8
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <GPIO_Reset>:
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
	gpio->BRR = (uint32_t)pin;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b9c:	46c0      	nop			; (mov r8, r8)
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	b002      	add	sp, #8
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <GPIO_Write>:
/*
 * PUBLIC FUNCTIONS
 */

void GPIO_Write(GPIO_t * gpio, uint32_t pin, GPIO_State_t state)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	1dfb      	adds	r3, r7, #7
 8001bb0:	701a      	strb	r2, [r3, #0]
	if (state)
 8001bb2:	1dfb      	adds	r3, r7, #7
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d006      	beq.n	8001bc8 <GPIO_Write+0x24>
	{
		GPIO_Set(gpio, pin);
 8001bba:	68ba      	ldr	r2, [r7, #8]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	0011      	movs	r1, r2
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	f7ff ffd7 	bl	8001b74 <GPIO_Set>
	}
	else
	{
		GPIO_Reset(gpio, pin);
	}
}
 8001bc6:	e005      	b.n	8001bd4 <GPIO_Write+0x30>
		GPIO_Reset(gpio, pin);
 8001bc8:	68ba      	ldr	r2, [r7, #8]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	0011      	movs	r1, r2
 8001bce:	0018      	movs	r0, r3
 8001bd0:	f7ff ffdc 	bl	8001b8c <GPIO_Reset>
}
 8001bd4:	46c0      	nop			; (mov r8, r8)
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	b004      	add	sp, #16
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <GPIO_EnableAlternate>:

void GPIO_EnableAlternate(GPIO_t * gpio, uint32_t pin, GPIO_Flag_t flags, uint32_t af)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	603b      	str	r3, [r7, #0]
 8001be8:	1dbb      	adds	r3, r7, #6
 8001bea:	801a      	strh	r2, [r3, #0]
	GPIO_ConfigAlternate(gpio, pin, af);
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	68b9      	ldr	r1, [r7, #8]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	0018      	movs	r0, r3
 8001bf4:	f000 f8ab 	bl	8001d4e <GPIO_ConfigAlternate>
	GPIO_Init(gpio, pin, GPIO_Mode_Alternate | GPIO_Speed_High | flags);
 8001bf8:	1dbb      	adds	r3, r7, #6
 8001bfa:	881b      	ldrh	r3, [r3, #0]
 8001bfc:	4a05      	ldr	r2, [pc, #20]	; (8001c14 <GPIO_EnableAlternate+0x38>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	68b9      	ldr	r1, [r7, #8]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	0018      	movs	r0, r3
 8001c08:	f000 f832 	bl	8001c70 <GPIO_Init>
}
 8001c0c:	46c0      	nop			; (mov r8, r8)
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	b004      	add	sp, #16
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	00000302 	.word	0x00000302

08001c18 <GPIO_OnChange>:

#ifdef GPIO_USE_IRQS
void GPIO_OnChange(GPIO_t * gpio, uint32_t pin, GPIO_IT_Dir_t dir, VoidFunction_t callback)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	603b      	str	r3, [r7, #0]
 8001c24:	1dfb      	adds	r3, r7, #7
 8001c26:	701a      	strb	r2, [r3, #0]
	int n = 0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]
	while ((pin & (1 << n)) == 0) { n++; }
 8001c2c:	e002      	b.n	8001c34 <GPIO_OnChange+0x1c>
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	3301      	adds	r3, #1
 8001c32:	617b      	str	r3, [r7, #20]
 8001c34:	2201      	movs	r2, #1
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	409a      	lsls	r2, r3
 8001c3a:	0013      	movs	r3, r2
 8001c3c:	001a      	movs	r2, r3
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	4013      	ands	r3, r2
 8001c42:	d0f4      	beq.n	8001c2e <GPIO_OnChange+0x16>

	gCallback[n] = callback;
 8001c44:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <GPIO_OnChange+0x54>)
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	0092      	lsls	r2, r2, #2
 8001c4a:	6839      	ldr	r1, [r7, #0]
 8001c4c:	50d1      	str	r1, [r2, r3]

	GPIO_ConfigInterrupt(gpio, n, dir);
 8001c4e:	1dfb      	adds	r3, r7, #7
 8001c50:	781a      	ldrb	r2, [r3, #0]
 8001c52:	6979      	ldr	r1, [r7, #20]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	0018      	movs	r0, r3
 8001c58:	f000 f8b2 	bl	8001dc0 <GPIO_ConfigInterrupt>

	EXTIx_EnableIRQn(n);
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	0018      	movs	r0, r3
 8001c60:	f000 f980 	bl	8001f64 <EXTIx_EnableIRQn>
}
 8001c64:	46c0      	nop			; (mov r8, r8)
 8001c66:	46bd      	mov	sp, r7
 8001c68:	b006      	add	sp, #24
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	20000220 	.word	0x20000220

08001c70 <GPIO_Init>:
#endif //GPIO_USE_IRQS

void GPIO_Init(GPIO_t * gpio, uint32_t pins, GPIO_Flag_t mode)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b088      	sub	sp, #32
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	1dbb      	adds	r3, r7, #6
 8001c7c:	801a      	strh	r2, [r3, #0]
	uint32_t pinmask = GPIO_SWARBitDouble(pins);
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	0018      	movs	r0, r3
 8001c82:	f000 f933 	bl	8001eec <GPIO_SWARBitDouble>
 8001c86:	0003      	movs	r3, r0
 8001c88:	61fb      	str	r3, [r7, #28]

	GPIO_Mode_t dir = mode & GPIO_Mode_MASK;
 8001c8a:	1dbb      	adds	r3, r7, #6
 8001c8c:	881b      	ldrh	r3, [r3, #0]
 8001c8e:	b2da      	uxtb	r2, r3
 8001c90:	201b      	movs	r0, #27
 8001c92:	183b      	adds	r3, r7, r0
 8001c94:	2103      	movs	r1, #3
 8001c96:	400a      	ands	r2, r1
 8001c98:	701a      	strb	r2, [r3, #0]

	if (dir == GPIO_Mode_Alternate || dir == GPIO_Mode_Output)
 8001c9a:	183b      	adds	r3, r7, r0
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d003      	beq.n	8001caa <GPIO_Init+0x3a>
 8001ca2:	183b      	adds	r3, r7, r0
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d126      	bne.n	8001cf8 <GPIO_Init+0x88>
	{
		uint32_t speed = (mode & GPIO_Speed_MASK) >> GPIOCFG_SPEED_POS;
 8001caa:	1dbb      	adds	r3, r7, #6
 8001cac:	881b      	ldrh	r3, [r3, #0]
 8001cae:	121b      	asrs	r3, r3, #8
 8001cb0:	001a      	movs	r2, r3
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	617b      	str	r3, [r7, #20]
		MODIFY_REG( gpio->OSPEEDR, pinmask * GPIO_OSPEEDER_OSPEED0, pinmask * speed );
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6899      	ldr	r1, [r3, #8]
 8001cbc:	69fa      	ldr	r2, [r7, #28]
 8001cbe:	0013      	movs	r3, r2
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	189b      	adds	r3, r3, r2
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	400b      	ands	r3, r1
 8001cc8:	001a      	movs	r2, r3
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	6979      	ldr	r1, [r7, #20]
 8001cce:	434b      	muls	r3, r1
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	609a      	str	r2, [r3, #8]
		MODIFY_REG( gpio->OTYPER, pins, (mode & GPIO_Flag_OpenDrain) ? pins : 0 );
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	68ba      	ldr	r2, [r7, #8]
 8001cdc:	43d2      	mvns	r2, r2
 8001cde:	401a      	ands	r2, r3
 8001ce0:	1dbb      	adds	r3, r7, #6
 8001ce2:	8819      	ldrh	r1, [r3, #0]
 8001ce4:	2380      	movs	r3, #128	; 0x80
 8001ce6:	015b      	lsls	r3, r3, #5
 8001ce8:	400b      	ands	r3, r1
 8001cea:	d001      	beq.n	8001cf0 <GPIO_Init+0x80>
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	e000      	b.n	8001cf2 <GPIO_Init+0x82>
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	605a      	str	r2, [r3, #4]
	}

	MODIFY_REG( gpio->MODER, pinmask * GPIO_MODER_MODE0, pinmask * dir);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6819      	ldr	r1, [r3, #0]
 8001cfc:	69fa      	ldr	r2, [r7, #28]
 8001cfe:	0013      	movs	r3, r2
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	189b      	adds	r3, r3, r2
 8001d04:	43db      	mvns	r3, r3
 8001d06:	400b      	ands	r3, r1
 8001d08:	001a      	movs	r2, r3
 8001d0a:	231b      	movs	r3, #27
 8001d0c:	18fb      	adds	r3, r7, r3
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	69f9      	ldr	r1, [r7, #28]
 8001d12:	434b      	muls	r3, r1
 8001d14:	431a      	orrs	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	601a      	str	r2, [r3, #0]
	uint32_t pull = (mode & GPIO_Pull_MASK) >> GPIOCFG_PULL_POS;
 8001d1a:	1dbb      	adds	r3, r7, #6
 8001d1c:	881b      	ldrh	r3, [r3, #0]
 8001d1e:	111b      	asrs	r3, r3, #4
 8001d20:	001a      	movs	r2, r3
 8001d22:	2303      	movs	r3, #3
 8001d24:	4013      	ands	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
	MODIFY_REG( gpio->PUPDR, pinmask * GPIO_PUPDR_PUPD0, pinmask * pull);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	68d9      	ldr	r1, [r3, #12]
 8001d2c:	69fa      	ldr	r2, [r7, #28]
 8001d2e:	0013      	movs	r3, r2
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	189b      	adds	r3, r3, r2
 8001d34:	43db      	mvns	r3, r3
 8001d36:	400b      	ands	r3, r1
 8001d38:	001a      	movs	r2, r3
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	6939      	ldr	r1, [r7, #16]
 8001d3e:	434b      	muls	r3, r1
 8001d40:	431a      	orrs	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	60da      	str	r2, [r3, #12]
}
 8001d46:	46c0      	nop			; (mov r8, r8)
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	b008      	add	sp, #32
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <GPIO_ConfigAlternate>:
/*
 * PRIVATE FUNCTIONS
 */

static void GPIO_ConfigAlternate( GPIO_t * gpio, uint32_t pins, uint32_t af)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b086      	sub	sp, #24
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	60f8      	str	r0, [r7, #12]
 8001d56:	60b9      	str	r1, [r7, #8]
 8001d58:	607a      	str	r2, [r7, #4]
	uint32_t pos = 0;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	617b      	str	r3, [r7, #20]
	while (pins)
 8001d5e:	e026      	b.n	8001dae <GPIO_ConfigAlternate+0x60>
	{
		if (pins & 0x1)
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	2201      	movs	r2, #1
 8001d64:	4013      	ands	r3, r2
 8001d66:	d01c      	beq.n	8001da2 <GPIO_ConfigAlternate+0x54>
		{
			uint32_t alt_offset = (pos & 0x7) * 4;
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	2207      	movs	r2, #7
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	613b      	str	r3, [r7, #16]
			MODIFY_REG(gpio->AFR[pos >> 3], (0xF << alt_offset), (af << alt_offset));
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	08da      	lsrs	r2, r3, #3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	3208      	adds	r2, #8
 8001d7a:	0092      	lsls	r2, r2, #2
 8001d7c:	58d3      	ldr	r3, [r2, r3]
 8001d7e:	210f      	movs	r1, #15
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	4091      	lsls	r1, r2
 8001d84:	000a      	movs	r2, r1
 8001d86:	43d2      	mvns	r2, r2
 8001d88:	401a      	ands	r2, r3
 8001d8a:	0011      	movs	r1, r2
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	409a      	lsls	r2, r3
 8001d92:	0013      	movs	r3, r2
 8001d94:	697a      	ldr	r2, [r7, #20]
 8001d96:	08d2      	lsrs	r2, r2, #3
 8001d98:	4319      	orrs	r1, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	3208      	adds	r2, #8
 8001d9e:	0092      	lsls	r2, r2, #2
 8001da0:	50d1      	str	r1, [r2, r3]
		}
		pins >>= 1;
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	085b      	lsrs	r3, r3, #1
 8001da6:	60bb      	str	r3, [r7, #8]
		pos++;
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	3301      	adds	r3, #1
 8001dac:	617b      	str	r3, [r7, #20]
	while (pins)
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1d5      	bne.n	8001d60 <GPIO_ConfigAlternate+0x12>
	}
}
 8001db4:	46c0      	nop			; (mov r8, r8)
 8001db6:	46c0      	nop			; (mov r8, r8)
 8001db8:	46bd      	mov	sp, r7
 8001dba:	b006      	add	sp, #24
 8001dbc:	bd80      	pop	{r7, pc}
	...

08001dc0 <GPIO_ConfigInterrupt>:

#ifdef GPIO_USE_IRQS
static void GPIO_ConfigInterrupt( GPIO_t * gpio, int n, GPIO_IT_Dir_t dir)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b088      	sub	sp, #32
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	1dfb      	adds	r3, r7, #7
 8001dcc:	701a      	strb	r2, [r3, #0]
	uint32_t pin = 1 << n;
 8001dce:	2201      	movs	r2, #1
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	409a      	lsls	r2, r3
 8001dd4:	0013      	movs	r3, r2
 8001dd6:	61fb      	str	r3, [r7, #28]
	if (dir == GPIO_IT_None)
 8001dd8:	1dfb      	adds	r3, r7, #7
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d107      	bne.n	8001df0 <GPIO_ConfigInterrupt+0x30>
	{
		// Disable the EXTI channel.
		CLEAR_BIT(EXTI->IMR, pin);
 8001de0:	4b3b      	ldr	r3, [pc, #236]	; (8001ed0 <GPIO_ConfigInterrupt+0x110>)
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	43d9      	mvns	r1, r3
 8001de8:	4b39      	ldr	r3, [pc, #228]	; (8001ed0 <GPIO_ConfigInterrupt+0x110>)
 8001dea:	400a      	ands	r2, r1
 8001dec:	601a      	str	r2, [r3, #0]
		// Configure the EXTI channel
		SET_BIT(EXTI->IMR, pin);
		MODIFY_REG(EXTI->RTSR, pin, (dir & GPIO_IT_Rising) ? pin : 0);
		MODIFY_REG(EXTI->FTSR, pin, (dir & GPIO_IT_Falling) ? pin : 0);
	}
}
 8001dee:	e06a      	b.n	8001ec6 <GPIO_ConfigInterrupt+0x106>
		__HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df0:	4b38      	ldr	r3, [pc, #224]	; (8001ed4 <GPIO_ConfigInterrupt+0x114>)
 8001df2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001df4:	4b37      	ldr	r3, [pc, #220]	; (8001ed4 <GPIO_ConfigInterrupt+0x114>)
 8001df6:	2101      	movs	r1, #1
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	635a      	str	r2, [r3, #52]	; 0x34
		uint32_t gpio_index = GPIO_GET_INDEX(gpio);
 8001dfc:	68fa      	ldr	r2, [r7, #12]
 8001dfe:	23a0      	movs	r3, #160	; 0xa0
 8001e00:	05db      	lsls	r3, r3, #23
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d019      	beq.n	8001e3a <GPIO_ConfigInterrupt+0x7a>
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	4a33      	ldr	r2, [pc, #204]	; (8001ed8 <GPIO_ConfigInterrupt+0x118>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d013      	beq.n	8001e36 <GPIO_ConfigInterrupt+0x76>
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	4a32      	ldr	r2, [pc, #200]	; (8001edc <GPIO_ConfigInterrupt+0x11c>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d00d      	beq.n	8001e32 <GPIO_ConfigInterrupt+0x72>
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	4a31      	ldr	r2, [pc, #196]	; (8001ee0 <GPIO_ConfigInterrupt+0x120>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d007      	beq.n	8001e2e <GPIO_ConfigInterrupt+0x6e>
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	4a30      	ldr	r2, [pc, #192]	; (8001ee4 <GPIO_ConfigInterrupt+0x124>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d101      	bne.n	8001e2a <GPIO_ConfigInterrupt+0x6a>
 8001e26:	2305      	movs	r3, #5
 8001e28:	e008      	b.n	8001e3c <GPIO_ConfigInterrupt+0x7c>
 8001e2a:	2306      	movs	r3, #6
 8001e2c:	e006      	b.n	8001e3c <GPIO_ConfigInterrupt+0x7c>
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e004      	b.n	8001e3c <GPIO_ConfigInterrupt+0x7c>
 8001e32:	2302      	movs	r3, #2
 8001e34:	e002      	b.n	8001e3c <GPIO_ConfigInterrupt+0x7c>
 8001e36:	2301      	movs	r3, #1
 8001e38:	e000      	b.n	8001e3c <GPIO_ConfigInterrupt+0x7c>
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61bb      	str	r3, [r7, #24]
		uint32_t offset = (n & 0x3) * 4;
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	2203      	movs	r2, #3
 8001e42:	4013      	ands	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	617b      	str	r3, [r7, #20]
		MODIFY_REG(SYSCFG->EXTICR[n >> 2], 0xF << offset, gpio_index << offset);
 8001e48:	4a27      	ldr	r2, [pc, #156]	; (8001ee8 <GPIO_ConfigInterrupt+0x128>)
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	109b      	asrs	r3, r3, #2
 8001e4e:	3302      	adds	r3, #2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	589b      	ldr	r3, [r3, r2]
 8001e54:	210f      	movs	r1, #15
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	4091      	lsls	r1, r2
 8001e5a:	000a      	movs	r2, r1
 8001e5c:	43d2      	mvns	r2, r2
 8001e5e:	401a      	ands	r2, r3
 8001e60:	0011      	movs	r1, r2
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	409a      	lsls	r2, r3
 8001e68:	481f      	ldr	r0, [pc, #124]	; (8001ee8 <GPIO_ConfigInterrupt+0x128>)
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	109b      	asrs	r3, r3, #2
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	3302      	adds	r3, #2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	501a      	str	r2, [r3, r0]
		SET_BIT(EXTI->IMR, pin);
 8001e76:	4b16      	ldr	r3, [pc, #88]	; (8001ed0 <GPIO_ConfigInterrupt+0x110>)
 8001e78:	6819      	ldr	r1, [r3, #0]
 8001e7a:	4b15      	ldr	r3, [pc, #84]	; (8001ed0 <GPIO_ConfigInterrupt+0x110>)
 8001e7c:	69fa      	ldr	r2, [r7, #28]
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	601a      	str	r2, [r3, #0]
		MODIFY_REG(EXTI->RTSR, pin, (dir & GPIO_IT_Rising) ? pin : 0);
 8001e82:	4b13      	ldr	r3, [pc, #76]	; (8001ed0 <GPIO_ConfigInterrupt+0x110>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	69fa      	ldr	r2, [r7, #28]
 8001e88:	43d2      	mvns	r2, r2
 8001e8a:	401a      	ands	r2, r3
 8001e8c:	0011      	movs	r1, r2
 8001e8e:	1dfb      	adds	r3, r7, #7
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	2201      	movs	r2, #1
 8001e94:	4013      	ands	r3, r2
 8001e96:	d001      	beq.n	8001e9c <GPIO_ConfigInterrupt+0xdc>
 8001e98:	69fa      	ldr	r2, [r7, #28]
 8001e9a:	e000      	b.n	8001e9e <GPIO_ConfigInterrupt+0xde>
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ed0 <GPIO_ConfigInterrupt+0x110>)
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	609a      	str	r2, [r3, #8]
		MODIFY_REG(EXTI->FTSR, pin, (dir & GPIO_IT_Falling) ? pin : 0);
 8001ea4:	4b0a      	ldr	r3, [pc, #40]	; (8001ed0 <GPIO_ConfigInterrupt+0x110>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	69fa      	ldr	r2, [r7, #28]
 8001eaa:	43d2      	mvns	r2, r2
 8001eac:	401a      	ands	r2, r3
 8001eae:	0011      	movs	r1, r2
 8001eb0:	1dfb      	adds	r3, r7, #7
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	2202      	movs	r2, #2
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	d001      	beq.n	8001ebe <GPIO_ConfigInterrupt+0xfe>
 8001eba:	69fa      	ldr	r2, [r7, #28]
 8001ebc:	e000      	b.n	8001ec0 <GPIO_ConfigInterrupt+0x100>
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	4b03      	ldr	r3, [pc, #12]	; (8001ed0 <GPIO_ConfigInterrupt+0x110>)
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	60da      	str	r2, [r3, #12]
}
 8001ec6:	46c0      	nop			; (mov r8, r8)
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	b008      	add	sp, #32
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	46c0      	nop			; (mov r8, r8)
 8001ed0:	40010400 	.word	0x40010400
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	50000400 	.word	0x50000400
 8001edc:	50000800 	.word	0x50000800
 8001ee0:	50000c00 	.word	0x50000c00
 8001ee4:	50001c00 	.word	0x50001c00
 8001ee8:	40010000 	.word	0x40010000

08001eec <GPIO_SWARBitDouble>:
#endif

static uint32_t GPIO_SWARBitDouble(uint32_t s)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
	s = (s & ~0xFF00FF00) | ((s & 0xFF00FF00) << 8);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a14      	ldr	r2, [pc, #80]	; (8001f48 <GPIO_SWARBitDouble+0x5c>)
 8001ef8:	401a      	ands	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	0219      	lsls	r1, r3, #8
 8001efe:	23ff      	movs	r3, #255	; 0xff
 8001f00:	041b      	lsls	r3, r3, #16
 8001f02:	400b      	ands	r3, r1
 8001f04:	4313      	orrs	r3, r2
 8001f06:	607b      	str	r3, [r7, #4]
	s = (s & ~0xF0F0F0F0) | ((s & 0xF0F0F0F0) << 4);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a10      	ldr	r2, [pc, #64]	; (8001f4c <GPIO_SWARBitDouble+0x60>)
 8001f0c:	401a      	ands	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	011b      	lsls	r3, r3, #4
 8001f12:	490f      	ldr	r1, [pc, #60]	; (8001f50 <GPIO_SWARBitDouble+0x64>)
 8001f14:	400b      	ands	r3, r1
 8001f16:	4313      	orrs	r3, r2
 8001f18:	607b      	str	r3, [r7, #4]
	s = (s & ~0xCCCCCCCC) | ((s & 0xCCCCCCCC) << 2);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a0d      	ldr	r2, [pc, #52]	; (8001f54 <GPIO_SWARBitDouble+0x68>)
 8001f1e:	401a      	ands	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	490c      	ldr	r1, [pc, #48]	; (8001f58 <GPIO_SWARBitDouble+0x6c>)
 8001f26:	400b      	ands	r3, r1
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	607b      	str	r3, [r7, #4]
	s = (s & ~0xAAAAAAAA) | ((s & 0xAAAAAAAA) << 1);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a0b      	ldr	r2, [pc, #44]	; (8001f5c <GPIO_SWARBitDouble+0x70>)
 8001f30:	401a      	ands	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	490a      	ldr	r1, [pc, #40]	; (8001f60 <GPIO_SWARBitDouble+0x74>)
 8001f38:	400b      	ands	r3, r1
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	607b      	str	r3, [r7, #4]
	return s;
 8001f3e:	687b      	ldr	r3, [r7, #4]
}
 8001f40:	0018      	movs	r0, r3
 8001f42:	46bd      	mov	sp, r7
 8001f44:	b002      	add	sp, #8
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	00ff00ff 	.word	0x00ff00ff
 8001f4c:	0f0f0f0f 	.word	0x0f0f0f0f
 8001f50:	0f0f0f00 	.word	0x0f0f0f00
 8001f54:	33333333 	.word	0x33333333
 8001f58:	33333330 	.word	0x33333330
 8001f5c:	55555555 	.word	0x55555555
 8001f60:	55555554 	.word	0x55555554

08001f64 <EXTIx_EnableIRQn>:
		gCallback[n]();
	}
}

static void EXTIx_EnableIRQn(int n)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
	if (n <= 1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	dc03      	bgt.n	8001f7a <EXTIx_EnableIRQn+0x16>
	{
		HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8001f72:	2005      	movs	r0, #5
 8001f74:	f7ff fb33 	bl	80015de <HAL_NVIC_EnableIRQ>
	}
	else
	{
		HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
	}
}
 8001f78:	e009      	b.n	8001f8e <EXTIx_EnableIRQn+0x2a>
	else if (n <= 3)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b03      	cmp	r3, #3
 8001f7e:	dc03      	bgt.n	8001f88 <EXTIx_EnableIRQn+0x24>
		HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8001f80:	2006      	movs	r0, #6
 8001f82:	f7ff fb2c 	bl	80015de <HAL_NVIC_EnableIRQ>
}
 8001f86:	e002      	b.n	8001f8e <EXTIx_EnableIRQn+0x2a>
		HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001f88:	2007      	movs	r0, #7
 8001f8a:	f7ff fb28 	bl	80015de <HAL_NVIC_EnableIRQ>
}
 8001f8e:	46c0      	nop			; (mov r8, r8)
 8001f90:	46bd      	mov	sp, r7
 8001f92:	b002      	add	sp, #8
 8001f94:	bd80      	pop	{r7, pc}
	...

08001f98 <CLK_GetPCLKFreq>:

static inline uint32_t CLK_GetPCLKFreq(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
	return CLK_SYSCLK_FREQ;
 8001f9c:	4b01      	ldr	r3, [pc, #4]	; (8001fa4 <CLK_GetPCLKFreq+0xc>)
}
 8001f9e:	0018      	movs	r0, r3
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	01e84800 	.word	0x01e84800

08001fa8 <TIM_Init>:
/*
 * PUBLIC FUNCTIONS
 */

void TIM_Init(TIM_t * tim, uint32_t freq, uint32_t reload)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
	TIMx_Init(tim);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	0018      	movs	r0, r3
 8001fb8:	f000 f98a 	bl	80022d0 <TIMx_Init>

	uint32_t cr1 = tim->Instance->CR1;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	617b      	str	r3, [r7, #20]
	cr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS | TIM_CR1_CKD | TIM_CR1_ARPE);
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	4a0d      	ldr	r2, [pc, #52]	; (8001ffc <TIM_Init+0x54>)
 8001fc8:	4013      	ands	r3, r2
 8001fca:	617b      	str	r3, [r7, #20]
	cr1 |= TIM_AUTORELOAD_PRELOAD_ENABLE | TIM_CLOCKDIVISION_DIV1 | TIM_COUNTERMODE_UP;
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	2280      	movs	r2, #128	; 0x80
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	617b      	str	r3, [r7, #20]
	tim->Instance->CR1 = cr1;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	601a      	str	r2, [r3, #0]

	TIM_SetFreq(tim, freq);
 8001fdc:	68ba      	ldr	r2, [r7, #8]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	0011      	movs	r1, r2
 8001fe2:	0018      	movs	r0, r3
 8001fe4:	f000 f80c 	bl	8002000 <TIM_SetFreq>
	TIM_SetReload(tim, reload);
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	0011      	movs	r1, r2
 8001fee:	0018      	movs	r0, r3
 8001ff0:	f000 f81d 	bl	800202e <TIM_SetReload>
}
 8001ff4:	46c0      	nop			; (mov r8, r8)
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	b006      	add	sp, #24
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	fffffc0f 	.word	0xfffffc0f

08002000 <TIM_SetFreq>:

void TIM_SetFreq(TIM_t * tim, uint32_t freq)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
	uint32_t clk = CLK_GetPCLKFreq();
 800200a:	f7ff ffc5 	bl	8001f98 <CLK_GetPCLKFreq>
 800200e:	0003      	movs	r3, r0
 8002010:	60fb      	str	r3, [r7, #12]
	tim->Instance->PSC = (clk / freq) - 1;
 8002012:	6839      	ldr	r1, [r7, #0]
 8002014:	68f8      	ldr	r0, [r7, #12]
 8002016:	f7fe f877 	bl	8000108 <__udivsi3>
 800201a:	0003      	movs	r3, r0
 800201c:	001a      	movs	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	3a01      	subs	r2, #1
 8002024:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002026:	46c0      	nop			; (mov r8, r8)
 8002028:	46bd      	mov	sp, r7
 800202a:	b004      	add	sp, #16
 800202c:	bd80      	pop	{r7, pc}

0800202e <TIM_SetReload>:

void TIM_SetReload(TIM_t * tim, uint32_t reload)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b082      	sub	sp, #8
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
 8002036:	6039      	str	r1, [r7, #0]
	tim->Instance->ARR = reload;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	683a      	ldr	r2, [r7, #0]
 800203e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002040:	46c0      	nop			; (mov r8, r8)
 8002042:	46bd      	mov	sp, r7
 8002044:	b002      	add	sp, #8
 8002046:	bd80      	pop	{r7, pc}

08002048 <TIM_OnReload>:

#ifdef TIM_USE_IRQS
void TIM_OnReload(TIM_t * tim, VoidFunction_t callback)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
	__HAL_TIM_ENABLE_IT(tim, TIM_IT_UPDATE);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68da      	ldr	r2, [r3, #12]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2101      	movs	r1, #1
 800205e:	430a      	orrs	r2, r1
 8002060:	60da      	str	r2, [r3, #12]
	tim->ReloadCallback = callback;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	605a      	str	r2, [r3, #4]
}
 8002068:	46c0      	nop			; (mov r8, r8)
 800206a:	46bd      	mov	sp, r7
 800206c:	b002      	add	sp, #8
 800206e:	bd80      	pop	{r7, pc}

08002070 <TIM_OnPulse>:

void TIM_OnPulse(TIM_t * tim, TIM_Channel_t ch, VoidFunction_t callback)
{
 8002070:	b590      	push	{r4, r7, lr}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	607a      	str	r2, [r7, #4]
 800207a:	240b      	movs	r4, #11
 800207c:	193b      	adds	r3, r7, r4
 800207e:	1c0a      	adds	r2, r1, #0
 8002080:	701a      	strb	r2, [r3, #0]
	// WARN: This will fail horribly if ch is greater than 4.
	TIM_EnableOCx(tim, ch, TIM_OCMODE_ACTIVE);
 8002082:	193b      	adds	r3, r7, r4
 8002084:	7819      	ldrb	r1, [r3, #0]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2210      	movs	r2, #16
 800208a:	0018      	movs	r0, r3
 800208c:	f000 f874 	bl	8002178 <TIM_EnableOCx>
	// Note that the channels IT's are 1 << 1 through 1 << 4
	__HAL_TIM_ENABLE_IT(tim, TIM_IT_CC1 << ch);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68d9      	ldr	r1, [r3, #12]
 8002096:	0020      	movs	r0, r4
 8002098:	183b      	adds	r3, r7, r0
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2202      	movs	r2, #2
 800209e:	409a      	lsls	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	430a      	orrs	r2, r1
 80020a6:	60da      	str	r2, [r3, #12]
	tim->PulseCallback[ch] = callback;
 80020a8:	183b      	adds	r3, r7, r0
 80020aa:	781a      	ldrb	r2, [r3, #0]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	3202      	adds	r2, #2
 80020b0:	0092      	lsls	r2, r2, #2
 80020b2:	6879      	ldr	r1, [r7, #4]
 80020b4:	50d1      	str	r1, [r2, r3]
}
 80020b6:	46c0      	nop			; (mov r8, r8)
 80020b8:	46bd      	mov	sp, r7
 80020ba:	b005      	add	sp, #20
 80020bc:	bd90      	pop	{r4, r7, pc}

080020be <TIM_EnablePwm>:
#endif //TIM_USE_IRQS

void TIM_EnablePwm(TIM_t * tim, TIM_Channel_t ch, GPIO_t * gpio, uint32_t pin, uint32_t af)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b084      	sub	sp, #16
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	60f8      	str	r0, [r7, #12]
 80020c6:	607a      	str	r2, [r7, #4]
 80020c8:	603b      	str	r3, [r7, #0]
 80020ca:	200b      	movs	r0, #11
 80020cc:	183b      	adds	r3, r7, r0
 80020ce:	1c0a      	adds	r2, r1, #0
 80020d0:	701a      	strb	r2, [r3, #0]
	// TIM_CCMR1_OC1PE is the output compare preload
	TIM_EnableOCx(tim, ch, TIM_OCMODE_PWM1 | TIM_CCMR1_OC1PE | TIM_OCFAST_ENABLE);
 80020d2:	183b      	adds	r3, r7, r0
 80020d4:	7819      	ldrb	r1, [r3, #0]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	226c      	movs	r2, #108	; 0x6c
 80020da:	0018      	movs	r0, r3
 80020dc:	f000 f84c 	bl	8002178 <TIM_EnableOCx>
	GPIO_EnableAlternate(gpio, pin, 0, af);
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	6839      	ldr	r1, [r7, #0]
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f7ff fd78 	bl	8001bdc <GPIO_EnableAlternate>
}
 80020ec:	46c0      	nop			; (mov r8, r8)
 80020ee:	46bd      	mov	sp, r7
 80020f0:	b004      	add	sp, #16
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <TIM_SetPulse>:


void TIM_SetPulse(TIM_t * tim, TIM_Channel_t ch, uint32_t pulse)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	607a      	str	r2, [r7, #4]
 80020fe:	200b      	movs	r0, #11
 8002100:	183b      	adds	r3, r7, r0
 8002102:	1c0a      	adds	r2, r1, #0
 8002104:	701a      	strb	r2, [r3, #0]
	switch (ch)
 8002106:	183b      	adds	r3, r7, r0
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	2b03      	cmp	r3, #3
 800210c:	d017      	beq.n	800213e <TIM_SetPulse+0x4a>
 800210e:	dc1b      	bgt.n	8002148 <TIM_SetPulse+0x54>
 8002110:	2b02      	cmp	r3, #2
 8002112:	d00f      	beq.n	8002134 <TIM_SetPulse+0x40>
 8002114:	dc18      	bgt.n	8002148 <TIM_SetPulse+0x54>
 8002116:	2b00      	cmp	r3, #0
 8002118:	d002      	beq.n	8002120 <TIM_SetPulse+0x2c>
 800211a:	2b01      	cmp	r3, #1
 800211c:	d005      	beq.n	800212a <TIM_SetPulse+0x36>
	case TIM_CH4:
		tim->Instance->CCR4 = pulse;
		break;
	}

}
 800211e:	e013      	b.n	8002148 <TIM_SetPulse+0x54>
		tim->Instance->CCR1 = pulse;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8002128:	e00e      	b.n	8002148 <TIM_SetPulse+0x54>
		tim->Instance->CCR2 = pulse;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8002132:	e009      	b.n	8002148 <TIM_SetPulse+0x54>
		tim->Instance->CCR3 = pulse;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 800213c:	e004      	b.n	8002148 <TIM_SetPulse+0x54>
		tim->Instance->CCR4 = pulse;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8002146:	46c0      	nop			; (mov r8, r8)
}
 8002148:	46c0      	nop			; (mov r8, r8)
 800214a:	46bd      	mov	sp, r7
 800214c:	b004      	add	sp, #16
 800214e:	bd80      	pop	{r7, pc}

08002150 <TIM_Start>:

void TIM_Start(TIM_t * tim)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
	TIM_Reload(tim);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	0018      	movs	r0, r3
 800215c:	f000 f89a 	bl	8002294 <TIM_Reload>
	__HAL_TIM_ENABLE(tim);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2101      	movs	r1, #1
 800216c:	430a      	orrs	r2, r1
 800216e:	601a      	str	r2, [r3, #0]
}
 8002170:	46c0      	nop			; (mov r8, r8)
 8002172:	46bd      	mov	sp, r7
 8002174:	b002      	add	sp, #8
 8002176:	bd80      	pop	{r7, pc}

08002178 <TIM_EnableOCx>:
/*
 * PRIVATE FUNCTIONS
 */

static void TIM_EnableOCx(TIM_t * tim, uint32_t oc, uint32_t mode)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
	// Disable the channel during the update.
	TIM_DISABLE_CCx(tim, oc);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6a1a      	ldr	r2, [r3, #32]
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	2101      	movs	r1, #1
 8002190:	4099      	lsls	r1, r3
 8002192:	000b      	movs	r3, r1
 8002194:	43d9      	mvns	r1, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	400a      	ands	r2, r1
 800219c:	621a      	str	r2, [r3, #32]
	switch (oc)
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	2b03      	cmp	r3, #3
 80021a2:	d04c      	beq.n	800223e <TIM_EnableOCx+0xc6>
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	2b03      	cmp	r3, #3
 80021a8:	d85e      	bhi.n	8002268 <TIM_EnableOCx+0xf0>
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d032      	beq.n	8002216 <TIM_EnableOCx+0x9e>
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d858      	bhi.n	8002268 <TIM_EnableOCx+0xf0>
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d003      	beq.n	80021c4 <TIM_EnableOCx+0x4c>
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d014      	beq.n	80021ec <TIM_EnableOCx+0x74>
 80021c2:	e051      	b.n	8002268 <TIM_EnableOCx+0xf0>
	{
	case 0:
		MODIFY_REG(tim->Instance->CCMR1, TIM_CCMRx_MSK, mode);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	227f      	movs	r2, #127	; 0x7f
 80021cc:	4393      	bics	r3, r2
 80021ce:	0019      	movs	r1, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	430a      	orrs	r2, r1
 80021d8:	619a      	str	r2, [r3, #24]
		MODIFY_REG(tim->Instance->CCER, TIM_CCER_CC1P, TIM_OCPOLARITY_HIGH);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6a1a      	ldr	r2, [r3, #32]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2102      	movs	r1, #2
 80021e6:	438a      	bics	r2, r1
 80021e8:	621a      	str	r2, [r3, #32]
		break;
 80021ea:	e03d      	b.n	8002268 <TIM_EnableOCx+0xf0>
	case 1:
		MODIFY_REG(tim->Instance->CCMR1, TIM_CCMRx_MSK << 8, mode << 8);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	4a25      	ldr	r2, [pc, #148]	; (8002288 <TIM_EnableOCx+0x110>)
 80021f4:	4013      	ands	r3, r2
 80021f6:	0019      	movs	r1, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	021a      	lsls	r2, r3, #8
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	430a      	orrs	r2, r1
 8002202:	619a      	str	r2, [r3, #24]
		MODIFY_REG(tim->Instance->CCER, TIM_CCER_CC2P, TIM_OCPOLARITY_HIGH << 4);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6a1a      	ldr	r2, [r3, #32]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2120      	movs	r1, #32
 8002210:	438a      	bics	r2, r1
 8002212:	621a      	str	r2, [r3, #32]
		break;
 8002214:	e028      	b.n	8002268 <TIM_EnableOCx+0xf0>
	case 2:
		MODIFY_REG(tim->Instance->CCMR2, TIM_CCMRx_MSK, mode);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	69db      	ldr	r3, [r3, #28]
 800221c:	227f      	movs	r2, #127	; 0x7f
 800221e:	4393      	bics	r3, r2
 8002220:	0019      	movs	r1, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	430a      	orrs	r2, r1
 800222a:	61da      	str	r2, [r3, #28]
		MODIFY_REG(tim->Instance->CCER, TIM_CCER_CC3P, TIM_OCPOLARITY_HIGH << 8);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6a1a      	ldr	r2, [r3, #32]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4915      	ldr	r1, [pc, #84]	; (800228c <TIM_EnableOCx+0x114>)
 8002238:	400a      	ands	r2, r1
 800223a:	621a      	str	r2, [r3, #32]
		break;
 800223c:	e014      	b.n	8002268 <TIM_EnableOCx+0xf0>
	case 3:
		MODIFY_REG(tim->Instance->CCMR2, TIM_CCMRx_MSK << 8, mode << 8);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	69db      	ldr	r3, [r3, #28]
 8002244:	4a10      	ldr	r2, [pc, #64]	; (8002288 <TIM_EnableOCx+0x110>)
 8002246:	4013      	ands	r3, r2
 8002248:	0019      	movs	r1, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	021a      	lsls	r2, r3, #8
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	430a      	orrs	r2, r1
 8002254:	61da      	str	r2, [r3, #28]
		MODIFY_REG(tim->Instance->CCER, TIM_CCER_CC4P, TIM_OCPOLARITY_HIGH << 12);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	6a1a      	ldr	r2, [r3, #32]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	490b      	ldr	r1, [pc, #44]	; (8002290 <TIM_EnableOCx+0x118>)
 8002262:	400a      	ands	r2, r1
 8002264:	621a      	str	r2, [r3, #32]
		break;
 8002266:	46c0      	nop			; (mov r8, r8)
	}
	TIM_ENABLE_CCx(tim, oc);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6a19      	ldr	r1, [r3, #32]
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	2201      	movs	r2, #1
 8002274:	409a      	lsls	r2, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	430a      	orrs	r2, r1
 800227c:	621a      	str	r2, [r3, #32]
	//	MODIFY_REG(tmpcr2, TIM_CR2_OIS1 | TIM_CR2_OIS1N, TIM_OCIDLESTATE_SET | TIM_OCNIDLESTATE_SET);
	//	TIMx->CR2 = tmpcr2;
	//}


}
 800227e:	46c0      	nop			; (mov r8, r8)
 8002280:	46bd      	mov	sp, r7
 8002282:	b004      	add	sp, #16
 8002284:	bd80      	pop	{r7, pc}
 8002286:	46c0      	nop			; (mov r8, r8)
 8002288:	ffff80ff 	.word	0xffff80ff
 800228c:	fffffdff 	.word	0xfffffdff
 8002290:	ffffdfff 	.word	0xffffdfff

08002294 <TIM_Reload>:

static void TIM_Reload(TIM_t * tim)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
	// Disable all timer event sources.
	uint32_t itSources = tim->Instance->DIER;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	60fb      	str	r3, [r7, #12]
	tim->Instance->DIER = 0;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2200      	movs	r2, #0
 80022aa:	60da      	str	r2, [r3, #12]

	// Update the prescalar
	tim->Instance->EGR = TIM_EGR_UG;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2201      	movs	r2, #1
 80022b2:	615a      	str	r2, [r3, #20]

	// Clear the event before it occurrs.
	__HAL_TIM_CLEAR_IT(tim, TIM_IT_UPDATE);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2202      	movs	r2, #2
 80022ba:	4252      	negs	r2, r2
 80022bc:	611a      	str	r2, [r3, #16]
	tim->Instance->DIER = itSources;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	60da      	str	r2, [r3, #12]
}
 80022c6:	46c0      	nop			; (mov r8, r8)
 80022c8:	46bd      	mov	sp, r7
 80022ca:	b004      	add	sp, #16
 80022cc:	bd80      	pop	{r7, pc}
	...

080022d0 <TIMx_Init>:

static void TIMx_Init(TIM_t * tim)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
		__HAL_RCC_TIM1_CLK_ENABLE();
	}

#endif
#ifdef TIM2_ENABLE
	if (tim == TIM_2)
 80022d8:	4b1d      	ldr	r3, [pc, #116]	; (8002350 <TIMx_Init+0x80>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d108      	bne.n	80022f4 <TIMx_Init+0x24>
	{
		HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80022e2:	200f      	movs	r0, #15
 80022e4:	f7ff f97b 	bl	80015de <HAL_NVIC_EnableIRQ>
		__HAL_RCC_TIM2_CLK_ENABLE();
 80022e8:	4b1a      	ldr	r3, [pc, #104]	; (8002354 <TIMx_Init+0x84>)
 80022ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022ec:	4b19      	ldr	r3, [pc, #100]	; (8002354 <TIMx_Init+0x84>)
 80022ee:	2101      	movs	r1, #1
 80022f0:	430a      	orrs	r2, r1
 80022f2:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
		__HAL_RCC_TIM3_CLK_ENABLE();
	}
#endif
#ifdef TIM6_ENABLE
	if (tim == TIM_6)
 80022f4:	4b18      	ldr	r3, [pc, #96]	; (8002358 <TIMx_Init+0x88>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d108      	bne.n	8002310 <TIMx_Init+0x40>
	{
		HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80022fe:	2011      	movs	r0, #17
 8002300:	f7ff f96d 	bl	80015de <HAL_NVIC_EnableIRQ>
		__HAL_RCC_TIM6_CLK_ENABLE();
 8002304:	4b13      	ldr	r3, [pc, #76]	; (8002354 <TIMx_Init+0x84>)
 8002306:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002308:	4b12      	ldr	r3, [pc, #72]	; (8002354 <TIMx_Init+0x84>)
 800230a:	2110      	movs	r1, #16
 800230c:	430a      	orrs	r2, r1
 800230e:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_NVIC_EnableIRQ(TIM17_IRQn);
		__HAL_RCC_TIM17_CLK_ENABLE();
	}
#endif
#ifdef TIM21_ENABLE
	if (tim == TIM_21)
 8002310:	4b12      	ldr	r3, [pc, #72]	; (800235c <TIMx_Init+0x8c>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	429a      	cmp	r2, r3
 8002318:	d108      	bne.n	800232c <TIMx_Init+0x5c>
	{
		HAL_NVIC_EnableIRQ(TIM21_IRQn);
 800231a:	2014      	movs	r0, #20
 800231c:	f7ff f95f 	bl	80015de <HAL_NVIC_EnableIRQ>
		__HAL_RCC_TIM21_CLK_ENABLE();
 8002320:	4b0c      	ldr	r3, [pc, #48]	; (8002354 <TIMx_Init+0x84>)
 8002322:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002324:	4b0b      	ldr	r3, [pc, #44]	; (8002354 <TIMx_Init+0x84>)
 8002326:	2104      	movs	r1, #4
 8002328:	430a      	orrs	r2, r1
 800232a:	635a      	str	r2, [r3, #52]	; 0x34
	}
#endif
#ifdef TIM22_ENABLE
	if (tim == TIM_22)
 800232c:	4b0c      	ldr	r3, [pc, #48]	; (8002360 <TIMx_Init+0x90>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	429a      	cmp	r2, r3
 8002334:	d108      	bne.n	8002348 <TIMx_Init+0x78>
	{
		HAL_NVIC_EnableIRQ(TIM22_IRQn);
 8002336:	2016      	movs	r0, #22
 8002338:	f7ff f951 	bl	80015de <HAL_NVIC_EnableIRQ>
		__HAL_RCC_TIM22_CLK_ENABLE();
 800233c:	4b05      	ldr	r3, [pc, #20]	; (8002354 <TIMx_Init+0x84>)
 800233e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002340:	4b04      	ldr	r3, [pc, #16]	; (8002354 <TIMx_Init+0x84>)
 8002342:	2120      	movs	r1, #32
 8002344:	430a      	orrs	r2, r1
 8002346:	635a      	str	r2, [r3, #52]	; 0x34
	}
#endif
}
 8002348:	46c0      	nop			; (mov r8, r8)
 800234a:	46bd      	mov	sp, r7
 800234c:	b002      	add	sp, #8
 800234e:	bd80      	pop	{r7, pc}
 8002350:	20000020 	.word	0x20000020
 8002354:	40021000 	.word	0x40021000
 8002358:	2000003c 	.word	0x2000003c
 800235c:	20000058 	.word	0x20000058
 8002360:	20000074 	.word	0x20000074

08002364 <TIM_IRQHandler>:
 */

#ifdef TIM_USE_IRQS

static void TIM_IRQHandler(TIM_t * tim)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
	uint32_t irqs = TIM_GET_IRQ_SOURCES(tim);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	691a      	ldr	r2, [r3, #16]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	4013      	ands	r3, r2
 800237a:	60fb      	str	r3, [r7, #12]
	if(irqs & TIM_FLAG_CC1)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2202      	movs	r2, #2
 8002380:	4013      	ands	r3, r2
 8002382:	d007      	beq.n	8002394 <TIM_IRQHandler+0x30>
	{
		__HAL_TIM_CLEAR_IT(tim, TIM_IT_CC1);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2203      	movs	r2, #3
 800238a:	4252      	negs	r2, r2
 800238c:	611a      	str	r2, [r3, #16]
		tim->PulseCallback[0]();
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	4798      	blx	r3
	}
	if(irqs & TIM_FLAG_CC2)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2204      	movs	r2, #4
 8002398:	4013      	ands	r3, r2
 800239a:	d007      	beq.n	80023ac <TIM_IRQHandler+0x48>
	{
		__HAL_TIM_CLEAR_IT(tim, TIM_IT_CC2);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2205      	movs	r2, #5
 80023a2:	4252      	negs	r2, r2
 80023a4:	611a      	str	r2, [r3, #16]
		tim->PulseCallback[1]();
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	4798      	blx	r3
	}
	if(irqs & TIM_FLAG_CC3)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2208      	movs	r2, #8
 80023b0:	4013      	ands	r3, r2
 80023b2:	d007      	beq.n	80023c4 <TIM_IRQHandler+0x60>
	{
		__HAL_TIM_CLEAR_IT(tim, TIM_IT_CC3);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2209      	movs	r2, #9
 80023ba:	4252      	negs	r2, r2
 80023bc:	611a      	str	r2, [r3, #16]
		tim->PulseCallback[2]();
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	4798      	blx	r3
	}
	if(irqs & TIM_FLAG_CC4)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2210      	movs	r2, #16
 80023c8:	4013      	ands	r3, r2
 80023ca:	d007      	beq.n	80023dc <TIM_IRQHandler+0x78>
	{
		__HAL_TIM_CLEAR_IT(tim, TIM_IT_CC4);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2211      	movs	r2, #17
 80023d2:	4252      	negs	r2, r2
 80023d4:	611a      	str	r2, [r3, #16]
		tim->PulseCallback[3]();
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	4798      	blx	r3
	}
	if(irqs & TIM_FLAG_UPDATE)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2201      	movs	r2, #1
 80023e0:	4013      	ands	r3, r2
 80023e2:	d007      	beq.n	80023f4 <TIM_IRQHandler+0x90>
	{
		__HAL_TIM_CLEAR_IT(tim, TIM_IT_UPDATE);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2202      	movs	r2, #2
 80023ea:	4252      	negs	r2, r2
 80023ec:	611a      	str	r2, [r3, #16]
		tim->ReloadCallback();
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	4798      	blx	r3
	}
}
 80023f4:	46c0      	nop			; (mov r8, r8)
 80023f6:	46bd      	mov	sp, r7
 80023f8:	b004      	add	sp, #16
 80023fa:	bd80      	pop	{r7, pc}

080023fc <TIM2_IRQHandler>:
	TIM_IRQHandler(TIM_1);
}
#endif
#ifdef TIM2_ENABLE
void TIM2_IRQHandler(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
	TIM_IRQHandler(TIM_2);
 8002400:	4b03      	ldr	r3, [pc, #12]	; (8002410 <TIM2_IRQHandler+0x14>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	0018      	movs	r0, r3
 8002406:	f7ff ffad 	bl	8002364 <TIM_IRQHandler>
}
 800240a:	46c0      	nop			; (mov r8, r8)
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	20000020 	.word	0x20000020

08002414 <TIM6_IRQHandler>:
	TIM_IRQHandler(TIM_3);
}
#endif
#ifdef TIM6_ENABLE
void TIM6_IRQHandler(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
	TIM_IRQHandler(TIM_6);
 8002418:	4b03      	ldr	r3, [pc, #12]	; (8002428 <TIM6_IRQHandler+0x14>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	0018      	movs	r0, r3
 800241e:	f7ff ffa1 	bl	8002364 <TIM_IRQHandler>
}
 8002422:	46c0      	nop			; (mov r8, r8)
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	2000003c 	.word	0x2000003c

0800242c <TIM21_IRQHandler>:
	TIM_IRQHandler(TIM_17);
}
#endif
#ifdef TIM21_ENABLE
void TIM21_IRQHandler(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
	TIM_IRQHandler(TIM_21);
 8002430:	4b03      	ldr	r3, [pc, #12]	; (8002440 <TIM21_IRQHandler+0x14>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	0018      	movs	r0, r3
 8002436:	f7ff ff95 	bl	8002364 <TIM_IRQHandler>
}
 800243a:	46c0      	nop			; (mov r8, r8)
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	20000058 	.word	0x20000058

08002444 <TIM22_IRQHandler>:
#endif
#ifdef TIM22_ENABLE
void TIM22_IRQHandler(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
	TIM_IRQHandler(TIM_22);
 8002448:	4b03      	ldr	r3, [pc, #12]	; (8002458 <TIM22_IRQHandler+0x14>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	0018      	movs	r0, r3
 800244e:	f7ff ff89 	bl	8002364 <TIM_IRQHandler>
}
 8002452:	46c0      	nop			; (mov r8, r8)
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	20000074 	.word	0x20000074

0800245c <UART_IRQHandler>:
 * INTERRUPT ROUTINES
 */


void UART_IRQHandler(UART_t *uart)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
	uint32_t flags = uart->Instance->ISR;
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	2388      	movs	r3, #136	; 0x88
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	58d3      	ldr	r3, [r2, r3]
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	60fb      	str	r3, [r7, #12]

	if (flags & USART_ISR_RXNE)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2220      	movs	r2, #32
 8002474:	4013      	ands	r3, r2
 8002476:	d031      	beq.n	80024dc <UART_IRQHandler+0x80>
	{
		// New RX data. Put it in the RX buffer.
		uart->rx.buffer[uart->rx.head] = uart->Instance->RDR;
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	2388      	movs	r3, #136	; 0x88
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	58d3      	ldr	r3, [r2, r3]
 8002480:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	2384      	movs	r3, #132	; 0x84
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	58d3      	ldr	r3, [r2, r3]
 800248a:	b2c8      	uxtb	r0, r1
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	2188      	movs	r1, #136	; 0x88
 8002490:	18d3      	adds	r3, r2, r3
 8002492:	185b      	adds	r3, r3, r1
 8002494:	1c02      	adds	r2, r0, #0
 8002496:	701a      	strb	r2, [r3, #0]
		uart->rx.head = UART_BFR_WRAP(uart->rx.head + 1);
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	2384      	movs	r3, #132	; 0x84
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	58d3      	ldr	r3, [r2, r3]
 80024a0:	3301      	adds	r3, #1
 80024a2:	227f      	movs	r2, #127	; 0x7f
 80024a4:	4013      	ands	r3, r2
 80024a6:	0019      	movs	r1, r3
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	2384      	movs	r3, #132	; 0x84
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	50d1      	str	r1, [r2, r3]
		if (uart->rx.head == uart->rx.tail) {
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	2384      	movs	r3, #132	; 0x84
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	58d2      	ldr	r2, [r2, r3]
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	2386      	movs	r3, #134	; 0x86
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	58cb      	ldr	r3, [r1, r3]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d10b      	bne.n	80024dc <UART_IRQHandler+0x80>
			// The head just caught up with the tail. Uh oh. Increment the tail.
			// Note, this causes flaming huge issues.
			uart->rx.tail = UART_BFR_WRAP(uart->rx.tail + 1);
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	2386      	movs	r3, #134	; 0x86
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	58d3      	ldr	r3, [r2, r3]
 80024cc:	3301      	adds	r3, #1
 80024ce:	227f      	movs	r2, #127	; 0x7f
 80024d0:	4013      	ands	r3, r2
 80024d2:	0019      	movs	r1, r3
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	2386      	movs	r3, #134	; 0x86
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	50d1      	str	r1, [r2, r3]
		}
	}

	if (flags & USART_ISR_TXE)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2280      	movs	r2, #128	; 0x80
 80024e0:	4013      	ands	r3, r2
 80024e2:	d028      	beq.n	8002536 <UART_IRQHandler+0xda>
	{
		// No byte being transmitted..
		if (uart->tx.head != uart->tx.tail)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2280      	movs	r2, #128	; 0x80
 80024e8:	589a      	ldr	r2, [r3, r2]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2184      	movs	r1, #132	; 0x84
 80024ee:	585b      	ldr	r3, [r3, r1]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d014      	beq.n	800251e <UART_IRQHandler+0xc2>
		{
			// Send a byte out.
			uart->Instance->TDR = uart->tx.buffer[uart->tx.tail];
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2284      	movs	r2, #132	; 0x84
 80024f8:	589b      	ldr	r3, [r3, r2]
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	5cd1      	ldrb	r1, [r2, r3]
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	2388      	movs	r3, #136	; 0x88
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	58d3      	ldr	r3, [r2, r3]
 8002506:	000a      	movs	r2, r1
 8002508:	629a      	str	r2, [r3, #40]	; 0x28
			uart->tx.tail = UART_BFR_WRAP(uart->tx.tail + 1);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2284      	movs	r2, #132	; 0x84
 800250e:	589b      	ldr	r3, [r3, r2]
 8002510:	3301      	adds	r3, #1
 8002512:	227f      	movs	r2, #127	; 0x7f
 8002514:	401a      	ands	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2184      	movs	r1, #132	; 0x84
 800251a:	505a      	str	r2, [r3, r1]
 800251c:	e00b      	b.n	8002536 <UART_IRQHandler+0xda>
		}
		else
		{
			// Tail caught up with head: no bytes remain.
			// Disable the TX IRQ.
			__UART_TX_DISABLE(uart);
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	2388      	movs	r3, #136	; 0x88
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	58d3      	ldr	r3, [r2, r3]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	6879      	ldr	r1, [r7, #4]
 800252a:	2388      	movs	r3, #136	; 0x88
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	58cb      	ldr	r3, [r1, r3]
 8002530:	2180      	movs	r1, #128	; 0x80
 8002532:	438a      	bics	r2, r1
 8002534:	601a      	str	r2, [r3, #0]
		}
	}

	if (flags & (USART_ISR_ORE | USART_ISR_PE | USART_ISR_NE | USART_ISR_FE))
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	220f      	movs	r2, #15
 800253a:	4013      	ands	r3, r2
 800253c:	d00b      	beq.n	8002556 <UART_IRQHandler+0xfa>
	{
		__UART_CLEAR_FLAGS(uart, (UART_CLEAR_PEF | UART_CLEAR_FEF | UART_CLEAR_NEF | UART_CLEAR_OREF));
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	2388      	movs	r3, #136	; 0x88
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	58d3      	ldr	r3, [r2, r3]
 8002546:	6a1a      	ldr	r2, [r3, #32]
 8002548:	6879      	ldr	r1, [r7, #4]
 800254a:	2388      	movs	r3, #136	; 0x88
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	58cb      	ldr	r3, [r1, r3]
 8002550:	210f      	movs	r1, #15
 8002552:	430a      	orrs	r2, r1
 8002554:	621a      	str	r2, [r3, #32]
	}
}
 8002556:	46c0      	nop			; (mov r8, r8)
 8002558:	46bd      	mov	sp, r7
 800255a:	b004      	add	sp, #16
 800255c:	bd80      	pop	{r7, pc}
	...

08002560 <USART1_IRQHandler>:
	UART_IRQHandler(UART_LP);
}
#endif
#ifdef UART1_GPIO
void USART1_IRQHandler(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
	UART_IRQHandler(UART_1);
 8002564:	4b03      	ldr	r3, [pc, #12]	; (8002574 <USART1_IRQHandler+0x14>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	0018      	movs	r0, r3
 800256a:	f7ff ff77 	bl	800245c <UART_IRQHandler>
}
 800256e:	46c0      	nop			; (mov r8, r8)
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	2000018c 	.word	0x2000018c

08002578 <__libc_init_array>:
 8002578:	b570      	push	{r4, r5, r6, lr}
 800257a:	2600      	movs	r6, #0
 800257c:	4d0c      	ldr	r5, [pc, #48]	; (80025b0 <__libc_init_array+0x38>)
 800257e:	4c0d      	ldr	r4, [pc, #52]	; (80025b4 <__libc_init_array+0x3c>)
 8002580:	1b64      	subs	r4, r4, r5
 8002582:	10a4      	asrs	r4, r4, #2
 8002584:	42a6      	cmp	r6, r4
 8002586:	d109      	bne.n	800259c <__libc_init_array+0x24>
 8002588:	2600      	movs	r6, #0
 800258a:	f000 f823 	bl	80025d4 <_init>
 800258e:	4d0a      	ldr	r5, [pc, #40]	; (80025b8 <__libc_init_array+0x40>)
 8002590:	4c0a      	ldr	r4, [pc, #40]	; (80025bc <__libc_init_array+0x44>)
 8002592:	1b64      	subs	r4, r4, r5
 8002594:	10a4      	asrs	r4, r4, #2
 8002596:	42a6      	cmp	r6, r4
 8002598:	d105      	bne.n	80025a6 <__libc_init_array+0x2e>
 800259a:	bd70      	pop	{r4, r5, r6, pc}
 800259c:	00b3      	lsls	r3, r6, #2
 800259e:	58eb      	ldr	r3, [r5, r3]
 80025a0:	4798      	blx	r3
 80025a2:	3601      	adds	r6, #1
 80025a4:	e7ee      	b.n	8002584 <__libc_init_array+0xc>
 80025a6:	00b3      	lsls	r3, r6, #2
 80025a8:	58eb      	ldr	r3, [r5, r3]
 80025aa:	4798      	blx	r3
 80025ac:	3601      	adds	r6, #1
 80025ae:	e7f2      	b.n	8002596 <__libc_init_array+0x1e>
 80025b0:	080025ec 	.word	0x080025ec
 80025b4:	080025ec 	.word	0x080025ec
 80025b8:	080025ec 	.word	0x080025ec
 80025bc:	080025f0 	.word	0x080025f0

080025c0 <memcpy>:
 80025c0:	2300      	movs	r3, #0
 80025c2:	b510      	push	{r4, lr}
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d100      	bne.n	80025ca <memcpy+0xa>
 80025c8:	bd10      	pop	{r4, pc}
 80025ca:	5ccc      	ldrb	r4, [r1, r3]
 80025cc:	54c4      	strb	r4, [r0, r3]
 80025ce:	3301      	adds	r3, #1
 80025d0:	e7f8      	b.n	80025c4 <memcpy+0x4>
	...

080025d4 <_init>:
 80025d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025d6:	46c0      	nop			; (mov r8, r8)
 80025d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025da:	bc08      	pop	{r3}
 80025dc:	469e      	mov	lr, r3
 80025de:	4770      	bx	lr

080025e0 <_fini>:
 80025e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025e2:	46c0      	nop			; (mov r8, r8)
 80025e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025e6:	bc08      	pop	{r3}
 80025e8:	469e      	mov	lr, r3
 80025ea:	4770      	bx	lr
