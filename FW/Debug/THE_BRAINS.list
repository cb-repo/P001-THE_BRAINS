
THE_BRAINS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002304  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080023c4  080023c4  00020198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080023c4  080023c4  00020198  2**0
                  CONTENTS
  4 .ARM          00000000  080023c4  080023c4  00020198  2**0
                  CONTENTS
  5 .preinit_array 00000000  080023c4  080023c4  00020198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023c4  080023c4  000123c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080023c8  080023c8  000123c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000198  20000000  080023cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  20000198  08002564  00020198  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08002564  00020280  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007e3e  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e70  00000000  00000000  00027ffe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007c8  00000000  00000000  00029e70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006b0  00000000  00000000  0002a638  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014b88  00000000  00000000  0002ace8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000abf0  00000000  00000000  0003f870  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007ed03  00000000  00000000  0004a460  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c9163  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018c4  00000000  00000000  000c91e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000198 	.word	0x20000198
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080023ac 	.word	0x080023ac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000019c 	.word	0x2000019c
 8000104:	080023ac 	.word	0x080023ac

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <CONFIG_Init>:
 * PUBLIC FUNCTIONS
 */


void CONFIG_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
	EEPROM_Read(CONFIG_OFFSET_RADIO, config.radio, CONFIG_SIZE_RADIO);
 80003f8:	4b08      	ldr	r3, [pc, #32]	; (800041c <CONFIG_Init+0x28>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	2201      	movs	r2, #1
 80003fe:	0019      	movs	r1, r3
 8000400:	2000      	movs	r0, #0
 8000402:	f001 fa4f 	bl	80018a4 <EEPROM_Read>
	EEPROM_Read(CONFIG_OFFSET_MODE, config.mode, CONFIG_SIZE_MODE);
 8000406:	4b05      	ldr	r3, [pc, #20]	; (800041c <CONFIG_Init+0x28>)
 8000408:	685b      	ldr	r3, [r3, #4]
 800040a:	2201      	movs	r2, #1
 800040c:	0019      	movs	r1, r3
 800040e:	2001      	movs	r0, #1
 8000410:	f001 fa48 	bl	80018a4 <EEPROM_Read>
}
 8000414:	46c0      	nop			; (mov r8, r8)
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	46c0      	nop			; (mov r8, r8)
 800041c:	200001c4 	.word	0x200001c4

08000420 <CONFIG_Set>:

void CONFIG_Set(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
	CONFIG_DetRadio();
 8000424:	f000 f81b 	bl	800045e <CONFIG_DetRadio>
	CONFIG_DetMode();
 8000428:	f000 f81e 	bl	8000468 <CONFIG_DetMode>
	EEPROM_Write(CONFIG_OFFSET_RADIO, config.radio, CONFIG_SIZE_RADIO);
 800042c:	4b08      	ldr	r3, [pc, #32]	; (8000450 <CONFIG_Set+0x30>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	2201      	movs	r2, #1
 8000432:	0019      	movs	r1, r3
 8000434:	2000      	movs	r0, #0
 8000436:	f001 f9ff 	bl	8001838 <EEPROM_Write>
	EEPROM_Write(CONFIG_OFFSET_MODE, config.mode, CONFIG_SIZE_MODE);
 800043a:	4b05      	ldr	r3, [pc, #20]	; (8000450 <CONFIG_Set+0x30>)
 800043c:	685b      	ldr	r3, [r3, #4]
 800043e:	2201      	movs	r2, #1
 8000440:	0019      	movs	r1, r3
 8000442:	2001      	movs	r0, #1
 8000444:	f001 f9f8 	bl	8001838 <EEPROM_Write>
}
 8000448:	46c0      	nop			; (mov r8, r8)
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	200001c4 	.word	0x200001c4

08000454 <CONFIG_Reset>:

void CONFIG_Reset(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
	// Set config to default
	// Write to EEPROM
}
 8000458:	46c0      	nop			; (mov r8, r8)
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}

0800045e <CONFIG_DetRadio>:
/*
 * PRIVATE FUNCTIONS
 */

void CONFIG_DetRadio(void)
{
 800045e:	b580      	push	{r7, lr}
 8000460:	af00      	add	r7, sp, #0

}
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}

08000468 <CONFIG_DetMode>:


void CONFIG_DetMode(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
//	while (RADIO_MAX - CONFIG_RADIO_SET)
//		{
//			if ()
//		}
}
 800046c:	46c0      	nop			; (mov r8, r8)
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}

08000472 <LED_Update>:
	GPIO_EnableOutput(LED_STATUS_GPIO, LED_STATUS_PIN, false);
	GPIO_EnableOutput(LED_FAULT_GPIO, LED_FAULT_PIN, false);
}

void LED_Update (void)
{
 8000472:	b580      	push	{r7, lr}
 8000474:	af00      	add	r7, sp, #0

}
 8000476:	46c0      	nop			; (mov r8, r8)
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}

0800047c <GPIO_EnableOutput>:
{
	GPIO_Init(gpio, pin, GPIO_Mode_Analog);
}

static inline void GPIO_EnableOutput(GPIO_t * gpio, uint32_t pin, GPIO_State_t state)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b084      	sub	sp, #16
 8000480:	af00      	add	r7, sp, #0
 8000482:	60f8      	str	r0, [r7, #12]
 8000484:	60b9      	str	r1, [r7, #8]
 8000486:	1dfb      	adds	r3, r7, #7
 8000488:	701a      	strb	r2, [r3, #0]
	GPIO_Write(gpio, pin, state);
 800048a:	1dfb      	adds	r3, r7, #7
 800048c:	781a      	ldrb	r2, [r3, #0]
 800048e:	68b9      	ldr	r1, [r7, #8]
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	0018      	movs	r0, r3
 8000494:	f001 fa7a 	bl	800198c <GPIO_Write>
	GPIO_Init(gpio, pin, GPIO_Mode_Output);
 8000498:	68b9      	ldr	r1, [r7, #8]
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	2201      	movs	r2, #1
 800049e:	0018      	movs	r0, r3
 80004a0:	f001 fada 	bl	8001a58 <GPIO_Init>
}
 80004a4:	46c0      	nop			; (mov r8, r8)
 80004a6:	46bd      	mov	sp, r7
 80004a8:	b004      	add	sp, #16
 80004aa:	bd80      	pop	{r7, pc}

080004ac <MOTOR_Init>:
/*
 * PUBLIC FUNCTIONS
 */

void MOTOR_Init (void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af02      	add	r7, sp, #8
	TIM_Init(TIM_MOTOR, TIM_MOTOR_FREQ, TIM_MOTOR_RELOAD);
 80004b2:	4b25      	ldr	r3, [pc, #148]	; (8000548 <MOTOR_Init+0x9c>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	4925      	ldr	r1, [pc, #148]	; (800054c <MOTOR_Init+0xa0>)
 80004b8:	22ff      	movs	r2, #255	; 0xff
 80004ba:	0018      	movs	r0, r3
 80004bc:	f001 fc68 	bl	8001d90 <TIM_Init>

	GPIO_EnableOutput(MOTOR_LMODE_GPIO, MOTOR_LMODE_PIN, MODE_BRAKE);
 80004c0:	2380      	movs	r3, #128	; 0x80
 80004c2:	005b      	lsls	r3, r3, #1
 80004c4:	4822      	ldr	r0, [pc, #136]	; (8000550 <MOTOR_Init+0xa4>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	0019      	movs	r1, r3
 80004ca:	f7ff ffd7 	bl	800047c <GPIO_EnableOutput>
	GPIO_EnableOutput(MOTOR_RMODE_GPIO, MOTOR_RMODE_PIN, MODE_BRAKE);
 80004ce:	4b20      	ldr	r3, [pc, #128]	; (8000550 <MOTOR_Init+0xa4>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	2104      	movs	r1, #4
 80004d4:	0018      	movs	r0, r3
 80004d6:	f7ff ffd1 	bl	800047c <GPIO_EnableOutput>

	TIM_EnablePwm(TIM_MOTOR, MOTOR_LPWM1_CH, MOTOR_LPWM1_GPIO, MOTOR_LPWM1_PIN, TIM_MOTOR_AF5);
 80004da:	4b1b      	ldr	r3, [pc, #108]	; (8000548 <MOTOR_Init+0x9c>)
 80004dc:	6818      	ldr	r0, [r3, #0]
 80004de:	2380      	movs	r3, #128	; 0x80
 80004e0:	0219      	lsls	r1, r3, #8
 80004e2:	23a0      	movs	r3, #160	; 0xa0
 80004e4:	05da      	lsls	r2, r3, #23
 80004e6:	2305      	movs	r3, #5
 80004e8:	9300      	str	r3, [sp, #0]
 80004ea:	000b      	movs	r3, r1
 80004ec:	2100      	movs	r1, #0
 80004ee:	f001 fcdb 	bl	8001ea8 <TIM_EnablePwm>
	TIM_EnablePwm(TIM_MOTOR, MOTOR_LPWM2_CH, MOTOR_LPWM2_GPIO, MOTOR_LPWM2_PIN, TIM_MOTOR_AF2);
 80004f2:	4b15      	ldr	r3, [pc, #84]	; (8000548 <MOTOR_Init+0x9c>)
 80004f4:	6818      	ldr	r0, [r3, #0]
 80004f6:	4a16      	ldr	r2, [pc, #88]	; (8000550 <MOTOR_Init+0xa4>)
 80004f8:	2302      	movs	r3, #2
 80004fa:	9300      	str	r3, [sp, #0]
 80004fc:	2308      	movs	r3, #8
 80004fe:	2101      	movs	r1, #1
 8000500:	f001 fcd2 	bl	8001ea8 <TIM_EnablePwm>
	TIM_EnablePwm(TIM_MOTOR, MOTOR_RPWM1_CH, MOTOR_RPWM1_GPIO, MOTOR_RPWM1_PIN, TIM_MOTOR_AF2);
 8000504:	4b10      	ldr	r3, [pc, #64]	; (8000548 <MOTOR_Init+0x9c>)
 8000506:	6818      	ldr	r0, [r3, #0]
 8000508:	2380      	movs	r3, #128	; 0x80
 800050a:	00da      	lsls	r2, r3, #3
 800050c:	4910      	ldr	r1, [pc, #64]	; (8000550 <MOTOR_Init+0xa4>)
 800050e:	2302      	movs	r3, #2
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	0013      	movs	r3, r2
 8000514:	000a      	movs	r2, r1
 8000516:	2102      	movs	r1, #2
 8000518:	f001 fcc6 	bl	8001ea8 <TIM_EnablePwm>
	TIM_EnablePwm(TIM_MOTOR, MOTOR_RPWM2_CH, MOTOR_RPWM2_GPIO, MOTOR_RPWM2_PIN, TIM_MOTOR_AF2);
 800051c:	4b0a      	ldr	r3, [pc, #40]	; (8000548 <MOTOR_Init+0x9c>)
 800051e:	6818      	ldr	r0, [r3, #0]
 8000520:	2380      	movs	r3, #128	; 0x80
 8000522:	011a      	lsls	r2, r3, #4
 8000524:	490a      	ldr	r1, [pc, #40]	; (8000550 <MOTOR_Init+0xa4>)
 8000526:	2302      	movs	r3, #2
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	0013      	movs	r3, r2
 800052c:	000a      	movs	r2, r1
 800052e:	2103      	movs	r1, #3
 8000530:	f001 fcba 	bl	8001ea8 <TIM_EnablePwm>

	MOTOR_Stop();
 8000534:	f000 f80e 	bl	8000554 <MOTOR_Stop>
	TIM_Start(TIM_MOTOR);
 8000538:	4b03      	ldr	r3, [pc, #12]	; (8000548 <MOTOR_Init+0x9c>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	0018      	movs	r0, r3
 800053e:	f001 fcfc 	bl	8001f3a <TIM_Start>
}
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	20000028 	.word	0x20000028
 800054c:	004e2000 	.word	0x004e2000
 8000550:	50000400 	.word	0x50000400

08000554 <MOTOR_Stop>:
	GPIO_Deinit(MOTOR_RPWM2_GPIO, MOTOR_RPWM2_PIN);
	TIM_Deinit(TIM_MOTOR);
}

void MOTOR_Stop (void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	MOTOR_M1_Update(MOTOR_OFF);
 8000558:	2000      	movs	r0, #0
 800055a:	f000 f843 	bl	80005e4 <MOTOR_M1_Update>
	MOTOR_M2_Update(MOTOR_OFF);
 800055e:	2000      	movs	r0, #0
 8000560:	f000 f888 	bl	8000674 <MOTOR_M2_Update>
}
 8000564:	46c0      	nop			; (mov r8, r8)
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
	...

0800056c <MOTOR_M1_Brake>:
	MOTOR_M1_Brake();
	MOTOR_M2_Brake();
}

void MOTOR_M1_Brake (void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
	GPIO_Write(MOTOR_LMODE_GPIO, MOTOR_LMODE_PIN, MODE_BRAKE);
 8000570:	2380      	movs	r3, #128	; 0x80
 8000572:	005b      	lsls	r3, r3, #1
 8000574:	480a      	ldr	r0, [pc, #40]	; (80005a0 <MOTOR_M1_Brake+0x34>)
 8000576:	2200      	movs	r2, #0
 8000578:	0019      	movs	r1, r3
 800057a:	f001 fa07 	bl	800198c <GPIO_Write>
	TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM1_CH, PWM_BRAKE);
 800057e:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <MOTOR_M1_Brake+0x38>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	2201      	movs	r2, #1
 8000584:	2100      	movs	r1, #0
 8000586:	0018      	movs	r0, r3
 8000588:	f001 fca9 	bl	8001ede <TIM_SetPulse>
	TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM2_CH, PWM_BRAKE);
 800058c:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <MOTOR_M1_Brake+0x38>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	2201      	movs	r2, #1
 8000592:	2101      	movs	r1, #1
 8000594:	0018      	movs	r0, r3
 8000596:	f001 fca2 	bl	8001ede <TIM_SetPulse>
}
 800059a:	46c0      	nop			; (mov r8, r8)
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	50000400 	.word	0x50000400
 80005a4:	20000028 	.word	0x20000028

080005a8 <MOTOR_M2_Brake>:

void MOTOR_M2_Brake (void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	GPIO_Write(MOTOR_RMODE_GPIO, MOTOR_RMODE_PIN, MODE_BRAKE);
 80005ac:	4b0b      	ldr	r3, [pc, #44]	; (80005dc <MOTOR_M2_Brake+0x34>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	2104      	movs	r1, #4
 80005b2:	0018      	movs	r0, r3
 80005b4:	f001 f9ea 	bl	800198c <GPIO_Write>
	TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM1_CH, PWM_BRAKE);
 80005b8:	4b09      	ldr	r3, [pc, #36]	; (80005e0 <MOTOR_M2_Brake+0x38>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	2201      	movs	r2, #1
 80005be:	2102      	movs	r1, #2
 80005c0:	0018      	movs	r0, r3
 80005c2:	f001 fc8c 	bl	8001ede <TIM_SetPulse>
	TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM2_CH, PWM_BRAKE);
 80005c6:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <MOTOR_M2_Brake+0x38>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	2201      	movs	r2, #1
 80005cc:	2103      	movs	r1, #3
 80005ce:	0018      	movs	r0, r3
 80005d0:	f001 fc85 	bl	8001ede <TIM_SetPulse>
}
 80005d4:	46c0      	nop			; (mov r8, r8)
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	46c0      	nop			; (mov r8, r8)
 80005dc:	50000400 	.word	0x50000400
 80005e0:	20000028 	.word	0x20000028

080005e4 <MOTOR_M1_Update>:
	TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM1_CH, PWM_COAST);
	TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM2_CH, PWM_COAST);
}

void MOTOR_M1_Update (int32_t throttle)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	bool reverse = false;
 80005ec:	230f      	movs	r3, #15
 80005ee:	18fb      	adds	r3, r7, r3
 80005f0:	2200      	movs	r2, #0
 80005f2:	701a      	strb	r2, [r3, #0]

	// Check if reversing
	if (throttle < 0) {
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	da06      	bge.n	8000608 <MOTOR_M1_Update+0x24>
		reverse = true;
 80005fa:	230f      	movs	r3, #15
 80005fc:	18fb      	adds	r3, r7, r3
 80005fe:	2201      	movs	r2, #1
 8000600:	701a      	strb	r2, [r3, #0]
		throttle = -throttle;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	425b      	negs	r3, r3
 8000606:	607b      	str	r3, [r7, #4]
	}

	// Clamp maximum speed
	if (throttle > MOTOR_MAX) {
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	2380      	movs	r3, #128	; 0x80
 800060c:	005b      	lsls	r3, r3, #1
 800060e:	429a      	cmp	r2, r3
 8000610:	dd02      	ble.n	8000618 <MOTOR_M1_Update+0x34>
		throttle = MOTOR_MAX;
 8000612:	2380      	movs	r3, #128	; 0x80
 8000614:	005b      	lsls	r3, r3, #1
 8000616:	607b      	str	r3, [r7, #4]
	}

	if (throttle <= MOTOR_OFF + MOTOR_STALL) {
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2b32      	cmp	r3, #50	; 0x32
 800061c:	dc02      	bgt.n	8000624 <MOTOR_M1_Update+0x40>
		if (MOTOR_BRAKE) {
			MOTOR_M1_Brake();
 800061e:	f7ff ffa5 	bl	800056c <MOTOR_M1_Brake>
		TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM2_CH, throttle);
	} else {
		TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM1_CH, throttle);
		TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM2_CH, 0);
	}
}
 8000622:	e021      	b.n	8000668 <MOTOR_M1_Update+0x84>
	} else if (reverse) {
 8000624:	230f      	movs	r3, #15
 8000626:	18fb      	adds	r3, r7, r3
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d00e      	beq.n	800064c <MOTOR_M1_Update+0x68>
		TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM1_CH, 0);
 800062e:	4b10      	ldr	r3, [pc, #64]	; (8000670 <MOTOR_M1_Update+0x8c>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	2200      	movs	r2, #0
 8000634:	2100      	movs	r1, #0
 8000636:	0018      	movs	r0, r3
 8000638:	f001 fc51 	bl	8001ede <TIM_SetPulse>
		TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM2_CH, throttle);
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <MOTOR_M1_Update+0x8c>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	687a      	ldr	r2, [r7, #4]
 8000642:	2101      	movs	r1, #1
 8000644:	0018      	movs	r0, r3
 8000646:	f001 fc4a 	bl	8001ede <TIM_SetPulse>
}
 800064a:	e00d      	b.n	8000668 <MOTOR_M1_Update+0x84>
		TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM1_CH, throttle);
 800064c:	4b08      	ldr	r3, [pc, #32]	; (8000670 <MOTOR_M1_Update+0x8c>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	2100      	movs	r1, #0
 8000654:	0018      	movs	r0, r3
 8000656:	f001 fc42 	bl	8001ede <TIM_SetPulse>
		TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM2_CH, 0);
 800065a:	4b05      	ldr	r3, [pc, #20]	; (8000670 <MOTOR_M1_Update+0x8c>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	2200      	movs	r2, #0
 8000660:	2101      	movs	r1, #1
 8000662:	0018      	movs	r0, r3
 8000664:	f001 fc3b 	bl	8001ede <TIM_SetPulse>
}
 8000668:	46c0      	nop			; (mov r8, r8)
 800066a:	46bd      	mov	sp, r7
 800066c:	b004      	add	sp, #16
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000028 	.word	0x20000028

08000674 <MOTOR_M2_Update>:

void MOTOR_M2_Update (int32_t throttle)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	bool reverse = false;
 800067c:	230f      	movs	r3, #15
 800067e:	18fb      	adds	r3, r7, r3
 8000680:	2200      	movs	r2, #0
 8000682:	701a      	strb	r2, [r3, #0]

	// Check if reversing
	if (throttle < 0) {
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2b00      	cmp	r3, #0
 8000688:	da06      	bge.n	8000698 <MOTOR_M2_Update+0x24>
		reverse = true;
 800068a:	230f      	movs	r3, #15
 800068c:	18fb      	adds	r3, r7, r3
 800068e:	2201      	movs	r2, #1
 8000690:	701a      	strb	r2, [r3, #0]
		throttle = -throttle;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	425b      	negs	r3, r3
 8000696:	607b      	str	r3, [r7, #4]
	}

	// Clamp maximum speed
	if (throttle > MOTOR_MAX) {
 8000698:	687a      	ldr	r2, [r7, #4]
 800069a:	2380      	movs	r3, #128	; 0x80
 800069c:	005b      	lsls	r3, r3, #1
 800069e:	429a      	cmp	r2, r3
 80006a0:	dd02      	ble.n	80006a8 <MOTOR_M2_Update+0x34>
		throttle = MOTOR_MAX;
 80006a2:	2380      	movs	r3, #128	; 0x80
 80006a4:	005b      	lsls	r3, r3, #1
 80006a6:	607b      	str	r3, [r7, #4]
	}

	if (throttle <= MOTOR_OFF + MOTOR_STALL) {
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2b32      	cmp	r3, #50	; 0x32
 80006ac:	dc02      	bgt.n	80006b4 <MOTOR_M2_Update+0x40>
		if (MOTOR_BRAKE) {
			MOTOR_M2_Brake();
 80006ae:	f7ff ff7b 	bl	80005a8 <MOTOR_M2_Brake>
		TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM2_CH, throttle);
	} else {
		TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM1_CH, throttle);
		TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM2_CH, 0);
	}
}
 80006b2:	e021      	b.n	80006f8 <MOTOR_M2_Update+0x84>
	} else if (reverse) {
 80006b4:	230f      	movs	r3, #15
 80006b6:	18fb      	adds	r3, r7, r3
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d00e      	beq.n	80006dc <MOTOR_M2_Update+0x68>
		TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM1_CH, 0);
 80006be:	4b10      	ldr	r3, [pc, #64]	; (8000700 <MOTOR_M2_Update+0x8c>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	2200      	movs	r2, #0
 80006c4:	2102      	movs	r1, #2
 80006c6:	0018      	movs	r0, r3
 80006c8:	f001 fc09 	bl	8001ede <TIM_SetPulse>
		TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM2_CH, throttle);
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <MOTOR_M2_Update+0x8c>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	687a      	ldr	r2, [r7, #4]
 80006d2:	2103      	movs	r1, #3
 80006d4:	0018      	movs	r0, r3
 80006d6:	f001 fc02 	bl	8001ede <TIM_SetPulse>
}
 80006da:	e00d      	b.n	80006f8 <MOTOR_M2_Update+0x84>
		TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM1_CH, throttle);
 80006dc:	4b08      	ldr	r3, [pc, #32]	; (8000700 <MOTOR_M2_Update+0x8c>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	687a      	ldr	r2, [r7, #4]
 80006e2:	2102      	movs	r1, #2
 80006e4:	0018      	movs	r0, r3
 80006e6:	f001 fbfa 	bl	8001ede <TIM_SetPulse>
		TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM2_CH, 0);
 80006ea:	4b05      	ldr	r3, [pc, #20]	; (8000700 <MOTOR_M2_Update+0x8c>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	2200      	movs	r2, #0
 80006f0:	2103      	movs	r1, #3
 80006f2:	0018      	movs	r0, r3
 80006f4:	f001 fbf3 	bl	8001ede <TIM_SetPulse>
}
 80006f8:	46c0      	nop			; (mov r8, r8)
 80006fa:	46bd      	mov	sp, r7
 80006fc:	b004      	add	sp, #16
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000028 	.word	0x20000028

08000704 <GPIO_Read>:
{
	gpio->BRR = (uint32_t)pin;
}

static inline GPIO_State_t GPIO_Read(GPIO_t * gpio, uint32_t pin)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]
	return ((gpio->IDR & pin) > 0);
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	691b      	ldr	r3, [r3, #16]
 8000712:	683a      	ldr	r2, [r7, #0]
 8000714:	4013      	ands	r3, r2
 8000716:	1e5a      	subs	r2, r3, #1
 8000718:	4193      	sbcs	r3, r2
 800071a:	b2db      	uxtb	r3, r3
}
 800071c:	0018      	movs	r0, r3
 800071e:	46bd      	mov	sp, r7
 8000720:	b002      	add	sp, #8
 8000722:	bd80      	pop	{r7, pc}

08000724 <TIM_Read>:
/*
 * INLINE FUNCTION DEFINITIONS
 */

static inline uint32_t TIM_Read(TIM_t * tim)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	return tim->Instance->CNT;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8000732:	0018      	movs	r0, r3
 8000734:	46bd      	mov	sp, r7
 8000736:	b002      	add	sp, #8
 8000738:	bd80      	pop	{r7, pc}

0800073a <RADIO_Init>:
/*
 * PUBLIC FUNCTIONS
 */

void RADIO_Init (void)
{
 800073a:	b580      	push	{r7, lr}
 800073c:	af00      	add	r7, sp, #0
	FS2A_Init();
 800073e:	f000 f803 	bl	8000748 <FS2A_Init>
}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <FS2A_Init>:
 * PRIVATE FUNCTIONS
 */


void FS2A_Init (void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	TIM_Init(TIM_RADIO, TIM_RADIO_FREQ, TIM_RADIO_RELOAD);
 800074c:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <FS2A_Init+0x68>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a18      	ldr	r2, [pc, #96]	; (80007b4 <FS2A_Init+0x6c>)
 8000752:	4919      	ldr	r1, [pc, #100]	; (80007b8 <FS2A_Init+0x70>)
 8000754:	0018      	movs	r0, r3
 8000756:	f001 fb1b 	bl	8001d90 <TIM_Init>
	TIM_Start(TIM_RADIO);
 800075a:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <FS2A_Init+0x68>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	0018      	movs	r0, r3
 8000760:	f001 fbeb 	bl	8001f3a <TIM_Start>
	GPIO_OnChange(RADIO_S1_GPIO, RADIO_S1_PIN, GPIO_IT_Both, RADIO_S1_IRQ);
 8000764:	4a15      	ldr	r2, [pc, #84]	; (80007bc <FS2A_Init+0x74>)
 8000766:	2380      	movs	r3, #128	; 0x80
 8000768:	00d9      	lsls	r1, r3, #3
 800076a:	23a0      	movs	r3, #160	; 0xa0
 800076c:	05d8      	lsls	r0, r3, #23
 800076e:	0013      	movs	r3, r2
 8000770:	2203      	movs	r2, #3
 8000772:	f001 f945 	bl	8001a00 <GPIO_OnChange>
	GPIO_OnChange(RADIO_S2_GPIO, RADIO_S2_PIN, GPIO_IT_Both, RADIO_S2_IRQ);
 8000776:	4a12      	ldr	r2, [pc, #72]	; (80007c0 <FS2A_Init+0x78>)
 8000778:	2380      	movs	r3, #128	; 0x80
 800077a:	0099      	lsls	r1, r3, #2
 800077c:	23a0      	movs	r3, #160	; 0xa0
 800077e:	05d8      	lsls	r0, r3, #23
 8000780:	0013      	movs	r3, r2
 8000782:	2203      	movs	r2, #3
 8000784:	f001 f93c 	bl	8001a00 <GPIO_OnChange>
	GPIO_OnChange(RADIO_S3_GPIO, RADIO_S3_PIN, GPIO_IT_Both, RADIO_S3_IRQ);
 8000788:	4a0e      	ldr	r2, [pc, #56]	; (80007c4 <FS2A_Init+0x7c>)
 800078a:	2380      	movs	r3, #128	; 0x80
 800078c:	0059      	lsls	r1, r3, #1
 800078e:	23a0      	movs	r3, #160	; 0xa0
 8000790:	05d8      	lsls	r0, r3, #23
 8000792:	0013      	movs	r3, r2
 8000794:	2203      	movs	r2, #3
 8000796:	f001 f933 	bl	8001a00 <GPIO_OnChange>
	GPIO_OnChange(RADIO_S4_GPIO, RADIO_S4_PIN, GPIO_IT_Both, RADIO_S4_IRQ);
 800079a:	4a0b      	ldr	r2, [pc, #44]	; (80007c8 <FS2A_Init+0x80>)
 800079c:	2380      	movs	r3, #128	; 0x80
 800079e:	0219      	lsls	r1, r3, #8
 80007a0:	480a      	ldr	r0, [pc, #40]	; (80007cc <FS2A_Init+0x84>)
 80007a2:	0013      	movs	r3, r2
 80007a4:	2203      	movs	r2, #3
 80007a6:	f001 f92b 	bl	8001a00 <GPIO_OnChange>
}
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000044 	.word	0x20000044
 80007b4:	0000ffff 	.word	0x0000ffff
 80007b8:	000f4240 	.word	0x000f4240
 80007bc:	080007d1 	.word	0x080007d1
 80007c0:	08000821 	.word	0x08000821
 80007c4:	08000871 	.word	0x08000871
 80007c8:	080008c1 	.word	0x080008c1
 80007cc:	50000400 	.word	0x50000400

080007d0 <RADIO_S1_IRQ>:
/*
 * INTERRUPT ROUTINES
 */

void RADIO_S1_IRQ (void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
	uint32_t now = TIM_Read(TIM_RADIO);
 80007d6:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <RADIO_S1_IRQ+0x44>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	0018      	movs	r0, r3
 80007dc:	f7ff ffa2 	bl	8000724 <TIM_Read>
 80007e0:	0003      	movs	r3, r0
 80007e2:	607b      	str	r3, [r7, #4]
	if (GPIO_Read(RADIO_S1_GPIO, RADIO_S1_PIN))
 80007e4:	2380      	movs	r3, #128	; 0x80
 80007e6:	00da      	lsls	r2, r3, #3
 80007e8:	23a0      	movs	r3, #160	; 0xa0
 80007ea:	05db      	lsls	r3, r3, #23
 80007ec:	0011      	movs	r1, r2
 80007ee:	0018      	movs	r0, r3
 80007f0:	f7ff ff88 	bl	8000704 <GPIO_Read>
 80007f4:	1e03      	subs	r3, r0, #0
 80007f6:	d003      	beq.n	8000800 <RADIO_S1_IRQ+0x30>
	{
		radioS1_tick = now;
 80007f8:	4b07      	ldr	r3, [pc, #28]	; (8000818 <RADIO_S1_IRQ+0x48>)
 80007fa:	687a      	ldr	r2, [r7, #4]
 80007fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		radioS1 = now - radioS1_tick;
	}
}
 80007fe:	e005      	b.n	800080c <RADIO_S1_IRQ+0x3c>
		radioS1 = now - radioS1_tick;
 8000800:	4b05      	ldr	r3, [pc, #20]	; (8000818 <RADIO_S1_IRQ+0x48>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	1ad2      	subs	r2, r2, r3
 8000808:	4b04      	ldr	r3, [pc, #16]	; (800081c <RADIO_S1_IRQ+0x4c>)
 800080a:	601a      	str	r2, [r3, #0]
}
 800080c:	46c0      	nop			; (mov r8, r8)
 800080e:	46bd      	mov	sp, r7
 8000810:	b002      	add	sp, #8
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000044 	.word	0x20000044
 8000818:	200001b4 	.word	0x200001b4
 800081c:	20000000 	.word	0x20000000

08000820 <RADIO_S2_IRQ>:

void RADIO_S2_IRQ (void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
	uint32_t now = TIM_Read(TIM_RADIO);
 8000826:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <RADIO_S2_IRQ+0x44>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	0018      	movs	r0, r3
 800082c:	f7ff ff7a 	bl	8000724 <TIM_Read>
 8000830:	0003      	movs	r3, r0
 8000832:	607b      	str	r3, [r7, #4]
	if (GPIO_Read(RADIO_S2_GPIO, RADIO_S2_PIN))
 8000834:	2380      	movs	r3, #128	; 0x80
 8000836:	009a      	lsls	r2, r3, #2
 8000838:	23a0      	movs	r3, #160	; 0xa0
 800083a:	05db      	lsls	r3, r3, #23
 800083c:	0011      	movs	r1, r2
 800083e:	0018      	movs	r0, r3
 8000840:	f7ff ff60 	bl	8000704 <GPIO_Read>
 8000844:	1e03      	subs	r3, r0, #0
 8000846:	d003      	beq.n	8000850 <RADIO_S2_IRQ+0x30>
	{
		radioS2_tick = now;
 8000848:	4b07      	ldr	r3, [pc, #28]	; (8000868 <RADIO_S2_IRQ+0x48>)
 800084a:	687a      	ldr	r2, [r7, #4]
 800084c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		radioS2 = now - radioS2_tick;
	}
}
 800084e:	e005      	b.n	800085c <RADIO_S2_IRQ+0x3c>
		radioS2 = now - radioS2_tick;
 8000850:	4b05      	ldr	r3, [pc, #20]	; (8000868 <RADIO_S2_IRQ+0x48>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	687a      	ldr	r2, [r7, #4]
 8000856:	1ad2      	subs	r2, r2, r3
 8000858:	4b04      	ldr	r3, [pc, #16]	; (800086c <RADIO_S2_IRQ+0x4c>)
 800085a:	601a      	str	r2, [r3, #0]
}
 800085c:	46c0      	nop			; (mov r8, r8)
 800085e:	46bd      	mov	sp, r7
 8000860:	b002      	add	sp, #8
 8000862:	bd80      	pop	{r7, pc}
 8000864:	20000044 	.word	0x20000044
 8000868:	200001b8 	.word	0x200001b8
 800086c:	20000004 	.word	0x20000004

08000870 <RADIO_S3_IRQ>:

void RADIO_S3_IRQ (void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
	uint32_t now = TIM_Read(TIM_RADIO);
 8000876:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <RADIO_S3_IRQ+0x44>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	0018      	movs	r0, r3
 800087c:	f7ff ff52 	bl	8000724 <TIM_Read>
 8000880:	0003      	movs	r3, r0
 8000882:	607b      	str	r3, [r7, #4]
	if (GPIO_Read(RADIO_S3_GPIO, RADIO_S3_PIN))
 8000884:	2380      	movs	r3, #128	; 0x80
 8000886:	005a      	lsls	r2, r3, #1
 8000888:	23a0      	movs	r3, #160	; 0xa0
 800088a:	05db      	lsls	r3, r3, #23
 800088c:	0011      	movs	r1, r2
 800088e:	0018      	movs	r0, r3
 8000890:	f7ff ff38 	bl	8000704 <GPIO_Read>
 8000894:	1e03      	subs	r3, r0, #0
 8000896:	d003      	beq.n	80008a0 <RADIO_S3_IRQ+0x30>
	{
		radioS3_tick = now;
 8000898:	4b07      	ldr	r3, [pc, #28]	; (80008b8 <RADIO_S3_IRQ+0x48>)
 800089a:	687a      	ldr	r2, [r7, #4]
 800089c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		radioS3 = now - radioS3_tick;
	}
}
 800089e:	e005      	b.n	80008ac <RADIO_S3_IRQ+0x3c>
		radioS3 = now - radioS3_tick;
 80008a0:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <RADIO_S3_IRQ+0x48>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	687a      	ldr	r2, [r7, #4]
 80008a6:	1ad2      	subs	r2, r2, r3
 80008a8:	4b04      	ldr	r3, [pc, #16]	; (80008bc <RADIO_S3_IRQ+0x4c>)
 80008aa:	601a      	str	r2, [r3, #0]
}
 80008ac:	46c0      	nop			; (mov r8, r8)
 80008ae:	46bd      	mov	sp, r7
 80008b0:	b002      	add	sp, #8
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20000044 	.word	0x20000044
 80008b8:	200001bc 	.word	0x200001bc
 80008bc:	20000008 	.word	0x20000008

080008c0 <RADIO_S4_IRQ>:

void RADIO_S4_IRQ (void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
	uint32_t now = TIM_Read(TIM_RADIO);
 80008c6:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <RADIO_S4_IRQ+0x44>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	0018      	movs	r0, r3
 80008cc:	f7ff ff2a 	bl	8000724 <TIM_Read>
 80008d0:	0003      	movs	r3, r0
 80008d2:	607b      	str	r3, [r7, #4]
	if (GPIO_Read(RADIO_S4_GPIO, RADIO_S4_PIN))
 80008d4:	2380      	movs	r3, #128	; 0x80
 80008d6:	021b      	lsls	r3, r3, #8
 80008d8:	4a0b      	ldr	r2, [pc, #44]	; (8000908 <RADIO_S4_IRQ+0x48>)
 80008da:	0019      	movs	r1, r3
 80008dc:	0010      	movs	r0, r2
 80008de:	f7ff ff11 	bl	8000704 <GPIO_Read>
 80008e2:	1e03      	subs	r3, r0, #0
 80008e4:	d003      	beq.n	80008ee <RADIO_S4_IRQ+0x2e>
	{
		radioS4_tick = now;
 80008e6:	4b09      	ldr	r3, [pc, #36]	; (800090c <RADIO_S4_IRQ+0x4c>)
 80008e8:	687a      	ldr	r2, [r7, #4]
 80008ea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		radioS3 = now - radioS4_tick;
	}
}
 80008ec:	e005      	b.n	80008fa <RADIO_S4_IRQ+0x3a>
		radioS3 = now - radioS4_tick;
 80008ee:	4b07      	ldr	r3, [pc, #28]	; (800090c <RADIO_S4_IRQ+0x4c>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	687a      	ldr	r2, [r7, #4]
 80008f4:	1ad2      	subs	r2, r2, r3
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <RADIO_S4_IRQ+0x50>)
 80008f8:	601a      	str	r2, [r3, #0]
}
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	46bd      	mov	sp, r7
 80008fe:	b002      	add	sp, #8
 8000900:	bd80      	pop	{r7, pc}
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	20000044 	.word	0x20000044
 8000908:	50000400 	.word	0x50000400
 800090c:	200001c0 	.word	0x200001c0
 8000910:	20000008 	.word	0x20000008

08000914 <GPIO_EnableOutput>:
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	60b9      	str	r1, [r7, #8]
 800091e:	1dfb      	adds	r3, r7, #7
 8000920:	701a      	strb	r2, [r3, #0]
	GPIO_Write(gpio, pin, state);
 8000922:	1dfb      	adds	r3, r7, #7
 8000924:	781a      	ldrb	r2, [r3, #0]
 8000926:	68b9      	ldr	r1, [r7, #8]
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	0018      	movs	r0, r3
 800092c:	f001 f82e 	bl	800198c <GPIO_Write>
	GPIO_Init(gpio, pin, GPIO_Mode_Output);
 8000930:	68b9      	ldr	r1, [r7, #8]
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	2201      	movs	r2, #1
 8000936:	0018      	movs	r0, r3
 8000938:	f001 f88e 	bl	8001a58 <GPIO_Init>
}
 800093c:	46c0      	nop			; (mov r8, r8)
 800093e:	46bd      	mov	sp, r7
 8000940:	b004      	add	sp, #16
 8000942:	bd80      	pop	{r7, pc}

08000944 <GPIO_Set>:
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	6039      	str	r1, [r7, #0]
	gpio->BSRR = (uint32_t)pin;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	683a      	ldr	r2, [r7, #0]
 8000952:	619a      	str	r2, [r3, #24]
}
 8000954:	46c0      	nop			; (mov r8, r8)
 8000956:	46bd      	mov	sp, r7
 8000958:	b002      	add	sp, #8
 800095a:	bd80      	pop	{r7, pc}

0800095c <GPIO_Reset>:
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	6039      	str	r1, [r7, #0]
	gpio->BRR = (uint32_t)pin;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	683a      	ldr	r2, [r7, #0]
 800096a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800096c:	46c0      	nop			; (mov r8, r8)
 800096e:	46bd      	mov	sp, r7
 8000970:	b002      	add	sp, #8
 8000972:	bd80      	pop	{r7, pc}

08000974 <SERVO_Init>:
/*
 * PUBLIC FUNCTIONS
 */

void SERVO_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
	GPIO_EnableOutput(SERVO1_GPIO, SERVO1_PIN, GPIO_PIN_RESET);
 8000978:	23a0      	movs	r3, #160	; 0xa0
 800097a:	05db      	lsls	r3, r3, #23
 800097c:	2200      	movs	r2, #0
 800097e:	2102      	movs	r1, #2
 8000980:	0018      	movs	r0, r3
 8000982:	f7ff ffc7 	bl	8000914 <GPIO_EnableOutput>
	TIM_Init(TIM_SERVO1, TIM_SERVO1_FREQ, TIM_SERVO1_RELOAD);
 8000986:	4b22      	ldr	r3, [pc, #136]	; (8000a10 <SERVO_Init+0x9c>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a22      	ldr	r2, [pc, #136]	; (8000a14 <SERVO_Init+0xa0>)
 800098c:	4922      	ldr	r1, [pc, #136]	; (8000a18 <SERVO_Init+0xa4>)
 800098e:	0018      	movs	r0, r3
 8000990:	f001 f9fe 	bl	8001d90 <TIM_Init>
	TIM_OnReload(TIM_SERVO1, SERVO1_TimerReloadISR);
 8000994:	4b1e      	ldr	r3, [pc, #120]	; (8000a10 <SERVO_Init+0x9c>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a20      	ldr	r2, [pc, #128]	; (8000a1c <SERVO_Init+0xa8>)
 800099a:	0011      	movs	r1, r2
 800099c:	0018      	movs	r0, r3
 800099e:	f001 fa47 	bl	8001e30 <TIM_OnReload>
	TIM_OnPulse(TIM_SERVO1, 0, SERVO1_TimerPulseISR);
 80009a2:	4b1b      	ldr	r3, [pc, #108]	; (8000a10 <SERVO_Init+0x9c>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4a1e      	ldr	r2, [pc, #120]	; (8000a20 <SERVO_Init+0xac>)
 80009a8:	2100      	movs	r1, #0
 80009aa:	0018      	movs	r0, r3
 80009ac:	f001 fa54 	bl	8001e58 <TIM_OnPulse>
	SERVO_S1_Update(0);
 80009b0:	2000      	movs	r0, #0
 80009b2:	f000 f83f 	bl	8000a34 <SERVO_S1_Update>
	TIM_Start(TIM_SERVO1);
 80009b6:	4b16      	ldr	r3, [pc, #88]	; (8000a10 <SERVO_Init+0x9c>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	0018      	movs	r0, r3
 80009bc:	f001 fabd 	bl	8001f3a <TIM_Start>

	GPIO_EnableOutput(SERVO2_GPIO, SERVO2_PIN, GPIO_PIN_RESET);
 80009c0:	2380      	movs	r3, #128	; 0x80
 80009c2:	019b      	lsls	r3, r3, #6
 80009c4:	4817      	ldr	r0, [pc, #92]	; (8000a24 <SERVO_Init+0xb0>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	0019      	movs	r1, r3
 80009ca:	f7ff ffa3 	bl	8000914 <GPIO_EnableOutput>
	TIM_Init(TIM_SERVO2, TIM_SERVO2_FREQ, TIM_SERVO2_RELOAD);
 80009ce:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <SERVO_Init+0xb4>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a10      	ldr	r2, [pc, #64]	; (8000a14 <SERVO_Init+0xa0>)
 80009d4:	4910      	ldr	r1, [pc, #64]	; (8000a18 <SERVO_Init+0xa4>)
 80009d6:	0018      	movs	r0, r3
 80009d8:	f001 f9da 	bl	8001d90 <TIM_Init>
	TIM_OnReload(TIM_SERVO2, SERVO2_TimerReloadISR);
 80009dc:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <SERVO_Init+0xb4>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a12      	ldr	r2, [pc, #72]	; (8000a2c <SERVO_Init+0xb8>)
 80009e2:	0011      	movs	r1, r2
 80009e4:	0018      	movs	r0, r3
 80009e6:	f001 fa23 	bl	8001e30 <TIM_OnReload>
	TIM_OnPulse(TIM_SERVO2, 0, SERVO2_TimerPulseISR);
 80009ea:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <SERVO_Init+0xb4>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a10      	ldr	r2, [pc, #64]	; (8000a30 <SERVO_Init+0xbc>)
 80009f0:	2100      	movs	r1, #0
 80009f2:	0018      	movs	r0, r3
 80009f4:	f001 fa30 	bl	8001e58 <TIM_OnPulse>
	SERVO_S2_Update(0);
 80009f8:	2000      	movs	r0, #0
 80009fa:	f000 f849 	bl	8000a90 <SERVO_S2_Update>
	TIM_Start(TIM_SERVO2);
 80009fe:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <SERVO_Init+0xb4>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	0018      	movs	r0, r3
 8000a04:	f001 fa99 	bl	8001f3a <TIM_Start>
}
 8000a08:	46c0      	nop			; (mov r8, r8)
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	20000060 	.word	0x20000060
 8000a14:	00002710 	.word	0x00002710
 8000a18:	000f4240 	.word	0x000f4240
 8000a1c:	08000aed 	.word	0x08000aed
 8000a20:	08000b03 	.word	0x08000b03
 8000a24:	50000800 	.word	0x50000800
 8000a28:	2000007c 	.word	0x2000007c
 8000a2c:	08000b19 	.word	0x08000b19
 8000a30:	08000b35 	.word	0x08000b35

08000a34 <SERVO_S1_Update>:
	TIM_Deinit(TIM_SERVO2);
	GPIO_Deinit(SERVO2_GPIO, SERVO2_PIN);
}

void SERVO_S1_Update(int16_t pulse)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	0002      	movs	r2, r0
 8000a3c:	1dbb      	adds	r3, r7, #6
 8000a3e:	801a      	strh	r2, [r3, #0]
	if (pulse > SERVO_MAX)
 8000a40:	1dbb      	adds	r3, r7, #6
 8000a42:	2200      	movs	r2, #0
 8000a44:	5e9a      	ldrsh	r2, [r3, r2]
 8000a46:	23fa      	movs	r3, #250	; 0xfa
 8000a48:	00db      	lsls	r3, r3, #3
 8000a4a:	429a      	cmp	r2, r3
 8000a4c:	dd04      	ble.n	8000a58 <SERVO_S1_Update+0x24>
	{
		pulse = SERVO_MAX;
 8000a4e:	1dbb      	adds	r3, r7, #6
 8000a50:	22fa      	movs	r2, #250	; 0xfa
 8000a52:	00d2      	lsls	r2, r2, #3
 8000a54:	801a      	strh	r2, [r3, #0]
 8000a56:	e009      	b.n	8000a6c <SERVO_S1_Update+0x38>
	}
	else if (pulse < SERVO_MIN)
 8000a58:	1dbb      	adds	r3, r7, #6
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	5e9b      	ldrsh	r3, [r3, r2]
 8000a5e:	4a0a      	ldr	r2, [pc, #40]	; (8000a88 <SERVO_S1_Update+0x54>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	dc03      	bgt.n	8000a6c <SERVO_S1_Update+0x38>
	{
		pulse = SERVO_MIN;
 8000a64:	1dbb      	adds	r3, r7, #6
 8000a66:	22fa      	movs	r2, #250	; 0xfa
 8000a68:	0092      	lsls	r2, r2, #2
 8000a6a:	801a      	strh	r2, [r3, #0]
	}
	TIM_SetPulse(TIM_SERVO1, 0, pulse);
 8000a6c:	4b07      	ldr	r3, [pc, #28]	; (8000a8c <SERVO_S1_Update+0x58>)
 8000a6e:	6818      	ldr	r0, [r3, #0]
 8000a70:	1dbb      	adds	r3, r7, #6
 8000a72:	2200      	movs	r2, #0
 8000a74:	5e9b      	ldrsh	r3, [r3, r2]
 8000a76:	001a      	movs	r2, r3
 8000a78:	2100      	movs	r1, #0
 8000a7a:	f001 fa30 	bl	8001ede <TIM_SetPulse>
}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	46bd      	mov	sp, r7
 8000a82:	b002      	add	sp, #8
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	000003e7 	.word	0x000003e7
 8000a8c:	20000060 	.word	0x20000060

08000a90 <SERVO_S2_Update>:

void SERVO_S2_Update(int16_t pulse)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	0002      	movs	r2, r0
 8000a98:	1dbb      	adds	r3, r7, #6
 8000a9a:	801a      	strh	r2, [r3, #0]
	if (pulse > SERVO_MAX)
 8000a9c:	1dbb      	adds	r3, r7, #6
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	5e9a      	ldrsh	r2, [r3, r2]
 8000aa2:	23fa      	movs	r3, #250	; 0xfa
 8000aa4:	00db      	lsls	r3, r3, #3
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	dd04      	ble.n	8000ab4 <SERVO_S2_Update+0x24>
	{
		pulse = SERVO_MAX;
 8000aaa:	1dbb      	adds	r3, r7, #6
 8000aac:	22fa      	movs	r2, #250	; 0xfa
 8000aae:	00d2      	lsls	r2, r2, #3
 8000ab0:	801a      	strh	r2, [r3, #0]
 8000ab2:	e009      	b.n	8000ac8 <SERVO_S2_Update+0x38>
	}
	else if (pulse < SERVO_MIN)
 8000ab4:	1dbb      	adds	r3, r7, #6
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	5e9b      	ldrsh	r3, [r3, r2]
 8000aba:	4a0a      	ldr	r2, [pc, #40]	; (8000ae4 <SERVO_S2_Update+0x54>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	dc03      	bgt.n	8000ac8 <SERVO_S2_Update+0x38>
	{
		pulse = SERVO_MIN;
 8000ac0:	1dbb      	adds	r3, r7, #6
 8000ac2:	22fa      	movs	r2, #250	; 0xfa
 8000ac4:	0092      	lsls	r2, r2, #2
 8000ac6:	801a      	strh	r2, [r3, #0]
	}
	TIM_SetPulse(TIM_SERVO2, 0, pulse);
 8000ac8:	4b07      	ldr	r3, [pc, #28]	; (8000ae8 <SERVO_S2_Update+0x58>)
 8000aca:	6818      	ldr	r0, [r3, #0]
 8000acc:	1dbb      	adds	r3, r7, #6
 8000ace:	2200      	movs	r2, #0
 8000ad0:	5e9b      	ldrsh	r3, [r3, r2]
 8000ad2:	001a      	movs	r2, r3
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	f001 fa02 	bl	8001ede <TIM_SetPulse>
}
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	46bd      	mov	sp, r7
 8000ade:	b002      	add	sp, #8
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	000003e7 	.word	0x000003e7
 8000ae8:	2000007c 	.word	0x2000007c

08000aec <SERVO1_TimerReloadISR>:
/*
 * INTERRUPT ROUTINES
 */

static void SERVO1_TimerReloadISR(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
	GPIO_Set(SERVO1_GPIO, SERVO1_PIN);
 8000af0:	23a0      	movs	r3, #160	; 0xa0
 8000af2:	05db      	lsls	r3, r3, #23
 8000af4:	2102      	movs	r1, #2
 8000af6:	0018      	movs	r0, r3
 8000af8:	f7ff ff24 	bl	8000944 <GPIO_Set>
}
 8000afc:	46c0      	nop			; (mov r8, r8)
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <SERVO1_TimerPulseISR>:

static void SERVO1_TimerPulseISR(void)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	af00      	add	r7, sp, #0
	GPIO_Reset(SERVO1_GPIO, SERVO1_PIN);
 8000b06:	23a0      	movs	r3, #160	; 0xa0
 8000b08:	05db      	lsls	r3, r3, #23
 8000b0a:	2102      	movs	r1, #2
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f7ff ff25 	bl	800095c <GPIO_Reset>
}
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <SERVO2_TimerReloadISR>:

static void SERVO2_TimerReloadISR(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
	GPIO_Set(SERVO2_GPIO, SERVO2_PIN);
 8000b1c:	2380      	movs	r3, #128	; 0x80
 8000b1e:	019b      	lsls	r3, r3, #6
 8000b20:	4a03      	ldr	r2, [pc, #12]	; (8000b30 <SERVO2_TimerReloadISR+0x18>)
 8000b22:	0019      	movs	r1, r3
 8000b24:	0010      	movs	r0, r2
 8000b26:	f7ff ff0d 	bl	8000944 <GPIO_Set>
}
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	50000800 	.word	0x50000800

08000b34 <SERVO2_TimerPulseISR>:

static void SERVO2_TimerPulseISR(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
	GPIO_Reset(SERVO2_GPIO, SERVO2_PIN);
 8000b38:	2380      	movs	r3, #128	; 0x80
 8000b3a:	019b      	lsls	r3, r3, #6
 8000b3c:	4a03      	ldr	r2, [pc, #12]	; (8000b4c <SERVO2_TimerPulseISR+0x18>)
 8000b3e:	0019      	movs	r1, r3
 8000b40:	0010      	movs	r0, r2
 8000b42:	f7ff ff0b 	bl	800095c <GPIO_Reset>
}
 8000b46:	46c0      	nop			; (mov r8, r8)
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	50000800 	.word	0x50000800

08000b50 <CORE_GetTick>:
/*
 * INLINE FUNCTION DEFINITIONS
 */

static inline uint32_t CORE_GetTick(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
	return gTicks;
 8000b54:	4b02      	ldr	r3, [pc, #8]	; (8000b60 <CORE_GetTick+0x10>)
 8000b56:	681b      	ldr	r3, [r3, #0]
}
 8000b58:	0018      	movs	r0, r3
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	2000023c 	.word	0x2000023c

08000b64 <GPIO_Read>:
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	6039      	str	r1, [r7, #0]
	return ((gpio->IDR & pin) > 0);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	691b      	ldr	r3, [r3, #16]
 8000b72:	683a      	ldr	r2, [r7, #0]
 8000b74:	4013      	ands	r3, r2
 8000b76:	1e5a      	subs	r2, r3, #1
 8000b78:	4193      	sbcs	r3, r2
 8000b7a:	b2db      	uxtb	r3, r3
}
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	b002      	add	sp, #8
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <SYSTEM_Init>:
 * PUBLIC FUNCTIONS
 */


void SYSTEM_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
	status = BOOT;
 8000b8a:	4b1b      	ldr	r3, [pc, #108]	; (8000bf8 <SYSTEM_Init+0x74>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	701a      	strb	r2, [r3, #0]
	int32_t bootTimer_tick = CORE_GetTick();
 8000b90:	f7ff ffde 	bl	8000b50 <CORE_GetTick>
 8000b94:	0003      	movs	r3, r0
 8000b96:	607b      	str	r3, [r7, #4]
	GPIO_OnChange(CALIBRATE_GPIO, CALIBRATE_PIN, GPIO_IT_Both, SYSTEM_Calibrate_IRQ);
 8000b98:	4a18      	ldr	r2, [pc, #96]	; (8000bfc <SYSTEM_Init+0x78>)
 8000b9a:	23a0      	movs	r3, #160	; 0xa0
 8000b9c:	05d8      	lsls	r0, r3, #23
 8000b9e:	0013      	movs	r3, r2
 8000ba0:	2203      	movs	r2, #3
 8000ba2:	2108      	movs	r1, #8
 8000ba4:	f000 ff2c 	bl	8001a00 <GPIO_OnChange>
	ADC_Init();
 8000ba8:	f000 fbda 	bl	8001360 <ADC_Init>
	CONFIG_Init();
 8000bac:	f7ff fc22 	bl	80003f4 <CONFIG_Init>
	SERVO_Init();
 8000bb0:	f7ff fee0 	bl	8000974 <SERVO_Init>
	MOTOR_Init();
 8000bb4:	f7ff fc7a 	bl	80004ac <MOTOR_Init>
	RADIO_Init();
 8000bb8:	f7ff fdbf 	bl	800073a <RADIO_Init>
	while (CONFIG_TIMEOUT >= CORE_GetTick() - bootTimer_tick)
 8000bbc:	e00c      	b.n	8000bd8 <SYSTEM_Init+0x54>
	{
		if (configFlag)
 8000bbe:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <SYSTEM_Init+0x7c>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d008      	beq.n	8000bd8 <SYSTEM_Init+0x54>
		{
			status = CONFIG;
 8000bc6:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <SYSTEM_Init+0x74>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	701a      	strb	r2, [r3, #0]
			CONFIG_Set();
 8000bcc:	f7ff fc28 	bl	8000420 <CONFIG_Set>
			configFlag = 0;
 8000bd0:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <SYSTEM_Init+0x7c>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	701a      	strb	r2, [r3, #0]
			break;
 8000bd6:	e008      	b.n	8000bea <SYSTEM_Init+0x66>
	while (CONFIG_TIMEOUT >= CORE_GetTick() - bootTimer_tick)
 8000bd8:	f7ff ffba 	bl	8000b50 <CORE_GetTick>
 8000bdc:	0002      	movs	r2, r0
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	1ad2      	subs	r2, r2, r3
 8000be2:	23fa      	movs	r3, #250	; 0xfa
 8000be4:	00db      	lsls	r3, r3, #3
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d9e9      	bls.n	8000bbe <SYSTEM_Init+0x3a>
		}
	}
	status = RUN;
 8000bea:	4b03      	ldr	r3, [pc, #12]	; (8000bf8 <SYSTEM_Init+0x74>)
 8000bec:	2202      	movs	r2, #2
 8000bee:	701a      	strb	r2, [r3, #0]
}
 8000bf0:	46c0      	nop			; (mov r8, r8)
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	b002      	add	sp, #8
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	200001d1 	.word	0x200001d1
 8000bfc:	08000d6d 	.word	0x08000d6d
 8000c00:	200001d0 	.word	0x200001d0

08000c04 <SYSTEM_Update>:


void SYSTEM_Update(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
	int32_t SystemVolt = AIN_AinToDivider(ADC_Read(BATTERY_CHANNEL),BATTERY_DET_RLOW, BATTERY_DET_RHIGH);
 8000c0a:	4b4f      	ldr	r3, [pc, #316]	; (8000d48 <SYSTEM_Update+0x144>)
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f000 fc05 	bl	800141c <ADC_Read>
 8000c12:	4a4e      	ldr	r2, [pc, #312]	; (8000d4c <SYSTEM_Update+0x148>)
 8000c14:	4b4d      	ldr	r3, [pc, #308]	; (8000d4c <SYSTEM_Update+0x148>)
 8000c16:	0019      	movs	r1, r3
 8000c18:	f000 fc22 	bl	8001460 <AIN_AinToDivider>
 8000c1c:	0003      	movs	r3, r0
 8000c1e:	60fb      	str	r3, [r7, #12]
	int32_t SystemTemp = ADC_ReadDieTemp();
 8000c20:	f000 fc4a 	bl	80014b8 <ADC_ReadDieTemp>
 8000c24:	0003      	movs	r3, r0
 8000c26:	60bb      	str	r3, [r7, #8]
	int32_t SystemInput = 0; // Need to update... time between radio comms
 8000c28:	2300      	movs	r3, #0
 8000c2a:	607b      	str	r3, [r7, #4]

	if (StateFault.batt == 0) {
 8000c2c:	4b48      	ldr	r3, [pc, #288]	; (8000d50 <SYSTEM_Update+0x14c>)
 8000c2e:	785b      	ldrb	r3, [r3, #1]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d107      	bne.n	8000c44 <SYSTEM_Update+0x40>
		if (SystemVolt < SYSTEM_BATT_FAULT) { StateFault.batt = 1; }
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	4a47      	ldr	r2, [pc, #284]	; (8000d54 <SYSTEM_Update+0x150>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	dc0a      	bgt.n	8000c52 <SYSTEM_Update+0x4e>
 8000c3c:	4b44      	ldr	r3, [pc, #272]	; (8000d50 <SYSTEM_Update+0x14c>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	705a      	strb	r2, [r3, #1]
 8000c42:	e006      	b.n	8000c52 <SYSTEM_Update+0x4e>
	} else { //StateFault.batt == 1
		if (SystemVolt > SYSTEM_BATT_FAULT + SYSTEM_BATT_HYST) { StateFault.batt = 0; }
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	4a44      	ldr	r2, [pc, #272]	; (8000d58 <SYSTEM_Update+0x154>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	dd02      	ble.n	8000c52 <SYSTEM_Update+0x4e>
 8000c4c:	4b40      	ldr	r3, [pc, #256]	; (8000d50 <SYSTEM_Update+0x14c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	705a      	strb	r2, [r3, #1]
	}

	if (StateWarning.batt == 0) {
 8000c52:	4b42      	ldr	r3, [pc, #264]	; (8000d5c <SYSTEM_Update+0x158>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d107      	bne.n	8000c6a <SYSTEM_Update+0x66>
		if (SystemVolt < SYSTEM_BATT_WARN) { StateWarning.batt = 1; }
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	4a40      	ldr	r2, [pc, #256]	; (8000d60 <SYSTEM_Update+0x15c>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	dc0b      	bgt.n	8000c7a <SYSTEM_Update+0x76>
 8000c62:	4b3e      	ldr	r3, [pc, #248]	; (8000d5c <SYSTEM_Update+0x158>)
 8000c64:	2201      	movs	r2, #1
 8000c66:	701a      	strb	r2, [r3, #0]
 8000c68:	e007      	b.n	8000c7a <SYSTEM_Update+0x76>
	} else { //StateWarning.batt == 1
		if (SystemVolt > SYSTEM_BATT_WARN + SYSTEM_BATT_HYST) { StateWarning.batt = 0; }
 8000c6a:	68fa      	ldr	r2, [r7, #12]
 8000c6c:	23e1      	movs	r3, #225	; 0xe1
 8000c6e:	011b      	lsls	r3, r3, #4
 8000c70:	429a      	cmp	r2, r3
 8000c72:	dd02      	ble.n	8000c7a <SYSTEM_Update+0x76>
 8000c74:	4b39      	ldr	r3, [pc, #228]	; (8000d5c <SYSTEM_Update+0x158>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	701a      	strb	r2, [r3, #0]
	}

	if (StateFault.temp == 0) {
 8000c7a:	4b35      	ldr	r3, [pc, #212]	; (8000d50 <SYSTEM_Update+0x14c>)
 8000c7c:	789b      	ldrb	r3, [r3, #2]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d106      	bne.n	8000c90 <SYSTEM_Update+0x8c>
		if (SystemTemp > SYSTEM_TEMP_FAULT) { StateFault.temp = 1; }
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	2b64      	cmp	r3, #100	; 0x64
 8000c86:	dd09      	ble.n	8000c9c <SYSTEM_Update+0x98>
 8000c88:	4b31      	ldr	r3, [pc, #196]	; (8000d50 <SYSTEM_Update+0x14c>)
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	709a      	strb	r2, [r3, #2]
 8000c8e:	e005      	b.n	8000c9c <SYSTEM_Update+0x98>
	} else { //StateFault.temp == 1
		if (SystemTemp < SYSTEM_TEMP_FAULT - SYSTEM_TEMP_HYST) { StateFault.temp = 0; }
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	2b5e      	cmp	r3, #94	; 0x5e
 8000c94:	dc02      	bgt.n	8000c9c <SYSTEM_Update+0x98>
 8000c96:	4b2e      	ldr	r3, [pc, #184]	; (8000d50 <SYSTEM_Update+0x14c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	709a      	strb	r2, [r3, #2]
	}

	if (StateWarning.temp == 0) {
 8000c9c:	4b2f      	ldr	r3, [pc, #188]	; (8000d5c <SYSTEM_Update+0x158>)
 8000c9e:	785b      	ldrb	r3, [r3, #1]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d106      	bne.n	8000cb2 <SYSTEM_Update+0xae>
		if (SystemTemp > SYSTEM_TEMP_WARN) { StateWarning.temp = 1; }
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	2b50      	cmp	r3, #80	; 0x50
 8000ca8:	dd09      	ble.n	8000cbe <SYSTEM_Update+0xba>
 8000caa:	4b2c      	ldr	r3, [pc, #176]	; (8000d5c <SYSTEM_Update+0x158>)
 8000cac:	2201      	movs	r2, #1
 8000cae:	705a      	strb	r2, [r3, #1]
 8000cb0:	e005      	b.n	8000cbe <SYSTEM_Update+0xba>
	} else { //StateWarning.temp == 1
		if (SystemTemp < SYSTEM_TEMP_WARN - SYSTEM_TEMP_HYST) { StateWarning.temp = 0; }
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	2b4a      	cmp	r3, #74	; 0x4a
 8000cb6:	dc02      	bgt.n	8000cbe <SYSTEM_Update+0xba>
 8000cb8:	4b28      	ldr	r3, [pc, #160]	; (8000d5c <SYSTEM_Update+0x158>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	705a      	strb	r2, [r3, #1]
	}

	if (StateFault.input == 0) {
 8000cbe:	4b24      	ldr	r3, [pc, #144]	; (8000d50 <SYSTEM_Update+0x14c>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d106      	bne.n	8000cd4 <SYSTEM_Update+0xd0>
		if (SystemInput > SYSTEM_INPUT_TIMEOUT) { StateFault.input = 1; }
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2b32      	cmp	r3, #50	; 0x32
 8000cca:	dd09      	ble.n	8000ce0 <SYSTEM_Update+0xdc>
 8000ccc:	4b20      	ldr	r3, [pc, #128]	; (8000d50 <SYSTEM_Update+0x14c>)
 8000cce:	2201      	movs	r2, #1
 8000cd0:	701a      	strb	r2, [r3, #0]
 8000cd2:	e005      	b.n	8000ce0 <SYSTEM_Update+0xdc>
	} else { //StateFault.input == 1
		if (SystemInput < SYSTEM_INPUT_TIMEOUT) { StateFault.input = 0; }
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2b31      	cmp	r3, #49	; 0x31
 8000cd8:	dc02      	bgt.n	8000ce0 <SYSTEM_Update+0xdc>
 8000cda:	4b1d      	ldr	r3, [pc, #116]	; (8000d50 <SYSTEM_Update+0x14c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	701a      	strb	r2, [r3, #0]
	}

	if (StateFault.batt || StateFault.temp || StateFault.input) {
 8000ce0:	4b1b      	ldr	r3, [pc, #108]	; (8000d50 <SYSTEM_Update+0x14c>)
 8000ce2:	785b      	ldrb	r3, [r3, #1]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d107      	bne.n	8000cf8 <SYSTEM_Update+0xf4>
 8000ce8:	4b19      	ldr	r3, [pc, #100]	; (8000d50 <SYSTEM_Update+0x14c>)
 8000cea:	789b      	ldrb	r3, [r3, #2]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d103      	bne.n	8000cf8 <SYSTEM_Update+0xf4>
 8000cf0:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <SYSTEM_Update+0x14c>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d003      	beq.n	8000d00 <SYSTEM_Update+0xfc>
		status = FAULT;
 8000cf8:	4b1a      	ldr	r3, [pc, #104]	; (8000d64 <SYSTEM_Update+0x160>)
 8000cfa:	2204      	movs	r2, #4
 8000cfc:	701a      	strb	r2, [r3, #0]
 8000cfe:	e01f      	b.n	8000d40 <SYSTEM_Update+0x13c>
	} else if (StateWarning.batt || StateWarning.temp) {
 8000d00:	4b16      	ldr	r3, [pc, #88]	; (8000d5c <SYSTEM_Update+0x158>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d103      	bne.n	8000d10 <SYSTEM_Update+0x10c>
 8000d08:	4b14      	ldr	r3, [pc, #80]	; (8000d5c <SYSTEM_Update+0x158>)
 8000d0a:	785b      	ldrb	r3, [r3, #1]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d003      	beq.n	8000d18 <SYSTEM_Update+0x114>
		status = WARNING;
 8000d10:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <SYSTEM_Update+0x160>)
 8000d12:	2203      	movs	r2, #3
 8000d14:	701a      	strb	r2, [r3, #0]
 8000d16:	e013      	b.n	8000d40 <SYSTEM_Update+0x13c>
	} else if (configFlag) {
 8000d18:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <SYSTEM_Update+0x164>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d00b      	beq.n	8000d38 <SYSTEM_Update+0x134>
		status = CONFIG;
 8000d20:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <SYSTEM_Update+0x160>)
 8000d22:	2201      	movs	r2, #1
 8000d24:	701a      	strb	r2, [r3, #0]
		CONFIG_Reset();
 8000d26:	f7ff fb95 	bl	8000454 <CONFIG_Reset>
		configFlag = 0;
 8000d2a:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <SYSTEM_Update+0x164>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	701a      	strb	r2, [r3, #0]
		status = RUN;
 8000d30:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <SYSTEM_Update+0x160>)
 8000d32:	2202      	movs	r2, #2
 8000d34:	701a      	strb	r2, [r3, #0]
	} else {
		status = RUN;
	}
}
 8000d36:	e003      	b.n	8000d40 <SYSTEM_Update+0x13c>
		status = RUN;
 8000d38:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <SYSTEM_Update+0x160>)
 8000d3a:	2202      	movs	r2, #2
 8000d3c:	701a      	strb	r2, [r3, #0]
}
 8000d3e:	e7ff      	b.n	8000d40 <SYSTEM_Update+0x13c>
 8000d40:	46c0      	nop			; (mov r8, r8)
 8000d42:	46bd      	mov	sp, r7
 8000d44:	b004      	add	sp, #16
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	10000010 	.word	0x10000010
 8000d4c:	00002710 	.word	0x00002710
 8000d50:	200001d8 	.word	0x200001d8
 8000d54:	00000ce3 	.word	0x00000ce3
 8000d58:	00000d48 	.word	0x00000d48
 8000d5c:	200001d4 	.word	0x200001d4
 8000d60:	00000dab 	.word	0x00000dab
 8000d64:	200001d1 	.word	0x200001d1
 8000d68:	200001d0 	.word	0x200001d0

08000d6c <SYSTEM_Calibrate_IRQ>:
 * INTERRUPT ROUTINES
 */


void SYSTEM_Calibrate_IRQ (void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
	static uint32_t configTimer_tick = 0;
	uint32_t now = CORE_GetTick();
 8000d72:	f7ff feed 	bl	8000b50 <CORE_GetTick>
 8000d76:	0003      	movs	r3, r0
 8000d78:	607b      	str	r3, [r7, #4]
	if (GPIO_Read(CALIBRATE_GPIO, CALIBRATE_PIN))
 8000d7a:	23a0      	movs	r3, #160	; 0xa0
 8000d7c:	05db      	lsls	r3, r3, #23
 8000d7e:	2108      	movs	r1, #8
 8000d80:	0018      	movs	r0, r3
 8000d82:	f7ff feef 	bl	8000b64 <GPIO_Read>
 8000d86:	1e03      	subs	r3, r0, #0
 8000d88:	d003      	beq.n	8000d92 <SYSTEM_Calibrate_IRQ+0x26>
	{
		configTimer_tick = now;
 8000d8a:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <SYSTEM_Calibrate_IRQ+0x74>)
 8000d8c:	687a      	ldr	r2, [r7, #4]
 8000d8e:	601a      	str	r2, [r3, #0]
		{
			configFlag = 0;
		}

	}
}
 8000d90:	e022      	b.n	8000dd8 <SYSTEM_Calibrate_IRQ+0x6c>
		configTimer = now - configTimer_tick;
 8000d92:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <SYSTEM_Calibrate_IRQ+0x74>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	1ad2      	subs	r2, r2, r3
 8000d9a:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <SYSTEM_Calibrate_IRQ+0x78>)
 8000d9c:	601a      	str	r2, [r3, #0]
		if (status == BOOT && configTimer > CONFIG_SET)
 8000d9e:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <SYSTEM_Calibrate_IRQ+0x7c>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d107      	bne.n	8000db6 <SYSTEM_Calibrate_IRQ+0x4a>
 8000da6:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <SYSTEM_Calibrate_IRQ+0x78>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	2b64      	cmp	r3, #100	; 0x64
 8000dac:	d903      	bls.n	8000db6 <SYSTEM_Calibrate_IRQ+0x4a>
			configFlag = 1;
 8000dae:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <SYSTEM_Calibrate_IRQ+0x80>)
 8000db0:	2201      	movs	r2, #1
 8000db2:	701a      	strb	r2, [r3, #0]
 8000db4:	e010      	b.n	8000dd8 <SYSTEM_Calibrate_IRQ+0x6c>
		else if (status == RUN && configTimer > CONFIG_RESET)
 8000db6:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <SYSTEM_Calibrate_IRQ+0x7c>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	2b02      	cmp	r3, #2
 8000dbc:	d108      	bne.n	8000dd0 <SYSTEM_Calibrate_IRQ+0x64>
 8000dbe:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <SYSTEM_Calibrate_IRQ+0x78>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a0b      	ldr	r2, [pc, #44]	; (8000df0 <SYSTEM_Calibrate_IRQ+0x84>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d903      	bls.n	8000dd0 <SYSTEM_Calibrate_IRQ+0x64>
			configFlag = 1;
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <SYSTEM_Calibrate_IRQ+0x80>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	701a      	strb	r2, [r3, #0]
 8000dce:	e003      	b.n	8000dd8 <SYSTEM_Calibrate_IRQ+0x6c>
			configFlag = 0;
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <SYSTEM_Calibrate_IRQ+0x80>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	701a      	strb	r2, [r3, #0]
}
 8000dd6:	e7ff      	b.n	8000dd8 <SYSTEM_Calibrate_IRQ+0x6c>
 8000dd8:	46c0      	nop			; (mov r8, r8)
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	b002      	add	sp, #8
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	200001dc 	.word	0x200001dc
 8000de4:	200001cc 	.word	0x200001cc
 8000de8:	200001d1 	.word	0x200001d1
 8000dec:	200001d0 	.word	0x200001d0
 8000df0:	00002710 	.word	0x00002710

08000df4 <main>:
// - Fix motor jerk on boot
// - Implement Overtemp Warning / Fauls
// - Implement Undervolt Warning/ Fault

int main (void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	CORE_Init();
 8000df8:	f000 fc62 	bl	80016c0 <CORE_Init>
	SYSTEM_Init();
 8000dfc:	f7ff fec2 	bl	8000b84 <SYSTEM_Init>

	while (1)
	{
		SYSTEM_Update();
 8000e00:	f7ff ff00 	bl	8000c04 <SYSTEM_Update>
		MOTOR_M1_Update(radioS3);
 8000e04:	4b0d      	ldr	r3, [pc, #52]	; (8000e3c <main+0x48>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	0018      	movs	r0, r3
 8000e0a:	f7ff fbeb 	bl	80005e4 <MOTOR_M1_Update>
		MOTOR_M2_Update(radioS2);
 8000e0e:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <main+0x4c>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	0018      	movs	r0, r3
 8000e14:	f7ff fc2e 	bl	8000674 <MOTOR_M2_Update>
		SERVO_S1_Update(radioS1);
 8000e18:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <main+0x50>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	b21b      	sxth	r3, r3
 8000e1e:	0018      	movs	r0, r3
 8000e20:	f7ff fe08 	bl	8000a34 <SERVO_S1_Update>
		SERVO_S2_Update(radioS4);
 8000e24:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <main+0x54>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	b21b      	sxth	r3, r3
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	f7ff fe30 	bl	8000a90 <SERVO_S2_Update>
		LED_Update();
 8000e30:	f7ff fb1f 	bl	8000472 <LED_Update>
		CORE_Idle();
 8000e34:	f000 fc7a 	bl	800172c <CORE_Idle>
		SYSTEM_Update();
 8000e38:	e7e2      	b.n	8000e00 <main+0xc>
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	20000008 	.word	0x20000008
 8000e40:	20000004 	.word	0x20000004
 8000e44:	20000000 	.word	0x20000000
 8000e48:	2000000c 	.word	0x2000000c

08000e4c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e50:	46c0      	nop			; (mov r8, r8)
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
	...

08000e58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000e58:	480d      	ldr	r0, [pc, #52]	; (8000e90 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000e5a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e5c:	480d      	ldr	r0, [pc, #52]	; (8000e94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e5e:	490e      	ldr	r1, [pc, #56]	; (8000e98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e60:	4a0e      	ldr	r2, [pc, #56]	; (8000e9c <LoopForever+0xe>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e64:	e002      	b.n	8000e6c <LoopCopyDataInit>

08000e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6a:	3304      	adds	r3, #4

08000e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e70:	d3f9      	bcc.n	8000e66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e72:	4a0b      	ldr	r2, [pc, #44]	; (8000ea0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e74:	4c0b      	ldr	r4, [pc, #44]	; (8000ea4 <LoopForever+0x16>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e78:	e001      	b.n	8000e7e <LoopFillZerobss>

08000e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e7c:	3204      	adds	r2, #4

08000e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e80:	d3fb      	bcc.n	8000e7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000e82:	f7ff ffe3 	bl	8000e4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e86:	f001 fa63 	bl	8002350 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e8a:	f7ff ffb3 	bl	8000df4 <main>

08000e8e <LoopForever>:

LoopForever:
    b LoopForever
 8000e8e:	e7fe      	b.n	8000e8e <LoopForever>
   ldr   r0, =_estack
 8000e90:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000e94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e98:	20000198 	.word	0x20000198
  ldr r2, =_sidata
 8000e9c:	080023cc 	.word	0x080023cc
  ldr r2, =_sbss
 8000ea0:	20000198 	.word	0x20000198
  ldr r4, =_ebss
 8000ea4:	20000280 	.word	0x20000280

08000ea8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ea8:	e7fe      	b.n	8000ea8 <ADC1_COMP_IRQHandler>
	...

08000eac <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d101      	bne.n	8000ebe <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e159      	b.n	8001172 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d10a      	bne.n	8000edc <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2250      	movs	r2, #80	; 0x50
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	f000 f95c 	bl	8001194 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ee0:	2210      	movs	r2, #16
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	2b10      	cmp	r3, #16
 8000ee6:	d005      	beq.n	8000ef4 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	2204      	movs	r2, #4
 8000ef0:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000ef2:	d00b      	beq.n	8000f0c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ef8:	2210      	movs	r2, #16
 8000efa:	431a      	orrs	r2, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2250      	movs	r2, #80	; 0x50
 8000f04:	2100      	movs	r1, #0
 8000f06:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e132      	b.n	8001172 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f10:	4a9a      	ldr	r2, [pc, #616]	; (800117c <HAL_ADC_Init+0x2d0>)
 8000f12:	4013      	ands	r3, r2
 8000f14:	2202      	movs	r2, #2
 8000f16:	431a      	orrs	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	2203      	movs	r2, #3
 8000f24:	4013      	ands	r3, r2
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d108      	bne.n	8000f3c <HAL_ADC_Init+0x90>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2201      	movs	r2, #1
 8000f32:	4013      	ands	r3, r2
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d101      	bne.n	8000f3c <HAL_ADC_Init+0x90>
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e000      	b.n	8000f3e <HAL_ADC_Init+0x92>
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d149      	bne.n	8000fd6 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	685a      	ldr	r2, [r3, #4]
 8000f46:	23c0      	movs	r3, #192	; 0xc0
 8000f48:	061b      	lsls	r3, r3, #24
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d00b      	beq.n	8000f66 <HAL_ADC_Init+0xba>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	685a      	ldr	r2, [r3, #4]
 8000f52:	2380      	movs	r3, #128	; 0x80
 8000f54:	05db      	lsls	r3, r3, #23
 8000f56:	429a      	cmp	r2, r3
 8000f58:	d005      	beq.n	8000f66 <HAL_ADC_Init+0xba>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	685a      	ldr	r2, [r3, #4]
 8000f5e:	2380      	movs	r3, #128	; 0x80
 8000f60:	061b      	lsls	r3, r3, #24
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d111      	bne.n	8000f8a <HAL_ADC_Init+0xde>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	691a      	ldr	r2, [r3, #16]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	0092      	lsls	r2, r2, #2
 8000f72:	0892      	lsrs	r2, r2, #2
 8000f74:	611a      	str	r2, [r3, #16]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	6919      	ldr	r1, [r3, #16]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	685a      	ldr	r2, [r3, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	430a      	orrs	r2, r1
 8000f86:	611a      	str	r2, [r3, #16]
 8000f88:	e014      	b.n	8000fb4 <HAL_ADC_Init+0x108>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	691a      	ldr	r2, [r3, #16]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	0092      	lsls	r2, r2, #2
 8000f96:	0892      	lsrs	r2, r2, #2
 8000f98:	611a      	str	r2, [r3, #16]
 8000f9a:	4b79      	ldr	r3, [pc, #484]	; (8001180 <HAL_ADC_Init+0x2d4>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	4b78      	ldr	r3, [pc, #480]	; (8001180 <HAL_ADC_Init+0x2d4>)
 8000fa0:	4978      	ldr	r1, [pc, #480]	; (8001184 <HAL_ADC_Init+0x2d8>)
 8000fa2:	400a      	ands	r2, r1
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	4b76      	ldr	r3, [pc, #472]	; (8001180 <HAL_ADC_Init+0x2d4>)
 8000fa8:	6819      	ldr	r1, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	685a      	ldr	r2, [r3, #4]
 8000fae:	4b74      	ldr	r3, [pc, #464]	; (8001180 <HAL_ADC_Init+0x2d4>)
 8000fb0:	430a      	orrs	r2, r1
 8000fb2:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	68da      	ldr	r2, [r3, #12]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2118      	movs	r1, #24
 8000fc0:	438a      	bics	r2, r1
 8000fc2:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	68d9      	ldr	r1, [r3, #12]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	689a      	ldr	r2, [r3, #8]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	430a      	orrs	r2, r1
 8000fd4:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000fd6:	4b6a      	ldr	r3, [pc, #424]	; (8001180 <HAL_ADC_Init+0x2d4>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	4b69      	ldr	r3, [pc, #420]	; (8001180 <HAL_ADC_Init+0x2d4>)
 8000fdc:	496a      	ldr	r1, [pc, #424]	; (8001188 <HAL_ADC_Init+0x2dc>)
 8000fde:	400a      	ands	r2, r1
 8000fe0:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8000fe2:	4b67      	ldr	r3, [pc, #412]	; (8001180 <HAL_ADC_Init+0x2d4>)
 8000fe4:	6819      	ldr	r1, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fea:	065a      	lsls	r2, r3, #25
 8000fec:	4b64      	ldr	r3, [pc, #400]	; (8001180 <HAL_ADC_Init+0x2d4>)
 8000fee:	430a      	orrs	r2, r1
 8000ff0:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	689a      	ldr	r2, [r3, #8]
 8000ff8:	2380      	movs	r3, #128	; 0x80
 8000ffa:	055b      	lsls	r3, r3, #21
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	d108      	bne.n	8001012 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	689a      	ldr	r2, [r3, #8]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2180      	movs	r1, #128	; 0x80
 800100c:	0549      	lsls	r1, r1, #21
 800100e:	430a      	orrs	r2, r1
 8001010:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	68da      	ldr	r2, [r3, #12]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	495b      	ldr	r1, [pc, #364]	; (800118c <HAL_ADC_Init+0x2e0>)
 800101e:	400a      	ands	r2, r1
 8001020:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	68d9      	ldr	r1, [r3, #12]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	691b      	ldr	r3, [r3, #16]
 8001030:	2b02      	cmp	r3, #2
 8001032:	d101      	bne.n	8001038 <HAL_ADC_Init+0x18c>
 8001034:	2304      	movs	r3, #4
 8001036:	e000      	b.n	800103a <HAL_ADC_Init+0x18e>
 8001038:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800103a:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2020      	movs	r0, #32
 8001040:	5c1b      	ldrb	r3, [r3, r0]
 8001042:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001044:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	202c      	movs	r0, #44	; 0x2c
 800104a:	5c1b      	ldrb	r3, [r3, r0]
 800104c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800104e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001054:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	699b      	ldr	r3, [r3, #24]
 800105a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800105c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	69db      	ldr	r3, [r3, #28]
 8001062:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001064:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	430a      	orrs	r2, r1
 800106c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001072:	23c2      	movs	r3, #194	; 0xc2
 8001074:	33ff      	adds	r3, #255	; 0xff
 8001076:	429a      	cmp	r2, r3
 8001078:	d00b      	beq.n	8001092 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	68d9      	ldr	r1, [r3, #12]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001088:	431a      	orrs	r2, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	430a      	orrs	r2, r1
 8001090:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2221      	movs	r2, #33	; 0x21
 8001096:	5c9b      	ldrb	r3, [r3, r2]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d11a      	bne.n	80010d2 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2220      	movs	r2, #32
 80010a0:	5c9b      	ldrb	r3, [r3, r2]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d109      	bne.n	80010ba <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	68da      	ldr	r2, [r3, #12]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2180      	movs	r1, #128	; 0x80
 80010b2:	0249      	lsls	r1, r1, #9
 80010b4:	430a      	orrs	r2, r1
 80010b6:	60da      	str	r2, [r3, #12]
 80010b8:	e00b      	b.n	80010d2 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010be:	2220      	movs	r2, #32
 80010c0:	431a      	orrs	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ca:	2201      	movs	r2, #1
 80010cc:	431a      	orrs	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d11f      	bne.n	800111a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	691a      	ldr	r2, [r3, #16]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	492a      	ldr	r1, [pc, #168]	; (8001190 <HAL_ADC_Init+0x2e4>)
 80010e6:	400a      	ands	r2, r1
 80010e8:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	6919      	ldr	r1, [r3, #16]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80010f8:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 80010fe:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	430a      	orrs	r2, r1
 8001106:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	691a      	ldr	r2, [r3, #16]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2101      	movs	r1, #1
 8001114:	430a      	orrs	r2, r1
 8001116:	611a      	str	r2, [r3, #16]
 8001118:	e00e      	b.n	8001138 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	691b      	ldr	r3, [r3, #16]
 8001120:	2201      	movs	r2, #1
 8001122:	4013      	ands	r3, r2
 8001124:	2b01      	cmp	r3, #1
 8001126:	d107      	bne.n	8001138 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	691a      	ldr	r2, [r3, #16]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2101      	movs	r1, #1
 8001134:	438a      	bics	r2, r1
 8001136:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	695a      	ldr	r2, [r3, #20]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2107      	movs	r1, #7
 8001144:	438a      	bics	r2, r1
 8001146:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	6959      	ldr	r1, [r3, #20]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	430a      	orrs	r2, r1
 8001158:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2200      	movs	r2, #0
 800115e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001164:	2203      	movs	r2, #3
 8001166:	4393      	bics	r3, r2
 8001168:	2201      	movs	r2, #1
 800116a:	431a      	orrs	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001170:	2300      	movs	r3, #0
}
 8001172:	0018      	movs	r0, r3
 8001174:	46bd      	mov	sp, r7
 8001176:	b002      	add	sp, #8
 8001178:	bd80      	pop	{r7, pc}
 800117a:	46c0      	nop			; (mov r8, r8)
 800117c:	fffffefd 	.word	0xfffffefd
 8001180:	40012708 	.word	0x40012708
 8001184:	ffc3ffff 	.word	0xffc3ffff
 8001188:	fdffffff 	.word	0xfdffffff
 800118c:	fffe0219 	.word	0xfffe0219
 8001190:	fffffc03 	.word	0xfffffc03

08001194 <HAL_ADC_MspInit>:
  * @brief  Initialize the ADC MSP.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspInit must be implemented in the user file.
   */ 
}
 800119c:	46c0      	nop			; (mov r8, r8)
 800119e:	46bd      	mov	sp, r7
 80011a0:	b002      	add	sp, #8
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	0002      	movs	r2, r0
 80011ac:	1dfb      	adds	r3, r7, #7
 80011ae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011b0:	1dfb      	adds	r3, r7, #7
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2b7f      	cmp	r3, #127	; 0x7f
 80011b6:	d809      	bhi.n	80011cc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011b8:	1dfb      	adds	r3, r7, #7
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	001a      	movs	r2, r3
 80011be:	231f      	movs	r3, #31
 80011c0:	401a      	ands	r2, r3
 80011c2:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <__NVIC_EnableIRQ+0x30>)
 80011c4:	2101      	movs	r1, #1
 80011c6:	4091      	lsls	r1, r2
 80011c8:	000a      	movs	r2, r1
 80011ca:	601a      	str	r2, [r3, #0]
  }
}
 80011cc:	46c0      	nop			; (mov r8, r8)
 80011ce:	46bd      	mov	sp, r7
 80011d0:	b002      	add	sp, #8
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	e000e100 	.word	0xe000e100

080011d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d8:	b590      	push	{r4, r7, lr}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	0002      	movs	r2, r0
 80011e0:	6039      	str	r1, [r7, #0]
 80011e2:	1dfb      	adds	r3, r7, #7
 80011e4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011e6:	1dfb      	adds	r3, r7, #7
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b7f      	cmp	r3, #127	; 0x7f
 80011ec:	d828      	bhi.n	8001240 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011ee:	4a2f      	ldr	r2, [pc, #188]	; (80012ac <__NVIC_SetPriority+0xd4>)
 80011f0:	1dfb      	adds	r3, r7, #7
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	b25b      	sxtb	r3, r3
 80011f6:	089b      	lsrs	r3, r3, #2
 80011f8:	33c0      	adds	r3, #192	; 0xc0
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	589b      	ldr	r3, [r3, r2]
 80011fe:	1dfa      	adds	r2, r7, #7
 8001200:	7812      	ldrb	r2, [r2, #0]
 8001202:	0011      	movs	r1, r2
 8001204:	2203      	movs	r2, #3
 8001206:	400a      	ands	r2, r1
 8001208:	00d2      	lsls	r2, r2, #3
 800120a:	21ff      	movs	r1, #255	; 0xff
 800120c:	4091      	lsls	r1, r2
 800120e:	000a      	movs	r2, r1
 8001210:	43d2      	mvns	r2, r2
 8001212:	401a      	ands	r2, r3
 8001214:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	019b      	lsls	r3, r3, #6
 800121a:	22ff      	movs	r2, #255	; 0xff
 800121c:	401a      	ands	r2, r3
 800121e:	1dfb      	adds	r3, r7, #7
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	0018      	movs	r0, r3
 8001224:	2303      	movs	r3, #3
 8001226:	4003      	ands	r3, r0
 8001228:	00db      	lsls	r3, r3, #3
 800122a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800122c:	481f      	ldr	r0, [pc, #124]	; (80012ac <__NVIC_SetPriority+0xd4>)
 800122e:	1dfb      	adds	r3, r7, #7
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	b25b      	sxtb	r3, r3
 8001234:	089b      	lsrs	r3, r3, #2
 8001236:	430a      	orrs	r2, r1
 8001238:	33c0      	adds	r3, #192	; 0xc0
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800123e:	e031      	b.n	80012a4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001240:	4a1b      	ldr	r2, [pc, #108]	; (80012b0 <__NVIC_SetPriority+0xd8>)
 8001242:	1dfb      	adds	r3, r7, #7
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	0019      	movs	r1, r3
 8001248:	230f      	movs	r3, #15
 800124a:	400b      	ands	r3, r1
 800124c:	3b08      	subs	r3, #8
 800124e:	089b      	lsrs	r3, r3, #2
 8001250:	3306      	adds	r3, #6
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	18d3      	adds	r3, r2, r3
 8001256:	3304      	adds	r3, #4
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	1dfa      	adds	r2, r7, #7
 800125c:	7812      	ldrb	r2, [r2, #0]
 800125e:	0011      	movs	r1, r2
 8001260:	2203      	movs	r2, #3
 8001262:	400a      	ands	r2, r1
 8001264:	00d2      	lsls	r2, r2, #3
 8001266:	21ff      	movs	r1, #255	; 0xff
 8001268:	4091      	lsls	r1, r2
 800126a:	000a      	movs	r2, r1
 800126c:	43d2      	mvns	r2, r2
 800126e:	401a      	ands	r2, r3
 8001270:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	019b      	lsls	r3, r3, #6
 8001276:	22ff      	movs	r2, #255	; 0xff
 8001278:	401a      	ands	r2, r3
 800127a:	1dfb      	adds	r3, r7, #7
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	0018      	movs	r0, r3
 8001280:	2303      	movs	r3, #3
 8001282:	4003      	ands	r3, r0
 8001284:	00db      	lsls	r3, r3, #3
 8001286:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001288:	4809      	ldr	r0, [pc, #36]	; (80012b0 <__NVIC_SetPriority+0xd8>)
 800128a:	1dfb      	adds	r3, r7, #7
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	001c      	movs	r4, r3
 8001290:	230f      	movs	r3, #15
 8001292:	4023      	ands	r3, r4
 8001294:	3b08      	subs	r3, #8
 8001296:	089b      	lsrs	r3, r3, #2
 8001298:	430a      	orrs	r2, r1
 800129a:	3306      	adds	r3, #6
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	18c3      	adds	r3, r0, r3
 80012a0:	3304      	adds	r3, #4
 80012a2:	601a      	str	r2, [r3, #0]
}
 80012a4:	46c0      	nop			; (mov r8, r8)
 80012a6:	46bd      	mov	sp, r7
 80012a8:	b003      	add	sp, #12
 80012aa:	bd90      	pop	{r4, r7, pc}
 80012ac:	e000e100 	.word	0xe000e100
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3b01      	subs	r3, #1
 80012c0:	4a0c      	ldr	r2, [pc, #48]	; (80012f4 <SysTick_Config+0x40>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d901      	bls.n	80012ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012c6:	2301      	movs	r3, #1
 80012c8:	e010      	b.n	80012ec <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ca:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <SysTick_Config+0x44>)
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	3a01      	subs	r2, #1
 80012d0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012d2:	2301      	movs	r3, #1
 80012d4:	425b      	negs	r3, r3
 80012d6:	2103      	movs	r1, #3
 80012d8:	0018      	movs	r0, r3
 80012da:	f7ff ff7d 	bl	80011d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012de:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <SysTick_Config+0x44>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012e4:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <SysTick_Config+0x44>)
 80012e6:	2207      	movs	r2, #7
 80012e8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012ea:	2300      	movs	r3, #0
}
 80012ec:	0018      	movs	r0, r3
 80012ee:	46bd      	mov	sp, r7
 80012f0:	b002      	add	sp, #8
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	00ffffff 	.word	0x00ffffff
 80012f8:	e000e010 	.word	0xe000e010

080012fc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	60b9      	str	r1, [r7, #8]
 8001304:	607a      	str	r2, [r7, #4]
 8001306:	210f      	movs	r1, #15
 8001308:	187b      	adds	r3, r7, r1
 800130a:	1c02      	adds	r2, r0, #0
 800130c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800130e:	68ba      	ldr	r2, [r7, #8]
 8001310:	187b      	adds	r3, r7, r1
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	b25b      	sxtb	r3, r3
 8001316:	0011      	movs	r1, r2
 8001318:	0018      	movs	r0, r3
 800131a:	f7ff ff5d 	bl	80011d8 <__NVIC_SetPriority>
}
 800131e:	46c0      	nop			; (mov r8, r8)
 8001320:	46bd      	mov	sp, r7
 8001322:	b004      	add	sp, #16
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	0002      	movs	r2, r0
 800132e:	1dfb      	adds	r3, r7, #7
 8001330:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001332:	1dfb      	adds	r3, r7, #7
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	b25b      	sxtb	r3, r3
 8001338:	0018      	movs	r0, r3
 800133a:	f7ff ff33 	bl	80011a4 <__NVIC_EnableIRQ>
}
 800133e:	46c0      	nop			; (mov r8, r8)
 8001340:	46bd      	mov	sp, r7
 8001342:	b002      	add	sp, #8
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	0018      	movs	r0, r3
 8001352:	f7ff ffaf 	bl	80012b4 <SysTick_Config>
 8001356:	0003      	movs	r3, r0
}
 8001358:	0018      	movs	r0, r3
 800135a:	46bd      	mov	sp, r7
 800135c:	b002      	add	sp, #8
 800135e:	bd80      	pop	{r7, pc}

08001360 <ADC_Init>:
 * PUBLIC FUNCTIONS
 */


void ADC_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
	CLK_EnableADCCLK();
 8001364:	f000 f990 	bl	8001688 <CLK_EnableADCCLK>
	__HAL_RCC_ADC1_CLK_ENABLE();
 8001368:	4b29      	ldr	r3, [pc, #164]	; (8001410 <ADC_Init+0xb0>)
 800136a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800136c:	4b28      	ldr	r3, [pc, #160]	; (8001410 <ADC_Init+0xb0>)
 800136e:	2180      	movs	r1, #128	; 0x80
 8001370:	0089      	lsls	r1, r1, #2
 8001372:	430a      	orrs	r2, r1
 8001374:	635a      	str	r2, [r3, #52]	; 0x34

	gAdc.Instance = ADC1;
 8001376:	4b27      	ldr	r3, [pc, #156]	; (8001414 <ADC_Init+0xb4>)
 8001378:	4a27      	ldr	r2, [pc, #156]	; (8001418 <ADC_Init+0xb8>)
 800137a:	601a      	str	r2, [r3, #0]
	gAdc.Init.ClockPrescaler = ADC_CLOCK_PRESCALAR;
 800137c:	4b25      	ldr	r3, [pc, #148]	; (8001414 <ADC_Init+0xb4>)
 800137e:	2280      	movs	r2, #128	; 0x80
 8001380:	0312      	lsls	r2, r2, #12
 8001382:	605a      	str	r2, [r3, #4]
	gAdc.Init.Resolution = ADC_RESOLUTION_12B;
 8001384:	4b23      	ldr	r3, [pc, #140]	; (8001414 <ADC_Init+0xb4>)
 8001386:	2200      	movs	r2, #0
 8001388:	609a      	str	r2, [r3, #8]
	gAdc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800138a:	4b22      	ldr	r3, [pc, #136]	; (8001414 <ADC_Init+0xb4>)
 800138c:	2200      	movs	r2, #0
 800138e:	60da      	str	r2, [r3, #12]
	gAdc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001390:	4b20      	ldr	r3, [pc, #128]	; (8001414 <ADC_Init+0xb4>)
 8001392:	2201      	movs	r2, #1
 8001394:	611a      	str	r2, [r3, #16]
	gAdc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001396:	4b1f      	ldr	r3, [pc, #124]	; (8001414 <ADC_Init+0xb4>)
 8001398:	2204      	movs	r2, #4
 800139a:	615a      	str	r2, [r3, #20]
	gAdc.Init.LowPowerAutoWait = DISABLE;
 800139c:	4b1d      	ldr	r3, [pc, #116]	; (8001414 <ADC_Init+0xb4>)
 800139e:	2200      	movs	r2, #0
 80013a0:	619a      	str	r2, [r3, #24]
	gAdc.Init.LowPowerAutoPowerOff = DISABLE;
 80013a2:	4b1c      	ldr	r3, [pc, #112]	; (8001414 <ADC_Init+0xb4>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	61da      	str	r2, [r3, #28]
	gAdc.Init.ContinuousConvMode = DISABLE;
 80013a8:	4b1a      	ldr	r3, [pc, #104]	; (8001414 <ADC_Init+0xb4>)
 80013aa:	2220      	movs	r2, #32
 80013ac:	2100      	movs	r1, #0
 80013ae:	5499      	strb	r1, [r3, r2]
	gAdc.Init.DiscontinuousConvMode = DISABLE;
 80013b0:	4b18      	ldr	r3, [pc, #96]	; (8001414 <ADC_Init+0xb4>)
 80013b2:	2221      	movs	r2, #33	; 0x21
 80013b4:	2100      	movs	r1, #0
 80013b6:	5499      	strb	r1, [r3, r2]
	gAdc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013b8:	4b16      	ldr	r3, [pc, #88]	; (8001414 <ADC_Init+0xb4>)
 80013ba:	22c2      	movs	r2, #194	; 0xc2
 80013bc:	32ff      	adds	r2, #255	; 0xff
 80013be:	625a      	str	r2, [r3, #36]	; 0x24
	gAdc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013c0:	4b14      	ldr	r3, [pc, #80]	; (8001414 <ADC_Init+0xb4>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	629a      	str	r2, [r3, #40]	; 0x28
	gAdc.Init.DMAContinuousRequests = DISABLE;
 80013c6:	4b13      	ldr	r3, [pc, #76]	; (8001414 <ADC_Init+0xb4>)
 80013c8:	222c      	movs	r2, #44	; 0x2c
 80013ca:	2100      	movs	r1, #0
 80013cc:	5499      	strb	r1, [r3, r2]
	gAdc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80013ce:	4b11      	ldr	r3, [pc, #68]	; (8001414 <ADC_Init+0xb4>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32L0)
	gAdc.Init.LowPowerFrequencyMode = DISABLE;
 80013d4:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <ADC_Init+0xb4>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	635a      	str	r2, [r3, #52]	; 0x34
	gAdc.Init.OversamplingMode = DISABLE;
 80013da:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <ADC_Init+0xb4>)
 80013dc:	2200      	movs	r2, #0
 80013de:	63da      	str	r2, [r3, #60]	; 0x3c
	gAdc.Init.SamplingTime = ADC_SAMPLETIME;
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <ADC_Init+0xb4>)
 80013e2:	2206      	movs	r2, #6
 80013e4:	639a      	str	r2, [r3, #56]	; 0x38
#elif defined(STM32F0)
	gAdc.Init.SamplingTimeCommon = ADC_SAMPLETIME;
#endif
	HAL_ADC_Init(&gAdc);
 80013e6:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <ADC_Init+0xb4>)
 80013e8:	0018      	movs	r0, r3
 80013ea:	f7ff fd5f 	bl	8000eac <HAL_ADC_Init>

	ADC_Calibrate();
 80013ee:	f000 f8b9 	bl	8001564 <ADC_Calibrate>

	__HAL_ADC_ENABLE(&gAdc);
 80013f2:	4b08      	ldr	r3, [pc, #32]	; (8001414 <ADC_Init+0xb4>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	689a      	ldr	r2, [r3, #8]
 80013f8:	4b06      	ldr	r3, [pc, #24]	; (8001414 <ADC_Init+0xb4>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2101      	movs	r1, #1
 80013fe:	430a      	orrs	r2, r1
 8001400:	609a      	str	r2, [r3, #8]
	ADC_WaitForFlag(ADC_FLAG_RDY);
 8001402:	2001      	movs	r0, #1
 8001404:	f000 f89c 	bl	8001540 <ADC_WaitForFlag>
}
 8001408:	46c0      	nop			; (mov r8, r8)
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	40021000 	.word	0x40021000
 8001414:	200001e0 	.word	0x200001e0
 8001418:	40012400 	.word	0x40012400

0800141c <ADC_Read>:

uint32_t ADC_Read(uint32_t channel)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
	_ADC_SELECT(gAdc.Instance, channel);
 8001424:	4b0d      	ldr	r3, [pc, #52]	; (800145c <ADC_Read+0x40>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	0352      	lsls	r2, r2, #13
 800142c:	0b52      	lsrs	r2, r2, #13
 800142e:	629a      	str	r2, [r3, #40]	; 0x28

	__HAL_ADC_CLEAR_FLAG(&gAdc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001430:	4b0a      	ldr	r3, [pc, #40]	; (800145c <ADC_Read+0x40>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	221c      	movs	r2, #28
 8001436:	601a      	str	r2, [r3, #0]
	gAdc.Instance->CR |= ADC_CR_ADSTART;
 8001438:	4b08      	ldr	r3, [pc, #32]	; (800145c <ADC_Read+0x40>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	689a      	ldr	r2, [r3, #8]
 800143e:	4b07      	ldr	r3, [pc, #28]	; (800145c <ADC_Read+0x40>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2104      	movs	r1, #4
 8001444:	430a      	orrs	r2, r1
 8001446:	609a      	str	r2, [r3, #8]

	ADC_WaitForFlag(ADC_FLAG_EOC);
 8001448:	2004      	movs	r0, #4
 800144a:	f000 f879 	bl	8001540 <ADC_WaitForFlag>

	return gAdc.Instance->DR;
 800144e:	4b03      	ldr	r3, [pc, #12]	; (800145c <ADC_Read+0x40>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001454:	0018      	movs	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	b002      	add	sp, #8
 800145a:	bd80      	pop	{r7, pc}
 800145c:	200001e0 	.word	0x200001e0

08001460 <AIN_AinToDivider>:
	__HAL_RCC_ADC1_CLK_DISABLE();
	CLK_DisableADCCLK();
}

uint32_t AIN_AinToDivider(uint32_t ain, uint32_t rlow, uint32_t rhigh)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
	return AIN_AinToMv(ain) * (rhigh + rlow) / rlow;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	0018      	movs	r0, r3
 8001470:	f000 f80e 	bl	8001490 <AIN_AinToMv>
 8001474:	0001      	movs	r1, r0
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	18d3      	adds	r3, r2, r3
 800147c:	434b      	muls	r3, r1
 800147e:	68b9      	ldr	r1, [r7, #8]
 8001480:	0018      	movs	r0, r3
 8001482:	f7fe fe41 	bl	8000108 <__udivsi3>
 8001486:	0003      	movs	r3, r0
}
 8001488:	0018      	movs	r0, r3
 800148a:	46bd      	mov	sp, r7
 800148c:	b004      	add	sp, #16
 800148e:	bd80      	pop	{r7, pc}

08001490 <AIN_AinToMv>:

uint32_t AIN_AinToMv(uint32_t ain)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
	return (ain * ADC_VREF) / ADC_MAX;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4a05      	ldr	r2, [pc, #20]	; (80014b0 <AIN_AinToMv+0x20>)
 800149c:	4353      	muls	r3, r2
 800149e:	4905      	ldr	r1, [pc, #20]	; (80014b4 <AIN_AinToMv+0x24>)
 80014a0:	0018      	movs	r0, r3
 80014a2:	f7fe fe31 	bl	8000108 <__udivsi3>
 80014a6:	0003      	movs	r3, r0
}
 80014a8:	0018      	movs	r0, r3
 80014aa:	46bd      	mov	sp, r7
 80014ac:	b002      	add	sp, #8
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	00000ce4 	.word	0x00000ce4
 80014b4:	00000fff 	.word	0x00000fff

080014b8 <ADC_ReadDieTemp>:

int32_t ADC_ReadDieTemp(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
	ADC->CCR |= ADC_CCR_TSEN;
 80014be:	4b19      	ldr	r3, [pc, #100]	; (8001524 <ADC_ReadDieTemp+0x6c>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	4b18      	ldr	r3, [pc, #96]	; (8001524 <ADC_ReadDieTemp+0x6c>)
 80014c4:	2180      	movs	r1, #128	; 0x80
 80014c6:	0409      	lsls	r1, r1, #16
 80014c8:	430a      	orrs	r2, r1
 80014ca:	601a      	str	r2, [r3, #0]
	int32_t ain = ADC_Read(ADC_CHANNEL_TEMPSENSOR);
 80014cc:	4b16      	ldr	r3, [pc, #88]	; (8001528 <ADC_ReadDieTemp+0x70>)
 80014ce:	0018      	movs	r0, r3
 80014d0:	f7ff ffa4 	bl	800141c <ADC_Read>
 80014d4:	0003      	movs	r3, r0
 80014d6:	607b      	str	r3, [r7, #4]
	ADC->CCR &= ~ADC_CCR_TSEN;
 80014d8:	4b12      	ldr	r3, [pc, #72]	; (8001524 <ADC_ReadDieTemp+0x6c>)
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	4b11      	ldr	r3, [pc, #68]	; (8001524 <ADC_ReadDieTemp+0x6c>)
 80014de:	4913      	ldr	r1, [pc, #76]	; (800152c <ADC_ReadDieTemp+0x74>)
 80014e0:	400a      	ands	r2, r1
 80014e2:	601a      	str	r2, [r3, #0]

	// The temp sensor is not ratiometric, so the vref must be adjusted for.
	ain = ain * ADC_VREF / TS_CAL_VREF;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4a12      	ldr	r2, [pc, #72]	; (8001530 <ADC_ReadDieTemp+0x78>)
 80014e8:	4353      	muls	r3, r2
 80014ea:	4912      	ldr	r1, [pc, #72]	; (8001534 <ADC_ReadDieTemp+0x7c>)
 80014ec:	0018      	movs	r0, r3
 80014ee:	f7fe fe95 	bl	800021c <__divsi3>
 80014f2:	0003      	movs	r3, r0
 80014f4:	607b      	str	r3, [r7, #4]
	return ((ain - TS_CAL1_AIN) * (TS_CAL2_DEG - TS_CAL1_DEG) / (TS_CAL2_AIN - TS_CAL1_AIN)) + TS_CAL1_DEG;
 80014f6:	4b10      	ldr	r3, [pc, #64]	; (8001538 <ADC_ReadDieTemp+0x80>)
 80014f8:	881b      	ldrh	r3, [r3, #0]
 80014fa:	001a      	movs	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	1a9b      	subs	r3, r3, r2
 8001500:	2264      	movs	r2, #100	; 0x64
 8001502:	435a      	muls	r2, r3
 8001504:	4b0d      	ldr	r3, [pc, #52]	; (800153c <ADC_ReadDieTemp+0x84>)
 8001506:	881b      	ldrh	r3, [r3, #0]
 8001508:	0019      	movs	r1, r3
 800150a:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <ADC_ReadDieTemp+0x80>)
 800150c:	881b      	ldrh	r3, [r3, #0]
 800150e:	1acb      	subs	r3, r1, r3
 8001510:	0019      	movs	r1, r3
 8001512:	0010      	movs	r0, r2
 8001514:	f7fe fe82 	bl	800021c <__divsi3>
 8001518:	0003      	movs	r3, r0
 800151a:	331e      	adds	r3, #30
}
 800151c:	0018      	movs	r0, r3
 800151e:	46bd      	mov	sp, r7
 8001520:	b002      	add	sp, #8
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40012708 	.word	0x40012708
 8001528:	48040000 	.word	0x48040000
 800152c:	ff7fffff 	.word	0xff7fffff
 8001530:	00000ce4 	.word	0x00000ce4
 8001534:	00000bb8 	.word	0x00000bb8
 8001538:	1ff8007a 	.word	0x1ff8007a
 800153c:	1ff8007e 	.word	0x1ff8007e

08001540 <ADC_WaitForFlag>:
/*
 * PRIVATE FUNCTIONS
 */

static void ADC_WaitForFlag(uint32_t flag)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
	while (!(gAdc.Instance->ISR & flag)) { }
 8001548:	46c0      	nop			; (mov r8, r8)
 800154a:	4b05      	ldr	r3, [pc, #20]	; (8001560 <ADC_WaitForFlag+0x20>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	4013      	ands	r3, r2
 8001554:	d0f9      	beq.n	800154a <ADC_WaitForFlag+0xa>
}
 8001556:	46c0      	nop			; (mov r8, r8)
 8001558:	46bd      	mov	sp, r7
 800155a:	b002      	add	sp, #8
 800155c:	bd80      	pop	{r7, pc}
 800155e:	46c0      	nop			; (mov r8, r8)
 8001560:	200001e0 	.word	0x200001e0

08001564 <ADC_Calibrate>:

static void ADC_Calibrate(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
	// Note, ADC must be disabled for this to occurr
	gAdc.Instance->CR |= ADC_CR_ADCAL;
 8001568:	4b08      	ldr	r3, [pc, #32]	; (800158c <ADC_Calibrate+0x28>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	689a      	ldr	r2, [r3, #8]
 800156e:	4b07      	ldr	r3, [pc, #28]	; (800158c <ADC_Calibrate+0x28>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2180      	movs	r1, #128	; 0x80
 8001574:	0609      	lsls	r1, r1, #24
 8001576:	430a      	orrs	r2, r1
 8001578:	609a      	str	r2, [r3, #8]
	while(gAdc.Instance->CR & ADC_CR_ADCAL);
 800157a:	46c0      	nop			; (mov r8, r8)
 800157c:	4b03      	ldr	r3, [pc, #12]	; (800158c <ADC_Calibrate+0x28>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	2b00      	cmp	r3, #0
 8001584:	dbfa      	blt.n	800157c <ADC_Calibrate+0x18>
}
 8001586:	46c0      	nop			; (mov r8, r8)
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	200001e0 	.word	0x200001e0

08001590 <CLK_InitSYSCLK>:
/*
 * PUBLIC FUNCTIONS
 */

void CLK_InitSYSCLK(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
	__HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 8001594:	4b34      	ldr	r3, [pc, #208]	; (8001668 <CLK_InitSYSCLK+0xd8>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4b33      	ldr	r3, [pc, #204]	; (8001668 <CLK_InitSYSCLK+0xd8>)
 800159a:	2101      	movs	r1, #1
 800159c:	430a      	orrs	r2, r1
 800159e:	601a      	str	r2, [r3, #0]
#ifdef CLK_USE_HSE
	__HAL_RCC_HSE_CONFIG(RCC_HSE_ON);
	while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U);
#endif
#ifdef CLK_USE_HSI
	__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_HSICALIBRATION_DEFAULT);
 80015a0:	4b32      	ldr	r3, [pc, #200]	; (800166c <CLK_InitSYSCLK+0xdc>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	4a32      	ldr	r2, [pc, #200]	; (8001670 <CLK_InitSYSCLK+0xe0>)
 80015a6:	401a      	ands	r2, r3
 80015a8:	4b30      	ldr	r3, [pc, #192]	; (800166c <CLK_InitSYSCLK+0xdc>)
 80015aa:	2180      	movs	r1, #128	; 0x80
 80015ac:	0149      	lsls	r1, r1, #5
 80015ae:	430a      	orrs	r2, r1
 80015b0:	605a      	str	r2, [r3, #4]
	__HAL_RCC_HSI_CONFIG(RCC_HSI_ON);
 80015b2:	4b2e      	ldr	r3, [pc, #184]	; (800166c <CLK_InitSYSCLK+0xdc>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2209      	movs	r2, #9
 80015b8:	4393      	bics	r3, r2
 80015ba:	001a      	movs	r2, r3
 80015bc:	4b2b      	ldr	r3, [pc, #172]	; (800166c <CLK_InitSYSCLK+0xdc>)
 80015be:	2101      	movs	r1, #1
 80015c0:	430a      	orrs	r2, r1
 80015c2:	601a      	str	r2, [r3, #0]
	while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U);
 80015c4:	46c0      	nop			; (mov r8, r8)
 80015c6:	4b29      	ldr	r3, [pc, #164]	; (800166c <CLK_InitSYSCLK+0xdc>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2204      	movs	r2, #4
 80015cc:	4013      	ands	r3, r2
 80015ce:	d0fa      	beq.n	80015c6 <CLK_InitSYSCLK+0x36>
	__HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_MSICALIBRATION_DEFAULT);
#endif

#ifdef CLK_USE_PLL
	// PLL must be disables for configuration.
	__HAL_RCC_PLL_DISABLE();
 80015d0:	4b26      	ldr	r3, [pc, #152]	; (800166c <CLK_InitSYSCLK+0xdc>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	4b25      	ldr	r3, [pc, #148]	; (800166c <CLK_InitSYSCLK+0xdc>)
 80015d6:	4927      	ldr	r1, [pc, #156]	; (8001674 <CLK_InitSYSCLK+0xe4>)
 80015d8:	400a      	ands	r2, r1
 80015da:	601a      	str	r2, [r3, #0]
	while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U);
 80015dc:	46c0      	nop			; (mov r8, r8)
 80015de:	4b23      	ldr	r3, [pc, #140]	; (800166c <CLK_InitSYSCLK+0xdc>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	2380      	movs	r3, #128	; 0x80
 80015e4:	049b      	lsls	r3, r3, #18
 80015e6:	4013      	ands	r3, r2
 80015e8:	d1f9      	bne.n	80015de <CLK_InitSYSCLK+0x4e>
	__HAL_RCC_PLL_CONFIG(CLK_PLL_SRC, CLK_PLL_MUL_CFG, CLK_PLL_DIV_CFG);
 80015ea:	4b20      	ldr	r3, [pc, #128]	; (800166c <CLK_InitSYSCLK+0xdc>)
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	4a22      	ldr	r2, [pc, #136]	; (8001678 <CLK_InitSYSCLK+0xe8>)
 80015f0:	401a      	ands	r2, r3
 80015f2:	4b1e      	ldr	r3, [pc, #120]	; (800166c <CLK_InitSYSCLK+0xdc>)
 80015f4:	2188      	movs	r1, #136	; 0x88
 80015f6:	03c9      	lsls	r1, r1, #15
 80015f8:	430a      	orrs	r2, r1
 80015fa:	60da      	str	r2, [r3, #12]
	__HAL_RCC_PLL_ENABLE();
 80015fc:	4b1b      	ldr	r3, [pc, #108]	; (800166c <CLK_InitSYSCLK+0xdc>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	4b1a      	ldr	r3, [pc, #104]	; (800166c <CLK_InitSYSCLK+0xdc>)
 8001602:	2180      	movs	r1, #128	; 0x80
 8001604:	0449      	lsls	r1, r1, #17
 8001606:	430a      	orrs	r2, r1
 8001608:	601a      	str	r2, [r3, #0]
	while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U);
 800160a:	46c0      	nop			; (mov r8, r8)
 800160c:	4b17      	ldr	r3, [pc, #92]	; (800166c <CLK_InitSYSCLK+0xdc>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	2380      	movs	r3, #128	; 0x80
 8001612:	049b      	lsls	r3, r3, #18
 8001614:	4013      	ands	r3, r2
 8001616:	d0f9      	beq.n	800160c <CLK_InitSYSCLK+0x7c>
	 * CONFIGURE CLOCKS
	 * Select the sources and dividers for internal clocks
	 */

	// Configure AHBCLK divider
	MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001618:	4b14      	ldr	r3, [pc, #80]	; (800166c <CLK_InitSYSCLK+0xdc>)
 800161a:	68da      	ldr	r2, [r3, #12]
 800161c:	4b13      	ldr	r3, [pc, #76]	; (800166c <CLK_InitSYSCLK+0xdc>)
 800161e:	21f0      	movs	r1, #240	; 0xf0
 8001620:	438a      	bics	r2, r1
 8001622:	60da      	str	r2, [r3, #12]

	// Apply SYSCLK source
	__HAL_RCC_SYSCLK_CONFIG(CLK_SYSCLK_SRC);
 8001624:	4b11      	ldr	r3, [pc, #68]	; (800166c <CLK_InitSYSCLK+0xdc>)
 8001626:	68da      	ldr	r2, [r3, #12]
 8001628:	4b10      	ldr	r3, [pc, #64]	; (800166c <CLK_InitSYSCLK+0xdc>)
 800162a:	2103      	movs	r1, #3
 800162c:	430a      	orrs	r2, r1
 800162e:	60da      	str	r2, [r3, #12]
#elif (CLK_SYSCLK_SRC == RCC_SYSCLKSOURCE_STATUS_HSI)
	while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI);
#elif (CLK_SYSCLK_SRC == RCC_SYSCLKSOURCE_STATUS_HSE)
	while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE);
#elif (CLK_SYSCLK_SRC == RCC_SYSCLKSOURCE_PLLCLK)
	while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK);
 8001630:	46c0      	nop			; (mov r8, r8)
 8001632:	4b0e      	ldr	r3, [pc, #56]	; (800166c <CLK_InitSYSCLK+0xdc>)
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	220c      	movs	r2, #12
 8001638:	4013      	ands	r3, r2
 800163a:	2b0c      	cmp	r3, #12
 800163c:	d1f9      	bne.n	8001632 <CLK_InitSYSCLK+0xa2>
#endif

	// Configure PCLK dividers (peripheral clock)
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV1);
 800163e:	4b0b      	ldr	r3, [pc, #44]	; (800166c <CLK_InitSYSCLK+0xdc>)
 8001640:	68da      	ldr	r2, [r3, #12]
 8001642:	4b0a      	ldr	r3, [pc, #40]	; (800166c <CLK_InitSYSCLK+0xdc>)
 8001644:	490d      	ldr	r1, [pc, #52]	; (800167c <CLK_InitSYSCLK+0xec>)
 8001646:	400a      	ands	r2, r1
 8001648:	60da      	str	r2, [r3, #12]

#ifdef STM32L0
	// STM32L0's have a second PCLK. The shift by 3 is defined like this in the HAL.
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV1 << 3);
 800164a:	4b08      	ldr	r3, [pc, #32]	; (800166c <CLK_InitSYSCLK+0xdc>)
 800164c:	68da      	ldr	r2, [r3, #12]
 800164e:	4b07      	ldr	r3, [pc, #28]	; (800166c <CLK_InitSYSCLK+0xdc>)
 8001650:	490b      	ldr	r1, [pc, #44]	; (8001680 <CLK_InitSYSCLK+0xf0>)
 8001652:	400a      	ands	r2, r1
 8001654:	60da      	str	r2, [r3, #12]

#ifndef CLK_USE_HSI
	__HAL_RCC_HSI_CONFIG(RCC_HSI_OFF);
#endif
#ifndef CLK_USE_MSI
	__HAL_RCC_MSI_DISABLE();
 8001656:	4b05      	ldr	r3, [pc, #20]	; (800166c <CLK_InitSYSCLK+0xdc>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	4b04      	ldr	r3, [pc, #16]	; (800166c <CLK_InitSYSCLK+0xdc>)
 800165c:	4909      	ldr	r1, [pc, #36]	; (8001684 <CLK_InitSYSCLK+0xf4>)
 800165e:	400a      	ands	r2, r1
 8001660:	601a      	str	r2, [r3, #0]
#endif
}
 8001662:	46c0      	nop			; (mov r8, r8)
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40022000 	.word	0x40022000
 800166c:	40021000 	.word	0x40021000
 8001670:	ffffe0ff 	.word	0xffffe0ff
 8001674:	feffffff 	.word	0xfeffffff
 8001678:	ff02ffff 	.word	0xff02ffff
 800167c:	fffff8ff 	.word	0xfffff8ff
 8001680:	ffffc7ff 	.word	0xffffc7ff
 8001684:	fffffeff 	.word	0xfffffeff

08001688 <CLK_EnableADCCLK>:
	__HAL_RCC_LSI_DISABLE();
#endif
}

void CLK_EnableADCCLK(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
	// ADC CLK is driven off the HSI.
#ifndef CLK_USE_HSI
	__HAL_RCC_HSI_CONFIG(RCC_HSI_ON);
	while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U);
#endif
}
 800168c:	46c0      	nop			; (mov r8, r8)
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <GPIO_Deinit>:
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b082      	sub	sp, #8
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
 800169a:	6039      	str	r1, [r7, #0]
	GPIO_Init(gpio, pin, GPIO_Mode_Analog);
 800169c:	6839      	ldr	r1, [r7, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2203      	movs	r2, #3
 80016a2:	0018      	movs	r0, r3
 80016a4:	f000 f9d8 	bl	8001a58 <GPIO_Init>
}
 80016a8:	46c0      	nop			; (mov r8, r8)
 80016aa:	46bd      	mov	sp, r7
 80016ac:	b002      	add	sp, #8
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <CLK_GetHCLKFreq>:
/*
 * INLINE FUNCTION DEFINITIONS
 */

static inline uint32_t CLK_GetHCLKFreq(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
	return CLK_SYSCLK_FREQ;
 80016b4:	4b01      	ldr	r3, [pc, #4]	; (80016bc <CLK_GetHCLKFreq+0xc>)
}
 80016b6:	0018      	movs	r0, r3
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	01e84800 	.word	0x01e84800

080016c0 <CORE_Init>:
/*
 * PUBLIC FUNCTIONS
 */

void CORE_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
#if defined(STM32L0)
	__HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80016c4:	4b15      	ldr	r3, [pc, #84]	; (800171c <CORE_Init+0x5c>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	4b14      	ldr	r3, [pc, #80]	; (800171c <CORE_Init+0x5c>)
 80016ca:	2140      	movs	r1, #64	; 0x40
 80016cc:	430a      	orrs	r2, r1
 80016ce:	601a      	str	r2, [r3, #0]

#elif defined(STM32F0)
	__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d0:	4b13      	ldr	r3, [pc, #76]	; (8001720 <CORE_Init+0x60>)
 80016d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016d4:	4b12      	ldr	r3, [pc, #72]	; (8001720 <CORE_Init+0x60>)
 80016d6:	2101      	movs	r1, #1
 80016d8:	430a      	orrs	r2, r1
 80016da:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_RCC_PWR_CLK_ENABLE();
 80016dc:	4b10      	ldr	r3, [pc, #64]	; (8001720 <CORE_Init+0x60>)
 80016de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016e0:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <CORE_Init+0x60>)
 80016e2:	2180      	movs	r1, #128	; 0x80
 80016e4:	0549      	lsls	r1, r1, #21
 80016e6:	430a      	orrs	r2, r1
 80016e8:	639a      	str	r2, [r3, #56]	; 0x38
#ifdef STM32L0
#ifndef USB_ENABLE
	// This seems to disrupt USB. Future investigation needed.
	SET_BIT(PWR->CR, PWR_CR_ULP | PWR_CR_FWU); // Enable Ultra low power mode & Fast wakeup
 80016ea:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <CORE_Init+0x64>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	4b0d      	ldr	r3, [pc, #52]	; (8001724 <CORE_Init+0x64>)
 80016f0:	21c0      	movs	r1, #192	; 0xc0
 80016f2:	00c9      	lsls	r1, r1, #3
 80016f4:	430a      	orrs	r2, r1
 80016f6:	601a      	str	r2, [r3, #0]
#endif
	__HAL_PWR_VOLTAGESCALING_CONFIG(CORE_VOLTAGE_RANGE);
 80016f8:	4b0a      	ldr	r3, [pc, #40]	; (8001724 <CORE_Init+0x64>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a0a      	ldr	r2, [pc, #40]	; (8001728 <CORE_Init+0x68>)
 80016fe:	401a      	ands	r2, r3
 8001700:	4b08      	ldr	r3, [pc, #32]	; (8001724 <CORE_Init+0x64>)
 8001702:	2180      	movs	r1, #128	; 0x80
 8001704:	0109      	lsls	r1, r1, #4
 8001706:	430a      	orrs	r2, r1
 8001708:	601a      	str	r2, [r3, #0]
#endif

	CLK_InitSYSCLK();
 800170a:	f7ff ff41 	bl	8001590 <CLK_InitSYSCLK>
	CORE_InitSysTick();
 800170e:	f000 f813 	bl	8001738 <CORE_InitSysTick>
	CORE_InitGPIO();
 8001712:	f000 f829 	bl	8001768 <CORE_InitGPIO>
#ifdef	US_ENABLE
	US_Init();
#endif
}
 8001716:	46c0      	nop			; (mov r8, r8)
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40022000 	.word	0x40022000
 8001720:	40021000 	.word	0x40021000
 8001724:	40007000 	.word	0x40007000
 8001728:	ffffe7ff 	.word	0xffffe7ff

0800172c <CORE_Idle>:

void CORE_Idle(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
	// As long as systick is on, this will at least return each millisecond.
	__WFI();
 8001730:	bf30      	wfi
}
 8001732:	46c0      	nop			; (mov r8, r8)
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <CORE_InitSysTick>:
/*
 * PRIVATE FUNCTIONS
 */

void CORE_InitSysTick(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
	HAL_SYSTICK_Config(CLK_GetHCLKFreq() / CORE_SYSTICK_FREQ);
 800173c:	f7ff ffb8 	bl	80016b0 <CLK_GetHCLKFreq>
 8001740:	0002      	movs	r2, r0
 8001742:	23fa      	movs	r3, #250	; 0xfa
 8001744:	0099      	lsls	r1, r3, #2
 8001746:	0010      	movs	r0, r2
 8001748:	f7fe fcde 	bl	8000108 <__udivsi3>
 800174c:	0003      	movs	r3, r0
 800174e:	0018      	movs	r0, r3
 8001750:	f7ff fdf9 	bl	8001346 <HAL_SYSTICK_Config>
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001754:	2301      	movs	r3, #1
 8001756:	425b      	negs	r3, r3
 8001758:	2200      	movs	r2, #0
 800175a:	2100      	movs	r1, #0
 800175c:	0018      	movs	r0, r3
 800175e:	f7ff fdcd 	bl	80012fc <HAL_NVIC_SetPriority>
}
 8001762:	46c0      	nop			; (mov r8, r8)
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <CORE_InitGPIO>:

void CORE_InitGPIO(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800176e:	4b26      	ldr	r3, [pc, #152]	; (8001808 <CORE_InitGPIO+0xa0>)
 8001770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001772:	4b25      	ldr	r3, [pc, #148]	; (8001808 <CORE_InitGPIO+0xa0>)
 8001774:	2101      	movs	r1, #1
 8001776:	430a      	orrs	r2, r1
 8001778:	62da      	str	r2, [r3, #44]	; 0x2c
 800177a:	4b23      	ldr	r3, [pc, #140]	; (8001808 <CORE_InitGPIO+0xa0>)
 800177c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177e:	2201      	movs	r2, #1
 8001780:	4013      	ands	r3, r2
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
#ifdef DEBUG
	// SWCLK and SWDIO on PA13, PA14
	GPIO_Deinit(GPIOA, GPIO_PIN_All & ~(GPIO_PIN_13 | GPIO_PIN_14));
 8001786:	4a21      	ldr	r2, [pc, #132]	; (800180c <CORE_InitGPIO+0xa4>)
 8001788:	23a0      	movs	r3, #160	; 0xa0
 800178a:	05db      	lsls	r3, r3, #23
 800178c:	0011      	movs	r1, r2
 800178e:	0018      	movs	r0, r3
 8001790:	f7ff ff7f 	bl	8001692 <GPIO_Deinit>
#else
	GPIO_Deinit(GPIOA, GPIO_PIN_All);
#endif

	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001794:	4b1c      	ldr	r3, [pc, #112]	; (8001808 <CORE_InitGPIO+0xa0>)
 8001796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001798:	4b1b      	ldr	r3, [pc, #108]	; (8001808 <CORE_InitGPIO+0xa0>)
 800179a:	2102      	movs	r1, #2
 800179c:	430a      	orrs	r2, r1
 800179e:	62da      	str	r2, [r3, #44]	; 0x2c
 80017a0:	4b19      	ldr	r3, [pc, #100]	; (8001808 <CORE_InitGPIO+0xa0>)
 80017a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a4:	2202      	movs	r2, #2
 80017a6:	4013      	ands	r3, r2
 80017a8:	60bb      	str	r3, [r7, #8]
 80017aa:	68bb      	ldr	r3, [r7, #8]
	GPIO_Deinit(GPIOB, GPIO_PIN_All);
 80017ac:	4a18      	ldr	r2, [pc, #96]	; (8001810 <CORE_InitGPIO+0xa8>)
 80017ae:	4b19      	ldr	r3, [pc, #100]	; (8001814 <CORE_InitGPIO+0xac>)
 80017b0:	0011      	movs	r1, r2
 80017b2:	0018      	movs	r0, r3
 80017b4:	f7ff ff6d 	bl	8001692 <GPIO_Deinit>

	__HAL_RCC_GPIOC_CLK_ENABLE();
 80017b8:	4b13      	ldr	r3, [pc, #76]	; (8001808 <CORE_InitGPIO+0xa0>)
 80017ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017bc:	4b12      	ldr	r3, [pc, #72]	; (8001808 <CORE_InitGPIO+0xa0>)
 80017be:	2104      	movs	r1, #4
 80017c0:	430a      	orrs	r2, r1
 80017c2:	62da      	str	r2, [r3, #44]	; 0x2c
 80017c4:	4b10      	ldr	r3, [pc, #64]	; (8001808 <CORE_InitGPIO+0xa0>)
 80017c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c8:	2204      	movs	r2, #4
 80017ca:	4013      	ands	r3, r2
 80017cc:	607b      	str	r3, [r7, #4]
 80017ce:	687b      	ldr	r3, [r7, #4]
	GPIO_Deinit(GPIOC, GPIO_PIN_All);
 80017d0:	4a0f      	ldr	r2, [pc, #60]	; (8001810 <CORE_InitGPIO+0xa8>)
 80017d2:	4b11      	ldr	r3, [pc, #68]	; (8001818 <CORE_InitGPIO+0xb0>)
 80017d4:	0011      	movs	r1, r2
 80017d6:	0018      	movs	r0, r3
 80017d8:	f7ff ff5b 	bl	8001692 <GPIO_Deinit>

#if defined(GPIOD)
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80017dc:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <CORE_InitGPIO+0xa0>)
 80017de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017e0:	4b09      	ldr	r3, [pc, #36]	; (8001808 <CORE_InitGPIO+0xa0>)
 80017e2:	2108      	movs	r1, #8
 80017e4:	430a      	orrs	r2, r1
 80017e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80017e8:	4b07      	ldr	r3, [pc, #28]	; (8001808 <CORE_InitGPIO+0xa0>)
 80017ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ec:	2208      	movs	r2, #8
 80017ee:	4013      	ands	r3, r2
 80017f0:	603b      	str	r3, [r7, #0]
 80017f2:	683b      	ldr	r3, [r7, #0]
	GPIO_Deinit(GPIOD, GPIO_PIN_All);
 80017f4:	4a06      	ldr	r2, [pc, #24]	; (8001810 <CORE_InitGPIO+0xa8>)
 80017f6:	4b09      	ldr	r3, [pc, #36]	; (800181c <CORE_InitGPIO+0xb4>)
 80017f8:	0011      	movs	r1, r2
 80017fa:	0018      	movs	r0, r3
 80017fc:	f7ff ff49 	bl	8001692 <GPIO_Deinit>
#endif
}
 8001800:	46c0      	nop			; (mov r8, r8)
 8001802:	46bd      	mov	sp, r7
 8001804:	b004      	add	sp, #16
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40021000 	.word	0x40021000
 800180c:	00009fff 	.word	0x00009fff
 8001810:	0000ffff 	.word	0x0000ffff
 8001814:	50000400 	.word	0x50000400
 8001818:	50000800 	.word	0x50000800
 800181c:	50000c00 	.word	0x50000c00

08001820 <SysTick_Handler>:
/*
 * INTERRUPT ROUTINES
 */

void SysTick_Handler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
	gTicks += MS_PER_SYSTICK;
 8001824:	4b03      	ldr	r3, [pc, #12]	; (8001834 <SysTick_Handler+0x14>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	1c5a      	adds	r2, r3, #1
 800182a:	4b02      	ldr	r3, [pc, #8]	; (8001834 <SysTick_Handler+0x14>)
 800182c:	601a      	str	r2, [r3, #0]
	if (gTickCallback != NULL)
	{
		gTickCallback();
	}
#endif
}
 800182e:	46c0      	nop			; (mov r8, r8)
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	2000023c 	.word	0x2000023c

08001838 <EEPROM_Write>:
/*
 * PUBLIC FUNCTIONS
 */

void EEPROM_Write(uint32_t offset, const void * data, uint32_t size)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b088      	sub	sp, #32
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
	uint8_t * bytes = (uint8_t *)data;
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	61bb      	str	r3, [r7, #24]
	uint8_t * eeprom = (uint8_t *)(DATA_EEPROM_BASE + offset);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	4a15      	ldr	r2, [pc, #84]	; (80018a0 <EEPROM_Write+0x68>)
 800184c:	4694      	mov	ip, r2
 800184e:	4463      	add	r3, ip
 8001850:	617b      	str	r3, [r7, #20]

	EEPROM_Unlock();
 8001852:	f000 f83f 	bl	80018d4 <EEPROM_Unlock>
	for (uint32_t i = 0; i < size; i++)
 8001856:	2300      	movs	r3, #0
 8001858:	61fb      	str	r3, [r7, #28]
 800185a:	e016      	b.n	800188a <EEPROM_Write+0x52>
	{
		if (bytes[i] != eeprom[i])
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	18d3      	adds	r3, r2, r3
 8001862:	781a      	ldrb	r2, [r3, #0]
 8001864:	6979      	ldr	r1, [r7, #20]
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	18cb      	adds	r3, r1, r3
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	429a      	cmp	r2, r3
 800186e:	d009      	beq.n	8001884 <EEPROM_Write+0x4c>
		{
			eeprom[i] = bytes[i]; // This triggers an 8 bit write operation.
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	18d2      	adds	r2, r2, r3
 8001876:	6979      	ldr	r1, [r7, #20]
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	18cb      	adds	r3, r1, r3
 800187c:	7812      	ldrb	r2, [r2, #0]
 800187e:	701a      	strb	r2, [r3, #0]
			EEPROM_WaitForOperation();
 8001880:	f000 f854 	bl	800192c <EEPROM_WaitForOperation>
	for (uint32_t i = 0; i < size; i++)
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	3301      	adds	r3, #1
 8001888:	61fb      	str	r3, [r7, #28]
 800188a:	69fa      	ldr	r2, [r7, #28]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	429a      	cmp	r2, r3
 8001890:	d3e4      	bcc.n	800185c <EEPROM_Write+0x24>
		}
	}
	EEPROM_Lock();
 8001892:	f000 f83d 	bl	8001910 <EEPROM_Lock>
}
 8001896:	46c0      	nop			; (mov r8, r8)
 8001898:	46bd      	mov	sp, r7
 800189a:	b008      	add	sp, #32
 800189c:	bd80      	pop	{r7, pc}
 800189e:	46c0      	nop			; (mov r8, r8)
 80018a0:	08080000 	.word	0x08080000

080018a4 <EEPROM_Read>:

void EEPROM_Read(uint32_t offset, void * data, uint32_t size)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
	uint8_t * eeprom = (uint8_t *)(DATA_EEPROM_BASE + offset);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	4a07      	ldr	r2, [pc, #28]	; (80018d0 <EEPROM_Read+0x2c>)
 80018b4:	4694      	mov	ip, r2
 80018b6:	4463      	add	r3, ip
 80018b8:	617b      	str	r3, [r7, #20]
	memcpy(data, eeprom, size);
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	6979      	ldr	r1, [r7, #20]
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	0018      	movs	r0, r3
 80018c2:	f000 fd69 	bl	8002398 <memcpy>
}
 80018c6:	46c0      	nop			; (mov r8, r8)
 80018c8:	46bd      	mov	sp, r7
 80018ca:	b006      	add	sp, #24
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	46c0      	nop			; (mov r8, r8)
 80018d0:	08080000 	.word	0x08080000

080018d4 <EEPROM_Unlock>:
/*
 * PRIVATE FUNCTIONS
 */

static void EEPROM_Unlock(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80018da:	f3ef 8310 	mrs	r3, PRIMASK
 80018de:	607b      	str	r3, [r7, #4]
  return(result);
 80018e0:	687b      	ldr	r3, [r7, #4]
	// This sequence must not be interrupted.
	uint32_t primask_bit = __get_PRIMASK();
 80018e2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80018e4:	b672      	cpsid	i
	__disable_irq();

	FLASH->PEKEYR = FLASH_PEKEY1;
 80018e6:	4b07      	ldr	r3, [pc, #28]	; (8001904 <EEPROM_Unlock+0x30>)
 80018e8:	4a07      	ldr	r2, [pc, #28]	; (8001908 <EEPROM_Unlock+0x34>)
 80018ea:	60da      	str	r2, [r3, #12]
	FLASH->PEKEYR = FLASH_PEKEY2;
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <EEPROM_Unlock+0x30>)
 80018ee:	4a07      	ldr	r2, [pc, #28]	; (800190c <EEPROM_Unlock+0x38>)
 80018f0:	60da      	str	r2, [r3, #12]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	f383 8810 	msr	PRIMASK, r3

	__set_PRIMASK(primask_bit);
}
 80018fc:	46c0      	nop			; (mov r8, r8)
 80018fe:	46bd      	mov	sp, r7
 8001900:	b004      	add	sp, #16
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40022000 	.word	0x40022000
 8001908:	89abcdef 	.word	0x89abcdef
 800190c:	02030405 	.word	0x02030405

08001910 <EEPROM_Lock>:

static inline void EEPROM_Lock(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
	SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8001914:	4b04      	ldr	r3, [pc, #16]	; (8001928 <EEPROM_Lock+0x18>)
 8001916:	685a      	ldr	r2, [r3, #4]
 8001918:	4b03      	ldr	r3, [pc, #12]	; (8001928 <EEPROM_Lock+0x18>)
 800191a:	2101      	movs	r1, #1
 800191c:	430a      	orrs	r2, r1
 800191e:	605a      	str	r2, [r3, #4]
}
 8001920:	46c0      	nop			; (mov r8, r8)
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	46c0      	nop			; (mov r8, r8)
 8001928:	40022000 	.word	0x40022000

0800192c <EEPROM_WaitForOperation>:

static void EEPROM_WaitForOperation(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
	while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY));
 8001930:	46c0      	nop			; (mov r8, r8)
 8001932:	4b09      	ldr	r3, [pc, #36]	; (8001958 <EEPROM_WaitForOperation+0x2c>)
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	2201      	movs	r2, #1
 8001938:	4013      	ands	r3, r2
 800193a:	2b01      	cmp	r3, #1
 800193c:	d0f9      	beq.n	8001932 <EEPROM_WaitForOperation+0x6>
	if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800193e:	4b06      	ldr	r3, [pc, #24]	; (8001958 <EEPROM_WaitForOperation+0x2c>)
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	2202      	movs	r2, #2
 8001944:	4013      	ands	r3, r2
 8001946:	2b02      	cmp	r3, #2
 8001948:	d102      	bne.n	8001950 <EEPROM_WaitForOperation+0x24>
	{
		__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800194a:	4b03      	ldr	r3, [pc, #12]	; (8001958 <EEPROM_WaitForOperation+0x2c>)
 800194c:	2202      	movs	r2, #2
 800194e:	619a      	str	r2, [r3, #24]
	}
}
 8001950:	46c0      	nop			; (mov r8, r8)
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	46c0      	nop			; (mov r8, r8)
 8001958:	40022000 	.word	0x40022000

0800195c <GPIO_Set>:
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
	gpio->BSRR = (uint32_t)pin;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	619a      	str	r2, [r3, #24]
}
 800196c:	46c0      	nop			; (mov r8, r8)
 800196e:	46bd      	mov	sp, r7
 8001970:	b002      	add	sp, #8
 8001972:	bd80      	pop	{r7, pc}

08001974 <GPIO_Reset>:
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
	gpio->BRR = (uint32_t)pin;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001984:	46c0      	nop			; (mov r8, r8)
 8001986:	46bd      	mov	sp, r7
 8001988:	b002      	add	sp, #8
 800198a:	bd80      	pop	{r7, pc}

0800198c <GPIO_Write>:
/*
 * PUBLIC FUNCTIONS
 */

void GPIO_Write(GPIO_t * gpio, uint32_t pin, GPIO_State_t state)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	1dfb      	adds	r3, r7, #7
 8001998:	701a      	strb	r2, [r3, #0]
	if (state)
 800199a:	1dfb      	adds	r3, r7, #7
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d006      	beq.n	80019b0 <GPIO_Write+0x24>
	{
		GPIO_Set(gpio, pin);
 80019a2:	68ba      	ldr	r2, [r7, #8]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	0011      	movs	r1, r2
 80019a8:	0018      	movs	r0, r3
 80019aa:	f7ff ffd7 	bl	800195c <GPIO_Set>
	}
	else
	{
		GPIO_Reset(gpio, pin);
	}
}
 80019ae:	e005      	b.n	80019bc <GPIO_Write+0x30>
		GPIO_Reset(gpio, pin);
 80019b0:	68ba      	ldr	r2, [r7, #8]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	0011      	movs	r1, r2
 80019b6:	0018      	movs	r0, r3
 80019b8:	f7ff ffdc 	bl	8001974 <GPIO_Reset>
}
 80019bc:	46c0      	nop			; (mov r8, r8)
 80019be:	46bd      	mov	sp, r7
 80019c0:	b004      	add	sp, #16
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <GPIO_EnableAlternate>:

void GPIO_EnableAlternate(GPIO_t * gpio, uint32_t pin, GPIO_Flag_t flags, uint32_t af)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	603b      	str	r3, [r7, #0]
 80019d0:	1dbb      	adds	r3, r7, #6
 80019d2:	801a      	strh	r2, [r3, #0]
	GPIO_ConfigAlternate(gpio, pin, af);
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	68b9      	ldr	r1, [r7, #8]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	0018      	movs	r0, r3
 80019dc:	f000 f8ac 	bl	8001b38 <GPIO_ConfigAlternate>
	GPIO_Init(gpio, pin, GPIO_Mode_Alternate | GPIO_Speed_High | flags);
 80019e0:	1dbb      	adds	r3, r7, #6
 80019e2:	881b      	ldrh	r3, [r3, #0]
 80019e4:	4a05      	ldr	r2, [pc, #20]	; (80019fc <GPIO_EnableAlternate+0x38>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	68b9      	ldr	r1, [r7, #8]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	0018      	movs	r0, r3
 80019f0:	f000 f832 	bl	8001a58 <GPIO_Init>
}
 80019f4:	46c0      	nop			; (mov r8, r8)
 80019f6:	46bd      	mov	sp, r7
 80019f8:	b004      	add	sp, #16
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	00000302 	.word	0x00000302

08001a00 <GPIO_OnChange>:

#ifdef GPIO_USE_IRQS
void GPIO_OnChange(GPIO_t * gpio, uint32_t pin, GPIO_IT_Dir_t dir, VoidFunction_t callback)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	603b      	str	r3, [r7, #0]
 8001a0c:	1dfb      	adds	r3, r7, #7
 8001a0e:	701a      	strb	r2, [r3, #0]
	int n = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]
	while ((pin & (1 << n)) == 0) { n++; }
 8001a14:	e002      	b.n	8001a1c <GPIO_OnChange+0x1c>
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	409a      	lsls	r2, r3
 8001a22:	0013      	movs	r3, r2
 8001a24:	001a      	movs	r2, r3
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	d0f4      	beq.n	8001a16 <GPIO_OnChange+0x16>

	gCallback[n] = callback;
 8001a2c:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <GPIO_OnChange+0x54>)
 8001a2e:	697a      	ldr	r2, [r7, #20]
 8001a30:	0092      	lsls	r2, r2, #2
 8001a32:	6839      	ldr	r1, [r7, #0]
 8001a34:	50d1      	str	r1, [r2, r3]

	GPIO_ConfigInterrupt(gpio, n, dir);
 8001a36:	1dfb      	adds	r3, r7, #7
 8001a38:	781a      	ldrb	r2, [r3, #0]
 8001a3a:	6979      	ldr	r1, [r7, #20]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	0018      	movs	r0, r3
 8001a40:	f000 f8b2 	bl	8001ba8 <GPIO_ConfigInterrupt>

	EXTIx_EnableIRQn(n);
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	0018      	movs	r0, r3
 8001a48:	f000 f980 	bl	8001d4c <EXTIx_EnableIRQn>
}
 8001a4c:	46c0      	nop			; (mov r8, r8)
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	b006      	add	sp, #24
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20000240 	.word	0x20000240

08001a58 <GPIO_Init>:
#endif //GPIO_USE_IRQS

void GPIO_Init(GPIO_t * gpio, uint32_t pins, GPIO_Flag_t mode)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b088      	sub	sp, #32
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	1dbb      	adds	r3, r7, #6
 8001a64:	801a      	strh	r2, [r3, #0]
	uint32_t pinmask = GPIO_SWARBitDouble(pins);
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	0018      	movs	r0, r3
 8001a6a:	f000 f933 	bl	8001cd4 <GPIO_SWARBitDouble>
 8001a6e:	0003      	movs	r3, r0
 8001a70:	61fb      	str	r3, [r7, #28]

	GPIO_Mode_t dir = mode & GPIO_Mode_MASK;
 8001a72:	1dbb      	adds	r3, r7, #6
 8001a74:	881b      	ldrh	r3, [r3, #0]
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	201b      	movs	r0, #27
 8001a7a:	183b      	adds	r3, r7, r0
 8001a7c:	2103      	movs	r1, #3
 8001a7e:	400a      	ands	r2, r1
 8001a80:	701a      	strb	r2, [r3, #0]

	if (dir == GPIO_Mode_Alternate || dir == GPIO_Mode_Output)
 8001a82:	183b      	adds	r3, r7, r0
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d004      	beq.n	8001a94 <GPIO_Init+0x3c>
 8001a8a:	231b      	movs	r3, #27
 8001a8c:	18fb      	adds	r3, r7, r3
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d126      	bne.n	8001ae2 <GPIO_Init+0x8a>
	{
		uint32_t speed = (mode & GPIO_Speed_MASK) >> GPIOCFG_SPEED_POS;
 8001a94:	1dbb      	adds	r3, r7, #6
 8001a96:	881b      	ldrh	r3, [r3, #0]
 8001a98:	121b      	asrs	r3, r3, #8
 8001a9a:	001a      	movs	r2, r3
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	617b      	str	r3, [r7, #20]
		MODIFY_REG( gpio->OSPEEDR, pinmask * GPIO_OSPEEDER_OSPEED0, pinmask * speed );
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6899      	ldr	r1, [r3, #8]
 8001aa6:	69fa      	ldr	r2, [r7, #28]
 8001aa8:	0013      	movs	r3, r2
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	189b      	adds	r3, r3, r2
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	400b      	ands	r3, r1
 8001ab2:	001a      	movs	r2, r3
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	6979      	ldr	r1, [r7, #20]
 8001ab8:	434b      	muls	r3, r1
 8001aba:	431a      	orrs	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	609a      	str	r2, [r3, #8]
		MODIFY_REG( gpio->OTYPER, pins, (mode & GPIO_Flag_OpenDrain) ? pins : 0 );
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	68ba      	ldr	r2, [r7, #8]
 8001ac6:	43d2      	mvns	r2, r2
 8001ac8:	401a      	ands	r2, r3
 8001aca:	1dbb      	adds	r3, r7, #6
 8001acc:	8819      	ldrh	r1, [r3, #0]
 8001ace:	2380      	movs	r3, #128	; 0x80
 8001ad0:	015b      	lsls	r3, r3, #5
 8001ad2:	400b      	ands	r3, r1
 8001ad4:	d001      	beq.n	8001ada <GPIO_Init+0x82>
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	e000      	b.n	8001adc <GPIO_Init+0x84>
 8001ada:	2300      	movs	r3, #0
 8001adc:	431a      	orrs	r2, r3
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	605a      	str	r2, [r3, #4]
	}

	MODIFY_REG( gpio->MODER, pinmask * GPIO_MODER_MODE0, pinmask * dir);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6819      	ldr	r1, [r3, #0]
 8001ae6:	69fa      	ldr	r2, [r7, #28]
 8001ae8:	0013      	movs	r3, r2
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	189b      	adds	r3, r3, r2
 8001aee:	43db      	mvns	r3, r3
 8001af0:	400b      	ands	r3, r1
 8001af2:	001a      	movs	r2, r3
 8001af4:	231b      	movs	r3, #27
 8001af6:	18fb      	adds	r3, r7, r3
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	69f9      	ldr	r1, [r7, #28]
 8001afc:	434b      	muls	r3, r1
 8001afe:	431a      	orrs	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	601a      	str	r2, [r3, #0]
	uint32_t pull = (mode & GPIO_Pull_MASK) >> GPIOCFG_PULL_POS;
 8001b04:	1dbb      	adds	r3, r7, #6
 8001b06:	881b      	ldrh	r3, [r3, #0]
 8001b08:	111b      	asrs	r3, r3, #4
 8001b0a:	001a      	movs	r2, r3
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	4013      	ands	r3, r2
 8001b10:	613b      	str	r3, [r7, #16]
	MODIFY_REG( gpio->PUPDR, pinmask * GPIO_PUPDR_PUPD0, pinmask * pull);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	68d9      	ldr	r1, [r3, #12]
 8001b16:	69fa      	ldr	r2, [r7, #28]
 8001b18:	0013      	movs	r3, r2
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	189b      	adds	r3, r3, r2
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	400b      	ands	r3, r1
 8001b22:	001a      	movs	r2, r3
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	6939      	ldr	r1, [r7, #16]
 8001b28:	434b      	muls	r3, r1
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	60da      	str	r2, [r3, #12]
}
 8001b30:	46c0      	nop			; (mov r8, r8)
 8001b32:	46bd      	mov	sp, r7
 8001b34:	b008      	add	sp, #32
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <GPIO_ConfigAlternate>:
/*
 * PRIVATE FUNCTIONS
 */

static void GPIO_ConfigAlternate( GPIO_t * gpio, uint32_t pins, uint32_t af)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
	uint32_t pos = 0;
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]
	while (pins)
 8001b48:	e026      	b.n	8001b98 <GPIO_ConfigAlternate+0x60>
	{
		if (pins & 0x1)
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	4013      	ands	r3, r2
 8001b50:	d01c      	beq.n	8001b8c <GPIO_ConfigAlternate+0x54>
		{
			uint32_t alt_offset = (pos & 0x7) * 4;
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	2207      	movs	r2, #7
 8001b56:	4013      	ands	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	613b      	str	r3, [r7, #16]
			MODIFY_REG(gpio->AFR[pos >> 3], (0xF << alt_offset), (af << alt_offset));
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	08da      	lsrs	r2, r3, #3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	3208      	adds	r2, #8
 8001b64:	0092      	lsls	r2, r2, #2
 8001b66:	58d3      	ldr	r3, [r2, r3]
 8001b68:	210f      	movs	r1, #15
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	4091      	lsls	r1, r2
 8001b6e:	000a      	movs	r2, r1
 8001b70:	43d2      	mvns	r2, r2
 8001b72:	401a      	ands	r2, r3
 8001b74:	0011      	movs	r1, r2
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	409a      	lsls	r2, r3
 8001b7c:	0013      	movs	r3, r2
 8001b7e:	697a      	ldr	r2, [r7, #20]
 8001b80:	08d2      	lsrs	r2, r2, #3
 8001b82:	4319      	orrs	r1, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	3208      	adds	r2, #8
 8001b88:	0092      	lsls	r2, r2, #2
 8001b8a:	50d1      	str	r1, [r2, r3]
		}
		pins >>= 1;
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	085b      	lsrs	r3, r3, #1
 8001b90:	60bb      	str	r3, [r7, #8]
		pos++;
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	3301      	adds	r3, #1
 8001b96:	617b      	str	r3, [r7, #20]
	while (pins)
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d1d5      	bne.n	8001b4a <GPIO_ConfigAlternate+0x12>
	}
}
 8001b9e:	46c0      	nop			; (mov r8, r8)
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	b006      	add	sp, #24
 8001ba4:	bd80      	pop	{r7, pc}
	...

08001ba8 <GPIO_ConfigInterrupt>:

#ifdef GPIO_USE_IRQS
static void GPIO_ConfigInterrupt( GPIO_t * gpio, int n, GPIO_IT_Dir_t dir)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b088      	sub	sp, #32
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	1dfb      	adds	r3, r7, #7
 8001bb4:	701a      	strb	r2, [r3, #0]
	uint32_t pin = 1 << n;
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	409a      	lsls	r2, r3
 8001bbc:	0013      	movs	r3, r2
 8001bbe:	61fb      	str	r3, [r7, #28]
	if (dir == GPIO_IT_None)
 8001bc0:	1dfb      	adds	r3, r7, #7
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d107      	bne.n	8001bd8 <GPIO_ConfigInterrupt+0x30>
	{
		// Disable the EXTI channel.
		CLEAR_BIT(EXTI->IMR, pin);
 8001bc8:	4b3b      	ldr	r3, [pc, #236]	; (8001cb8 <GPIO_ConfigInterrupt+0x110>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	43d9      	mvns	r1, r3
 8001bd0:	4b39      	ldr	r3, [pc, #228]	; (8001cb8 <GPIO_ConfigInterrupt+0x110>)
 8001bd2:	400a      	ands	r2, r1
 8001bd4:	601a      	str	r2, [r3, #0]
		// Configure the EXTI channel
		SET_BIT(EXTI->IMR, pin);
		MODIFY_REG(EXTI->RTSR, pin, (dir & GPIO_IT_Rising) ? pin : 0);
		MODIFY_REG(EXTI->FTSR, pin, (dir & GPIO_IT_Falling) ? pin : 0);
	}
}
 8001bd6:	e06a      	b.n	8001cae <GPIO_ConfigInterrupt+0x106>
		__HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bd8:	4b38      	ldr	r3, [pc, #224]	; (8001cbc <GPIO_ConfigInterrupt+0x114>)
 8001bda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bdc:	4b37      	ldr	r3, [pc, #220]	; (8001cbc <GPIO_ConfigInterrupt+0x114>)
 8001bde:	2101      	movs	r1, #1
 8001be0:	430a      	orrs	r2, r1
 8001be2:	635a      	str	r2, [r3, #52]	; 0x34
		uint32_t gpio_index = GPIO_GET_INDEX(gpio);
 8001be4:	68fa      	ldr	r2, [r7, #12]
 8001be6:	23a0      	movs	r3, #160	; 0xa0
 8001be8:	05db      	lsls	r3, r3, #23
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d019      	beq.n	8001c22 <GPIO_ConfigInterrupt+0x7a>
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	4a33      	ldr	r2, [pc, #204]	; (8001cc0 <GPIO_ConfigInterrupt+0x118>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d013      	beq.n	8001c1e <GPIO_ConfigInterrupt+0x76>
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	4a32      	ldr	r2, [pc, #200]	; (8001cc4 <GPIO_ConfigInterrupt+0x11c>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d00d      	beq.n	8001c1a <GPIO_ConfigInterrupt+0x72>
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	4a31      	ldr	r2, [pc, #196]	; (8001cc8 <GPIO_ConfigInterrupt+0x120>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d007      	beq.n	8001c16 <GPIO_ConfigInterrupt+0x6e>
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	4a30      	ldr	r2, [pc, #192]	; (8001ccc <GPIO_ConfigInterrupt+0x124>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d101      	bne.n	8001c12 <GPIO_ConfigInterrupt+0x6a>
 8001c0e:	2305      	movs	r3, #5
 8001c10:	e008      	b.n	8001c24 <GPIO_ConfigInterrupt+0x7c>
 8001c12:	2306      	movs	r3, #6
 8001c14:	e006      	b.n	8001c24 <GPIO_ConfigInterrupt+0x7c>
 8001c16:	2303      	movs	r3, #3
 8001c18:	e004      	b.n	8001c24 <GPIO_ConfigInterrupt+0x7c>
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	e002      	b.n	8001c24 <GPIO_ConfigInterrupt+0x7c>
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e000      	b.n	8001c24 <GPIO_ConfigInterrupt+0x7c>
 8001c22:	2300      	movs	r3, #0
 8001c24:	61bb      	str	r3, [r7, #24]
		uint32_t offset = (n & 0x3) * 4;
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	2203      	movs	r2, #3
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	617b      	str	r3, [r7, #20]
		MODIFY_REG(SYSCFG->EXTICR[n >> 2], 0xF << offset, gpio_index << offset);
 8001c30:	4a27      	ldr	r2, [pc, #156]	; (8001cd0 <GPIO_ConfigInterrupt+0x128>)
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	109b      	asrs	r3, r3, #2
 8001c36:	3302      	adds	r3, #2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	589b      	ldr	r3, [r3, r2]
 8001c3c:	210f      	movs	r1, #15
 8001c3e:	697a      	ldr	r2, [r7, #20]
 8001c40:	4091      	lsls	r1, r2
 8001c42:	000a      	movs	r2, r1
 8001c44:	43d2      	mvns	r2, r2
 8001c46:	401a      	ands	r2, r3
 8001c48:	0011      	movs	r1, r2
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	409a      	lsls	r2, r3
 8001c50:	481f      	ldr	r0, [pc, #124]	; (8001cd0 <GPIO_ConfigInterrupt+0x128>)
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	109b      	asrs	r3, r3, #2
 8001c56:	430a      	orrs	r2, r1
 8001c58:	3302      	adds	r3, #2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	501a      	str	r2, [r3, r0]
		SET_BIT(EXTI->IMR, pin);
 8001c5e:	4b16      	ldr	r3, [pc, #88]	; (8001cb8 <GPIO_ConfigInterrupt+0x110>)
 8001c60:	6819      	ldr	r1, [r3, #0]
 8001c62:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <GPIO_ConfigInterrupt+0x110>)
 8001c64:	69fa      	ldr	r2, [r7, #28]
 8001c66:	430a      	orrs	r2, r1
 8001c68:	601a      	str	r2, [r3, #0]
		MODIFY_REG(EXTI->RTSR, pin, (dir & GPIO_IT_Rising) ? pin : 0);
 8001c6a:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <GPIO_ConfigInterrupt+0x110>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	69fa      	ldr	r2, [r7, #28]
 8001c70:	43d2      	mvns	r2, r2
 8001c72:	401a      	ands	r2, r3
 8001c74:	0011      	movs	r1, r2
 8001c76:	1dfb      	adds	r3, r7, #7
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	d001      	beq.n	8001c84 <GPIO_ConfigInterrupt+0xdc>
 8001c80:	69fa      	ldr	r2, [r7, #28]
 8001c82:	e000      	b.n	8001c86 <GPIO_ConfigInterrupt+0xde>
 8001c84:	2200      	movs	r2, #0
 8001c86:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <GPIO_ConfigInterrupt+0x110>)
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	609a      	str	r2, [r3, #8]
		MODIFY_REG(EXTI->FTSR, pin, (dir & GPIO_IT_Falling) ? pin : 0);
 8001c8c:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <GPIO_ConfigInterrupt+0x110>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	69fa      	ldr	r2, [r7, #28]
 8001c92:	43d2      	mvns	r2, r2
 8001c94:	401a      	ands	r2, r3
 8001c96:	0011      	movs	r1, r2
 8001c98:	1dfb      	adds	r3, r7, #7
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2202      	movs	r2, #2
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	d001      	beq.n	8001ca6 <GPIO_ConfigInterrupt+0xfe>
 8001ca2:	69fa      	ldr	r2, [r7, #28]
 8001ca4:	e000      	b.n	8001ca8 <GPIO_ConfigInterrupt+0x100>
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	4b03      	ldr	r3, [pc, #12]	; (8001cb8 <GPIO_ConfigInterrupt+0x110>)
 8001caa:	430a      	orrs	r2, r1
 8001cac:	60da      	str	r2, [r3, #12]
}
 8001cae:	46c0      	nop			; (mov r8, r8)
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	b008      	add	sp, #32
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	46c0      	nop			; (mov r8, r8)
 8001cb8:	40010400 	.word	0x40010400
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	50000400 	.word	0x50000400
 8001cc4:	50000800 	.word	0x50000800
 8001cc8:	50000c00 	.word	0x50000c00
 8001ccc:	50001c00 	.word	0x50001c00
 8001cd0:	40010000 	.word	0x40010000

08001cd4 <GPIO_SWARBitDouble>:
#endif

static uint32_t GPIO_SWARBitDouble(uint32_t s)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
	s = (s & ~0xFF00FF00) | ((s & 0xFF00FF00) << 8);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4a14      	ldr	r2, [pc, #80]	; (8001d30 <GPIO_SWARBitDouble+0x5c>)
 8001ce0:	401a      	ands	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	0219      	lsls	r1, r3, #8
 8001ce6:	23ff      	movs	r3, #255	; 0xff
 8001ce8:	041b      	lsls	r3, r3, #16
 8001cea:	400b      	ands	r3, r1
 8001cec:	4313      	orrs	r3, r2
 8001cee:	607b      	str	r3, [r7, #4]
	s = (s & ~0xF0F0F0F0) | ((s & 0xF0F0F0F0) << 4);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a10      	ldr	r2, [pc, #64]	; (8001d34 <GPIO_SWARBitDouble+0x60>)
 8001cf4:	401a      	ands	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	011b      	lsls	r3, r3, #4
 8001cfa:	490f      	ldr	r1, [pc, #60]	; (8001d38 <GPIO_SWARBitDouble+0x64>)
 8001cfc:	400b      	ands	r3, r1
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	607b      	str	r3, [r7, #4]
	s = (s & ~0xCCCCCCCC) | ((s & 0xCCCCCCCC) << 2);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a0d      	ldr	r2, [pc, #52]	; (8001d3c <GPIO_SWARBitDouble+0x68>)
 8001d06:	401a      	ands	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	490c      	ldr	r1, [pc, #48]	; (8001d40 <GPIO_SWARBitDouble+0x6c>)
 8001d0e:	400b      	ands	r3, r1
 8001d10:	4313      	orrs	r3, r2
 8001d12:	607b      	str	r3, [r7, #4]
	s = (s & ~0xAAAAAAAA) | ((s & 0xAAAAAAAA) << 1);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a0b      	ldr	r2, [pc, #44]	; (8001d44 <GPIO_SWARBitDouble+0x70>)
 8001d18:	401a      	ands	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	490a      	ldr	r1, [pc, #40]	; (8001d48 <GPIO_SWARBitDouble+0x74>)
 8001d20:	400b      	ands	r3, r1
 8001d22:	4313      	orrs	r3, r2
 8001d24:	607b      	str	r3, [r7, #4]
	return s;
 8001d26:	687b      	ldr	r3, [r7, #4]
}
 8001d28:	0018      	movs	r0, r3
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	b002      	add	sp, #8
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	00ff00ff 	.word	0x00ff00ff
 8001d34:	0f0f0f0f 	.word	0x0f0f0f0f
 8001d38:	0f0f0f00 	.word	0x0f0f0f00
 8001d3c:	33333333 	.word	0x33333333
 8001d40:	33333330 	.word	0x33333330
 8001d44:	55555555 	.word	0x55555555
 8001d48:	55555554 	.word	0x55555554

08001d4c <EXTIx_EnableIRQn>:
		gCallback[n]();
	}
}

static void EXTIx_EnableIRQn(int n)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
	if (n <= 1)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	dc03      	bgt.n	8001d62 <EXTIx_EnableIRQn+0x16>
	{
		HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8001d5a:	2005      	movs	r0, #5
 8001d5c:	f7ff fae3 	bl	8001326 <HAL_NVIC_EnableIRQ>
	}
	else
	{
		HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
	}
}
 8001d60:	e009      	b.n	8001d76 <EXTIx_EnableIRQn+0x2a>
	else if (n <= 3)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b03      	cmp	r3, #3
 8001d66:	dc03      	bgt.n	8001d70 <EXTIx_EnableIRQn+0x24>
		HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8001d68:	2006      	movs	r0, #6
 8001d6a:	f7ff fadc 	bl	8001326 <HAL_NVIC_EnableIRQ>
}
 8001d6e:	e002      	b.n	8001d76 <EXTIx_EnableIRQn+0x2a>
		HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001d70:	2007      	movs	r0, #7
 8001d72:	f7ff fad8 	bl	8001326 <HAL_NVIC_EnableIRQ>
}
 8001d76:	46c0      	nop			; (mov r8, r8)
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	b002      	add	sp, #8
 8001d7c:	bd80      	pop	{r7, pc}
	...

08001d80 <CLK_GetPCLKFreq>:

static inline uint32_t CLK_GetPCLKFreq(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
	return CLK_SYSCLK_FREQ;
 8001d84:	4b01      	ldr	r3, [pc, #4]	; (8001d8c <CLK_GetPCLKFreq+0xc>)
}
 8001d86:	0018      	movs	r0, r3
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	01e84800 	.word	0x01e84800

08001d90 <TIM_Init>:
/*
 * PUBLIC FUNCTIONS
 */

void TIM_Init(TIM_t * tim, uint32_t freq, uint32_t reload)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
	TIMx_Init(tim);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	0018      	movs	r0, r3
 8001da0:	f000 f982 	bl	80020a8 <TIMx_Init>

	uint32_t cr1 = tim->Instance->CR1;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	617b      	str	r3, [r7, #20]
	cr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS | TIM_CR1_CKD | TIM_CR1_ARPE);
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	4a0d      	ldr	r2, [pc, #52]	; (8001de4 <TIM_Init+0x54>)
 8001db0:	4013      	ands	r3, r2
 8001db2:	617b      	str	r3, [r7, #20]
	cr1 |= TIM_AUTORELOAD_PRELOAD_ENABLE | TIM_CLOCKDIVISION_DIV1 | TIM_COUNTERMODE_UP;
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	2280      	movs	r2, #128	; 0x80
 8001db8:	4313      	orrs	r3, r2
 8001dba:	617b      	str	r3, [r7, #20]
	tim->Instance->CR1 = cr1;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	601a      	str	r2, [r3, #0]

	TIM_SetFreq(tim, freq);
 8001dc4:	68ba      	ldr	r2, [r7, #8]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	0011      	movs	r1, r2
 8001dca:	0018      	movs	r0, r3
 8001dcc:	f000 f80c 	bl	8001de8 <TIM_SetFreq>
	TIM_SetReload(tim, reload);
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	0011      	movs	r1, r2
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	f000 f81d 	bl	8001e16 <TIM_SetReload>
}
 8001ddc:	46c0      	nop			; (mov r8, r8)
 8001dde:	46bd      	mov	sp, r7
 8001de0:	b006      	add	sp, #24
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	fffffc0f 	.word	0xfffffc0f

08001de8 <TIM_SetFreq>:

void TIM_SetFreq(TIM_t * tim, uint32_t freq)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
	uint32_t clk = CLK_GetPCLKFreq();
 8001df2:	f7ff ffc5 	bl	8001d80 <CLK_GetPCLKFreq>
 8001df6:	0003      	movs	r3, r0
 8001df8:	60fb      	str	r3, [r7, #12]
	tim->Instance->PSC = (clk / freq) - 1;
 8001dfa:	6839      	ldr	r1, [r7, #0]
 8001dfc:	68f8      	ldr	r0, [r7, #12]
 8001dfe:	f7fe f983 	bl	8000108 <__udivsi3>
 8001e02:	0003      	movs	r3, r0
 8001e04:	001a      	movs	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	3a01      	subs	r2, #1
 8001e0c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e0e:	46c0      	nop			; (mov r8, r8)
 8001e10:	46bd      	mov	sp, r7
 8001e12:	b004      	add	sp, #16
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <TIM_SetReload>:

void TIM_SetReload(TIM_t * tim, uint32_t reload)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b082      	sub	sp, #8
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
 8001e1e:	6039      	str	r1, [r7, #0]
	tim->Instance->ARR = reload;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001e28:	46c0      	nop			; (mov r8, r8)
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	b002      	add	sp, #8
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <TIM_OnReload>:

#ifdef TIM_USE_IRQS
void TIM_OnReload(TIM_t * tim, VoidFunction_t callback)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
	__HAL_TIM_ENABLE_IT(tim, TIM_IT_UPDATE);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68da      	ldr	r2, [r3, #12]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2101      	movs	r1, #1
 8001e46:	430a      	orrs	r2, r1
 8001e48:	60da      	str	r2, [r3, #12]
	tim->ReloadCallback = callback;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	605a      	str	r2, [r3, #4]
}
 8001e50:	46c0      	nop			; (mov r8, r8)
 8001e52:	46bd      	mov	sp, r7
 8001e54:	b002      	add	sp, #8
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <TIM_OnPulse>:

void TIM_OnPulse(TIM_t * tim, TIM_Channel_t ch, VoidFunction_t callback)
{
 8001e58:	b590      	push	{r4, r7, lr}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	607a      	str	r2, [r7, #4]
 8001e62:	200b      	movs	r0, #11
 8001e64:	183b      	adds	r3, r7, r0
 8001e66:	1c0a      	adds	r2, r1, #0
 8001e68:	701a      	strb	r2, [r3, #0]
	// WARN: This will fail horribly if ch is greater than 4.
	TIM_EnableOCx(tim, ch, TIM_OCMODE_ACTIVE);
 8001e6a:	0004      	movs	r4, r0
 8001e6c:	183b      	adds	r3, r7, r0
 8001e6e:	7819      	ldrb	r1, [r3, #0]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2210      	movs	r2, #16
 8001e74:	0018      	movs	r0, r3
 8001e76:	f000 f875 	bl	8001f64 <TIM_EnableOCx>
	// Note that the channels IT's are 1 << 1 through 1 << 4
	__HAL_TIM_ENABLE_IT(tim, TIM_IT_CC1 << ch);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68d9      	ldr	r1, [r3, #12]
 8001e80:	0020      	movs	r0, r4
 8001e82:	183b      	adds	r3, r7, r0
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2202      	movs	r2, #2
 8001e88:	409a      	lsls	r2, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	60da      	str	r2, [r3, #12]
	tim->PulseCallback[ch] = callback;
 8001e92:	183b      	adds	r3, r7, r0
 8001e94:	781a      	ldrb	r2, [r3, #0]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	3202      	adds	r2, #2
 8001e9a:	0092      	lsls	r2, r2, #2
 8001e9c:	6879      	ldr	r1, [r7, #4]
 8001e9e:	50d1      	str	r1, [r2, r3]
}
 8001ea0:	46c0      	nop			; (mov r8, r8)
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	b005      	add	sp, #20
 8001ea6:	bd90      	pop	{r4, r7, pc}

08001ea8 <TIM_EnablePwm>:
#endif //TIM_USE_IRQS

void TIM_EnablePwm(TIM_t * tim, TIM_Channel_t ch, GPIO_t * gpio, uint32_t pin, uint32_t af)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	607a      	str	r2, [r7, #4]
 8001eb2:	603b      	str	r3, [r7, #0]
 8001eb4:	200b      	movs	r0, #11
 8001eb6:	183b      	adds	r3, r7, r0
 8001eb8:	1c0a      	adds	r2, r1, #0
 8001eba:	701a      	strb	r2, [r3, #0]
	// TIM_CCMR1_OC1PE is the output compare preload
	TIM_EnableOCx(tim, ch, TIM_OCMODE_PWM1 | TIM_CCMR1_OC1PE | TIM_OCFAST_ENABLE);
 8001ebc:	183b      	adds	r3, r7, r0
 8001ebe:	7819      	ldrb	r1, [r3, #0]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	226c      	movs	r2, #108	; 0x6c
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	f000 f84d 	bl	8001f64 <TIM_EnableOCx>
	GPIO_EnableAlternate(gpio, pin, 0, af);
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	6839      	ldr	r1, [r7, #0]
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f7ff fd77 	bl	80019c4 <GPIO_EnableAlternate>
}
 8001ed6:	46c0      	nop			; (mov r8, r8)
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	b004      	add	sp, #16
 8001edc:	bd80      	pop	{r7, pc}

08001ede <TIM_SetPulse>:


void TIM_SetPulse(TIM_t * tim, TIM_Channel_t ch, uint32_t pulse)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b084      	sub	sp, #16
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	60f8      	str	r0, [r7, #12]
 8001ee6:	607a      	str	r2, [r7, #4]
 8001ee8:	200b      	movs	r0, #11
 8001eea:	183b      	adds	r3, r7, r0
 8001eec:	1c0a      	adds	r2, r1, #0
 8001eee:	701a      	strb	r2, [r3, #0]
	switch (ch)
 8001ef0:	183b      	adds	r3, r7, r0
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d00d      	beq.n	8001f14 <TIM_SetPulse+0x36>
 8001ef8:	dc02      	bgt.n	8001f00 <TIM_SetPulse+0x22>
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d005      	beq.n	8001f0a <TIM_SetPulse+0x2c>
	case TIM_CH4:
		tim->Instance->CCR4 = pulse;
		break;
	}

}
 8001efe:	e018      	b.n	8001f32 <TIM_SetPulse+0x54>
	switch (ch)
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d00c      	beq.n	8001f1e <TIM_SetPulse+0x40>
 8001f04:	2b03      	cmp	r3, #3
 8001f06:	d00f      	beq.n	8001f28 <TIM_SetPulse+0x4a>
}
 8001f08:	e013      	b.n	8001f32 <TIM_SetPulse+0x54>
		tim->Instance->CCR1 = pulse;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001f12:	e00e      	b.n	8001f32 <TIM_SetPulse+0x54>
		tim->Instance->CCR2 = pulse;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8001f1c:	e009      	b.n	8001f32 <TIM_SetPulse+0x54>
		tim->Instance->CCR3 = pulse;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8001f26:	e004      	b.n	8001f32 <TIM_SetPulse+0x54>
		tim->Instance->CCR4 = pulse;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8001f30:	46c0      	nop			; (mov r8, r8)
}
 8001f32:	46c0      	nop			; (mov r8, r8)
 8001f34:	46bd      	mov	sp, r7
 8001f36:	b004      	add	sp, #16
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <TIM_Start>:

void TIM_Start(TIM_t * tim)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b082      	sub	sp, #8
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
	TIM_Reload(tim);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	0018      	movs	r0, r3
 8001f46:	f000 f891 	bl	800206c <TIM_Reload>
	__HAL_TIM_ENABLE(tim);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2101      	movs	r1, #1
 8001f56:	430a      	orrs	r2, r1
 8001f58:	601a      	str	r2, [r3, #0]
}
 8001f5a:	46c0      	nop			; (mov r8, r8)
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	b002      	add	sp, #8
 8001f60:	bd80      	pop	{r7, pc}
	...

08001f64 <TIM_EnableOCx>:
/*
 * PRIVATE FUNCTIONS
 */

static void TIM_EnableOCx(TIM_t * tim, uint32_t oc, uint32_t mode)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
	// Disable the channel during the update.
	TIM_DISABLE_CCx(tim, oc);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6a1a      	ldr	r2, [r3, #32]
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	4099      	lsls	r1, r3
 8001f7e:	000b      	movs	r3, r1
 8001f80:	43d9      	mvns	r1, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	400a      	ands	r2, r1
 8001f88:	621a      	str	r2, [r3, #32]
	switch (oc)
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d019      	beq.n	8001fc4 <TIM_EnableOCx+0x60>
 8001f90:	d304      	bcc.n	8001f9c <TIM_EnableOCx+0x38>
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d02b      	beq.n	8001fee <TIM_EnableOCx+0x8a>
 8001f96:	2b03      	cmp	r3, #3
 8001f98:	d03d      	beq.n	8002016 <TIM_EnableOCx+0xb2>
 8001f9a:	e051      	b.n	8002040 <TIM_EnableOCx+0xdc>
	{
	case 0:
		MODIFY_REG(tim->Instance->CCMR1, TIM_CCMRx_MSK, mode);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	227f      	movs	r2, #127	; 0x7f
 8001fa4:	4393      	bics	r3, r2
 8001fa6:	0019      	movs	r1, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	619a      	str	r2, [r3, #24]
		MODIFY_REG(tim->Instance->CCER, TIM_CCER_CC1P, TIM_OCPOLARITY_HIGH);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6a1a      	ldr	r2, [r3, #32]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2102      	movs	r1, #2
 8001fbe:	438a      	bics	r2, r1
 8001fc0:	621a      	str	r2, [r3, #32]
		break;
 8001fc2:	e03d      	b.n	8002040 <TIM_EnableOCx+0xdc>
	case 1:
		MODIFY_REG(tim->Instance->CCMR1, TIM_CCMRx_MSK << 8, mode << 8);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	4a25      	ldr	r2, [pc, #148]	; (8002060 <TIM_EnableOCx+0xfc>)
 8001fcc:	4013      	ands	r3, r2
 8001fce:	0019      	movs	r1, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	021a      	lsls	r2, r3, #8
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	619a      	str	r2, [r3, #24]
		MODIFY_REG(tim->Instance->CCER, TIM_CCER_CC2P, TIM_OCPOLARITY_HIGH << 4);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6a1a      	ldr	r2, [r3, #32]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2120      	movs	r1, #32
 8001fe8:	438a      	bics	r2, r1
 8001fea:	621a      	str	r2, [r3, #32]
		break;
 8001fec:	e028      	b.n	8002040 <TIM_EnableOCx+0xdc>
	case 2:
		MODIFY_REG(tim->Instance->CCMR2, TIM_CCMRx_MSK, mode);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	69db      	ldr	r3, [r3, #28]
 8001ff4:	227f      	movs	r2, #127	; 0x7f
 8001ff6:	4393      	bics	r3, r2
 8001ff8:	0019      	movs	r1, r3
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	430a      	orrs	r2, r1
 8002002:	61da      	str	r2, [r3, #28]
		MODIFY_REG(tim->Instance->CCER, TIM_CCER_CC3P, TIM_OCPOLARITY_HIGH << 8);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6a1a      	ldr	r2, [r3, #32]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4915      	ldr	r1, [pc, #84]	; (8002064 <TIM_EnableOCx+0x100>)
 8002010:	400a      	ands	r2, r1
 8002012:	621a      	str	r2, [r3, #32]
		break;
 8002014:	e014      	b.n	8002040 <TIM_EnableOCx+0xdc>
	case 3:
		MODIFY_REG(tim->Instance->CCMR2, TIM_CCMRx_MSK << 8, mode << 8);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	69db      	ldr	r3, [r3, #28]
 800201c:	4a10      	ldr	r2, [pc, #64]	; (8002060 <TIM_EnableOCx+0xfc>)
 800201e:	4013      	ands	r3, r2
 8002020:	0019      	movs	r1, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	021a      	lsls	r2, r3, #8
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	430a      	orrs	r2, r1
 800202c:	61da      	str	r2, [r3, #28]
		MODIFY_REG(tim->Instance->CCER, TIM_CCER_CC4P, TIM_OCPOLARITY_HIGH << 12);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6a1a      	ldr	r2, [r3, #32]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	490b      	ldr	r1, [pc, #44]	; (8002068 <TIM_EnableOCx+0x104>)
 800203a:	400a      	ands	r2, r1
 800203c:	621a      	str	r2, [r3, #32]
		break;
 800203e:	46c0      	nop			; (mov r8, r8)
	}
	TIM_ENABLE_CCx(tim, oc);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6a19      	ldr	r1, [r3, #32]
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	2201      	movs	r2, #1
 800204c:	409a      	lsls	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	430a      	orrs	r2, r1
 8002054:	621a      	str	r2, [r3, #32]
	//	MODIFY_REG(tmpcr2, TIM_CR2_OIS1 | TIM_CR2_OIS1N, TIM_OCIDLESTATE_SET | TIM_OCNIDLESTATE_SET);
	//	TIMx->CR2 = tmpcr2;
	//}


}
 8002056:	46c0      	nop			; (mov r8, r8)
 8002058:	46bd      	mov	sp, r7
 800205a:	b004      	add	sp, #16
 800205c:	bd80      	pop	{r7, pc}
 800205e:	46c0      	nop			; (mov r8, r8)
 8002060:	ffff80ff 	.word	0xffff80ff
 8002064:	fffffdff 	.word	0xfffffdff
 8002068:	ffffdfff 	.word	0xffffdfff

0800206c <TIM_Reload>:

static void TIM_Reload(TIM_t * tim)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
	// Disable all timer event sources.
	uint32_t itSources = tim->Instance->DIER;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	60fb      	str	r3, [r7, #12]
	tim->Instance->DIER = 0;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2200      	movs	r2, #0
 8002082:	60da      	str	r2, [r3, #12]

	// Update the prescalar
	tim->Instance->EGR = TIM_EGR_UG;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2201      	movs	r2, #1
 800208a:	615a      	str	r2, [r3, #20]

	// Clear the event before it occurrs.
	__HAL_TIM_CLEAR_IT(tim, TIM_IT_UPDATE);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2202      	movs	r2, #2
 8002092:	4252      	negs	r2, r2
 8002094:	611a      	str	r2, [r3, #16]
	tim->Instance->DIER = itSources;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	60da      	str	r2, [r3, #12]
}
 800209e:	46c0      	nop			; (mov r8, r8)
 80020a0:	46bd      	mov	sp, r7
 80020a2:	b004      	add	sp, #16
 80020a4:	bd80      	pop	{r7, pc}
	...

080020a8 <TIMx_Init>:

static void TIMx_Init(TIM_t * tim)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
		__HAL_RCC_TIM1_CLK_ENABLE();
	}

#endif
#ifdef TIM2_ENABLE
	if (tim == TIM_2)
 80020b0:	4b1d      	ldr	r3, [pc, #116]	; (8002128 <TIMx_Init+0x80>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d108      	bne.n	80020cc <TIMx_Init+0x24>
	{
		HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020ba:	200f      	movs	r0, #15
 80020bc:	f7ff f933 	bl	8001326 <HAL_NVIC_EnableIRQ>
		__HAL_RCC_TIM2_CLK_ENABLE();
 80020c0:	4b1a      	ldr	r3, [pc, #104]	; (800212c <TIMx_Init+0x84>)
 80020c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020c4:	4b19      	ldr	r3, [pc, #100]	; (800212c <TIMx_Init+0x84>)
 80020c6:	2101      	movs	r1, #1
 80020c8:	430a      	orrs	r2, r1
 80020ca:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
		__HAL_RCC_TIM3_CLK_ENABLE();
	}
#endif
#ifdef TIM6_ENABLE
	if (tim == TIM_6)
 80020cc:	4b18      	ldr	r3, [pc, #96]	; (8002130 <TIMx_Init+0x88>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d108      	bne.n	80020e8 <TIMx_Init+0x40>
	{
		HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80020d6:	2011      	movs	r0, #17
 80020d8:	f7ff f925 	bl	8001326 <HAL_NVIC_EnableIRQ>
		__HAL_RCC_TIM6_CLK_ENABLE();
 80020dc:	4b13      	ldr	r3, [pc, #76]	; (800212c <TIMx_Init+0x84>)
 80020de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020e0:	4b12      	ldr	r3, [pc, #72]	; (800212c <TIMx_Init+0x84>)
 80020e2:	2110      	movs	r1, #16
 80020e4:	430a      	orrs	r2, r1
 80020e6:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_NVIC_EnableIRQ(TIM17_IRQn);
		__HAL_RCC_TIM17_CLK_ENABLE();
	}
#endif
#ifdef TIM21_ENABLE
	if (tim == TIM_21)
 80020e8:	4b12      	ldr	r3, [pc, #72]	; (8002134 <TIMx_Init+0x8c>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d108      	bne.n	8002104 <TIMx_Init+0x5c>
	{
		HAL_NVIC_EnableIRQ(TIM21_IRQn);
 80020f2:	2014      	movs	r0, #20
 80020f4:	f7ff f917 	bl	8001326 <HAL_NVIC_EnableIRQ>
		__HAL_RCC_TIM21_CLK_ENABLE();
 80020f8:	4b0c      	ldr	r3, [pc, #48]	; (800212c <TIMx_Init+0x84>)
 80020fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020fc:	4b0b      	ldr	r3, [pc, #44]	; (800212c <TIMx_Init+0x84>)
 80020fe:	2104      	movs	r1, #4
 8002100:	430a      	orrs	r2, r1
 8002102:	635a      	str	r2, [r3, #52]	; 0x34
	}
#endif
#ifdef TIM22_ENABLE
	if (tim == TIM_22)
 8002104:	4b0c      	ldr	r3, [pc, #48]	; (8002138 <TIMx_Init+0x90>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	429a      	cmp	r2, r3
 800210c:	d108      	bne.n	8002120 <TIMx_Init+0x78>
	{
		HAL_NVIC_EnableIRQ(TIM22_IRQn);
 800210e:	2016      	movs	r0, #22
 8002110:	f7ff f909 	bl	8001326 <HAL_NVIC_EnableIRQ>
		__HAL_RCC_TIM22_CLK_ENABLE();
 8002114:	4b05      	ldr	r3, [pc, #20]	; (800212c <TIMx_Init+0x84>)
 8002116:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002118:	4b04      	ldr	r3, [pc, #16]	; (800212c <TIMx_Init+0x84>)
 800211a:	2120      	movs	r1, #32
 800211c:	430a      	orrs	r2, r1
 800211e:	635a      	str	r2, [r3, #52]	; 0x34
	}
#endif
}
 8002120:	46c0      	nop			; (mov r8, r8)
 8002122:	46bd      	mov	sp, r7
 8002124:	b002      	add	sp, #8
 8002126:	bd80      	pop	{r7, pc}
 8002128:	20000028 	.word	0x20000028
 800212c:	40021000 	.word	0x40021000
 8002130:	20000044 	.word	0x20000044
 8002134:	20000060 	.word	0x20000060
 8002138:	2000007c 	.word	0x2000007c

0800213c <TIM_IRQHandler>:
 */

#ifdef TIM_USE_IRQS

static void TIM_IRQHandler(TIM_t * tim)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
	uint32_t irqs = TIM_GET_IRQ_SOURCES(tim);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	691a      	ldr	r2, [r3, #16]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	4013      	ands	r3, r2
 8002152:	60fb      	str	r3, [r7, #12]
	if(irqs & TIM_FLAG_CC1)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2202      	movs	r2, #2
 8002158:	4013      	ands	r3, r2
 800215a:	d007      	beq.n	800216c <TIM_IRQHandler+0x30>
	{
		__HAL_TIM_CLEAR_IT(tim, TIM_IT_CC1);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2203      	movs	r2, #3
 8002162:	4252      	negs	r2, r2
 8002164:	611a      	str	r2, [r3, #16]
		tim->PulseCallback[0]();
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	4798      	blx	r3
	}
	if(irqs & TIM_FLAG_CC2)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2204      	movs	r2, #4
 8002170:	4013      	ands	r3, r2
 8002172:	d007      	beq.n	8002184 <TIM_IRQHandler+0x48>
	{
		__HAL_TIM_CLEAR_IT(tim, TIM_IT_CC2);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2205      	movs	r2, #5
 800217a:	4252      	negs	r2, r2
 800217c:	611a      	str	r2, [r3, #16]
		tim->PulseCallback[1]();
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	4798      	blx	r3
	}
	if(irqs & TIM_FLAG_CC3)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2208      	movs	r2, #8
 8002188:	4013      	ands	r3, r2
 800218a:	d007      	beq.n	800219c <TIM_IRQHandler+0x60>
	{
		__HAL_TIM_CLEAR_IT(tim, TIM_IT_CC3);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2209      	movs	r2, #9
 8002192:	4252      	negs	r2, r2
 8002194:	611a      	str	r2, [r3, #16]
		tim->PulseCallback[2]();
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	4798      	blx	r3
	}
	if(irqs & TIM_FLAG_CC4)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2210      	movs	r2, #16
 80021a0:	4013      	ands	r3, r2
 80021a2:	d007      	beq.n	80021b4 <TIM_IRQHandler+0x78>
	{
		__HAL_TIM_CLEAR_IT(tim, TIM_IT_CC4);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2211      	movs	r2, #17
 80021aa:	4252      	negs	r2, r2
 80021ac:	611a      	str	r2, [r3, #16]
		tim->PulseCallback[3]();
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	4798      	blx	r3
	}
	if(irqs & TIM_FLAG_UPDATE)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2201      	movs	r2, #1
 80021b8:	4013      	ands	r3, r2
 80021ba:	d007      	beq.n	80021cc <TIM_IRQHandler+0x90>
	{
		__HAL_TIM_CLEAR_IT(tim, TIM_IT_UPDATE);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2202      	movs	r2, #2
 80021c2:	4252      	negs	r2, r2
 80021c4:	611a      	str	r2, [r3, #16]
		tim->ReloadCallback();
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	4798      	blx	r3
	}
}
 80021cc:	46c0      	nop			; (mov r8, r8)
 80021ce:	46bd      	mov	sp, r7
 80021d0:	b004      	add	sp, #16
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <TIM2_IRQHandler>:
	TIM_IRQHandler(TIM_1);
}
#endif
#ifdef TIM2_ENABLE
void TIM2_IRQHandler(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
	TIM_IRQHandler(TIM_2);
 80021d8:	4b03      	ldr	r3, [pc, #12]	; (80021e8 <TIM2_IRQHandler+0x14>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	0018      	movs	r0, r3
 80021de:	f7ff ffad 	bl	800213c <TIM_IRQHandler>
}
 80021e2:	46c0      	nop			; (mov r8, r8)
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	20000028 	.word	0x20000028

080021ec <TIM6_IRQHandler>:
	TIM_IRQHandler(TIM_3);
}
#endif
#ifdef TIM6_ENABLE
void TIM6_IRQHandler(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
	TIM_IRQHandler(TIM_6);
 80021f0:	4b03      	ldr	r3, [pc, #12]	; (8002200 <TIM6_IRQHandler+0x14>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	0018      	movs	r0, r3
 80021f6:	f7ff ffa1 	bl	800213c <TIM_IRQHandler>
}
 80021fa:	46c0      	nop			; (mov r8, r8)
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	20000044 	.word	0x20000044

08002204 <TIM21_IRQHandler>:
	TIM_IRQHandler(TIM_17);
}
#endif
#ifdef TIM21_ENABLE
void TIM21_IRQHandler(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
	TIM_IRQHandler(TIM_21);
 8002208:	4b03      	ldr	r3, [pc, #12]	; (8002218 <TIM21_IRQHandler+0x14>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	0018      	movs	r0, r3
 800220e:	f7ff ff95 	bl	800213c <TIM_IRQHandler>
}
 8002212:	46c0      	nop			; (mov r8, r8)
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	20000060 	.word	0x20000060

0800221c <TIM22_IRQHandler>:
#endif
#ifdef TIM22_ENABLE
void TIM22_IRQHandler(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
	TIM_IRQHandler(TIM_22);
 8002220:	4b03      	ldr	r3, [pc, #12]	; (8002230 <TIM22_IRQHandler+0x14>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	0018      	movs	r0, r3
 8002226:	f7ff ff89 	bl	800213c <TIM_IRQHandler>
}
 800222a:	46c0      	nop			; (mov r8, r8)
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	2000007c 	.word	0x2000007c

08002234 <UART_IRQHandler>:
 * INTERRUPT ROUTINES
 */


void UART_IRQHandler(UART_t *uart)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
	uint32_t flags = uart->Instance->ISR;
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	2388      	movs	r3, #136	; 0x88
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	58d3      	ldr	r3, [r2, r3]
 8002244:	69db      	ldr	r3, [r3, #28]
 8002246:	60fb      	str	r3, [r7, #12]

	if (flags & USART_ISR_RXNE)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2220      	movs	r2, #32
 800224c:	4013      	ands	r3, r2
 800224e:	d031      	beq.n	80022b4 <UART_IRQHandler+0x80>
	{
		// New RX data. Put it in the RX buffer.
		uart->rx.buffer[uart->rx.head] = uart->Instance->RDR;
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	2388      	movs	r3, #136	; 0x88
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	58d3      	ldr	r3, [r2, r3]
 8002258:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	2384      	movs	r3, #132	; 0x84
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	58d3      	ldr	r3, [r2, r3]
 8002262:	b2c8      	uxtb	r0, r1
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	2188      	movs	r1, #136	; 0x88
 8002268:	18d3      	adds	r3, r2, r3
 800226a:	185b      	adds	r3, r3, r1
 800226c:	1c02      	adds	r2, r0, #0
 800226e:	701a      	strb	r2, [r3, #0]
		uart->rx.head = UART_BFR_WRAP(uart->rx.head + 1);
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	2384      	movs	r3, #132	; 0x84
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	58d3      	ldr	r3, [r2, r3]
 8002278:	3301      	adds	r3, #1
 800227a:	227f      	movs	r2, #127	; 0x7f
 800227c:	4013      	ands	r3, r2
 800227e:	0019      	movs	r1, r3
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	2384      	movs	r3, #132	; 0x84
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	50d1      	str	r1, [r2, r3]
		if (uart->rx.head == uart->rx.tail) {
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	2384      	movs	r3, #132	; 0x84
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	58d2      	ldr	r2, [r2, r3]
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	2386      	movs	r3, #134	; 0x86
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	58cb      	ldr	r3, [r1, r3]
 8002298:	429a      	cmp	r2, r3
 800229a:	d10b      	bne.n	80022b4 <UART_IRQHandler+0x80>
			// The head just caught up with the tail. Uh oh. Increment the tail.
			// Note, this causes flaming huge issues.
			uart->rx.tail = UART_BFR_WRAP(uart->rx.tail + 1);
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	2386      	movs	r3, #134	; 0x86
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	58d3      	ldr	r3, [r2, r3]
 80022a4:	3301      	adds	r3, #1
 80022a6:	227f      	movs	r2, #127	; 0x7f
 80022a8:	4013      	ands	r3, r2
 80022aa:	0019      	movs	r1, r3
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	2386      	movs	r3, #134	; 0x86
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	50d1      	str	r1, [r2, r3]
		}
	}

	if (flags & USART_ISR_TXE)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2280      	movs	r2, #128	; 0x80
 80022b8:	4013      	ands	r3, r2
 80022ba:	d028      	beq.n	800230e <UART_IRQHandler+0xda>
	{
		// No byte being transmitted..
		if (uart->tx.head != uart->tx.tail)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2280      	movs	r2, #128	; 0x80
 80022c0:	589a      	ldr	r2, [r3, r2]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2184      	movs	r1, #132	; 0x84
 80022c6:	585b      	ldr	r3, [r3, r1]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d014      	beq.n	80022f6 <UART_IRQHandler+0xc2>
		{
			// Send a byte out.
			uart->Instance->TDR = uart->tx.buffer[uart->tx.tail];
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2284      	movs	r2, #132	; 0x84
 80022d0:	589b      	ldr	r3, [r3, r2]
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	5cd1      	ldrb	r1, [r2, r3]
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	2388      	movs	r3, #136	; 0x88
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	58d3      	ldr	r3, [r2, r3]
 80022de:	000a      	movs	r2, r1
 80022e0:	629a      	str	r2, [r3, #40]	; 0x28
			uart->tx.tail = UART_BFR_WRAP(uart->tx.tail + 1);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2284      	movs	r2, #132	; 0x84
 80022e6:	589b      	ldr	r3, [r3, r2]
 80022e8:	3301      	adds	r3, #1
 80022ea:	227f      	movs	r2, #127	; 0x7f
 80022ec:	401a      	ands	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2184      	movs	r1, #132	; 0x84
 80022f2:	505a      	str	r2, [r3, r1]
 80022f4:	e00b      	b.n	800230e <UART_IRQHandler+0xda>
		}
		else
		{
			// Tail caught up with head: no bytes remain.
			// Disable the TX IRQ.
			__UART_TX_DISABLE(uart);
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	2388      	movs	r3, #136	; 0x88
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	58d3      	ldr	r3, [r2, r3]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	6879      	ldr	r1, [r7, #4]
 8002302:	2388      	movs	r3, #136	; 0x88
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	58cb      	ldr	r3, [r1, r3]
 8002308:	2180      	movs	r1, #128	; 0x80
 800230a:	438a      	bics	r2, r1
 800230c:	601a      	str	r2, [r3, #0]
		}
	}

	if (flags & (USART_ISR_ORE | USART_ISR_PE | USART_ISR_NE | USART_ISR_FE))
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	220f      	movs	r2, #15
 8002312:	4013      	ands	r3, r2
 8002314:	d00b      	beq.n	800232e <UART_IRQHandler+0xfa>
	{
		__UART_CLEAR_FLAGS(uart, (UART_CLEAR_PEF | UART_CLEAR_FEF | UART_CLEAR_NEF | UART_CLEAR_OREF));
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	2388      	movs	r3, #136	; 0x88
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	58d3      	ldr	r3, [r2, r3]
 800231e:	6a1a      	ldr	r2, [r3, #32]
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	2388      	movs	r3, #136	; 0x88
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	58cb      	ldr	r3, [r1, r3]
 8002328:	210f      	movs	r1, #15
 800232a:	430a      	orrs	r2, r1
 800232c:	621a      	str	r2, [r3, #32]
	}
}
 800232e:	46c0      	nop			; (mov r8, r8)
 8002330:	46bd      	mov	sp, r7
 8002332:	b004      	add	sp, #16
 8002334:	bd80      	pop	{r7, pc}
	...

08002338 <USART1_IRQHandler>:
	UART_IRQHandler(UART_LP);
}
#endif
#ifdef UART1_GPIO
void USART1_IRQHandler(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
	UART_IRQHandler(UART_1);
 800233c:	4b03      	ldr	r3, [pc, #12]	; (800234c <USART1_IRQHandler+0x14>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	0018      	movs	r0, r3
 8002342:	f7ff ff77 	bl	8002234 <UART_IRQHandler>
}
 8002346:	46c0      	nop			; (mov r8, r8)
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	20000194 	.word	0x20000194

08002350 <__libc_init_array>:
 8002350:	b570      	push	{r4, r5, r6, lr}
 8002352:	2600      	movs	r6, #0
 8002354:	4d0c      	ldr	r5, [pc, #48]	; (8002388 <__libc_init_array+0x38>)
 8002356:	4c0d      	ldr	r4, [pc, #52]	; (800238c <__libc_init_array+0x3c>)
 8002358:	1b64      	subs	r4, r4, r5
 800235a:	10a4      	asrs	r4, r4, #2
 800235c:	42a6      	cmp	r6, r4
 800235e:	d109      	bne.n	8002374 <__libc_init_array+0x24>
 8002360:	2600      	movs	r6, #0
 8002362:	f000 f823 	bl	80023ac <_init>
 8002366:	4d0a      	ldr	r5, [pc, #40]	; (8002390 <__libc_init_array+0x40>)
 8002368:	4c0a      	ldr	r4, [pc, #40]	; (8002394 <__libc_init_array+0x44>)
 800236a:	1b64      	subs	r4, r4, r5
 800236c:	10a4      	asrs	r4, r4, #2
 800236e:	42a6      	cmp	r6, r4
 8002370:	d105      	bne.n	800237e <__libc_init_array+0x2e>
 8002372:	bd70      	pop	{r4, r5, r6, pc}
 8002374:	00b3      	lsls	r3, r6, #2
 8002376:	58eb      	ldr	r3, [r5, r3]
 8002378:	4798      	blx	r3
 800237a:	3601      	adds	r6, #1
 800237c:	e7ee      	b.n	800235c <__libc_init_array+0xc>
 800237e:	00b3      	lsls	r3, r6, #2
 8002380:	58eb      	ldr	r3, [r5, r3]
 8002382:	4798      	blx	r3
 8002384:	3601      	adds	r6, #1
 8002386:	e7f2      	b.n	800236e <__libc_init_array+0x1e>
 8002388:	080023c4 	.word	0x080023c4
 800238c:	080023c4 	.word	0x080023c4
 8002390:	080023c4 	.word	0x080023c4
 8002394:	080023c8 	.word	0x080023c8

08002398 <memcpy>:
 8002398:	2300      	movs	r3, #0
 800239a:	b510      	push	{r4, lr}
 800239c:	429a      	cmp	r2, r3
 800239e:	d100      	bne.n	80023a2 <memcpy+0xa>
 80023a0:	bd10      	pop	{r4, pc}
 80023a2:	5ccc      	ldrb	r4, [r1, r3]
 80023a4:	54c4      	strb	r4, [r0, r3]
 80023a6:	3301      	adds	r3, #1
 80023a8:	e7f8      	b.n	800239c <memcpy+0x4>
	...

080023ac <_init>:
 80023ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ae:	46c0      	nop			; (mov r8, r8)
 80023b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023b2:	bc08      	pop	{r3}
 80023b4:	469e      	mov	lr, r3
 80023b6:	4770      	bx	lr

080023b8 <_fini>:
 80023b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ba:	46c0      	nop			; (mov r8, r8)
 80023bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023be:	bc08      	pop	{r3}
 80023c0:	469e      	mov	lr, r3
 80023c2:	4770      	bx	lr
