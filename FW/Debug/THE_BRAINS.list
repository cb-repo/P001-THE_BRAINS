
THE_BRAINS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002674  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002734  08002734  00012734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002758  08002758  000200c4  2**0
                  CONTENTS
  4 .ARM          00000008  08002758  08002758  00012758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002760  08002760  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002760  08002760  00012760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002764  08002764  00012764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  08002768  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  200000c4  0800282c  000200c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  0800282c  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000055db  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000175b  00000000  00000000  000256c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000600  00000000  00000000  00026e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000538  00000000  00000000  00027428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001a93  00000000  00000000  00027960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000077b2  00000000  00000000  000293f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00072849  00000000  00000000  00030ba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a33ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000013ac  00000000  00000000  000a3444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000c4 	.word	0x200000c4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800271c 	.word	0x0800271c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000c8 	.word	0x200000c8
 8000104:	0800271c 	.word	0x0800271c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	1c08      	adds	r0, r1, #0
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	; (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f82e 	bl	8000484 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_lmul>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	0415      	lsls	r5, r2, #16
 8000438:	0c2d      	lsrs	r5, r5, #16
 800043a:	000f      	movs	r7, r1
 800043c:	0001      	movs	r1, r0
 800043e:	002e      	movs	r6, r5
 8000440:	46c6      	mov	lr, r8
 8000442:	4684      	mov	ip, r0
 8000444:	0400      	lsls	r0, r0, #16
 8000446:	0c14      	lsrs	r4, r2, #16
 8000448:	0c00      	lsrs	r0, r0, #16
 800044a:	0c09      	lsrs	r1, r1, #16
 800044c:	4346      	muls	r6, r0
 800044e:	434d      	muls	r5, r1
 8000450:	4360      	muls	r0, r4
 8000452:	4361      	muls	r1, r4
 8000454:	1940      	adds	r0, r0, r5
 8000456:	0c34      	lsrs	r4, r6, #16
 8000458:	1824      	adds	r4, r4, r0
 800045a:	b500      	push	{lr}
 800045c:	42a5      	cmp	r5, r4
 800045e:	d903      	bls.n	8000468 <__aeabi_lmul+0x34>
 8000460:	2080      	movs	r0, #128	; 0x80
 8000462:	0240      	lsls	r0, r0, #9
 8000464:	4680      	mov	r8, r0
 8000466:	4441      	add	r1, r8
 8000468:	0c25      	lsrs	r5, r4, #16
 800046a:	186d      	adds	r5, r5, r1
 800046c:	4661      	mov	r1, ip
 800046e:	4359      	muls	r1, r3
 8000470:	437a      	muls	r2, r7
 8000472:	0430      	lsls	r0, r6, #16
 8000474:	1949      	adds	r1, r1, r5
 8000476:	0424      	lsls	r4, r4, #16
 8000478:	0c00      	lsrs	r0, r0, #16
 800047a:	1820      	adds	r0, r4, r0
 800047c:	1889      	adds	r1, r1, r2
 800047e:	bc80      	pop	{r7}
 8000480:	46b8      	mov	r8, r7
 8000482:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000484 <__udivmoddi4>:
 8000484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000486:	4657      	mov	r7, sl
 8000488:	464e      	mov	r6, r9
 800048a:	4645      	mov	r5, r8
 800048c:	46de      	mov	lr, fp
 800048e:	b5e0      	push	{r5, r6, r7, lr}
 8000490:	0004      	movs	r4, r0
 8000492:	000d      	movs	r5, r1
 8000494:	4692      	mov	sl, r2
 8000496:	4699      	mov	r9, r3
 8000498:	b083      	sub	sp, #12
 800049a:	428b      	cmp	r3, r1
 800049c:	d830      	bhi.n	8000500 <__udivmoddi4+0x7c>
 800049e:	d02d      	beq.n	80004fc <__udivmoddi4+0x78>
 80004a0:	4649      	mov	r1, r9
 80004a2:	4650      	mov	r0, sl
 80004a4:	f000 f8ba 	bl	800061c <__clzdi2>
 80004a8:	0029      	movs	r1, r5
 80004aa:	0006      	movs	r6, r0
 80004ac:	0020      	movs	r0, r4
 80004ae:	f000 f8b5 	bl	800061c <__clzdi2>
 80004b2:	1a33      	subs	r3, r6, r0
 80004b4:	4698      	mov	r8, r3
 80004b6:	3b20      	subs	r3, #32
 80004b8:	469b      	mov	fp, r3
 80004ba:	d433      	bmi.n	8000524 <__udivmoddi4+0xa0>
 80004bc:	465a      	mov	r2, fp
 80004be:	4653      	mov	r3, sl
 80004c0:	4093      	lsls	r3, r2
 80004c2:	4642      	mov	r2, r8
 80004c4:	001f      	movs	r7, r3
 80004c6:	4653      	mov	r3, sl
 80004c8:	4093      	lsls	r3, r2
 80004ca:	001e      	movs	r6, r3
 80004cc:	42af      	cmp	r7, r5
 80004ce:	d83a      	bhi.n	8000546 <__udivmoddi4+0xc2>
 80004d0:	42af      	cmp	r7, r5
 80004d2:	d100      	bne.n	80004d6 <__udivmoddi4+0x52>
 80004d4:	e078      	b.n	80005c8 <__udivmoddi4+0x144>
 80004d6:	465b      	mov	r3, fp
 80004d8:	1ba4      	subs	r4, r4, r6
 80004da:	41bd      	sbcs	r5, r7
 80004dc:	2b00      	cmp	r3, #0
 80004de:	da00      	bge.n	80004e2 <__udivmoddi4+0x5e>
 80004e0:	e075      	b.n	80005ce <__udivmoddi4+0x14a>
 80004e2:	2200      	movs	r2, #0
 80004e4:	2300      	movs	r3, #0
 80004e6:	9200      	str	r2, [sp, #0]
 80004e8:	9301      	str	r3, [sp, #4]
 80004ea:	2301      	movs	r3, #1
 80004ec:	465a      	mov	r2, fp
 80004ee:	4093      	lsls	r3, r2
 80004f0:	9301      	str	r3, [sp, #4]
 80004f2:	2301      	movs	r3, #1
 80004f4:	4642      	mov	r2, r8
 80004f6:	4093      	lsls	r3, r2
 80004f8:	9300      	str	r3, [sp, #0]
 80004fa:	e028      	b.n	800054e <__udivmoddi4+0xca>
 80004fc:	4282      	cmp	r2, r0
 80004fe:	d9cf      	bls.n	80004a0 <__udivmoddi4+0x1c>
 8000500:	2200      	movs	r2, #0
 8000502:	2300      	movs	r3, #0
 8000504:	9200      	str	r2, [sp, #0]
 8000506:	9301      	str	r3, [sp, #4]
 8000508:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <__udivmoddi4+0x8e>
 800050e:	601c      	str	r4, [r3, #0]
 8000510:	605d      	str	r5, [r3, #4]
 8000512:	9800      	ldr	r0, [sp, #0]
 8000514:	9901      	ldr	r1, [sp, #4]
 8000516:	b003      	add	sp, #12
 8000518:	bcf0      	pop	{r4, r5, r6, r7}
 800051a:	46bb      	mov	fp, r7
 800051c:	46b2      	mov	sl, r6
 800051e:	46a9      	mov	r9, r5
 8000520:	46a0      	mov	r8, r4
 8000522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000524:	4642      	mov	r2, r8
 8000526:	2320      	movs	r3, #32
 8000528:	1a9b      	subs	r3, r3, r2
 800052a:	4652      	mov	r2, sl
 800052c:	40da      	lsrs	r2, r3
 800052e:	4641      	mov	r1, r8
 8000530:	0013      	movs	r3, r2
 8000532:	464a      	mov	r2, r9
 8000534:	408a      	lsls	r2, r1
 8000536:	0017      	movs	r7, r2
 8000538:	4642      	mov	r2, r8
 800053a:	431f      	orrs	r7, r3
 800053c:	4653      	mov	r3, sl
 800053e:	4093      	lsls	r3, r2
 8000540:	001e      	movs	r6, r3
 8000542:	42af      	cmp	r7, r5
 8000544:	d9c4      	bls.n	80004d0 <__udivmoddi4+0x4c>
 8000546:	2200      	movs	r2, #0
 8000548:	2300      	movs	r3, #0
 800054a:	9200      	str	r2, [sp, #0]
 800054c:	9301      	str	r3, [sp, #4]
 800054e:	4643      	mov	r3, r8
 8000550:	2b00      	cmp	r3, #0
 8000552:	d0d9      	beq.n	8000508 <__udivmoddi4+0x84>
 8000554:	07fb      	lsls	r3, r7, #31
 8000556:	0872      	lsrs	r2, r6, #1
 8000558:	431a      	orrs	r2, r3
 800055a:	4646      	mov	r6, r8
 800055c:	087b      	lsrs	r3, r7, #1
 800055e:	e00e      	b.n	800057e <__udivmoddi4+0xfa>
 8000560:	42ab      	cmp	r3, r5
 8000562:	d101      	bne.n	8000568 <__udivmoddi4+0xe4>
 8000564:	42a2      	cmp	r2, r4
 8000566:	d80c      	bhi.n	8000582 <__udivmoddi4+0xfe>
 8000568:	1aa4      	subs	r4, r4, r2
 800056a:	419d      	sbcs	r5, r3
 800056c:	2001      	movs	r0, #1
 800056e:	1924      	adds	r4, r4, r4
 8000570:	416d      	adcs	r5, r5
 8000572:	2100      	movs	r1, #0
 8000574:	3e01      	subs	r6, #1
 8000576:	1824      	adds	r4, r4, r0
 8000578:	414d      	adcs	r5, r1
 800057a:	2e00      	cmp	r6, #0
 800057c:	d006      	beq.n	800058c <__udivmoddi4+0x108>
 800057e:	42ab      	cmp	r3, r5
 8000580:	d9ee      	bls.n	8000560 <__udivmoddi4+0xdc>
 8000582:	3e01      	subs	r6, #1
 8000584:	1924      	adds	r4, r4, r4
 8000586:	416d      	adcs	r5, r5
 8000588:	2e00      	cmp	r6, #0
 800058a:	d1f8      	bne.n	800057e <__udivmoddi4+0xfa>
 800058c:	9800      	ldr	r0, [sp, #0]
 800058e:	9901      	ldr	r1, [sp, #4]
 8000590:	465b      	mov	r3, fp
 8000592:	1900      	adds	r0, r0, r4
 8000594:	4169      	adcs	r1, r5
 8000596:	2b00      	cmp	r3, #0
 8000598:	db24      	blt.n	80005e4 <__udivmoddi4+0x160>
 800059a:	002b      	movs	r3, r5
 800059c:	465a      	mov	r2, fp
 800059e:	4644      	mov	r4, r8
 80005a0:	40d3      	lsrs	r3, r2
 80005a2:	002a      	movs	r2, r5
 80005a4:	40e2      	lsrs	r2, r4
 80005a6:	001c      	movs	r4, r3
 80005a8:	465b      	mov	r3, fp
 80005aa:	0015      	movs	r5, r2
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	db2a      	blt.n	8000606 <__udivmoddi4+0x182>
 80005b0:	0026      	movs	r6, r4
 80005b2:	409e      	lsls	r6, r3
 80005b4:	0033      	movs	r3, r6
 80005b6:	0026      	movs	r6, r4
 80005b8:	4647      	mov	r7, r8
 80005ba:	40be      	lsls	r6, r7
 80005bc:	0032      	movs	r2, r6
 80005be:	1a80      	subs	r0, r0, r2
 80005c0:	4199      	sbcs	r1, r3
 80005c2:	9000      	str	r0, [sp, #0]
 80005c4:	9101      	str	r1, [sp, #4]
 80005c6:	e79f      	b.n	8000508 <__udivmoddi4+0x84>
 80005c8:	42a3      	cmp	r3, r4
 80005ca:	d8bc      	bhi.n	8000546 <__udivmoddi4+0xc2>
 80005cc:	e783      	b.n	80004d6 <__udivmoddi4+0x52>
 80005ce:	4642      	mov	r2, r8
 80005d0:	2320      	movs	r3, #32
 80005d2:	2100      	movs	r1, #0
 80005d4:	1a9b      	subs	r3, r3, r2
 80005d6:	2200      	movs	r2, #0
 80005d8:	9100      	str	r1, [sp, #0]
 80005da:	9201      	str	r2, [sp, #4]
 80005dc:	2201      	movs	r2, #1
 80005de:	40da      	lsrs	r2, r3
 80005e0:	9201      	str	r2, [sp, #4]
 80005e2:	e786      	b.n	80004f2 <__udivmoddi4+0x6e>
 80005e4:	4642      	mov	r2, r8
 80005e6:	2320      	movs	r3, #32
 80005e8:	1a9b      	subs	r3, r3, r2
 80005ea:	002a      	movs	r2, r5
 80005ec:	4646      	mov	r6, r8
 80005ee:	409a      	lsls	r2, r3
 80005f0:	0023      	movs	r3, r4
 80005f2:	40f3      	lsrs	r3, r6
 80005f4:	4644      	mov	r4, r8
 80005f6:	4313      	orrs	r3, r2
 80005f8:	002a      	movs	r2, r5
 80005fa:	40e2      	lsrs	r2, r4
 80005fc:	001c      	movs	r4, r3
 80005fe:	465b      	mov	r3, fp
 8000600:	0015      	movs	r5, r2
 8000602:	2b00      	cmp	r3, #0
 8000604:	dad4      	bge.n	80005b0 <__udivmoddi4+0x12c>
 8000606:	4642      	mov	r2, r8
 8000608:	002f      	movs	r7, r5
 800060a:	2320      	movs	r3, #32
 800060c:	0026      	movs	r6, r4
 800060e:	4097      	lsls	r7, r2
 8000610:	1a9b      	subs	r3, r3, r2
 8000612:	40de      	lsrs	r6, r3
 8000614:	003b      	movs	r3, r7
 8000616:	4333      	orrs	r3, r6
 8000618:	e7cd      	b.n	80005b6 <__udivmoddi4+0x132>
 800061a:	46c0      	nop			; (mov r8, r8)

0800061c <__clzdi2>:
 800061c:	b510      	push	{r4, lr}
 800061e:	2900      	cmp	r1, #0
 8000620:	d103      	bne.n	800062a <__clzdi2+0xe>
 8000622:	f000 f807 	bl	8000634 <__clzsi2>
 8000626:	3020      	adds	r0, #32
 8000628:	e002      	b.n	8000630 <__clzdi2+0x14>
 800062a:	1c08      	adds	r0, r1, #0
 800062c:	f000 f802 	bl	8000634 <__clzsi2>
 8000630:	bd10      	pop	{r4, pc}
 8000632:	46c0      	nop			; (mov r8, r8)

08000634 <__clzsi2>:
 8000634:	211c      	movs	r1, #28
 8000636:	2301      	movs	r3, #1
 8000638:	041b      	lsls	r3, r3, #16
 800063a:	4298      	cmp	r0, r3
 800063c:	d301      	bcc.n	8000642 <__clzsi2+0xe>
 800063e:	0c00      	lsrs	r0, r0, #16
 8000640:	3910      	subs	r1, #16
 8000642:	0a1b      	lsrs	r3, r3, #8
 8000644:	4298      	cmp	r0, r3
 8000646:	d301      	bcc.n	800064c <__clzsi2+0x18>
 8000648:	0a00      	lsrs	r0, r0, #8
 800064a:	3908      	subs	r1, #8
 800064c:	091b      	lsrs	r3, r3, #4
 800064e:	4298      	cmp	r0, r3
 8000650:	d301      	bcc.n	8000656 <__clzsi2+0x22>
 8000652:	0900      	lsrs	r0, r0, #4
 8000654:	3904      	subs	r1, #4
 8000656:	a202      	add	r2, pc, #8	; (adr r2, 8000660 <__clzsi2+0x2c>)
 8000658:	5c10      	ldrb	r0, [r2, r0]
 800065a:	1840      	adds	r0, r0, r1
 800065c:	4770      	bx	lr
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	02020304 	.word	0x02020304
 8000664:	01010101 	.word	0x01010101
	...

08000670 <MOTOR_Init>:
/*
 * PUBLIC FUNCTIONS
 */

void MOTOR_Init (void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af02      	add	r7, sp, #8
	TIM_Init(TIM_MOTOR, TIM_MOTOR_FREQ, TIM_MOTOR_RELOAD);
 8000676:	4b24      	ldr	r3, [pc, #144]	; (8000708 <MOTOR_Init+0x98>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4924      	ldr	r1, [pc, #144]	; (800070c <MOTOR_Init+0x9c>)
 800067c:	22ff      	movs	r2, #255	; 0xff
 800067e:	0018      	movs	r0, r3
 8000680:	f001 fdbe 	bl	8002200 <TIM_Init>

	GPIO_EnableOutput(MOTOR_LnSLEEP_GPIO, MOTOR_LnSLEEP_PIN, nSLEEP_LOWPOWER);
 8000684:	2380      	movs	r3, #128	; 0x80
 8000686:	005b      	lsls	r3, r3, #1
 8000688:	4821      	ldr	r0, [pc, #132]	; (8000710 <MOTOR_Init+0xa0>)
 800068a:	2200      	movs	r2, #0
 800068c:	0019      	movs	r1, r3
 800068e:	f001 fd03 	bl	8002098 <GPIO_EnableOutput>
	GPIO_EnableOutput(MOTOR_RnSLEEP_GPIO, MOTOR_RnSLEEP_PIN, nSLEEP_LOWPOWER);
 8000692:	4b1f      	ldr	r3, [pc, #124]	; (8000710 <MOTOR_Init+0xa0>)
 8000694:	2200      	movs	r2, #0
 8000696:	2104      	movs	r1, #4
 8000698:	0018      	movs	r0, r3
 800069a:	f001 fcfd 	bl	8002098 <GPIO_EnableOutput>

	TIM_EnablePwm(TIM_MOTOR, MOTOR_LPWM1_CH, MOTOR_LPWM1_GPIO, MOTOR_LPWM1_PIN, TIM_MOTOR_AF5);
 800069e:	4b1a      	ldr	r3, [pc, #104]	; (8000708 <MOTOR_Init+0x98>)
 80006a0:	6818      	ldr	r0, [r3, #0]
 80006a2:	2380      	movs	r3, #128	; 0x80
 80006a4:	021b      	lsls	r3, r3, #8
 80006a6:	22a0      	movs	r2, #160	; 0xa0
 80006a8:	05d2      	lsls	r2, r2, #23
 80006aa:	2105      	movs	r1, #5
 80006ac:	9100      	str	r1, [sp, #0]
 80006ae:	2100      	movs	r1, #0
 80006b0:	f001 fe2a 	bl	8002308 <TIM_EnablePwm>
	TIM_EnablePwm(TIM_MOTOR, MOTOR_LPWM2_CH, MOTOR_LPWM2_GPIO, MOTOR_LPWM2_PIN, TIM_MOTOR_AF2);
 80006b4:	4b14      	ldr	r3, [pc, #80]	; (8000708 <MOTOR_Init+0x98>)
 80006b6:	6818      	ldr	r0, [r3, #0]
 80006b8:	4a15      	ldr	r2, [pc, #84]	; (8000710 <MOTOR_Init+0xa0>)
 80006ba:	2302      	movs	r3, #2
 80006bc:	9300      	str	r3, [sp, #0]
 80006be:	2308      	movs	r3, #8
 80006c0:	2101      	movs	r1, #1
 80006c2:	f001 fe21 	bl	8002308 <TIM_EnablePwm>
	TIM_EnablePwm(TIM_MOTOR, MOTOR_RPWM1_CH, MOTOR_RPWM1_GPIO, MOTOR_RPWM1_PIN, TIM_MOTOR_AF2);
 80006c6:	4b10      	ldr	r3, [pc, #64]	; (8000708 <MOTOR_Init+0x98>)
 80006c8:	6818      	ldr	r0, [r3, #0]
 80006ca:	2380      	movs	r3, #128	; 0x80
 80006cc:	00db      	lsls	r3, r3, #3
 80006ce:	4910      	ldr	r1, [pc, #64]	; (8000710 <MOTOR_Init+0xa0>)
 80006d0:	2202      	movs	r2, #2
 80006d2:	9200      	str	r2, [sp, #0]
 80006d4:	000a      	movs	r2, r1
 80006d6:	2102      	movs	r1, #2
 80006d8:	f001 fe16 	bl	8002308 <TIM_EnablePwm>
	TIM_EnablePwm(TIM_MOTOR, MOTOR_RPWM2_CH, MOTOR_RPWM2_GPIO, MOTOR_RPWM2_PIN, TIM_MOTOR_AF2);
 80006dc:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <MOTOR_Init+0x98>)
 80006de:	6818      	ldr	r0, [r3, #0]
 80006e0:	2380      	movs	r3, #128	; 0x80
 80006e2:	011b      	lsls	r3, r3, #4
 80006e4:	490a      	ldr	r1, [pc, #40]	; (8000710 <MOTOR_Init+0xa0>)
 80006e6:	2202      	movs	r2, #2
 80006e8:	9200      	str	r2, [sp, #0]
 80006ea:	000a      	movs	r2, r1
 80006ec:	2103      	movs	r1, #3
 80006ee:	f001 fe0b 	bl	8002308 <TIM_EnablePwm>

	TIM_Start(TIM_MOTOR);
 80006f2:	4b05      	ldr	r3, [pc, #20]	; (8000708 <MOTOR_Init+0x98>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	0018      	movs	r0, r3
 80006f8:	f001 fe5e 	bl	80023b8 <TIM_Start>
	MOTOR_Stop();
 80006fc:	f000 f80a 	bl	8000714 <MOTOR_Stop>
}
 8000700:	46c0      	nop			; (mov r8, r8)
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	2000006c 	.word	0x2000006c
 800070c:	004e2000 	.word	0x004e2000
 8000710:	50000400 	.word	0x50000400

08000714 <MOTOR_Stop>:
	GPIO_Disable(MOTOR_RPWM2_GPIO, MOTOR_RPWM2_PIN);
	TIM_Deinit(TIM_MOTOR);
}

void MOTOR_Stop (void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
	MOTOR_M1_Update(MOTOR_OFF);
 8000718:	2000      	movs	r0, #0
 800071a:	f000 f853 	bl	80007c4 <MOTOR_M1_Update>
	MOTOR_M2_Update(MOTOR_OFF);
 800071e:	2000      	movs	r0, #0
 8000720:	f000 f898 	bl	8000854 <MOTOR_M2_Update>
}
 8000724:	46c0      	nop			; (mov r8, r8)
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}

0800072a <MOTOR_Update>:

void MOTOR_Update (int32_t M1, int32_t M2)
{
 800072a:	b580      	push	{r7, lr}
 800072c:	b082      	sub	sp, #8
 800072e:	af00      	add	r7, sp, #0
 8000730:	6078      	str	r0, [r7, #4]
 8000732:	6039      	str	r1, [r7, #0]
	MOTOR_M1_Update(M1);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	0018      	movs	r0, r3
 8000738:	f000 f844 	bl	80007c4 <MOTOR_M1_Update>
	MOTOR_M2_Update(M2);
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	0018      	movs	r0, r3
 8000740:	f000 f888 	bl	8000854 <MOTOR_M2_Update>
}
 8000744:	46c0      	nop			; (mov r8, r8)
 8000746:	46bd      	mov	sp, r7
 8000748:	b002      	add	sp, #8
 800074a:	bd80      	pop	{r7, pc}

0800074c <MOTOR_M1_Brake>:
	MOTOR_M1_Brake();
	MOTOR_M2_Brake();
}

void MOTOR_M1_Brake (void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	GPIO_Write(MOTOR_LnSLEEP_GPIO, MOTOR_LnSLEEP_PIN, nSLEEP_BRAKE);
 8000750:	2380      	movs	r3, #128	; 0x80
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	480a      	ldr	r0, [pc, #40]	; (8000780 <MOTOR_M1_Brake+0x34>)
 8000756:	2200      	movs	r2, #0
 8000758:	0019      	movs	r1, r3
 800075a:	f001 fc81 	bl	8002060 <GPIO_Write>
	TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM1_CH, PWM_BRAKE);
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <MOTOR_M1_Brake+0x38>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2201      	movs	r2, #1
 8000764:	2100      	movs	r1, #0
 8000766:	0018      	movs	r0, r3
 8000768:	f001 fdf5 	bl	8002356 <TIM_SetPulse>
	TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM2_CH, PWM_BRAKE);
 800076c:	4b05      	ldr	r3, [pc, #20]	; (8000784 <MOTOR_M1_Brake+0x38>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2201      	movs	r2, #1
 8000772:	2101      	movs	r1, #1
 8000774:	0018      	movs	r0, r3
 8000776:	f001 fdee 	bl	8002356 <TIM_SetPulse>
}
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	50000400 	.word	0x50000400
 8000784:	2000006c 	.word	0x2000006c

08000788 <MOTOR_M2_Brake>:

void MOTOR_M2_Brake (void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
	GPIO_Write(MOTOR_RnSLEEP_GPIO, MOTOR_RnSLEEP_PIN, nSLEEP_BRAKE);
 800078c:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <MOTOR_M2_Brake+0x34>)
 800078e:	2200      	movs	r2, #0
 8000790:	2104      	movs	r1, #4
 8000792:	0018      	movs	r0, r3
 8000794:	f001 fc64 	bl	8002060 <GPIO_Write>
	TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM1_CH, PWM_BRAKE);
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MOTOR_M2_Brake+0x38>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2201      	movs	r2, #1
 800079e:	2102      	movs	r1, #2
 80007a0:	0018      	movs	r0, r3
 80007a2:	f001 fdd8 	bl	8002356 <TIM_SetPulse>
	TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM2_CH, PWM_BRAKE);
 80007a6:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <MOTOR_M2_Brake+0x38>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2201      	movs	r2, #1
 80007ac:	2103      	movs	r1, #3
 80007ae:	0018      	movs	r0, r3
 80007b0:	f001 fdd1 	bl	8002356 <TIM_SetPulse>
}
 80007b4:	46c0      	nop			; (mov r8, r8)
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	50000400 	.word	0x50000400
 80007c0:	2000006c 	.word	0x2000006c

080007c4 <MOTOR_M1_Update>:
	TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM1_CH, PWM_COAST);
	TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM2_CH, PWM_COAST);
}

void MOTOR_M1_Update (int32_t throttle)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	bool reverse = false;
 80007cc:	210f      	movs	r1, #15
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	2200      	movs	r2, #0
 80007d2:	701a      	strb	r2, [r3, #0]

	// Check if reversing
	if (throttle < 0) {
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	da05      	bge.n	80007e6 <MOTOR_M1_Update+0x22>
		reverse = true;
 80007da:	187b      	adds	r3, r7, r1
 80007dc:	2201      	movs	r2, #1
 80007de:	701a      	strb	r2, [r3, #0]
		throttle = -throttle;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	425b      	negs	r3, r3
 80007e4:	607b      	str	r3, [r7, #4]
	}

	// Clamp maximum speed
	if (throttle > MOTOR_MAX) {
 80007e6:	687a      	ldr	r2, [r7, #4]
 80007e8:	2380      	movs	r3, #128	; 0x80
 80007ea:	005b      	lsls	r3, r3, #1
 80007ec:	429a      	cmp	r2, r3
 80007ee:	dd02      	ble.n	80007f6 <MOTOR_M1_Update+0x32>
		throttle = MOTOR_MAX;
 80007f0:	2380      	movs	r3, #128	; 0x80
 80007f2:	005b      	lsls	r3, r3, #1
 80007f4:	607b      	str	r3, [r7, #4]
	}

	if (throttle <= MOTOR_OFF + MOTOR_STALL) {
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	2b32      	cmp	r3, #50	; 0x32
 80007fa:	dc02      	bgt.n	8000802 <MOTOR_M1_Update+0x3e>
		if (MOTOR_BRAKE) {
			MOTOR_M1_Brake();
 80007fc:	f7ff ffa6 	bl	800074c <MOTOR_M1_Brake>
		TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM2_CH, throttle);
	} else {
		TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM1_CH, throttle);
		TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM2_CH, 0);
	}
}
 8000800:	e021      	b.n	8000846 <MOTOR_M1_Update+0x82>
	} else if (reverse) {
 8000802:	230f      	movs	r3, #15
 8000804:	18fb      	adds	r3, r7, r3
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d00e      	beq.n	800082a <MOTOR_M1_Update+0x66>
		TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM1_CH, 0);
 800080c:	4b10      	ldr	r3, [pc, #64]	; (8000850 <MOTOR_M1_Update+0x8c>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2200      	movs	r2, #0
 8000812:	2100      	movs	r1, #0
 8000814:	0018      	movs	r0, r3
 8000816:	f001 fd9e 	bl	8002356 <TIM_SetPulse>
		TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM2_CH, throttle);
 800081a:	4b0d      	ldr	r3, [pc, #52]	; (8000850 <MOTOR_M1_Update+0x8c>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	2101      	movs	r1, #1
 8000822:	0018      	movs	r0, r3
 8000824:	f001 fd97 	bl	8002356 <TIM_SetPulse>
}
 8000828:	e00d      	b.n	8000846 <MOTOR_M1_Update+0x82>
		TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM1_CH, throttle);
 800082a:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MOTOR_M1_Update+0x8c>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	687a      	ldr	r2, [r7, #4]
 8000830:	2100      	movs	r1, #0
 8000832:	0018      	movs	r0, r3
 8000834:	f001 fd8f 	bl	8002356 <TIM_SetPulse>
		TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM2_CH, 0);
 8000838:	4b05      	ldr	r3, [pc, #20]	; (8000850 <MOTOR_M1_Update+0x8c>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2200      	movs	r2, #0
 800083e:	2101      	movs	r1, #1
 8000840:	0018      	movs	r0, r3
 8000842:	f001 fd88 	bl	8002356 <TIM_SetPulse>
}
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	46bd      	mov	sp, r7
 800084a:	b004      	add	sp, #16
 800084c:	bd80      	pop	{r7, pc}
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	2000006c 	.word	0x2000006c

08000854 <MOTOR_M2_Update>:

void MOTOR_M2_Update (int32_t throttle)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	bool reverse = false;
 800085c:	210f      	movs	r1, #15
 800085e:	187b      	adds	r3, r7, r1
 8000860:	2200      	movs	r2, #0
 8000862:	701a      	strb	r2, [r3, #0]

	// Check if reversing
	if (throttle < 0) {
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2b00      	cmp	r3, #0
 8000868:	da05      	bge.n	8000876 <MOTOR_M2_Update+0x22>
		reverse = true;
 800086a:	187b      	adds	r3, r7, r1
 800086c:	2201      	movs	r2, #1
 800086e:	701a      	strb	r2, [r3, #0]
		throttle = -throttle;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	425b      	negs	r3, r3
 8000874:	607b      	str	r3, [r7, #4]
	}

	// Clamp maximum speed
	if (throttle > MOTOR_MAX) {
 8000876:	687a      	ldr	r2, [r7, #4]
 8000878:	2380      	movs	r3, #128	; 0x80
 800087a:	005b      	lsls	r3, r3, #1
 800087c:	429a      	cmp	r2, r3
 800087e:	dd02      	ble.n	8000886 <MOTOR_M2_Update+0x32>
		throttle = MOTOR_MAX;
 8000880:	2380      	movs	r3, #128	; 0x80
 8000882:	005b      	lsls	r3, r3, #1
 8000884:	607b      	str	r3, [r7, #4]
	}

	if (throttle <= MOTOR_OFF + MOTOR_STALL) {
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2b32      	cmp	r3, #50	; 0x32
 800088a:	dc02      	bgt.n	8000892 <MOTOR_M2_Update+0x3e>
		if (MOTOR_BRAKE) {
			MOTOR_M2_Brake();
 800088c:	f7ff ff7c 	bl	8000788 <MOTOR_M2_Brake>
		TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM2_CH, throttle);
	} else {
		TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM1_CH, throttle);
		TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM2_CH, 0);
	}
}
 8000890:	e021      	b.n	80008d6 <MOTOR_M2_Update+0x82>
	} else if (reverse) {
 8000892:	230f      	movs	r3, #15
 8000894:	18fb      	adds	r3, r7, r3
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d00e      	beq.n	80008ba <MOTOR_M2_Update+0x66>
		TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM1_CH, 0);
 800089c:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <MOTOR_M2_Update+0x8c>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2200      	movs	r2, #0
 80008a2:	2102      	movs	r1, #2
 80008a4:	0018      	movs	r0, r3
 80008a6:	f001 fd56 	bl	8002356 <TIM_SetPulse>
		TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM2_CH, throttle);
 80008aa:	4b0d      	ldr	r3, [pc, #52]	; (80008e0 <MOTOR_M2_Update+0x8c>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	2103      	movs	r1, #3
 80008b2:	0018      	movs	r0, r3
 80008b4:	f001 fd4f 	bl	8002356 <TIM_SetPulse>
}
 80008b8:	e00d      	b.n	80008d6 <MOTOR_M2_Update+0x82>
		TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM1_CH, throttle);
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MOTOR_M2_Update+0x8c>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	687a      	ldr	r2, [r7, #4]
 80008c0:	2102      	movs	r1, #2
 80008c2:	0018      	movs	r0, r3
 80008c4:	f001 fd47 	bl	8002356 <TIM_SetPulse>
		TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM2_CH, 0);
 80008c8:	4b05      	ldr	r3, [pc, #20]	; (80008e0 <MOTOR_M2_Update+0x8c>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2200      	movs	r2, #0
 80008ce:	2103      	movs	r1, #3
 80008d0:	0018      	movs	r0, r3
 80008d2:	f001 fd40 	bl	8002356 <TIM_SetPulse>
}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	46bd      	mov	sp, r7
 80008da:	b004      	add	sp, #16
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	2000006c 	.word	0x2000006c

080008e4 <GPIO_Read>:
{
	gpio->BRR = (uint32_t)pin;
}

static inline bool GPIO_Read(GPIO_t * gpio, uint32_t pin)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	6039      	str	r1, [r7, #0]
	return ((gpio->IDR & pin) > 0);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	691b      	ldr	r3, [r3, #16]
 80008f2:	683a      	ldr	r2, [r7, #0]
 80008f4:	4013      	ands	r3, r2
 80008f6:	1e5a      	subs	r2, r3, #1
 80008f8:	4193      	sbcs	r3, r2
 80008fa:	b2db      	uxtb	r3, r3
}
 80008fc:	0018      	movs	r0, r3
 80008fe:	46bd      	mov	sp, r7
 8000900:	b002      	add	sp, #8
 8000902:	bd80      	pop	{r7, pc}

08000904 <TIM_GetCounter>:
/*
 * INLINE FUNCTION DEFINITIONS
 */

static inline uint32_t TIM_GetCounter(TIM_t * tim)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	return tim->Instance->CNT;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8000912:	0018      	movs	r0, r3
 8000914:	46bd      	mov	sp, r7
 8000916:	b002      	add	sp, #8
 8000918:	bd80      	pop	{r7, pc}
	...

0800091c <RADIO_Init>:
/*
 * PUBLIC FUNCTIONS
 */

void RADIO_Init (void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af02      	add	r7, sp, #8
	TIM_Init(TIM_RADIO, TIM_RADIO_FREQ, TIM_RADIO_RELOAD);
 8000922:	4b1d      	ldr	r3, [pc, #116]	; (8000998 <RADIO_Init+0x7c>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a1d      	ldr	r2, [pc, #116]	; (800099c <RADIO_Init+0x80>)
 8000928:	491d      	ldr	r1, [pc, #116]	; (80009a0 <RADIO_Init+0x84>)
 800092a:	0018      	movs	r0, r3
 800092c:	f001 fc68 	bl	8002200 <TIM_Init>
	TIM_Start(TIM_RADIO);
 8000930:	4b19      	ldr	r3, [pc, #100]	; (8000998 <RADIO_Init+0x7c>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	0018      	movs	r0, r3
 8000936:	f001 fd3f 	bl	80023b8 <TIM_Start>
	GPIO_EnableIRQ(RADIO_S1_GPIO, RADIO_S1_PIN, GPIO_NOPULL, GPIO_IT_BOTH, RADIO_S1_IRQ);
 800093a:	4a1a      	ldr	r2, [pc, #104]	; (80009a4 <RADIO_Init+0x88>)
 800093c:	2380      	movs	r3, #128	; 0x80
 800093e:	00d9      	lsls	r1, r3, #3
 8000940:	23a0      	movs	r3, #160	; 0xa0
 8000942:	05d8      	lsls	r0, r3, #23
 8000944:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <RADIO_Init+0x8c>)
 8000946:	9300      	str	r3, [sp, #0]
 8000948:	0013      	movs	r3, r2
 800094a:	2200      	movs	r2, #0
 800094c:	f001 fbca 	bl	80020e4 <GPIO_EnableIRQ>
	GPIO_EnableIRQ(RADIO_S2_GPIO, RADIO_S2_PIN, GPIO_NOPULL, GPIO_IT_BOTH, RADIO_S2_IRQ);
 8000950:	4a14      	ldr	r2, [pc, #80]	; (80009a4 <RADIO_Init+0x88>)
 8000952:	2380      	movs	r3, #128	; 0x80
 8000954:	0099      	lsls	r1, r3, #2
 8000956:	23a0      	movs	r3, #160	; 0xa0
 8000958:	05d8      	lsls	r0, r3, #23
 800095a:	4b14      	ldr	r3, [pc, #80]	; (80009ac <RADIO_Init+0x90>)
 800095c:	9300      	str	r3, [sp, #0]
 800095e:	0013      	movs	r3, r2
 8000960:	2200      	movs	r2, #0
 8000962:	f001 fbbf 	bl	80020e4 <GPIO_EnableIRQ>
	GPIO_EnableIRQ(RADIO_S3_GPIO, RADIO_S3_PIN, GPIO_NOPULL, GPIO_IT_BOTH, RADIO_S3_IRQ);
 8000966:	4a0f      	ldr	r2, [pc, #60]	; (80009a4 <RADIO_Init+0x88>)
 8000968:	2380      	movs	r3, #128	; 0x80
 800096a:	0059      	lsls	r1, r3, #1
 800096c:	23a0      	movs	r3, #160	; 0xa0
 800096e:	05d8      	lsls	r0, r3, #23
 8000970:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <RADIO_Init+0x94>)
 8000972:	9300      	str	r3, [sp, #0]
 8000974:	0013      	movs	r3, r2
 8000976:	2200      	movs	r2, #0
 8000978:	f001 fbb4 	bl	80020e4 <GPIO_EnableIRQ>
	GPIO_EnableIRQ(RADIO_S4_GPIO, RADIO_S4_PIN, GPIO_NOPULL, GPIO_IT_BOTH, RADIO_S4_IRQ);
 800097c:	4a09      	ldr	r2, [pc, #36]	; (80009a4 <RADIO_Init+0x88>)
 800097e:	2380      	movs	r3, #128	; 0x80
 8000980:	0219      	lsls	r1, r3, #8
 8000982:	480c      	ldr	r0, [pc, #48]	; (80009b4 <RADIO_Init+0x98>)
 8000984:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <RADIO_Init+0x9c>)
 8000986:	9300      	str	r3, [sp, #0]
 8000988:	0013      	movs	r3, r2
 800098a:	2200      	movs	r2, #0
 800098c:	f001 fbaa 	bl	80020e4 <GPIO_EnableIRQ>
}
 8000990:	46c0      	nop			; (mov r8, r8)
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	20000088 	.word	0x20000088
 800099c:	0000ffff 	.word	0x0000ffff
 80009a0:	000f4240 	.word	0x000f4240
 80009a4:	10310000 	.word	0x10310000
 80009a8:	080009bd 	.word	0x080009bd
 80009ac:	08000a15 	.word	0x08000a15
 80009b0:	08000a6d 	.word	0x08000a6d
 80009b4:	50000400 	.word	0x50000400
 80009b8:	08000ac5 	.word	0x08000ac5

080009bc <RADIO_S1_IRQ>:
/*
 * INTERRUPT ROUTINES
 */

void RADIO_S1_IRQ (void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
	uint16_t now = TIM_GetCounter(TIM_RADIO);
 80009c2:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <RADIO_S1_IRQ+0x4c>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	0018      	movs	r0, r3
 80009c8:	f7ff ff9c 	bl	8000904 <TIM_GetCounter>
 80009cc:	0002      	movs	r2, r0
 80009ce:	1dbb      	adds	r3, r7, #6
 80009d0:	801a      	strh	r2, [r3, #0]
	if (GPIO_Read(RADIO_S1_GPIO, RADIO_S1_PIN))
 80009d2:	2380      	movs	r3, #128	; 0x80
 80009d4:	00da      	lsls	r2, r3, #3
 80009d6:	23a0      	movs	r3, #160	; 0xa0
 80009d8:	05db      	lsls	r3, r3, #23
 80009da:	0011      	movs	r1, r2
 80009dc:	0018      	movs	r0, r3
 80009de:	f7ff ff81 	bl	80008e4 <GPIO_Read>
 80009e2:	1e03      	subs	r3, r0, #0
 80009e4:	d004      	beq.n	80009f0 <RADIO_S1_IRQ+0x34>
	{
		radio_S1tick = now;
 80009e6:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <RADIO_S1_IRQ+0x50>)
 80009e8:	1dba      	adds	r2, r7, #6
 80009ea:	8812      	ldrh	r2, [r2, #0]
 80009ec:	801a      	strh	r2, [r3, #0]
	}
	else
	{
		radio_S1 = now - radio_S1tick;
	}
}
 80009ee:	e007      	b.n	8000a00 <RADIO_S1_IRQ+0x44>
		radio_S1 = now - radio_S1tick;
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <RADIO_S1_IRQ+0x50>)
 80009f2:	881b      	ldrh	r3, [r3, #0]
 80009f4:	1dba      	adds	r2, r7, #6
 80009f6:	8812      	ldrh	r2, [r2, #0]
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	b29a      	uxth	r2, r3
 80009fc:	4b04      	ldr	r3, [pc, #16]	; (8000a10 <RADIO_S1_IRQ+0x54>)
 80009fe:	801a      	strh	r2, [r3, #0]
}
 8000a00:	46c0      	nop			; (mov r8, r8)
 8000a02:	46bd      	mov	sp, r7
 8000a04:	b002      	add	sp, #8
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000088 	.word	0x20000088
 8000a0c:	200000e0 	.word	0x200000e0
 8000a10:	20000000 	.word	0x20000000

08000a14 <RADIO_S2_IRQ>:

void RADIO_S2_IRQ (void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
	uint16_t now = TIM_GetCounter(TIM_RADIO);
 8000a1a:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <RADIO_S2_IRQ+0x4c>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f7ff ff70 	bl	8000904 <TIM_GetCounter>
 8000a24:	0002      	movs	r2, r0
 8000a26:	1dbb      	adds	r3, r7, #6
 8000a28:	801a      	strh	r2, [r3, #0]
	if (GPIO_Read(RADIO_S2_GPIO, RADIO_S2_PIN))
 8000a2a:	2380      	movs	r3, #128	; 0x80
 8000a2c:	009a      	lsls	r2, r3, #2
 8000a2e:	23a0      	movs	r3, #160	; 0xa0
 8000a30:	05db      	lsls	r3, r3, #23
 8000a32:	0011      	movs	r1, r2
 8000a34:	0018      	movs	r0, r3
 8000a36:	f7ff ff55 	bl	80008e4 <GPIO_Read>
 8000a3a:	1e03      	subs	r3, r0, #0
 8000a3c:	d004      	beq.n	8000a48 <RADIO_S2_IRQ+0x34>
	{
		radio_S2tick = now;
 8000a3e:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <RADIO_S2_IRQ+0x50>)
 8000a40:	1dba      	adds	r2, r7, #6
 8000a42:	8812      	ldrh	r2, [r2, #0]
 8000a44:	801a      	strh	r2, [r3, #0]
	}
	else
	{
		radio_S2 = now - radio_S2tick;
	}
}
 8000a46:	e007      	b.n	8000a58 <RADIO_S2_IRQ+0x44>
		radio_S2 = now - radio_S2tick;
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <RADIO_S2_IRQ+0x50>)
 8000a4a:	881b      	ldrh	r3, [r3, #0]
 8000a4c:	1dba      	adds	r2, r7, #6
 8000a4e:	8812      	ldrh	r2, [r2, #0]
 8000a50:	1ad3      	subs	r3, r2, r3
 8000a52:	b29a      	uxth	r2, r3
 8000a54:	4b04      	ldr	r3, [pc, #16]	; (8000a68 <RADIO_S2_IRQ+0x54>)
 8000a56:	801a      	strh	r2, [r3, #0]
}
 8000a58:	46c0      	nop			; (mov r8, r8)
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	b002      	add	sp, #8
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000088 	.word	0x20000088
 8000a64:	200000e2 	.word	0x200000e2
 8000a68:	20000002 	.word	0x20000002

08000a6c <RADIO_S3_IRQ>:

void RADIO_S3_IRQ (void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
	uint16_t now = TIM_GetCounter(TIM_RADIO);
 8000a72:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <RADIO_S3_IRQ+0x4c>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	0018      	movs	r0, r3
 8000a78:	f7ff ff44 	bl	8000904 <TIM_GetCounter>
 8000a7c:	0002      	movs	r2, r0
 8000a7e:	1dbb      	adds	r3, r7, #6
 8000a80:	801a      	strh	r2, [r3, #0]
	if (GPIO_Read(RADIO_S3_GPIO, RADIO_S3_PIN))
 8000a82:	2380      	movs	r3, #128	; 0x80
 8000a84:	005a      	lsls	r2, r3, #1
 8000a86:	23a0      	movs	r3, #160	; 0xa0
 8000a88:	05db      	lsls	r3, r3, #23
 8000a8a:	0011      	movs	r1, r2
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	f7ff ff29 	bl	80008e4 <GPIO_Read>
 8000a92:	1e03      	subs	r3, r0, #0
 8000a94:	d004      	beq.n	8000aa0 <RADIO_S3_IRQ+0x34>
	{
		radio_S3tick = now;
 8000a96:	4b09      	ldr	r3, [pc, #36]	; (8000abc <RADIO_S3_IRQ+0x50>)
 8000a98:	1dba      	adds	r2, r7, #6
 8000a9a:	8812      	ldrh	r2, [r2, #0]
 8000a9c:	801a      	strh	r2, [r3, #0]
	}
	else
	{
		radio_S3 = now - radio_S3tick;
	}
}
 8000a9e:	e007      	b.n	8000ab0 <RADIO_S3_IRQ+0x44>
		radio_S3 = now - radio_S3tick;
 8000aa0:	4b06      	ldr	r3, [pc, #24]	; (8000abc <RADIO_S3_IRQ+0x50>)
 8000aa2:	881b      	ldrh	r3, [r3, #0]
 8000aa4:	1dba      	adds	r2, r7, #6
 8000aa6:	8812      	ldrh	r2, [r2, #0]
 8000aa8:	1ad3      	subs	r3, r2, r3
 8000aaa:	b29a      	uxth	r2, r3
 8000aac:	4b04      	ldr	r3, [pc, #16]	; (8000ac0 <RADIO_S3_IRQ+0x54>)
 8000aae:	801a      	strh	r2, [r3, #0]
}
 8000ab0:	46c0      	nop			; (mov r8, r8)
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	b002      	add	sp, #8
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000088 	.word	0x20000088
 8000abc:	200000e4 	.word	0x200000e4
 8000ac0:	20000004 	.word	0x20000004

08000ac4 <RADIO_S4_IRQ>:

void RADIO_S4_IRQ (void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
	uint16_t now = TIM_GetCounter(TIM_RADIO);
 8000aca:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <RADIO_S4_IRQ+0x4c>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f7ff ff18 	bl	8000904 <TIM_GetCounter>
 8000ad4:	0002      	movs	r2, r0
 8000ad6:	1dbb      	adds	r3, r7, #6
 8000ad8:	801a      	strh	r2, [r3, #0]
	if (GPIO_Read(RADIO_S4_GPIO, RADIO_S4_PIN))
 8000ada:	2380      	movs	r3, #128	; 0x80
 8000adc:	021b      	lsls	r3, r3, #8
 8000ade:	4a0d      	ldr	r2, [pc, #52]	; (8000b14 <RADIO_S4_IRQ+0x50>)
 8000ae0:	0019      	movs	r1, r3
 8000ae2:	0010      	movs	r0, r2
 8000ae4:	f7ff fefe 	bl	80008e4 <GPIO_Read>
 8000ae8:	1e03      	subs	r3, r0, #0
 8000aea:	d004      	beq.n	8000af6 <RADIO_S4_IRQ+0x32>
	{
		radio_S4tick = now;
 8000aec:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <RADIO_S4_IRQ+0x54>)
 8000aee:	1dba      	adds	r2, r7, #6
 8000af0:	8812      	ldrh	r2, [r2, #0]
 8000af2:	801a      	strh	r2, [r3, #0]
	}
	else
	{
		radio_S4 = now - radio_S4tick;
	}
}
 8000af4:	e007      	b.n	8000b06 <RADIO_S4_IRQ+0x42>
		radio_S4 = now - radio_S4tick;
 8000af6:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <RADIO_S4_IRQ+0x54>)
 8000af8:	881b      	ldrh	r3, [r3, #0]
 8000afa:	1dba      	adds	r2, r7, #6
 8000afc:	8812      	ldrh	r2, [r2, #0]
 8000afe:	1ad3      	subs	r3, r2, r3
 8000b00:	b29a      	uxth	r2, r3
 8000b02:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <RADIO_S4_IRQ+0x58>)
 8000b04:	801a      	strh	r2, [r3, #0]
}
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	b002      	add	sp, #8
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	20000088 	.word	0x20000088
 8000b14:	50000400 	.word	0x50000400
 8000b18:	200000e6 	.word	0x200000e6
 8000b1c:	20000006 	.word	0x20000006

08000b20 <GPIO_Set>:
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	6039      	str	r1, [r7, #0]
	gpio->BSRR = (uint32_t)pin;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	683a      	ldr	r2, [r7, #0]
 8000b2e:	619a      	str	r2, [r3, #24]
}
 8000b30:	46c0      	nop			; (mov r8, r8)
 8000b32:	46bd      	mov	sp, r7
 8000b34:	b002      	add	sp, #8
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <GPIO_Reset>:
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	6039      	str	r1, [r7, #0]
	gpio->BRR = (uint32_t)pin;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	683a      	ldr	r2, [r7, #0]
 8000b46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b48:	46c0      	nop			; (mov r8, r8)
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	b002      	add	sp, #8
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <SERVO_Init>:
/*
 * PUBLIC FUNCTIONS
 */

void SERVO_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
	GPIO_EnableOutput(SERVO1_GPIO, SERVO1_PIN, GPIO_PIN_RESET);
 8000b54:	23a0      	movs	r3, #160	; 0xa0
 8000b56:	05db      	lsls	r3, r3, #23
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2102      	movs	r1, #2
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f001 fa9b 	bl	8002098 <GPIO_EnableOutput>
	TIM_Init(TIM_SERVO1, TIM_SERVO1_FREQ, TIM_SERVO1_RELOAD);
 8000b62:	4b21      	ldr	r3, [pc, #132]	; (8000be8 <SERVO_Init+0x98>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a21      	ldr	r2, [pc, #132]	; (8000bec <SERVO_Init+0x9c>)
 8000b68:	4921      	ldr	r1, [pc, #132]	; (8000bf0 <SERVO_Init+0xa0>)
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f001 fb48 	bl	8002200 <TIM_Init>
	TIM_OnReload(TIM_SERVO1, SERVO1_TimerReloadISR);
 8000b70:	4b1d      	ldr	r3, [pc, #116]	; (8000be8 <SERVO_Init+0x98>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a1f      	ldr	r2, [pc, #124]	; (8000bf4 <SERVO_Init+0xa4>)
 8000b76:	0011      	movs	r1, r2
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f001 fb91 	bl	80022a0 <TIM_OnReload>
	TIM_OnPulse(TIM_SERVO1, 0, SERVO1_TimerPulseISR);
 8000b7e:	4b1a      	ldr	r3, [pc, #104]	; (8000be8 <SERVO_Init+0x98>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a1d      	ldr	r2, [pc, #116]	; (8000bf8 <SERVO_Init+0xa8>)
 8000b84:	2100      	movs	r1, #0
 8000b86:	0018      	movs	r0, r3
 8000b88:	f001 fb9e 	bl	80022c8 <TIM_OnPulse>
	SERVO_S1_Update(0);
 8000b8c:	2000      	movs	r0, #0
 8000b8e:	f000 f83d 	bl	8000c0c <SERVO_S1_Update>
	TIM_Start(TIM_SERVO1);
 8000b92:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <SERVO_Init+0x98>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	0018      	movs	r0, r3
 8000b98:	f001 fc0e 	bl	80023b8 <TIM_Start>

	GPIO_EnableOutput(SERVO2_GPIO, SERVO2_GPIO, GPIO_PIN_RESET);
 8000b9c:	4917      	ldr	r1, [pc, #92]	; (8000bfc <SERVO_Init+0xac>)
 8000b9e:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <SERVO_Init+0xac>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f001 fa78 	bl	8002098 <GPIO_EnableOutput>
	TIM_Init(TIM_SERVO2, TIM_SERVO2_FREQ, TIM_SERVO2_RELOAD);
 8000ba8:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <SERVO_Init+0xb0>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a0f      	ldr	r2, [pc, #60]	; (8000bec <SERVO_Init+0x9c>)
 8000bae:	4910      	ldr	r1, [pc, #64]	; (8000bf0 <SERVO_Init+0xa0>)
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f001 fb25 	bl	8002200 <TIM_Init>
	TIM_OnReload(TIM_SERVO2, SERVO2_TimerReloadISR);
 8000bb6:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <SERVO_Init+0xb0>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a12      	ldr	r2, [pc, #72]	; (8000c04 <SERVO_Init+0xb4>)
 8000bbc:	0011      	movs	r1, r2
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f001 fb6e 	bl	80022a0 <TIM_OnReload>
	TIM_OnPulse(TIM_SERVO2, 0, SERVO2_TimerPulseISR);
 8000bc4:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <SERVO_Init+0xb0>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a0f      	ldr	r2, [pc, #60]	; (8000c08 <SERVO_Init+0xb8>)
 8000bca:	2100      	movs	r1, #0
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f001 fb7b 	bl	80022c8 <TIM_OnPulse>
	SERVO_S2_Update(0);
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	f000 f846 	bl	8000c64 <SERVO_S2_Update>
	TIM_Start(TIM_SERVO2);
 8000bd8:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <SERVO_Init+0xb0>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f001 fbeb 	bl	80023b8 <TIM_Start>
}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	200000a4 	.word	0x200000a4
 8000bec:	00002710 	.word	0x00002710
 8000bf0:	000f4240 	.word	0x000f4240
 8000bf4:	08000cbd 	.word	0x08000cbd
 8000bf8:	08000cd3 	.word	0x08000cd3
 8000bfc:	50000800 	.word	0x50000800
 8000c00:	200000c0 	.word	0x200000c0
 8000c04:	08000ce9 	.word	0x08000ce9
 8000c08:	08000d05 	.word	0x08000d05

08000c0c <SERVO_S1_Update>:
	TIM_Deinit(TIM_SERVO2);
	GPIO_Disable(SERVO2_GPIO, SERVO2_PIN);
}

void SERVO_S1_Update(int16_t pulse)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	0002      	movs	r2, r0
 8000c14:	1dbb      	adds	r3, r7, #6
 8000c16:	801a      	strh	r2, [r3, #0]
	if (pulse > PULSE_MAX)
 8000c18:	1dbb      	adds	r3, r7, #6
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	5e9a      	ldrsh	r2, [r3, r2]
 8000c1e:	23fa      	movs	r3, #250	; 0xfa
 8000c20:	00db      	lsls	r3, r3, #3
 8000c22:	429a      	cmp	r2, r3
 8000c24:	dd04      	ble.n	8000c30 <SERVO_S1_Update+0x24>
	{
		pulse = PULSE_MAX;
 8000c26:	1dbb      	adds	r3, r7, #6
 8000c28:	22fa      	movs	r2, #250	; 0xfa
 8000c2a:	00d2      	lsls	r2, r2, #3
 8000c2c:	801a      	strh	r2, [r3, #0]
 8000c2e:	e00a      	b.n	8000c46 <SERVO_S1_Update+0x3a>
	}
	else if (pulse < PULSE_MIN)
 8000c30:	1dbb      	adds	r3, r7, #6
 8000c32:	2200      	movs	r2, #0
 8000c34:	5e9a      	ldrsh	r2, [r3, r2]
 8000c36:	23fa      	movs	r3, #250	; 0xfa
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	da03      	bge.n	8000c46 <SERVO_S1_Update+0x3a>
	{
		pulse = PULSE_MIN;
 8000c3e:	1dbb      	adds	r3, r7, #6
 8000c40:	22fa      	movs	r2, #250	; 0xfa
 8000c42:	0092      	lsls	r2, r2, #2
 8000c44:	801a      	strh	r2, [r3, #0]
	}
	TIM_SetPulse(TIM_SERVO1, 0, pulse);
 8000c46:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <SERVO_S1_Update+0x54>)
 8000c48:	6818      	ldr	r0, [r3, #0]
 8000c4a:	1dbb      	adds	r3, r7, #6
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	5e9b      	ldrsh	r3, [r3, r2]
 8000c50:	001a      	movs	r2, r3
 8000c52:	2100      	movs	r1, #0
 8000c54:	f001 fb7f 	bl	8002356 <TIM_SetPulse>
}
 8000c58:	46c0      	nop			; (mov r8, r8)
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	b002      	add	sp, #8
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	200000a4 	.word	0x200000a4

08000c64 <SERVO_S2_Update>:

void SERVO_S2_Update(int16_t pulse)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	0002      	movs	r2, r0
 8000c6c:	1dbb      	adds	r3, r7, #6
 8000c6e:	801a      	strh	r2, [r3, #0]
	if (pulse > PULSE_MAX)
 8000c70:	1dbb      	adds	r3, r7, #6
 8000c72:	2200      	movs	r2, #0
 8000c74:	5e9a      	ldrsh	r2, [r3, r2]
 8000c76:	23fa      	movs	r3, #250	; 0xfa
 8000c78:	00db      	lsls	r3, r3, #3
 8000c7a:	429a      	cmp	r2, r3
 8000c7c:	dd04      	ble.n	8000c88 <SERVO_S2_Update+0x24>
	{
		pulse = PULSE_MAX;
 8000c7e:	1dbb      	adds	r3, r7, #6
 8000c80:	22fa      	movs	r2, #250	; 0xfa
 8000c82:	00d2      	lsls	r2, r2, #3
 8000c84:	801a      	strh	r2, [r3, #0]
 8000c86:	e00a      	b.n	8000c9e <SERVO_S2_Update+0x3a>
	}
	else if (pulse < PULSE_MIN)
 8000c88:	1dbb      	adds	r3, r7, #6
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	5e9a      	ldrsh	r2, [r3, r2]
 8000c8e:	23fa      	movs	r3, #250	; 0xfa
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	429a      	cmp	r2, r3
 8000c94:	da03      	bge.n	8000c9e <SERVO_S2_Update+0x3a>
	{
		pulse = PULSE_MIN;
 8000c96:	1dbb      	adds	r3, r7, #6
 8000c98:	22fa      	movs	r2, #250	; 0xfa
 8000c9a:	0092      	lsls	r2, r2, #2
 8000c9c:	801a      	strh	r2, [r3, #0]
	}
	TIM_SetPulse(TIM_SERVO2, 0, pulse);
 8000c9e:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <SERVO_S2_Update+0x54>)
 8000ca0:	6818      	ldr	r0, [r3, #0]
 8000ca2:	1dbb      	adds	r3, r7, #6
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	5e9b      	ldrsh	r3, [r3, r2]
 8000ca8:	001a      	movs	r2, r3
 8000caa:	2100      	movs	r1, #0
 8000cac:	f001 fb53 	bl	8002356 <TIM_SetPulse>
}
 8000cb0:	46c0      	nop			; (mov r8, r8)
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	b002      	add	sp, #8
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	200000c0 	.word	0x200000c0

08000cbc <SERVO1_TimerReloadISR>:
/*
 * INTERRUPT ROUTINES
 */

static void SERVO1_TimerReloadISR(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
	GPIO_Set(SERVO1_GPIO, SERVO1_PIN);
 8000cc0:	23a0      	movs	r3, #160	; 0xa0
 8000cc2:	05db      	lsls	r3, r3, #23
 8000cc4:	2102      	movs	r1, #2
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	f7ff ff2a 	bl	8000b20 <GPIO_Set>
}
 8000ccc:	46c0      	nop			; (mov r8, r8)
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <SERVO1_TimerPulseISR>:

static void SERVO1_TimerPulseISR(void)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	af00      	add	r7, sp, #0
	GPIO_Reset(SERVO1_GPIO, SERVO1_PIN);
 8000cd6:	23a0      	movs	r3, #160	; 0xa0
 8000cd8:	05db      	lsls	r3, r3, #23
 8000cda:	2102      	movs	r1, #2
 8000cdc:	0018      	movs	r0, r3
 8000cde:	f7ff ff2b 	bl	8000b38 <GPIO_Reset>
}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <SERVO2_TimerReloadISR>:

static void SERVO2_TimerReloadISR(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
	GPIO_Set(SERVO2_GPIO, SERVO2_PIN);
 8000cec:	2380      	movs	r3, #128	; 0x80
 8000cee:	019b      	lsls	r3, r3, #6
 8000cf0:	4a03      	ldr	r2, [pc, #12]	; (8000d00 <SERVO2_TimerReloadISR+0x18>)
 8000cf2:	0019      	movs	r1, r3
 8000cf4:	0010      	movs	r0, r2
 8000cf6:	f7ff ff13 	bl	8000b20 <GPIO_Set>
}
 8000cfa:	46c0      	nop			; (mov r8, r8)
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	50000800 	.word	0x50000800

08000d04 <SERVO2_TimerPulseISR>:

static void SERVO2_TimerPulseISR(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
	GPIO_Reset(SERVO2_GPIO, SERVO2_PIN);
 8000d08:	2380      	movs	r3, #128	; 0x80
 8000d0a:	019b      	lsls	r3, r3, #6
 8000d0c:	4a03      	ldr	r2, [pc, #12]	; (8000d1c <SERVO2_TimerPulseISR+0x18>)
 8000d0e:	0019      	movs	r1, r3
 8000d10:	0010      	movs	r0, r2
 8000d12:	f7ff ff11 	bl	8000b38 <GPIO_Reset>
}
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	50000800 	.word	0x50000800

08000d20 <main>:
/*
 * PRIVATE FUNCTIONS
 */

int main (void)
{
 8000d20:	b5b0      	push	{r4, r5, r7, lr}
 8000d22:	af00      	add	r7, sp, #0
	CORE_Init();
 8000d24:	f001 f87a 	bl	8001e1c <CORE_Init>
	RADIO_Init();
 8000d28:	f7ff fdf8 	bl	800091c <RADIO_Init>
	MOTOR_Init();
 8000d2c:	f7ff fca0 	bl	8000670 <MOTOR_Init>
	SERVO_Init();
 8000d30:	f7ff ff0e 	bl	8000b50 <SERVO_Init>

	while (1)
	{
		MOTOR_Update(radio2motor(radio_S3), radio2motor(radio_S2));
 8000d34:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <main+0x58>)
 8000d36:	881b      	ldrh	r3, [r3, #0]
 8000d38:	b21b      	sxth	r3, r3
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f000 f824 	bl	8000d88 <radio2motor>
 8000d40:	0004      	movs	r4, r0
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <main+0x5c>)
 8000d44:	881b      	ldrh	r3, [r3, #0]
 8000d46:	b21b      	sxth	r3, r3
 8000d48:	0018      	movs	r0, r3
 8000d4a:	f000 f81d 	bl	8000d88 <radio2motor>
 8000d4e:	0003      	movs	r3, r0
 8000d50:	0019      	movs	r1, r3
 8000d52:	0020      	movs	r0, r4
 8000d54:	f7ff fce9 	bl	800072a <MOTOR_Update>
//		MOTOR_Update(-MOTOR_MAX, -MOTOR_MAX);
		SERVO_S1_Update(radio_S1);
 8000d58:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <main+0x60>)
 8000d5a:	881b      	ldrh	r3, [r3, #0]
 8000d5c:	b21b      	sxth	r3, r3
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f7ff ff54 	bl	8000c0c <SERVO_S1_Update>
		SERVO_S2_Update(radio_S4);
 8000d64:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <main+0x64>)
 8000d66:	881b      	ldrh	r3, [r3, #0]
 8000d68:	b21b      	sxth	r3, r3
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f7ff ff7a 	bl	8000c64 <SERVO_S2_Update>

		CORE_Idle();
 8000d70:	f001 f876 	bl	8001e60 <CORE_Idle>
		MOTOR_Update(radio2motor(radio_S3), radio2motor(radio_S2));
 8000d74:	e7de      	b.n	8000d34 <main+0x14>
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	20000004 	.word	0x20000004
 8000d7c:	20000002 	.word	0x20000002
 8000d80:	20000000 	.word	0x20000000
 8000d84:	20000006 	.word	0x20000006

08000d88 <radio2motor>:
	}
}


int32_t radio2motor (int16_t radio_S)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	0002      	movs	r2, r0
 8000d90:	1dbb      	adds	r3, r7, #6
 8000d92:	801a      	strh	r2, [r3, #0]
	return (((int32_t)radio_S - 1500) * 256) / 500;
 8000d94:	1dbb      	adds	r3, r7, #6
 8000d96:	2200      	movs	r2, #0
 8000d98:	5e9b      	ldrsh	r3, [r3, r2]
 8000d9a:	4a07      	ldr	r2, [pc, #28]	; (8000db8 <radio2motor+0x30>)
 8000d9c:	4694      	mov	ip, r2
 8000d9e:	4463      	add	r3, ip
 8000da0:	021b      	lsls	r3, r3, #8
 8000da2:	22fa      	movs	r2, #250	; 0xfa
 8000da4:	0051      	lsls	r1, r2, #1
 8000da6:	0018      	movs	r0, r3
 8000da8:	f7ff fa38 	bl	800021c <__divsi3>
 8000dac:	0003      	movs	r3, r0
}
 8000dae:	0018      	movs	r0, r3
 8000db0:	46bd      	mov	sp, r7
 8000db2:	b002      	add	sp, #8
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	46c0      	nop			; (mov r8, r8)
 8000db8:	fffffa24 	.word	0xfffffa24

08000dbc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dc0:	46c0      	nop			; (mov r8, r8)
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
	...

08000dc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000dc8:	480d      	ldr	r0, [pc, #52]	; (8000e00 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000dca:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dcc:	480d      	ldr	r0, [pc, #52]	; (8000e04 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dce:	490e      	ldr	r1, [pc, #56]	; (8000e08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dd0:	4a0e      	ldr	r2, [pc, #56]	; (8000e0c <LoopForever+0xe>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd4:	e002      	b.n	8000ddc <LoopCopyDataInit>

08000dd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dda:	3304      	adds	r3, #4

08000ddc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ddc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de0:	d3f9      	bcc.n	8000dd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000de2:	4a0b      	ldr	r2, [pc, #44]	; (8000e10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000de4:	4c0b      	ldr	r4, [pc, #44]	; (8000e14 <LoopForever+0x16>)
  movs r3, #0
 8000de6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de8:	e001      	b.n	8000dee <LoopFillZerobss>

08000dea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dec:	3204      	adds	r2, #4

08000dee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df0:	d3fb      	bcc.n	8000dea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000df2:	f7ff ffe3 	bl	8000dbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000df6:	f001 fc65 	bl	80026c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dfa:	f7ff ff91 	bl	8000d20 <main>

08000dfe <LoopForever>:

LoopForever:
    b LoopForever
 8000dfe:	e7fe      	b.n	8000dfe <LoopForever>
   ldr   r0, =_estack
 8000e00:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000e04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e08:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 8000e0c:	08002768 	.word	0x08002768
  ldr r2, =_sbss
 8000e10:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 8000e14:	200000ec 	.word	0x200000ec

08000e18 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e18:	e7fe      	b.n	8000e18 <ADC1_COMP_IRQHandler>
	...

08000e1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e1c:	b590      	push	{r4, r7, lr}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e24:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <HAL_InitTick+0x5c>)
 8000e26:	681c      	ldr	r4, [r3, #0]
 8000e28:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <HAL_InitTick+0x60>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	0019      	movs	r1, r3
 8000e2e:	23fa      	movs	r3, #250	; 0xfa
 8000e30:	0098      	lsls	r0, r3, #2
 8000e32:	f7ff f969 	bl	8000108 <__udivsi3>
 8000e36:	0003      	movs	r3, r0
 8000e38:	0019      	movs	r1, r3
 8000e3a:	0020      	movs	r0, r4
 8000e3c:	f7ff f964 	bl	8000108 <__udivsi3>
 8000e40:	0003      	movs	r3, r0
 8000e42:	0018      	movs	r0, r3
 8000e44:	f000 f8ef 	bl	8001026 <HAL_SYSTICK_Config>
 8000e48:	1e03      	subs	r3, r0, #0
 8000e4a:	d001      	beq.n	8000e50 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	e00f      	b.n	8000e70 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2b03      	cmp	r3, #3
 8000e54:	d80b      	bhi.n	8000e6e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e56:	6879      	ldr	r1, [r7, #4]
 8000e58:	2301      	movs	r3, #1
 8000e5a:	425b      	negs	r3, r3
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	0018      	movs	r0, r3
 8000e60:	f000 f8bc 	bl	8000fdc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <HAL_InitTick+0x64>)
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	e000      	b.n	8000e70 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
}
 8000e70:	0018      	movs	r0, r3
 8000e72:	46bd      	mov	sp, r7
 8000e74:	b003      	add	sp, #12
 8000e76:	bd90      	pop	{r4, r7, pc}
 8000e78:	20000008 	.word	0x20000008
 8000e7c:	20000010 	.word	0x20000010
 8000e80:	2000000c 	.word	0x2000000c

08000e84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	0002      	movs	r2, r0
 8000e8c:	1dfb      	adds	r3, r7, #7
 8000e8e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e90:	1dfb      	adds	r3, r7, #7
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b7f      	cmp	r3, #127	; 0x7f
 8000e96:	d809      	bhi.n	8000eac <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e98:	1dfb      	adds	r3, r7, #7
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	001a      	movs	r2, r3
 8000e9e:	231f      	movs	r3, #31
 8000ea0:	401a      	ands	r2, r3
 8000ea2:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <__NVIC_EnableIRQ+0x30>)
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	4091      	lsls	r1, r2
 8000ea8:	000a      	movs	r2, r1
 8000eaa:	601a      	str	r2, [r3, #0]
  }
}
 8000eac:	46c0      	nop			; (mov r8, r8)
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	b002      	add	sp, #8
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	e000e100 	.word	0xe000e100

08000eb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb8:	b590      	push	{r4, r7, lr}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	0002      	movs	r2, r0
 8000ec0:	6039      	str	r1, [r7, #0]
 8000ec2:	1dfb      	adds	r3, r7, #7
 8000ec4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ec6:	1dfb      	adds	r3, r7, #7
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	2b7f      	cmp	r3, #127	; 0x7f
 8000ecc:	d828      	bhi.n	8000f20 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ece:	4a2f      	ldr	r2, [pc, #188]	; (8000f8c <__NVIC_SetPriority+0xd4>)
 8000ed0:	1dfb      	adds	r3, r7, #7
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	b25b      	sxtb	r3, r3
 8000ed6:	089b      	lsrs	r3, r3, #2
 8000ed8:	33c0      	adds	r3, #192	; 0xc0
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	589b      	ldr	r3, [r3, r2]
 8000ede:	1dfa      	adds	r2, r7, #7
 8000ee0:	7812      	ldrb	r2, [r2, #0]
 8000ee2:	0011      	movs	r1, r2
 8000ee4:	2203      	movs	r2, #3
 8000ee6:	400a      	ands	r2, r1
 8000ee8:	00d2      	lsls	r2, r2, #3
 8000eea:	21ff      	movs	r1, #255	; 0xff
 8000eec:	4091      	lsls	r1, r2
 8000eee:	000a      	movs	r2, r1
 8000ef0:	43d2      	mvns	r2, r2
 8000ef2:	401a      	ands	r2, r3
 8000ef4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	019b      	lsls	r3, r3, #6
 8000efa:	22ff      	movs	r2, #255	; 0xff
 8000efc:	401a      	ands	r2, r3
 8000efe:	1dfb      	adds	r3, r7, #7
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	0018      	movs	r0, r3
 8000f04:	2303      	movs	r3, #3
 8000f06:	4003      	ands	r3, r0
 8000f08:	00db      	lsls	r3, r3, #3
 8000f0a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f0c:	481f      	ldr	r0, [pc, #124]	; (8000f8c <__NVIC_SetPriority+0xd4>)
 8000f0e:	1dfb      	adds	r3, r7, #7
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	b25b      	sxtb	r3, r3
 8000f14:	089b      	lsrs	r3, r3, #2
 8000f16:	430a      	orrs	r2, r1
 8000f18:	33c0      	adds	r3, #192	; 0xc0
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f1e:	e031      	b.n	8000f84 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f20:	4a1b      	ldr	r2, [pc, #108]	; (8000f90 <__NVIC_SetPriority+0xd8>)
 8000f22:	1dfb      	adds	r3, r7, #7
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	0019      	movs	r1, r3
 8000f28:	230f      	movs	r3, #15
 8000f2a:	400b      	ands	r3, r1
 8000f2c:	3b08      	subs	r3, #8
 8000f2e:	089b      	lsrs	r3, r3, #2
 8000f30:	3306      	adds	r3, #6
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	18d3      	adds	r3, r2, r3
 8000f36:	3304      	adds	r3, #4
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	1dfa      	adds	r2, r7, #7
 8000f3c:	7812      	ldrb	r2, [r2, #0]
 8000f3e:	0011      	movs	r1, r2
 8000f40:	2203      	movs	r2, #3
 8000f42:	400a      	ands	r2, r1
 8000f44:	00d2      	lsls	r2, r2, #3
 8000f46:	21ff      	movs	r1, #255	; 0xff
 8000f48:	4091      	lsls	r1, r2
 8000f4a:	000a      	movs	r2, r1
 8000f4c:	43d2      	mvns	r2, r2
 8000f4e:	401a      	ands	r2, r3
 8000f50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	019b      	lsls	r3, r3, #6
 8000f56:	22ff      	movs	r2, #255	; 0xff
 8000f58:	401a      	ands	r2, r3
 8000f5a:	1dfb      	adds	r3, r7, #7
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	0018      	movs	r0, r3
 8000f60:	2303      	movs	r3, #3
 8000f62:	4003      	ands	r3, r0
 8000f64:	00db      	lsls	r3, r3, #3
 8000f66:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f68:	4809      	ldr	r0, [pc, #36]	; (8000f90 <__NVIC_SetPriority+0xd8>)
 8000f6a:	1dfb      	adds	r3, r7, #7
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	001c      	movs	r4, r3
 8000f70:	230f      	movs	r3, #15
 8000f72:	4023      	ands	r3, r4
 8000f74:	3b08      	subs	r3, #8
 8000f76:	089b      	lsrs	r3, r3, #2
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	3306      	adds	r3, #6
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	18c3      	adds	r3, r0, r3
 8000f80:	3304      	adds	r3, #4
 8000f82:	601a      	str	r2, [r3, #0]
}
 8000f84:	46c0      	nop			; (mov r8, r8)
 8000f86:	46bd      	mov	sp, r7
 8000f88:	b003      	add	sp, #12
 8000f8a:	bd90      	pop	{r4, r7, pc}
 8000f8c:	e000e100 	.word	0xe000e100
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	1e5a      	subs	r2, r3, #1
 8000fa0:	2380      	movs	r3, #128	; 0x80
 8000fa2:	045b      	lsls	r3, r3, #17
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d301      	bcc.n	8000fac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e010      	b.n	8000fce <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fac:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <SysTick_Config+0x44>)
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	3a01      	subs	r2, #1
 8000fb2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	425b      	negs	r3, r3
 8000fb8:	2103      	movs	r1, #3
 8000fba:	0018      	movs	r0, r3
 8000fbc:	f7ff ff7c 	bl	8000eb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc0:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <SysTick_Config+0x44>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fc6:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <SysTick_Config+0x44>)
 8000fc8:	2207      	movs	r2, #7
 8000fca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	0018      	movs	r0, r3
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	b002      	add	sp, #8
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	46c0      	nop			; (mov r8, r8)
 8000fd8:	e000e010 	.word	0xe000e010

08000fdc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60b9      	str	r1, [r7, #8]
 8000fe4:	607a      	str	r2, [r7, #4]
 8000fe6:	210f      	movs	r1, #15
 8000fe8:	187b      	adds	r3, r7, r1
 8000fea:	1c02      	adds	r2, r0, #0
 8000fec:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000fee:	68ba      	ldr	r2, [r7, #8]
 8000ff0:	187b      	adds	r3, r7, r1
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	b25b      	sxtb	r3, r3
 8000ff6:	0011      	movs	r1, r2
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	f7ff ff5d 	bl	8000eb8 <__NVIC_SetPriority>
}
 8000ffe:	46c0      	nop			; (mov r8, r8)
 8001000:	46bd      	mov	sp, r7
 8001002:	b004      	add	sp, #16
 8001004:	bd80      	pop	{r7, pc}

08001006 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b082      	sub	sp, #8
 800100a:	af00      	add	r7, sp, #0
 800100c:	0002      	movs	r2, r0
 800100e:	1dfb      	adds	r3, r7, #7
 8001010:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001012:	1dfb      	adds	r3, r7, #7
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	b25b      	sxtb	r3, r3
 8001018:	0018      	movs	r0, r3
 800101a:	f7ff ff33 	bl	8000e84 <__NVIC_EnableIRQ>
}
 800101e:	46c0      	nop			; (mov r8, r8)
 8001020:	46bd      	mov	sp, r7
 8001022:	b002      	add	sp, #8
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	0018      	movs	r0, r3
 8001032:	f7ff ffaf 	bl	8000f94 <SysTick_Config>
 8001036:	0003      	movs	r3, r0
}
 8001038:	0018      	movs	r0, r3
 800103a:	46bd      	mov	sp, r7
 800103c:	b002      	add	sp, #8
 800103e:	bd80      	pop	{r7, pc}

08001040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001056:	e14f      	b.n	80012f8 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2101      	movs	r1, #1
 800105e:	697a      	ldr	r2, [r7, #20]
 8001060:	4091      	lsls	r1, r2
 8001062:	000a      	movs	r2, r1
 8001064:	4013      	ands	r3, r2
 8001066:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d100      	bne.n	8001070 <HAL_GPIO_Init+0x30>
 800106e:	e140      	b.n	80012f2 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	2b01      	cmp	r3, #1
 8001076:	d00b      	beq.n	8001090 <HAL_GPIO_Init+0x50>
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	2b02      	cmp	r3, #2
 800107e:	d007      	beq.n	8001090 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001084:	2b11      	cmp	r3, #17
 8001086:	d003      	beq.n	8001090 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	2b12      	cmp	r3, #18
 800108e:	d130      	bne.n	80010f2 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	2203      	movs	r2, #3
 800109c:	409a      	lsls	r2, r3
 800109e:	0013      	movs	r3, r2
 80010a0:	43da      	mvns	r2, r3
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	4013      	ands	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	68da      	ldr	r2, [r3, #12]
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	409a      	lsls	r2, r3
 80010b2:	0013      	movs	r3, r2
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010c6:	2201      	movs	r2, #1
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	409a      	lsls	r2, r3
 80010cc:	0013      	movs	r3, r2
 80010ce:	43da      	mvns	r2, r3
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	4013      	ands	r3, r2
 80010d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	091b      	lsrs	r3, r3, #4
 80010dc:	2201      	movs	r2, #1
 80010de:	401a      	ands	r2, r3
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	409a      	lsls	r2, r3
 80010e4:	0013      	movs	r3, r2
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	2203      	movs	r2, #3
 80010fe:	409a      	lsls	r2, r3
 8001100:	0013      	movs	r3, r2
 8001102:	43da      	mvns	r2, r3
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	4013      	ands	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	689a      	ldr	r2, [r3, #8]
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	409a      	lsls	r2, r3
 8001114:	0013      	movs	r3, r2
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	4313      	orrs	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	2b02      	cmp	r3, #2
 8001128:	d003      	beq.n	8001132 <HAL_GPIO_Init+0xf2>
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	2b12      	cmp	r3, #18
 8001130:	d123      	bne.n	800117a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	08da      	lsrs	r2, r3, #3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	3208      	adds	r2, #8
 800113a:	0092      	lsls	r2, r2, #2
 800113c:	58d3      	ldr	r3, [r2, r3]
 800113e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	2207      	movs	r2, #7
 8001144:	4013      	ands	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	220f      	movs	r2, #15
 800114a:	409a      	lsls	r2, r3
 800114c:	0013      	movs	r3, r2
 800114e:	43da      	mvns	r2, r3
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	4013      	ands	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	691a      	ldr	r2, [r3, #16]
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	2107      	movs	r1, #7
 800115e:	400b      	ands	r3, r1
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	409a      	lsls	r2, r3
 8001164:	0013      	movs	r3, r2
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	4313      	orrs	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	08da      	lsrs	r2, r3, #3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3208      	adds	r2, #8
 8001174:	0092      	lsls	r2, r2, #2
 8001176:	6939      	ldr	r1, [r7, #16]
 8001178:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	2203      	movs	r2, #3
 8001186:	409a      	lsls	r2, r3
 8001188:	0013      	movs	r3, r2
 800118a:	43da      	mvns	r2, r3
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	4013      	ands	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	2203      	movs	r2, #3
 8001198:	401a      	ands	r2, r3
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	409a      	lsls	r2, r3
 80011a0:	0013      	movs	r3, r2
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685a      	ldr	r2, [r3, #4]
 80011b2:	2380      	movs	r3, #128	; 0x80
 80011b4:	055b      	lsls	r3, r3, #21
 80011b6:	4013      	ands	r3, r2
 80011b8:	d100      	bne.n	80011bc <HAL_GPIO_Init+0x17c>
 80011ba:	e09a      	b.n	80012f2 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011bc:	4b54      	ldr	r3, [pc, #336]	; (8001310 <HAL_GPIO_Init+0x2d0>)
 80011be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011c0:	4b53      	ldr	r3, [pc, #332]	; (8001310 <HAL_GPIO_Init+0x2d0>)
 80011c2:	2101      	movs	r1, #1
 80011c4:	430a      	orrs	r2, r1
 80011c6:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80011c8:	4a52      	ldr	r2, [pc, #328]	; (8001314 <HAL_GPIO_Init+0x2d4>)
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	089b      	lsrs	r3, r3, #2
 80011ce:	3302      	adds	r3, #2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	589b      	ldr	r3, [r3, r2]
 80011d4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	2203      	movs	r2, #3
 80011da:	4013      	ands	r3, r2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	220f      	movs	r2, #15
 80011e0:	409a      	lsls	r2, r3
 80011e2:	0013      	movs	r3, r2
 80011e4:	43da      	mvns	r2, r3
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	4013      	ands	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	23a0      	movs	r3, #160	; 0xa0
 80011f0:	05db      	lsls	r3, r3, #23
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d019      	beq.n	800122a <HAL_GPIO_Init+0x1ea>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a47      	ldr	r2, [pc, #284]	; (8001318 <HAL_GPIO_Init+0x2d8>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d013      	beq.n	8001226 <HAL_GPIO_Init+0x1e6>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a46      	ldr	r2, [pc, #280]	; (800131c <HAL_GPIO_Init+0x2dc>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d00d      	beq.n	8001222 <HAL_GPIO_Init+0x1e2>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a45      	ldr	r2, [pc, #276]	; (8001320 <HAL_GPIO_Init+0x2e0>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d007      	beq.n	800121e <HAL_GPIO_Init+0x1de>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a44      	ldr	r2, [pc, #272]	; (8001324 <HAL_GPIO_Init+0x2e4>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d101      	bne.n	800121a <HAL_GPIO_Init+0x1da>
 8001216:	2305      	movs	r3, #5
 8001218:	e008      	b.n	800122c <HAL_GPIO_Init+0x1ec>
 800121a:	2306      	movs	r3, #6
 800121c:	e006      	b.n	800122c <HAL_GPIO_Init+0x1ec>
 800121e:	2303      	movs	r3, #3
 8001220:	e004      	b.n	800122c <HAL_GPIO_Init+0x1ec>
 8001222:	2302      	movs	r3, #2
 8001224:	e002      	b.n	800122c <HAL_GPIO_Init+0x1ec>
 8001226:	2301      	movs	r3, #1
 8001228:	e000      	b.n	800122c <HAL_GPIO_Init+0x1ec>
 800122a:	2300      	movs	r3, #0
 800122c:	697a      	ldr	r2, [r7, #20]
 800122e:	2103      	movs	r1, #3
 8001230:	400a      	ands	r2, r1
 8001232:	0092      	lsls	r2, r2, #2
 8001234:	4093      	lsls	r3, r2
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	4313      	orrs	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800123c:	4935      	ldr	r1, [pc, #212]	; (8001314 <HAL_GPIO_Init+0x2d4>)
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	089b      	lsrs	r3, r3, #2
 8001242:	3302      	adds	r3, #2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800124a:	4b37      	ldr	r3, [pc, #220]	; (8001328 <HAL_GPIO_Init+0x2e8>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	43da      	mvns	r2, r3
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	4013      	ands	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685a      	ldr	r2, [r3, #4]
 800125e:	2380      	movs	r3, #128	; 0x80
 8001260:	025b      	lsls	r3, r3, #9
 8001262:	4013      	ands	r3, r2
 8001264:	d003      	beq.n	800126e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	4313      	orrs	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800126e:	4b2e      	ldr	r3, [pc, #184]	; (8001328 <HAL_GPIO_Init+0x2e8>)
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001274:	4b2c      	ldr	r3, [pc, #176]	; (8001328 <HAL_GPIO_Init+0x2e8>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	43da      	mvns	r2, r3
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	4013      	ands	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685a      	ldr	r2, [r3, #4]
 8001288:	2380      	movs	r3, #128	; 0x80
 800128a:	029b      	lsls	r3, r3, #10
 800128c:	4013      	ands	r3, r2
 800128e:	d003      	beq.n	8001298 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	4313      	orrs	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001298:	4b23      	ldr	r3, [pc, #140]	; (8001328 <HAL_GPIO_Init+0x2e8>)
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800129e:	4b22      	ldr	r3, [pc, #136]	; (8001328 <HAL_GPIO_Init+0x2e8>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	43da      	mvns	r2, r3
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	4013      	ands	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685a      	ldr	r2, [r3, #4]
 80012b2:	2380      	movs	r3, #128	; 0x80
 80012b4:	035b      	lsls	r3, r3, #13
 80012b6:	4013      	ands	r3, r2
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	4313      	orrs	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012c2:	4b19      	ldr	r3, [pc, #100]	; (8001328 <HAL_GPIO_Init+0x2e8>)
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80012c8:	4b17      	ldr	r3, [pc, #92]	; (8001328 <HAL_GPIO_Init+0x2e8>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	43da      	mvns	r2, r3
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	4013      	ands	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685a      	ldr	r2, [r3, #4]
 80012dc:	2380      	movs	r3, #128	; 0x80
 80012de:	039b      	lsls	r3, r3, #14
 80012e0:	4013      	ands	r3, r2
 80012e2:	d003      	beq.n	80012ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012ec:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <HAL_GPIO_Init+0x2e8>)
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	3301      	adds	r3, #1
 80012f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	40da      	lsrs	r2, r3
 8001300:	1e13      	subs	r3, r2, #0
 8001302:	d000      	beq.n	8001306 <HAL_GPIO_Init+0x2c6>
 8001304:	e6a8      	b.n	8001058 <HAL_GPIO_Init+0x18>
  }
}
 8001306:	46c0      	nop			; (mov r8, r8)
 8001308:	46c0      	nop			; (mov r8, r8)
 800130a:	46bd      	mov	sp, r7
 800130c:	b006      	add	sp, #24
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40021000 	.word	0x40021000
 8001314:	40010000 	.word	0x40010000
 8001318:	50000400 	.word	0x50000400
 800131c:	50000800 	.word	0x50000800
 8001320:	50000c00 	.word	0x50000c00
 8001324:	50001c00 	.word	0x50001c00
 8001328:	40010400 	.word	0x40010400

0800132c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800132c:	b5b0      	push	{r4, r5, r7, lr}
 800132e:	b08a      	sub	sp, #40	; 0x28
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d102      	bne.n	8001340 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	f000 fb5a 	bl	80019f4 <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001340:	4bce      	ldr	r3, [pc, #824]	; (800167c <HAL_RCC_OscConfig+0x350>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	220c      	movs	r2, #12
 8001346:	4013      	ands	r3, r2
 8001348:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800134a:	4bcc      	ldr	r3, [pc, #816]	; (800167c <HAL_RCC_OscConfig+0x350>)
 800134c:	68da      	ldr	r2, [r3, #12]
 800134e:	2380      	movs	r3, #128	; 0x80
 8001350:	025b      	lsls	r3, r3, #9
 8001352:	4013      	ands	r3, r2
 8001354:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2201      	movs	r2, #1
 800135c:	4013      	ands	r3, r2
 800135e:	d100      	bne.n	8001362 <HAL_RCC_OscConfig+0x36>
 8001360:	e07c      	b.n	800145c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001362:	6a3b      	ldr	r3, [r7, #32]
 8001364:	2b08      	cmp	r3, #8
 8001366:	d007      	beq.n	8001378 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001368:	6a3b      	ldr	r3, [r7, #32]
 800136a:	2b0c      	cmp	r3, #12
 800136c:	d111      	bne.n	8001392 <HAL_RCC_OscConfig+0x66>
 800136e:	69fa      	ldr	r2, [r7, #28]
 8001370:	2380      	movs	r3, #128	; 0x80
 8001372:	025b      	lsls	r3, r3, #9
 8001374:	429a      	cmp	r2, r3
 8001376:	d10c      	bne.n	8001392 <HAL_RCC_OscConfig+0x66>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001378:	4bc0      	ldr	r3, [pc, #768]	; (800167c <HAL_RCC_OscConfig+0x350>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	2380      	movs	r3, #128	; 0x80
 800137e:	029b      	lsls	r3, r3, #10
 8001380:	4013      	ands	r3, r2
 8001382:	d100      	bne.n	8001386 <HAL_RCC_OscConfig+0x5a>
 8001384:	e069      	b.n	800145a <HAL_RCC_OscConfig+0x12e>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d165      	bne.n	800145a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e330      	b.n	80019f4 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685a      	ldr	r2, [r3, #4]
 8001396:	2380      	movs	r3, #128	; 0x80
 8001398:	025b      	lsls	r3, r3, #9
 800139a:	429a      	cmp	r2, r3
 800139c:	d107      	bne.n	80013ae <HAL_RCC_OscConfig+0x82>
 800139e:	4bb7      	ldr	r3, [pc, #732]	; (800167c <HAL_RCC_OscConfig+0x350>)
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	4bb6      	ldr	r3, [pc, #728]	; (800167c <HAL_RCC_OscConfig+0x350>)
 80013a4:	2180      	movs	r1, #128	; 0x80
 80013a6:	0249      	lsls	r1, r1, #9
 80013a8:	430a      	orrs	r2, r1
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	e027      	b.n	80013fe <HAL_RCC_OscConfig+0xd2>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685a      	ldr	r2, [r3, #4]
 80013b2:	23a0      	movs	r3, #160	; 0xa0
 80013b4:	02db      	lsls	r3, r3, #11
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d10e      	bne.n	80013d8 <HAL_RCC_OscConfig+0xac>
 80013ba:	4bb0      	ldr	r3, [pc, #704]	; (800167c <HAL_RCC_OscConfig+0x350>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	4baf      	ldr	r3, [pc, #700]	; (800167c <HAL_RCC_OscConfig+0x350>)
 80013c0:	2180      	movs	r1, #128	; 0x80
 80013c2:	02c9      	lsls	r1, r1, #11
 80013c4:	430a      	orrs	r2, r1
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	4bac      	ldr	r3, [pc, #688]	; (800167c <HAL_RCC_OscConfig+0x350>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	4bab      	ldr	r3, [pc, #684]	; (800167c <HAL_RCC_OscConfig+0x350>)
 80013ce:	2180      	movs	r1, #128	; 0x80
 80013d0:	0249      	lsls	r1, r1, #9
 80013d2:	430a      	orrs	r2, r1
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	e012      	b.n	80013fe <HAL_RCC_OscConfig+0xd2>
 80013d8:	4ba8      	ldr	r3, [pc, #672]	; (800167c <HAL_RCC_OscConfig+0x350>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	4ba7      	ldr	r3, [pc, #668]	; (800167c <HAL_RCC_OscConfig+0x350>)
 80013de:	49a8      	ldr	r1, [pc, #672]	; (8001680 <HAL_RCC_OscConfig+0x354>)
 80013e0:	400a      	ands	r2, r1
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	4ba5      	ldr	r3, [pc, #660]	; (800167c <HAL_RCC_OscConfig+0x350>)
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	2380      	movs	r3, #128	; 0x80
 80013ea:	025b      	lsls	r3, r3, #9
 80013ec:	4013      	ands	r3, r2
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	4ba2      	ldr	r3, [pc, #648]	; (800167c <HAL_RCC_OscConfig+0x350>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	4ba1      	ldr	r3, [pc, #644]	; (800167c <HAL_RCC_OscConfig+0x350>)
 80013f8:	49a2      	ldr	r1, [pc, #648]	; (8001684 <HAL_RCC_OscConfig+0x358>)
 80013fa:	400a      	ands	r2, r1
 80013fc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d014      	beq.n	8001430 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001406:	f000 fdfd 	bl	8002004 <HAL_GetTick>
 800140a:	0003      	movs	r3, r0
 800140c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0xf6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001410:	f000 fdf8 	bl	8002004 <HAL_GetTick>
 8001414:	0002      	movs	r2, r0
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b64      	cmp	r3, #100	; 0x64
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e2e8      	b.n	80019f4 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001422:	4b96      	ldr	r3, [pc, #600]	; (800167c <HAL_RCC_OscConfig+0x350>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	2380      	movs	r3, #128	; 0x80
 8001428:	029b      	lsls	r3, r3, #10
 800142a:	4013      	ands	r3, r2
 800142c:	d0f0      	beq.n	8001410 <HAL_RCC_OscConfig+0xe4>
 800142e:	e015      	b.n	800145c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001430:	f000 fde8 	bl	8002004 <HAL_GetTick>
 8001434:	0003      	movs	r3, r0
 8001436:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001438:	e008      	b.n	800144c <HAL_RCC_OscConfig+0x120>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800143a:	f000 fde3 	bl	8002004 <HAL_GetTick>
 800143e:	0002      	movs	r2, r0
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b64      	cmp	r3, #100	; 0x64
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e2d3      	b.n	80019f4 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800144c:	4b8b      	ldr	r3, [pc, #556]	; (800167c <HAL_RCC_OscConfig+0x350>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	2380      	movs	r3, #128	; 0x80
 8001452:	029b      	lsls	r3, r3, #10
 8001454:	4013      	ands	r3, r2
 8001456:	d1f0      	bne.n	800143a <HAL_RCC_OscConfig+0x10e>
 8001458:	e000      	b.n	800145c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800145a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2202      	movs	r2, #2
 8001462:	4013      	ands	r3, r2
 8001464:	d100      	bne.n	8001468 <HAL_RCC_OscConfig+0x13c>
 8001466:	e08b      	b.n	8001580 <HAL_RCC_OscConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800146e:	6a3b      	ldr	r3, [r7, #32]
 8001470:	2b04      	cmp	r3, #4
 8001472:	d005      	beq.n	8001480 <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001474:	6a3b      	ldr	r3, [r7, #32]
 8001476:	2b0c      	cmp	r3, #12
 8001478:	d13e      	bne.n	80014f8 <HAL_RCC_OscConfig+0x1cc>
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d13b      	bne.n	80014f8 <HAL_RCC_OscConfig+0x1cc>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001480:	4b7e      	ldr	r3, [pc, #504]	; (800167c <HAL_RCC_OscConfig+0x350>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2204      	movs	r2, #4
 8001486:	4013      	ands	r3, r2
 8001488:	d004      	beq.n	8001494 <HAL_RCC_OscConfig+0x168>
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d101      	bne.n	8001494 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e2af      	b.n	80019f4 <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001494:	4b79      	ldr	r3, [pc, #484]	; (800167c <HAL_RCC_OscConfig+0x350>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	4a7b      	ldr	r2, [pc, #492]	; (8001688 <HAL_RCC_OscConfig+0x35c>)
 800149a:	4013      	ands	r3, r2
 800149c:	0019      	movs	r1, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	691b      	ldr	r3, [r3, #16]
 80014a2:	021a      	lsls	r2, r3, #8
 80014a4:	4b75      	ldr	r3, [pc, #468]	; (800167c <HAL_RCC_OscConfig+0x350>)
 80014a6:	430a      	orrs	r2, r1
 80014a8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80014aa:	4b74      	ldr	r3, [pc, #464]	; (800167c <HAL_RCC_OscConfig+0x350>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2209      	movs	r2, #9
 80014b0:	4393      	bics	r3, r2
 80014b2:	0019      	movs	r1, r3
 80014b4:	4b71      	ldr	r3, [pc, #452]	; (800167c <HAL_RCC_OscConfig+0x350>)
 80014b6:	697a      	ldr	r2, [r7, #20]
 80014b8:	430a      	orrs	r2, r1
 80014ba:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014bc:	f000 fbe8 	bl	8001c90 <HAL_RCC_GetSysClockFreq>
 80014c0:	0001      	movs	r1, r0
 80014c2:	4b6e      	ldr	r3, [pc, #440]	; (800167c <HAL_RCC_OscConfig+0x350>)
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	091b      	lsrs	r3, r3, #4
 80014c8:	220f      	movs	r2, #15
 80014ca:	4013      	ands	r3, r2
 80014cc:	4a6f      	ldr	r2, [pc, #444]	; (800168c <HAL_RCC_OscConfig+0x360>)
 80014ce:	5cd3      	ldrb	r3, [r2, r3]
 80014d0:	000a      	movs	r2, r1
 80014d2:	40da      	lsrs	r2, r3
 80014d4:	4b6e      	ldr	r3, [pc, #440]	; (8001690 <HAL_RCC_OscConfig+0x364>)
 80014d6:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80014d8:	4b6e      	ldr	r3, [pc, #440]	; (8001694 <HAL_RCC_OscConfig+0x368>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2513      	movs	r5, #19
 80014de:	197c      	adds	r4, r7, r5
 80014e0:	0018      	movs	r0, r3
 80014e2:	f7ff fc9b 	bl	8000e1c <HAL_InitTick>
 80014e6:	0003      	movs	r3, r0
 80014e8:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80014ea:	197b      	adds	r3, r7, r5
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d046      	beq.n	8001580 <HAL_RCC_OscConfig+0x254>
      {
        return status;
 80014f2:	197b      	adds	r3, r7, r5
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	e27d      	b.n	80019f4 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d027      	beq.n	800154e <HAL_RCC_OscConfig+0x222>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80014fe:	4b5f      	ldr	r3, [pc, #380]	; (800167c <HAL_RCC_OscConfig+0x350>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2209      	movs	r2, #9
 8001504:	4393      	bics	r3, r2
 8001506:	0019      	movs	r1, r3
 8001508:	4b5c      	ldr	r3, [pc, #368]	; (800167c <HAL_RCC_OscConfig+0x350>)
 800150a:	697a      	ldr	r2, [r7, #20]
 800150c:	430a      	orrs	r2, r1
 800150e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001510:	f000 fd78 	bl	8002004 <HAL_GetTick>
 8001514:	0003      	movs	r3, r0
 8001516:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001518:	e008      	b.n	800152c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800151a:	f000 fd73 	bl	8002004 <HAL_GetTick>
 800151e:	0002      	movs	r2, r0
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e263      	b.n	80019f4 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800152c:	4b53      	ldr	r3, [pc, #332]	; (800167c <HAL_RCC_OscConfig+0x350>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2204      	movs	r2, #4
 8001532:	4013      	ands	r3, r2
 8001534:	d0f1      	beq.n	800151a <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001536:	4b51      	ldr	r3, [pc, #324]	; (800167c <HAL_RCC_OscConfig+0x350>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	4a53      	ldr	r2, [pc, #332]	; (8001688 <HAL_RCC_OscConfig+0x35c>)
 800153c:	4013      	ands	r3, r2
 800153e:	0019      	movs	r1, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	691b      	ldr	r3, [r3, #16]
 8001544:	021a      	lsls	r2, r3, #8
 8001546:	4b4d      	ldr	r3, [pc, #308]	; (800167c <HAL_RCC_OscConfig+0x350>)
 8001548:	430a      	orrs	r2, r1
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	e018      	b.n	8001580 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800154e:	4b4b      	ldr	r3, [pc, #300]	; (800167c <HAL_RCC_OscConfig+0x350>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	4b4a      	ldr	r3, [pc, #296]	; (800167c <HAL_RCC_OscConfig+0x350>)
 8001554:	2101      	movs	r1, #1
 8001556:	438a      	bics	r2, r1
 8001558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155a:	f000 fd53 	bl	8002004 <HAL_GetTick>
 800155e:	0003      	movs	r3, r0
 8001560:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0x24a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001564:	f000 fd4e 	bl	8002004 <HAL_GetTick>
 8001568:	0002      	movs	r2, r0
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e23e      	b.n	80019f4 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001576:	4b41      	ldr	r3, [pc, #260]	; (800167c <HAL_RCC_OscConfig+0x350>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2204      	movs	r2, #4
 800157c:	4013      	ands	r3, r2
 800157e:	d1f1      	bne.n	8001564 <HAL_RCC_OscConfig+0x238>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2210      	movs	r2, #16
 8001586:	4013      	ands	r3, r2
 8001588:	d100      	bne.n	800158c <HAL_RCC_OscConfig+0x260>
 800158a:	e0a1      	b.n	80016d0 <HAL_RCC_OscConfig+0x3a4>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800158c:	6a3b      	ldr	r3, [r7, #32]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d140      	bne.n	8001614 <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001592:	4b3a      	ldr	r3, [pc, #232]	; (800167c <HAL_RCC_OscConfig+0x350>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	2380      	movs	r3, #128	; 0x80
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	4013      	ands	r3, r2
 800159c:	d005      	beq.n	80015aa <HAL_RCC_OscConfig+0x27e>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d101      	bne.n	80015aa <HAL_RCC_OscConfig+0x27e>
      {
        return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e224      	b.n	80019f4 <HAL_RCC_OscConfig+0x6c8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015aa:	4b34      	ldr	r3, [pc, #208]	; (800167c <HAL_RCC_OscConfig+0x350>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	4a3a      	ldr	r2, [pc, #232]	; (8001698 <HAL_RCC_OscConfig+0x36c>)
 80015b0:	4013      	ands	r3, r2
 80015b2:	0019      	movs	r1, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6a1a      	ldr	r2, [r3, #32]
 80015b8:	4b30      	ldr	r3, [pc, #192]	; (800167c <HAL_RCC_OscConfig+0x350>)
 80015ba:	430a      	orrs	r2, r1
 80015bc:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015be:	4b2f      	ldr	r3, [pc, #188]	; (800167c <HAL_RCC_OscConfig+0x350>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	021b      	lsls	r3, r3, #8
 80015c4:	0a19      	lsrs	r1, r3, #8
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	69db      	ldr	r3, [r3, #28]
 80015ca:	061a      	lsls	r2, r3, #24
 80015cc:	4b2b      	ldr	r3, [pc, #172]	; (800167c <HAL_RCC_OscConfig+0x350>)
 80015ce:	430a      	orrs	r2, r1
 80015d0:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a1b      	ldr	r3, [r3, #32]
 80015d6:	0b5b      	lsrs	r3, r3, #13
 80015d8:	3301      	adds	r3, #1
 80015da:	2280      	movs	r2, #128	; 0x80
 80015dc:	0212      	lsls	r2, r2, #8
 80015de:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80015e0:	4b26      	ldr	r3, [pc, #152]	; (800167c <HAL_RCC_OscConfig+0x350>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	091b      	lsrs	r3, r3, #4
 80015e6:	210f      	movs	r1, #15
 80015e8:	400b      	ands	r3, r1
 80015ea:	4928      	ldr	r1, [pc, #160]	; (800168c <HAL_RCC_OscConfig+0x360>)
 80015ec:	5ccb      	ldrb	r3, [r1, r3]
 80015ee:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80015f0:	4b27      	ldr	r3, [pc, #156]	; (8001690 <HAL_RCC_OscConfig+0x364>)
 80015f2:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80015f4:	4b27      	ldr	r3, [pc, #156]	; (8001694 <HAL_RCC_OscConfig+0x368>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2513      	movs	r5, #19
 80015fa:	197c      	adds	r4, r7, r5
 80015fc:	0018      	movs	r0, r3
 80015fe:	f7ff fc0d 	bl	8000e1c <HAL_InitTick>
 8001602:	0003      	movs	r3, r0
 8001604:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001606:	197b      	adds	r3, r7, r5
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d060      	beq.n	80016d0 <HAL_RCC_OscConfig+0x3a4>
        {
          return status;
 800160e:	197b      	adds	r3, r7, r5
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	e1ef      	b.n	80019f4 <HAL_RCC_OscConfig+0x6c8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d03f      	beq.n	800169c <HAL_RCC_OscConfig+0x370>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800161c:	4b17      	ldr	r3, [pc, #92]	; (800167c <HAL_RCC_OscConfig+0x350>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	4b16      	ldr	r3, [pc, #88]	; (800167c <HAL_RCC_OscConfig+0x350>)
 8001622:	2180      	movs	r1, #128	; 0x80
 8001624:	0049      	lsls	r1, r1, #1
 8001626:	430a      	orrs	r2, r1
 8001628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162a:	f000 fceb 	bl	8002004 <HAL_GetTick>
 800162e:	0003      	movs	r3, r0
 8001630:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001634:	f000 fce6 	bl	8002004 <HAL_GetTick>
 8001638:	0002      	movs	r2, r0
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e1d6      	b.n	80019f4 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001646:	4b0d      	ldr	r3, [pc, #52]	; (800167c <HAL_RCC_OscConfig+0x350>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	2380      	movs	r3, #128	; 0x80
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	4013      	ands	r3, r2
 8001650:	d0f0      	beq.n	8001634 <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001652:	4b0a      	ldr	r3, [pc, #40]	; (800167c <HAL_RCC_OscConfig+0x350>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	4a10      	ldr	r2, [pc, #64]	; (8001698 <HAL_RCC_OscConfig+0x36c>)
 8001658:	4013      	ands	r3, r2
 800165a:	0019      	movs	r1, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a1a      	ldr	r2, [r3, #32]
 8001660:	4b06      	ldr	r3, [pc, #24]	; (800167c <HAL_RCC_OscConfig+0x350>)
 8001662:	430a      	orrs	r2, r1
 8001664:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001666:	4b05      	ldr	r3, [pc, #20]	; (800167c <HAL_RCC_OscConfig+0x350>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	021b      	lsls	r3, r3, #8
 800166c:	0a19      	lsrs	r1, r3, #8
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	061a      	lsls	r2, r3, #24
 8001674:	4b01      	ldr	r3, [pc, #4]	; (800167c <HAL_RCC_OscConfig+0x350>)
 8001676:	430a      	orrs	r2, r1
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	e029      	b.n	80016d0 <HAL_RCC_OscConfig+0x3a4>
 800167c:	40021000 	.word	0x40021000
 8001680:	fffeffff 	.word	0xfffeffff
 8001684:	fffbffff 	.word	0xfffbffff
 8001688:	ffffe0ff 	.word	0xffffe0ff
 800168c:	08002734 	.word	0x08002734
 8001690:	20000008 	.word	0x20000008
 8001694:	2000000c 	.word	0x2000000c
 8001698:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800169c:	4bbe      	ldr	r3, [pc, #760]	; (8001998 <HAL_RCC_OscConfig+0x66c>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	4bbd      	ldr	r3, [pc, #756]	; (8001998 <HAL_RCC_OscConfig+0x66c>)
 80016a2:	49be      	ldr	r1, [pc, #760]	; (800199c <HAL_RCC_OscConfig+0x670>)
 80016a4:	400a      	ands	r2, r1
 80016a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a8:	f000 fcac 	bl	8002004 <HAL_GetTick>
 80016ac:	0003      	movs	r3, r0
 80016ae:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80016b0:	e008      	b.n	80016c4 <HAL_RCC_OscConfig+0x398>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016b2:	f000 fca7 	bl	8002004 <HAL_GetTick>
 80016b6:	0002      	movs	r2, r0
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d901      	bls.n	80016c4 <HAL_RCC_OscConfig+0x398>
          {
            return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e197      	b.n	80019f4 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80016c4:	4bb4      	ldr	r3, [pc, #720]	; (8001998 <HAL_RCC_OscConfig+0x66c>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	2380      	movs	r3, #128	; 0x80
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	4013      	ands	r3, r2
 80016ce:	d1f0      	bne.n	80016b2 <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2208      	movs	r2, #8
 80016d6:	4013      	ands	r3, r2
 80016d8:	d036      	beq.n	8001748 <HAL_RCC_OscConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d019      	beq.n	8001716 <HAL_RCC_OscConfig+0x3ea>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016e2:	4bad      	ldr	r3, [pc, #692]	; (8001998 <HAL_RCC_OscConfig+0x66c>)
 80016e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016e6:	4bac      	ldr	r3, [pc, #688]	; (8001998 <HAL_RCC_OscConfig+0x66c>)
 80016e8:	2101      	movs	r1, #1
 80016ea:	430a      	orrs	r2, r1
 80016ec:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ee:	f000 fc89 	bl	8002004 <HAL_GetTick>
 80016f2:	0003      	movs	r3, r0
 80016f4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x3de>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016f8:	f000 fc84 	bl	8002004 <HAL_GetTick>
 80016fc:	0002      	movs	r2, r0
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x3de>
        {
          return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e174      	b.n	80019f4 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800170a:	4ba3      	ldr	r3, [pc, #652]	; (8001998 <HAL_RCC_OscConfig+0x66c>)
 800170c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800170e:	2202      	movs	r2, #2
 8001710:	4013      	ands	r3, r2
 8001712:	d0f1      	beq.n	80016f8 <HAL_RCC_OscConfig+0x3cc>
 8001714:	e018      	b.n	8001748 <HAL_RCC_OscConfig+0x41c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001716:	4ba0      	ldr	r3, [pc, #640]	; (8001998 <HAL_RCC_OscConfig+0x66c>)
 8001718:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800171a:	4b9f      	ldr	r3, [pc, #636]	; (8001998 <HAL_RCC_OscConfig+0x66c>)
 800171c:	2101      	movs	r1, #1
 800171e:	438a      	bics	r2, r1
 8001720:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001722:	f000 fc6f 	bl	8002004 <HAL_GetTick>
 8001726:	0003      	movs	r3, r0
 8001728:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0x412>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800172c:	f000 fc6a 	bl	8002004 <HAL_GetTick>
 8001730:	0002      	movs	r2, r0
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e15a      	b.n	80019f4 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800173e:	4b96      	ldr	r3, [pc, #600]	; (8001998 <HAL_RCC_OscConfig+0x66c>)
 8001740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001742:	2202      	movs	r2, #2
 8001744:	4013      	ands	r3, r2
 8001746:	d1f1      	bne.n	800172c <HAL_RCC_OscConfig+0x400>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2204      	movs	r2, #4
 800174e:	4013      	ands	r3, r2
 8001750:	d100      	bne.n	8001754 <HAL_RCC_OscConfig+0x428>
 8001752:	e0ae      	b.n	80018b2 <HAL_RCC_OscConfig+0x586>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001754:	2027      	movs	r0, #39	; 0x27
 8001756:	183b      	adds	r3, r7, r0
 8001758:	2200      	movs	r2, #0
 800175a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800175c:	4b8e      	ldr	r3, [pc, #568]	; (8001998 <HAL_RCC_OscConfig+0x66c>)
 800175e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001760:	2380      	movs	r3, #128	; 0x80
 8001762:	055b      	lsls	r3, r3, #21
 8001764:	4013      	ands	r3, r2
 8001766:	d109      	bne.n	800177c <HAL_RCC_OscConfig+0x450>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001768:	4b8b      	ldr	r3, [pc, #556]	; (8001998 <HAL_RCC_OscConfig+0x66c>)
 800176a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800176c:	4b8a      	ldr	r3, [pc, #552]	; (8001998 <HAL_RCC_OscConfig+0x66c>)
 800176e:	2180      	movs	r1, #128	; 0x80
 8001770:	0549      	lsls	r1, r1, #21
 8001772:	430a      	orrs	r2, r1
 8001774:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001776:	183b      	adds	r3, r7, r0
 8001778:	2201      	movs	r2, #1
 800177a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800177c:	4b88      	ldr	r3, [pc, #544]	; (80019a0 <HAL_RCC_OscConfig+0x674>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	2380      	movs	r3, #128	; 0x80
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	4013      	ands	r3, r2
 8001786:	d11a      	bne.n	80017be <HAL_RCC_OscConfig+0x492>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001788:	4b85      	ldr	r3, [pc, #532]	; (80019a0 <HAL_RCC_OscConfig+0x674>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4b84      	ldr	r3, [pc, #528]	; (80019a0 <HAL_RCC_OscConfig+0x674>)
 800178e:	2180      	movs	r1, #128	; 0x80
 8001790:	0049      	lsls	r1, r1, #1
 8001792:	430a      	orrs	r2, r1
 8001794:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001796:	f000 fc35 	bl	8002004 <HAL_GetTick>
 800179a:	0003      	movs	r3, r0
 800179c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x486>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017a0:	f000 fc30 	bl	8002004 <HAL_GetTick>
 80017a4:	0002      	movs	r2, r0
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b64      	cmp	r3, #100	; 0x64
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x486>
        {
          return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e120      	b.n	80019f4 <HAL_RCC_OscConfig+0x6c8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b2:	4b7b      	ldr	r3, [pc, #492]	; (80019a0 <HAL_RCC_OscConfig+0x674>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	2380      	movs	r3, #128	; 0x80
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	4013      	ands	r3, r2
 80017bc:	d0f0      	beq.n	80017a0 <HAL_RCC_OscConfig+0x474>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	689a      	ldr	r2, [r3, #8]
 80017c2:	2380      	movs	r3, #128	; 0x80
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d107      	bne.n	80017da <HAL_RCC_OscConfig+0x4ae>
 80017ca:	4b73      	ldr	r3, [pc, #460]	; (8001998 <HAL_RCC_OscConfig+0x66c>)
 80017cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017ce:	4b72      	ldr	r3, [pc, #456]	; (8001998 <HAL_RCC_OscConfig+0x66c>)
 80017d0:	2180      	movs	r1, #128	; 0x80
 80017d2:	0049      	lsls	r1, r1, #1
 80017d4:	430a      	orrs	r2, r1
 80017d6:	651a      	str	r2, [r3, #80]	; 0x50
 80017d8:	e031      	b.n	800183e <HAL_RCC_OscConfig+0x512>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d10c      	bne.n	80017fc <HAL_RCC_OscConfig+0x4d0>
 80017e2:	4b6d      	ldr	r3, [pc, #436]	; (8001998 <HAL_RCC_OscConfig+0x66c>)
 80017e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017e6:	4b6c      	ldr	r3, [pc, #432]	; (8001998 <HAL_RCC_OscConfig+0x66c>)
 80017e8:	496c      	ldr	r1, [pc, #432]	; (800199c <HAL_RCC_OscConfig+0x670>)
 80017ea:	400a      	ands	r2, r1
 80017ec:	651a      	str	r2, [r3, #80]	; 0x50
 80017ee:	4b6a      	ldr	r3, [pc, #424]	; (8001998 <HAL_RCC_OscConfig+0x66c>)
 80017f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017f2:	4b69      	ldr	r3, [pc, #420]	; (8001998 <HAL_RCC_OscConfig+0x66c>)
 80017f4:	496b      	ldr	r1, [pc, #428]	; (80019a4 <HAL_RCC_OscConfig+0x678>)
 80017f6:	400a      	ands	r2, r1
 80017f8:	651a      	str	r2, [r3, #80]	; 0x50
 80017fa:	e020      	b.n	800183e <HAL_RCC_OscConfig+0x512>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	23a0      	movs	r3, #160	; 0xa0
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	429a      	cmp	r2, r3
 8001806:	d10e      	bne.n	8001826 <HAL_RCC_OscConfig+0x4fa>
 8001808:	4b63      	ldr	r3, [pc, #396]	; (8001998 <HAL_RCC_OscConfig+0x66c>)
 800180a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800180c:	4b62      	ldr	r3, [pc, #392]	; (8001998 <HAL_RCC_OscConfig+0x66c>)
 800180e:	2180      	movs	r1, #128	; 0x80
 8001810:	00c9      	lsls	r1, r1, #3
 8001812:	430a      	orrs	r2, r1
 8001814:	651a      	str	r2, [r3, #80]	; 0x50
 8001816:	4b60      	ldr	r3, [pc, #384]	; (8001998 <HAL_RCC_OscConfig+0x66c>)
 8001818:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800181a:	4b5f      	ldr	r3, [pc, #380]	; (8001998 <HAL_RCC_OscConfig+0x66c>)
 800181c:	2180      	movs	r1, #128	; 0x80
 800181e:	0049      	lsls	r1, r1, #1
 8001820:	430a      	orrs	r2, r1
 8001822:	651a      	str	r2, [r3, #80]	; 0x50
 8001824:	e00b      	b.n	800183e <HAL_RCC_OscConfig+0x512>
 8001826:	4b5c      	ldr	r3, [pc, #368]	; (8001998 <HAL_RCC_OscConfig+0x66c>)
 8001828:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800182a:	4b5b      	ldr	r3, [pc, #364]	; (8001998 <HAL_RCC_OscConfig+0x66c>)
 800182c:	495b      	ldr	r1, [pc, #364]	; (800199c <HAL_RCC_OscConfig+0x670>)
 800182e:	400a      	ands	r2, r1
 8001830:	651a      	str	r2, [r3, #80]	; 0x50
 8001832:	4b59      	ldr	r3, [pc, #356]	; (8001998 <HAL_RCC_OscConfig+0x66c>)
 8001834:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001836:	4b58      	ldr	r3, [pc, #352]	; (8001998 <HAL_RCC_OscConfig+0x66c>)
 8001838:	495a      	ldr	r1, [pc, #360]	; (80019a4 <HAL_RCC_OscConfig+0x678>)
 800183a:	400a      	ands	r2, r1
 800183c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d015      	beq.n	8001872 <HAL_RCC_OscConfig+0x546>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001846:	f000 fbdd 	bl	8002004 <HAL_GetTick>
 800184a:	0003      	movs	r3, r0
 800184c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800184e:	e009      	b.n	8001864 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001850:	f000 fbd8 	bl	8002004 <HAL_GetTick>
 8001854:	0002      	movs	r2, r0
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	4a53      	ldr	r2, [pc, #332]	; (80019a8 <HAL_RCC_OscConfig+0x67c>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e0c7      	b.n	80019f4 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001864:	4b4c      	ldr	r3, [pc, #304]	; (8001998 <HAL_RCC_OscConfig+0x66c>)
 8001866:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001868:	2380      	movs	r3, #128	; 0x80
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4013      	ands	r3, r2
 800186e:	d0ef      	beq.n	8001850 <HAL_RCC_OscConfig+0x524>
 8001870:	e014      	b.n	800189c <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001872:	f000 fbc7 	bl	8002004 <HAL_GetTick>
 8001876:	0003      	movs	r3, r0
 8001878:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800187a:	e009      	b.n	8001890 <HAL_RCC_OscConfig+0x564>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800187c:	f000 fbc2 	bl	8002004 <HAL_GetTick>
 8001880:	0002      	movs	r2, r0
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	4a48      	ldr	r2, [pc, #288]	; (80019a8 <HAL_RCC_OscConfig+0x67c>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0x564>
        {
          return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e0b1      	b.n	80019f4 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001890:	4b41      	ldr	r3, [pc, #260]	; (8001998 <HAL_RCC_OscConfig+0x66c>)
 8001892:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001894:	2380      	movs	r3, #128	; 0x80
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4013      	ands	r3, r2
 800189a:	d1ef      	bne.n	800187c <HAL_RCC_OscConfig+0x550>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800189c:	2327      	movs	r3, #39	; 0x27
 800189e:	18fb      	adds	r3, r7, r3
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d105      	bne.n	80018b2 <HAL_RCC_OscConfig+0x586>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018a6:	4b3c      	ldr	r3, [pc, #240]	; (8001998 <HAL_RCC_OscConfig+0x66c>)
 80018a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018aa:	4b3b      	ldr	r3, [pc, #236]	; (8001998 <HAL_RCC_OscConfig+0x66c>)
 80018ac:	493f      	ldr	r1, [pc, #252]	; (80019ac <HAL_RCC_OscConfig+0x680>)
 80018ae:	400a      	ands	r2, r1
 80018b0:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d100      	bne.n	80018bc <HAL_RCC_OscConfig+0x590>
 80018ba:	e09a      	b.n	80019f2 <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018bc:	6a3b      	ldr	r3, [r7, #32]
 80018be:	2b0c      	cmp	r3, #12
 80018c0:	d064      	beq.n	800198c <HAL_RCC_OscConfig+0x660>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d145      	bne.n	8001956 <HAL_RCC_OscConfig+0x62a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ca:	4b33      	ldr	r3, [pc, #204]	; (8001998 <HAL_RCC_OscConfig+0x66c>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	4b32      	ldr	r3, [pc, #200]	; (8001998 <HAL_RCC_OscConfig+0x66c>)
 80018d0:	4937      	ldr	r1, [pc, #220]	; (80019b0 <HAL_RCC_OscConfig+0x684>)
 80018d2:	400a      	ands	r2, r1
 80018d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d6:	f000 fb95 	bl	8002004 <HAL_GetTick>
 80018da:	0003      	movs	r3, r0
 80018dc:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x5c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018e0:	f000 fb90 	bl	8002004 <HAL_GetTick>
 80018e4:	0002      	movs	r2, r0
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x5c6>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e080      	b.n	80019f4 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80018f2:	4b29      	ldr	r3, [pc, #164]	; (8001998 <HAL_RCC_OscConfig+0x66c>)
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	2380      	movs	r3, #128	; 0x80
 80018f8:	049b      	lsls	r3, r3, #18
 80018fa:	4013      	ands	r3, r2
 80018fc:	d1f0      	bne.n	80018e0 <HAL_RCC_OscConfig+0x5b4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018fe:	4b26      	ldr	r3, [pc, #152]	; (8001998 <HAL_RCC_OscConfig+0x66c>)
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	4a2c      	ldr	r2, [pc, #176]	; (80019b4 <HAL_RCC_OscConfig+0x688>)
 8001904:	4013      	ands	r3, r2
 8001906:	0019      	movs	r1, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001910:	431a      	orrs	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	431a      	orrs	r2, r3
 8001918:	4b1f      	ldr	r3, [pc, #124]	; (8001998 <HAL_RCC_OscConfig+0x66c>)
 800191a:	430a      	orrs	r2, r1
 800191c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800191e:	4b1e      	ldr	r3, [pc, #120]	; (8001998 <HAL_RCC_OscConfig+0x66c>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	4b1d      	ldr	r3, [pc, #116]	; (8001998 <HAL_RCC_OscConfig+0x66c>)
 8001924:	2180      	movs	r1, #128	; 0x80
 8001926:	0449      	lsls	r1, r1, #17
 8001928:	430a      	orrs	r2, r1
 800192a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192c:	f000 fb6a 	bl	8002004 <HAL_GetTick>
 8001930:	0003      	movs	r3, r0
 8001932:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001934:	e008      	b.n	8001948 <HAL_RCC_OscConfig+0x61c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001936:	f000 fb65 	bl	8002004 <HAL_GetTick>
 800193a:	0002      	movs	r2, r0
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e055      	b.n	80019f4 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001948:	4b13      	ldr	r3, [pc, #76]	; (8001998 <HAL_RCC_OscConfig+0x66c>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	2380      	movs	r3, #128	; 0x80
 800194e:	049b      	lsls	r3, r3, #18
 8001950:	4013      	ands	r3, r2
 8001952:	d0f0      	beq.n	8001936 <HAL_RCC_OscConfig+0x60a>
 8001954:	e04d      	b.n	80019f2 <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001956:	4b10      	ldr	r3, [pc, #64]	; (8001998 <HAL_RCC_OscConfig+0x66c>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <HAL_RCC_OscConfig+0x66c>)
 800195c:	4914      	ldr	r1, [pc, #80]	; (80019b0 <HAL_RCC_OscConfig+0x684>)
 800195e:	400a      	ands	r2, r1
 8001960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001962:	f000 fb4f 	bl	8002004 <HAL_GetTick>
 8001966:	0003      	movs	r3, r0
 8001968:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x652>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800196c:	f000 fb4a 	bl	8002004 <HAL_GetTick>
 8001970:	0002      	movs	r2, r0
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x652>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e03a      	b.n	80019f4 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800197e:	4b06      	ldr	r3, [pc, #24]	; (8001998 <HAL_RCC_OscConfig+0x66c>)
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	2380      	movs	r3, #128	; 0x80
 8001984:	049b      	lsls	r3, r3, #18
 8001986:	4013      	ands	r3, r2
 8001988:	d1f0      	bne.n	800196c <HAL_RCC_OscConfig+0x640>
 800198a:	e032      	b.n	80019f2 <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001990:	2b01      	cmp	r3, #1
 8001992:	d111      	bne.n	80019b8 <HAL_RCC_OscConfig+0x68c>
      {
        return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e02d      	b.n	80019f4 <HAL_RCC_OscConfig+0x6c8>
 8001998:	40021000 	.word	0x40021000
 800199c:	fffffeff 	.word	0xfffffeff
 80019a0:	40007000 	.word	0x40007000
 80019a4:	fffffbff 	.word	0xfffffbff
 80019a8:	00001388 	.word	0x00001388
 80019ac:	efffffff 	.word	0xefffffff
 80019b0:	feffffff 	.word	0xfeffffff
 80019b4:	ff02ffff 	.word	0xff02ffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019b8:	4b10      	ldr	r3, [pc, #64]	; (80019fc <HAL_RCC_OscConfig+0x6d0>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019be:	69fa      	ldr	r2, [r7, #28]
 80019c0:	2380      	movs	r3, #128	; 0x80
 80019c2:	025b      	lsls	r3, r3, #9
 80019c4:	401a      	ands	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d10f      	bne.n	80019ee <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80019ce:	69fa      	ldr	r2, [r7, #28]
 80019d0:	23f0      	movs	r3, #240	; 0xf0
 80019d2:	039b      	lsls	r3, r3, #14
 80019d4:	401a      	ands	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019da:	429a      	cmp	r2, r3
 80019dc:	d107      	bne.n	80019ee <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80019de:	69fa      	ldr	r2, [r7, #28]
 80019e0:	23c0      	movs	r3, #192	; 0xc0
 80019e2:	041b      	lsls	r3, r3, #16
 80019e4:	401a      	ands	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d001      	beq.n	80019f2 <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e000      	b.n	80019f4 <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }
  return HAL_OK;
 80019f2:	2300      	movs	r3, #0
}
 80019f4:	0018      	movs	r0, r3
 80019f6:	46bd      	mov	sp, r7
 80019f8:	b00a      	add	sp, #40	; 0x28
 80019fa:	bdb0      	pop	{r4, r5, r7, pc}
 80019fc:	40021000 	.word	0x40021000

08001a00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a00:	b5b0      	push	{r4, r5, r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d101      	bne.n	8001a14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e128      	b.n	8001c66 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a14:	4b96      	ldr	r3, [pc, #600]	; (8001c70 <HAL_RCC_ClockConfig+0x270>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d91e      	bls.n	8001a60 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a22:	4b93      	ldr	r3, [pc, #588]	; (8001c70 <HAL_RCC_ClockConfig+0x270>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2201      	movs	r2, #1
 8001a28:	4393      	bics	r3, r2
 8001a2a:	0019      	movs	r1, r3
 8001a2c:	4b90      	ldr	r3, [pc, #576]	; (8001c70 <HAL_RCC_ClockConfig+0x270>)
 8001a2e:	683a      	ldr	r2, [r7, #0]
 8001a30:	430a      	orrs	r2, r1
 8001a32:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a34:	f000 fae6 	bl	8002004 <HAL_GetTick>
 8001a38:	0003      	movs	r3, r0
 8001a3a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3c:	e009      	b.n	8001a52 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a3e:	f000 fae1 	bl	8002004 <HAL_GetTick>
 8001a42:	0002      	movs	r2, r0
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	4a8a      	ldr	r2, [pc, #552]	; (8001c74 <HAL_RCC_ClockConfig+0x274>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e109      	b.n	8001c66 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a52:	4b87      	ldr	r3, [pc, #540]	; (8001c70 <HAL_RCC_ClockConfig+0x270>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2201      	movs	r2, #1
 8001a58:	4013      	ands	r3, r2
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d1ee      	bne.n	8001a3e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2202      	movs	r2, #2
 8001a66:	4013      	ands	r3, r2
 8001a68:	d009      	beq.n	8001a7e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a6a:	4b83      	ldr	r3, [pc, #524]	; (8001c78 <HAL_RCC_ClockConfig+0x278>)
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	22f0      	movs	r2, #240	; 0xf0
 8001a70:	4393      	bics	r3, r2
 8001a72:	0019      	movs	r1, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	4b7f      	ldr	r3, [pc, #508]	; (8001c78 <HAL_RCC_ClockConfig+0x278>)
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2201      	movs	r2, #1
 8001a84:	4013      	ands	r3, r2
 8001a86:	d100      	bne.n	8001a8a <HAL_RCC_ClockConfig+0x8a>
 8001a88:	e089      	b.n	8001b9e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d107      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a92:	4b79      	ldr	r3, [pc, #484]	; (8001c78 <HAL_RCC_ClockConfig+0x278>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	2380      	movs	r3, #128	; 0x80
 8001a98:	029b      	lsls	r3, r3, #10
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	d120      	bne.n	8001ae0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e0e1      	b.n	8001c66 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	2b03      	cmp	r3, #3
 8001aa8:	d107      	bne.n	8001aba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001aaa:	4b73      	ldr	r3, [pc, #460]	; (8001c78 <HAL_RCC_ClockConfig+0x278>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	2380      	movs	r3, #128	; 0x80
 8001ab0:	049b      	lsls	r3, r3, #18
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	d114      	bne.n	8001ae0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e0d5      	b.n	8001c66 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d106      	bne.n	8001ad0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ac2:	4b6d      	ldr	r3, [pc, #436]	; (8001c78 <HAL_RCC_ClockConfig+0x278>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2204      	movs	r2, #4
 8001ac8:	4013      	ands	r3, r2
 8001aca:	d109      	bne.n	8001ae0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e0ca      	b.n	8001c66 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001ad0:	4b69      	ldr	r3, [pc, #420]	; (8001c78 <HAL_RCC_ClockConfig+0x278>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	2380      	movs	r3, #128	; 0x80
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4013      	ands	r3, r2
 8001ada:	d101      	bne.n	8001ae0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e0c2      	b.n	8001c66 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ae0:	4b65      	ldr	r3, [pc, #404]	; (8001c78 <HAL_RCC_ClockConfig+0x278>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	2203      	movs	r2, #3
 8001ae6:	4393      	bics	r3, r2
 8001ae8:	0019      	movs	r1, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685a      	ldr	r2, [r3, #4]
 8001aee:	4b62      	ldr	r3, [pc, #392]	; (8001c78 <HAL_RCC_ClockConfig+0x278>)
 8001af0:	430a      	orrs	r2, r1
 8001af2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001af4:	f000 fa86 	bl	8002004 <HAL_GetTick>
 8001af8:	0003      	movs	r3, r0
 8001afa:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d111      	bne.n	8001b28 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b04:	e009      	b.n	8001b1a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b06:	f000 fa7d 	bl	8002004 <HAL_GetTick>
 8001b0a:	0002      	movs	r2, r0
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	4a58      	ldr	r2, [pc, #352]	; (8001c74 <HAL_RCC_ClockConfig+0x274>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e0a5      	b.n	8001c66 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b1a:	4b57      	ldr	r3, [pc, #348]	; (8001c78 <HAL_RCC_ClockConfig+0x278>)
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	220c      	movs	r2, #12
 8001b20:	4013      	ands	r3, r2
 8001b22:	2b08      	cmp	r3, #8
 8001b24:	d1ef      	bne.n	8001b06 <HAL_RCC_ClockConfig+0x106>
 8001b26:	e03a      	b.n	8001b9e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	2b03      	cmp	r3, #3
 8001b2e:	d111      	bne.n	8001b54 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b30:	e009      	b.n	8001b46 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b32:	f000 fa67 	bl	8002004 <HAL_GetTick>
 8001b36:	0002      	movs	r2, r0
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	4a4d      	ldr	r2, [pc, #308]	; (8001c74 <HAL_RCC_ClockConfig+0x274>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e08f      	b.n	8001c66 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b46:	4b4c      	ldr	r3, [pc, #304]	; (8001c78 <HAL_RCC_ClockConfig+0x278>)
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	220c      	movs	r2, #12
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	2b0c      	cmp	r3, #12
 8001b50:	d1ef      	bne.n	8001b32 <HAL_RCC_ClockConfig+0x132>
 8001b52:	e024      	b.n	8001b9e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d11b      	bne.n	8001b94 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b5c:	e009      	b.n	8001b72 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b5e:	f000 fa51 	bl	8002004 <HAL_GetTick>
 8001b62:	0002      	movs	r2, r0
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	4a42      	ldr	r2, [pc, #264]	; (8001c74 <HAL_RCC_ClockConfig+0x274>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e079      	b.n	8001c66 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b72:	4b41      	ldr	r3, [pc, #260]	; (8001c78 <HAL_RCC_ClockConfig+0x278>)
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	220c      	movs	r2, #12
 8001b78:	4013      	ands	r3, r2
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	d1ef      	bne.n	8001b5e <HAL_RCC_ClockConfig+0x15e>
 8001b7e:	e00e      	b.n	8001b9e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b80:	f000 fa40 	bl	8002004 <HAL_GetTick>
 8001b84:	0002      	movs	r2, r0
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	4a3a      	ldr	r2, [pc, #232]	; (8001c74 <HAL_RCC_ClockConfig+0x274>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e068      	b.n	8001c66 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001b94:	4b38      	ldr	r3, [pc, #224]	; (8001c78 <HAL_RCC_ClockConfig+0x278>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	220c      	movs	r2, #12
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	d1f0      	bne.n	8001b80 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b9e:	4b34      	ldr	r3, [pc, #208]	; (8001c70 <HAL_RCC_ClockConfig+0x270>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d21e      	bcs.n	8001bea <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bac:	4b30      	ldr	r3, [pc, #192]	; (8001c70 <HAL_RCC_ClockConfig+0x270>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	4393      	bics	r3, r2
 8001bb4:	0019      	movs	r1, r3
 8001bb6:	4b2e      	ldr	r3, [pc, #184]	; (8001c70 <HAL_RCC_ClockConfig+0x270>)
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001bbe:	f000 fa21 	bl	8002004 <HAL_GetTick>
 8001bc2:	0003      	movs	r3, r0
 8001bc4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc6:	e009      	b.n	8001bdc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bc8:	f000 fa1c 	bl	8002004 <HAL_GetTick>
 8001bcc:	0002      	movs	r2, r0
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	4a28      	ldr	r2, [pc, #160]	; (8001c74 <HAL_RCC_ClockConfig+0x274>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e044      	b.n	8001c66 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bdc:	4b24      	ldr	r3, [pc, #144]	; (8001c70 <HAL_RCC_ClockConfig+0x270>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2201      	movs	r2, #1
 8001be2:	4013      	ands	r3, r2
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d1ee      	bne.n	8001bc8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2204      	movs	r2, #4
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	d009      	beq.n	8001c08 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bf4:	4b20      	ldr	r3, [pc, #128]	; (8001c78 <HAL_RCC_ClockConfig+0x278>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	4a20      	ldr	r2, [pc, #128]	; (8001c7c <HAL_RCC_ClockConfig+0x27c>)
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	0019      	movs	r1, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	68da      	ldr	r2, [r3, #12]
 8001c02:	4b1d      	ldr	r3, [pc, #116]	; (8001c78 <HAL_RCC_ClockConfig+0x278>)
 8001c04:	430a      	orrs	r2, r1
 8001c06:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2208      	movs	r2, #8
 8001c0e:	4013      	ands	r3, r2
 8001c10:	d00a      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c12:	4b19      	ldr	r3, [pc, #100]	; (8001c78 <HAL_RCC_ClockConfig+0x278>)
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	4a1a      	ldr	r2, [pc, #104]	; (8001c80 <HAL_RCC_ClockConfig+0x280>)
 8001c18:	4013      	ands	r3, r2
 8001c1a:	0019      	movs	r1, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	00da      	lsls	r2, r3, #3
 8001c22:	4b15      	ldr	r3, [pc, #84]	; (8001c78 <HAL_RCC_ClockConfig+0x278>)
 8001c24:	430a      	orrs	r2, r1
 8001c26:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c28:	f000 f832 	bl	8001c90 <HAL_RCC_GetSysClockFreq>
 8001c2c:	0001      	movs	r1, r0
 8001c2e:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <HAL_RCC_ClockConfig+0x278>)
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	091b      	lsrs	r3, r3, #4
 8001c34:	220f      	movs	r2, #15
 8001c36:	4013      	ands	r3, r2
 8001c38:	4a12      	ldr	r2, [pc, #72]	; (8001c84 <HAL_RCC_ClockConfig+0x284>)
 8001c3a:	5cd3      	ldrb	r3, [r2, r3]
 8001c3c:	000a      	movs	r2, r1
 8001c3e:	40da      	lsrs	r2, r3
 8001c40:	4b11      	ldr	r3, [pc, #68]	; (8001c88 <HAL_RCC_ClockConfig+0x288>)
 8001c42:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c44:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <HAL_RCC_ClockConfig+0x28c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	250b      	movs	r5, #11
 8001c4a:	197c      	adds	r4, r7, r5
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	f7ff f8e5 	bl	8000e1c <HAL_InitTick>
 8001c52:	0003      	movs	r3, r0
 8001c54:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001c56:	197b      	adds	r3, r7, r5
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d002      	beq.n	8001c64 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001c5e:	197b      	adds	r3, r7, r5
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	e000      	b.n	8001c66 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	0018      	movs	r0, r3
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	b004      	add	sp, #16
 8001c6c:	bdb0      	pop	{r4, r5, r7, pc}
 8001c6e:	46c0      	nop			; (mov r8, r8)
 8001c70:	40022000 	.word	0x40022000
 8001c74:	00001388 	.word	0x00001388
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	fffff8ff 	.word	0xfffff8ff
 8001c80:	ffffc7ff 	.word	0xffffc7ff
 8001c84:	08002734 	.word	0x08002734
 8001c88:	20000008 	.word	0x20000008
 8001c8c:	2000000c 	.word	0x2000000c

08001c90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c90:	b5b0      	push	{r4, r5, r7, lr}
 8001c92:	b08e      	sub	sp, #56	; 0x38
 8001c94:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001c96:	4b4c      	ldr	r3, [pc, #304]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c9e:	230c      	movs	r3, #12
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	2b0c      	cmp	r3, #12
 8001ca4:	d014      	beq.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x40>
 8001ca6:	d900      	bls.n	8001caa <HAL_RCC_GetSysClockFreq+0x1a>
 8001ca8:	e07b      	b.n	8001da2 <HAL_RCC_GetSysClockFreq+0x112>
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	d002      	beq.n	8001cb4 <HAL_RCC_GetSysClockFreq+0x24>
 8001cae:	2b08      	cmp	r3, #8
 8001cb0:	d00b      	beq.n	8001cca <HAL_RCC_GetSysClockFreq+0x3a>
 8001cb2:	e076      	b.n	8001da2 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001cb4:	4b44      	ldr	r3, [pc, #272]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2210      	movs	r2, #16
 8001cba:	4013      	ands	r3, r2
 8001cbc:	d002      	beq.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001cbe:	4b43      	ldr	r3, [pc, #268]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x13c>)
 8001cc0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001cc2:	e07c      	b.n	8001dbe <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001cc4:	4b42      	ldr	r3, [pc, #264]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x140>)
 8001cc6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001cc8:	e079      	b.n	8001dbe <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cca:	4b42      	ldr	r3, [pc, #264]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x144>)
 8001ccc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001cce:	e076      	b.n	8001dbe <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cd2:	0c9a      	lsrs	r2, r3, #18
 8001cd4:	230f      	movs	r3, #15
 8001cd6:	401a      	ands	r2, r3
 8001cd8:	4b3f      	ldr	r3, [pc, #252]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x148>)
 8001cda:	5c9b      	ldrb	r3, [r3, r2]
 8001cdc:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ce0:	0d9a      	lsrs	r2, r3, #22
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cea:	4b37      	ldr	r3, [pc, #220]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001cec:	68da      	ldr	r2, [r3, #12]
 8001cee:	2380      	movs	r3, #128	; 0x80
 8001cf0:	025b      	lsls	r3, r3, #9
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	d01a      	beq.n	8001d2c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf8:	61bb      	str	r3, [r7, #24]
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61fb      	str	r3, [r7, #28]
 8001cfe:	4a35      	ldr	r2, [pc, #212]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x144>)
 8001d00:	2300      	movs	r3, #0
 8001d02:	69b8      	ldr	r0, [r7, #24]
 8001d04:	69f9      	ldr	r1, [r7, #28]
 8001d06:	f7fe fb95 	bl	8000434 <__aeabi_lmul>
 8001d0a:	0002      	movs	r2, r0
 8001d0c:	000b      	movs	r3, r1
 8001d0e:	0010      	movs	r0, r2
 8001d10:	0019      	movs	r1, r3
 8001d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d14:	613b      	str	r3, [r7, #16]
 8001d16:	2300      	movs	r3, #0
 8001d18:	617b      	str	r3, [r7, #20]
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	f7fe fb69 	bl	80003f4 <__aeabi_uldivmod>
 8001d22:	0002      	movs	r2, r0
 8001d24:	000b      	movs	r3, r1
 8001d26:	0013      	movs	r3, r2
 8001d28:	637b      	str	r3, [r7, #52]	; 0x34
 8001d2a:	e037      	b.n	8001d9c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001d2c:	4b26      	ldr	r3, [pc, #152]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2210      	movs	r2, #16
 8001d32:	4013      	ands	r3, r2
 8001d34:	d01a      	beq.n	8001d6c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d38:	60bb      	str	r3, [r7, #8]
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	4a23      	ldr	r2, [pc, #140]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x13c>)
 8001d40:	2300      	movs	r3, #0
 8001d42:	68b8      	ldr	r0, [r7, #8]
 8001d44:	68f9      	ldr	r1, [r7, #12]
 8001d46:	f7fe fb75 	bl	8000434 <__aeabi_lmul>
 8001d4a:	0002      	movs	r2, r0
 8001d4c:	000b      	movs	r3, r1
 8001d4e:	0010      	movs	r0, r2
 8001d50:	0019      	movs	r1, r3
 8001d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d54:	603b      	str	r3, [r7, #0]
 8001d56:	2300      	movs	r3, #0
 8001d58:	607b      	str	r3, [r7, #4]
 8001d5a:	683a      	ldr	r2, [r7, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f7fe fb49 	bl	80003f4 <__aeabi_uldivmod>
 8001d62:	0002      	movs	r2, r0
 8001d64:	000b      	movs	r3, r1
 8001d66:	0013      	movs	r3, r2
 8001d68:	637b      	str	r3, [r7, #52]	; 0x34
 8001d6a:	e017      	b.n	8001d9c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d6e:	0018      	movs	r0, r3
 8001d70:	2300      	movs	r3, #0
 8001d72:	0019      	movs	r1, r3
 8001d74:	4a16      	ldr	r2, [pc, #88]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x140>)
 8001d76:	2300      	movs	r3, #0
 8001d78:	f7fe fb5c 	bl	8000434 <__aeabi_lmul>
 8001d7c:	0002      	movs	r2, r0
 8001d7e:	000b      	movs	r3, r1
 8001d80:	0010      	movs	r0, r2
 8001d82:	0019      	movs	r1, r3
 8001d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d86:	001c      	movs	r4, r3
 8001d88:	2300      	movs	r3, #0
 8001d8a:	001d      	movs	r5, r3
 8001d8c:	0022      	movs	r2, r4
 8001d8e:	002b      	movs	r3, r5
 8001d90:	f7fe fb30 	bl	80003f4 <__aeabi_uldivmod>
 8001d94:	0002      	movs	r2, r0
 8001d96:	000b      	movs	r3, r1
 8001d98:	0013      	movs	r3, r2
 8001d9a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d9e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001da0:	e00d      	b.n	8001dbe <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001da2:	4b09      	ldr	r3, [pc, #36]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	0b5b      	lsrs	r3, r3, #13
 8001da8:	2207      	movs	r2, #7
 8001daa:	4013      	ands	r3, r2
 8001dac:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001dae:	6a3b      	ldr	r3, [r7, #32]
 8001db0:	3301      	adds	r3, #1
 8001db2:	2280      	movs	r2, #128	; 0x80
 8001db4:	0212      	lsls	r2, r2, #8
 8001db6:	409a      	lsls	r2, r3
 8001db8:	0013      	movs	r3, r2
 8001dba:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001dbc:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	b00e      	add	sp, #56	; 0x38
 8001dc6:	bdb0      	pop	{r4, r5, r7, pc}
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	003d0900 	.word	0x003d0900
 8001dd0:	00f42400 	.word	0x00f42400
 8001dd4:	007a1200 	.word	0x007a1200
 8001dd8:	0800274c 	.word	0x0800274c

08001ddc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001de0:	4b02      	ldr	r3, [pc, #8]	; (8001dec <HAL_RCC_GetHCLKFreq+0x10>)
 8001de2:	681b      	ldr	r3, [r3, #0]
}
 8001de4:	0018      	movs	r0, r3
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	46c0      	nop			; (mov r8, r8)
 8001dec:	20000008 	.word	0x20000008

08001df0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001df4:	f7ff fff2 	bl	8001ddc <HAL_RCC_GetHCLKFreq>
 8001df8:	0001      	movs	r1, r0
 8001dfa:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	0a1b      	lsrs	r3, r3, #8
 8001e00:	2207      	movs	r2, #7
 8001e02:	4013      	ands	r3, r2
 8001e04:	4a04      	ldr	r2, [pc, #16]	; (8001e18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e06:	5cd3      	ldrb	r3, [r2, r3]
 8001e08:	40d9      	lsrs	r1, r3
 8001e0a:	000b      	movs	r3, r1
}
 8001e0c:	0018      	movs	r0, r3
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	46c0      	nop			; (mov r8, r8)
 8001e14:	40021000 	.word	0x40021000
 8001e18:	08002744 	.word	0x08002744

08001e1c <CORE_Init>:
/*
 * PUBLIC FUNCTIONS
 */

void CORE_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
	__HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001e20:	4b0d      	ldr	r3, [pc, #52]	; (8001e58 <CORE_Init+0x3c>)
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <CORE_Init+0x3c>)
 8001e26:	2140      	movs	r1, #64	; 0x40
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	601a      	str	r2, [r3, #0]
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e2c:	4b0b      	ldr	r3, [pc, #44]	; (8001e5c <CORE_Init+0x40>)
 8001e2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e30:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <CORE_Init+0x40>)
 8001e32:	2101      	movs	r1, #1
 8001e34:	430a      	orrs	r2, r1
 8001e36:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_RCC_PWR_CLK_ENABLE();
 8001e38:	4b08      	ldr	r3, [pc, #32]	; (8001e5c <CORE_Init+0x40>)
 8001e3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e3c:	4b07      	ldr	r3, [pc, #28]	; (8001e5c <CORE_Init+0x40>)
 8001e3e:	2180      	movs	r1, #128	; 0x80
 8001e40:	0549      	lsls	r1, r1, #21
 8001e42:	430a      	orrs	r2, r1
 8001e44:	639a      	str	r2, [r3, #56]	; 0x38

	CORE_InitSysTick();
 8001e46:	f000 f811 	bl	8001e6c <CORE_InitSysTick>
	CORE_InitSysClk();
 8001e4a:	f000 f887 	bl	8001f5c <CORE_InitSysClk>
	CORE_InitGPIO();
 8001e4e:	f000 f825 	bl	8001e9c <CORE_InitGPIO>
}
 8001e52:	46c0      	nop			; (mov r8, r8)
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40022000 	.word	0x40022000
 8001e5c:	40021000 	.word	0x40021000

08001e60 <CORE_Idle>:

void CORE_Idle(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
	// As long as systick is on, this will at least return each millisecond.
	__WFI();
 8001e64:	bf30      	wfi
}
 8001e66:	46c0      	nop			; (mov r8, r8)
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <CORE_InitSysTick>:
/*
 * PRIVATE FUNCTIONS
 */

void CORE_InitSysTick(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / CORE_SYSTICK_FREQ);
 8001e70:	f7ff ffb4 	bl	8001ddc <HAL_RCC_GetHCLKFreq>
 8001e74:	0002      	movs	r2, r0
 8001e76:	23fa      	movs	r3, #250	; 0xfa
 8001e78:	0099      	lsls	r1, r3, #2
 8001e7a:	0010      	movs	r0, r2
 8001e7c:	f7fe f944 	bl	8000108 <__udivsi3>
 8001e80:	0003      	movs	r3, r0
 8001e82:	0018      	movs	r0, r3
 8001e84:	f7ff f8cf 	bl	8001026 <HAL_SYSTICK_Config>
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001e88:	2301      	movs	r3, #1
 8001e8a:	425b      	negs	r3, r3
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	2100      	movs	r1, #0
 8001e90:	0018      	movs	r0, r3
 8001e92:	f7ff f8a3 	bl	8000fdc <HAL_NVIC_SetPriority>
}
 8001e96:	46c0      	nop			; (mov r8, r8)
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <CORE_InitGPIO>:

void CORE_InitGPIO(void)
{
 8001e9c:	b590      	push	{r4, r7, lr}
 8001e9e:	b089      	sub	sp, #36	; 0x24
 8001ea0:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea2:	4b29      	ldr	r3, [pc, #164]	; (8001f48 <CORE_InitGPIO+0xac>)
 8001ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ea6:	4b28      	ldr	r3, [pc, #160]	; (8001f48 <CORE_InitGPIO+0xac>)
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	62da      	str	r2, [r3, #44]	; 0x2c
 8001eae:	4b26      	ldr	r3, [pc, #152]	; (8001f48 <CORE_InitGPIO+0xac>)
 8001eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	60bb      	str	r3, [r7, #8]
 8001eb8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001eba:	4b23      	ldr	r3, [pc, #140]	; (8001f48 <CORE_InitGPIO+0xac>)
 8001ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ebe:	4b22      	ldr	r3, [pc, #136]	; (8001f48 <CORE_InitGPIO+0xac>)
 8001ec0:	2102      	movs	r1, #2
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ec6:	4b20      	ldr	r3, [pc, #128]	; (8001f48 <CORE_InitGPIO+0xac>)
 8001ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eca:	2202      	movs	r2, #2
 8001ecc:	4013      	ands	r3, r2
 8001ece:	607b      	str	r3, [r7, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001ed2:	4b1d      	ldr	r3, [pc, #116]	; (8001f48 <CORE_InitGPIO+0xac>)
 8001ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ed6:	4b1c      	ldr	r3, [pc, #112]	; (8001f48 <CORE_InitGPIO+0xac>)
 8001ed8:	2104      	movs	r1, #4
 8001eda:	430a      	orrs	r2, r1
 8001edc:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ede:	4b1a      	ldr	r3, [pc, #104]	; (8001f48 <CORE_InitGPIO+0xac>)
 8001ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee2:	2204      	movs	r2, #4
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	603b      	str	r3, [r7, #0]
 8001ee8:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef gpio = {0};
 8001eea:	240c      	movs	r4, #12
 8001eec:	193b      	adds	r3, r7, r4
 8001eee:	0018      	movs	r0, r3
 8001ef0:	2314      	movs	r3, #20
 8001ef2:	001a      	movs	r2, r3
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	f000 fc09 	bl	800270c <memset>
	gpio.Mode = GPIO_MODE_ANALOG;
 8001efa:	193b      	adds	r3, r7, r4
 8001efc:	2203      	movs	r2, #3
 8001efe:	605a      	str	r2, [r3, #4]
	gpio.Pull = GPIO_NOPULL;
 8001f00:	193b      	adds	r3, r7, r4
 8001f02:	2200      	movs	r2, #0
 8001f04:	609a      	str	r2, [r3, #8]

	// SWCLK and SWDIO on PA13, PA14
	gpio.Pin = GPIO_PIN_All & ~(GPIO_PIN_13 | GPIO_PIN_14);
 8001f06:	193b      	adds	r3, r7, r4
 8001f08:	4a10      	ldr	r2, [pc, #64]	; (8001f4c <CORE_InitGPIO+0xb0>)
 8001f0a:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(GPIOA, &gpio);
 8001f0c:	193a      	adds	r2, r7, r4
 8001f0e:	23a0      	movs	r3, #160	; 0xa0
 8001f10:	05db      	lsls	r3, r3, #23
 8001f12:	0011      	movs	r1, r2
 8001f14:	0018      	movs	r0, r3
 8001f16:	f7ff f893 	bl	8001040 <HAL_GPIO_Init>

	gpio.Pin = GPIO_PIN_All;
 8001f1a:	193b      	adds	r3, r7, r4
 8001f1c:	4a0c      	ldr	r2, [pc, #48]	; (8001f50 <CORE_InitGPIO+0xb4>)
 8001f1e:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(GPIOB, &gpio);
 8001f20:	193b      	adds	r3, r7, r4
 8001f22:	4a0c      	ldr	r2, [pc, #48]	; (8001f54 <CORE_InitGPIO+0xb8>)
 8001f24:	0019      	movs	r1, r3
 8001f26:	0010      	movs	r0, r2
 8001f28:	f7ff f88a 	bl	8001040 <HAL_GPIO_Init>

	gpio.Pin = GPIO_PIN_All;
 8001f2c:	193b      	adds	r3, r7, r4
 8001f2e:	4a08      	ldr	r2, [pc, #32]	; (8001f50 <CORE_InitGPIO+0xb4>)
 8001f30:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(GPIOC, &gpio);
 8001f32:	193b      	adds	r3, r7, r4
 8001f34:	4a08      	ldr	r2, [pc, #32]	; (8001f58 <CORE_InitGPIO+0xbc>)
 8001f36:	0019      	movs	r1, r3
 8001f38:	0010      	movs	r0, r2
 8001f3a:	f7ff f881 	bl	8001040 <HAL_GPIO_Init>
}
 8001f3e:	46c0      	nop			; (mov r8, r8)
 8001f40:	46bd      	mov	sp, r7
 8001f42:	b009      	add	sp, #36	; 0x24
 8001f44:	bd90      	pop	{r4, r7, pc}
 8001f46:	46c0      	nop			; (mov r8, r8)
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	00009fff 	.word	0x00009fff
 8001f50:	0000ffff 	.word	0x0000ffff
 8001f54:	50000400 	.word	0x50000400
 8001f58:	50000800 	.word	0x50000800

08001f5c <CORE_InitSysClk>:

void CORE_InitSysClk(void)
{
 8001f5c:	b590      	push	{r4, r7, lr}
 8001f5e:	b093      	sub	sp, #76	; 0x4c
 8001f60:	af00      	add	r7, sp, #0
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f62:	4b26      	ldr	r3, [pc, #152]	; (8001ffc <CORE_InitSysClk+0xa0>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a26      	ldr	r2, [pc, #152]	; (8002000 <CORE_InitSysClk+0xa4>)
 8001f68:	401a      	ands	r2, r3
 8001f6a:	4b24      	ldr	r3, [pc, #144]	; (8001ffc <CORE_InitSysClk+0xa0>)
 8001f6c:	2180      	movs	r1, #128	; 0x80
 8001f6e:	0109      	lsls	r1, r1, #4
 8001f70:	430a      	orrs	r2, r1
 8001f72:	601a      	str	r2, [r3, #0]

	RCC_OscInitTypeDef osc = {0};
 8001f74:	2414      	movs	r4, #20
 8001f76:	193b      	adds	r3, r7, r4
 8001f78:	0018      	movs	r0, r3
 8001f7a:	2334      	movs	r3, #52	; 0x34
 8001f7c:	001a      	movs	r2, r3
 8001f7e:	2100      	movs	r1, #0
 8001f80:	f000 fbc4 	bl	800270c <memset>
	osc.PLL.PLLState 		= RCC_PLL_ON;
	osc.PLL.PLLSource 		= RCC_PLLSOURCE_HSE;
	osc.PLL.PLLMUL 			= RCC_PLL_MUL2;
	osc.PLL.PLLDIV 			= RCC_PLL_DIV1;
#else
	osc.OscillatorType 		= RCC_OSCILLATORTYPE_HSI;
 8001f84:	0021      	movs	r1, r4
 8001f86:	187b      	adds	r3, r7, r1
 8001f88:	2202      	movs	r2, #2
 8001f8a:	601a      	str	r2, [r3, #0]
	osc.HSIState 			= RCC_HSI_ON;
 8001f8c:	187b      	adds	r3, r7, r1
 8001f8e:	2201      	movs	r2, #1
 8001f90:	60da      	str	r2, [r3, #12]
	osc.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f92:	187b      	adds	r3, r7, r1
 8001f94:	2210      	movs	r2, #16
 8001f96:	611a      	str	r2, [r3, #16]
	osc.PLL.PLLState 		= RCC_PLL_ON;
 8001f98:	187b      	adds	r3, r7, r1
 8001f9a:	2202      	movs	r2, #2
 8001f9c:	625a      	str	r2, [r3, #36]	; 0x24
	osc.PLL.PLLSource 		= RCC_PLLSOURCE_HSI;
 8001f9e:	187b      	adds	r3, r7, r1
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	629a      	str	r2, [r3, #40]	; 0x28
	osc.PLL.PLLMUL 			= RCC_PLL_MUL4;
 8001fa4:	187b      	adds	r3, r7, r1
 8001fa6:	2280      	movs	r2, #128	; 0x80
 8001fa8:	02d2      	lsls	r2, r2, #11
 8001faa:	62da      	str	r2, [r3, #44]	; 0x2c
	osc.PLL.PLLDIV			= RCC_PLL_DIV2;
 8001fac:	187b      	adds	r3, r7, r1
 8001fae:	2280      	movs	r2, #128	; 0x80
 8001fb0:	03d2      	lsls	r2, r2, #15
 8001fb2:	631a      	str	r2, [r3, #48]	; 0x30

#endif //CORE_USE_HSE
	HAL_RCC_OscConfig(&osc);
 8001fb4:	187b      	adds	r3, r7, r1
 8001fb6:	0018      	movs	r0, r3
 8001fb8:	f7ff f9b8 	bl	800132c <HAL_RCC_OscConfig>

	RCC_ClkInitTypeDef clk = {0};
 8001fbc:	003b      	movs	r3, r7
 8001fbe:	0018      	movs	r0, r3
 8001fc0:	2314      	movs	r3, #20
 8001fc2:	001a      	movs	r2, r3
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	f000 fba1 	bl	800270c <memset>
	clk.ClockType 		= RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001fca:	003b      	movs	r3, r7
 8001fcc:	220f      	movs	r2, #15
 8001fce:	601a      	str	r2, [r3, #0]
	clk.SYSCLKSource 	= RCC_SYSCLKSOURCE_PLLCLK;
 8001fd0:	003b      	movs	r3, r7
 8001fd2:	2203      	movs	r2, #3
 8001fd4:	605a      	str	r2, [r3, #4]
	clk.AHBCLKDivider 	= RCC_SYSCLK_DIV1;
 8001fd6:	003b      	movs	r3, r7
 8001fd8:	2200      	movs	r2, #0
 8001fda:	609a      	str	r2, [r3, #8]
	clk.APB1CLKDivider 	= RCC_HCLK_DIV1;
 8001fdc:	003b      	movs	r3, r7
 8001fde:	2200      	movs	r2, #0
 8001fe0:	60da      	str	r2, [r3, #12]
	clk.APB2CLKDivider  = RCC_HCLK_DIV1;
 8001fe2:	003b      	movs	r3, r7
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	611a      	str	r2, [r3, #16]
	HAL_RCC_ClockConfig(&clk, FLASH_LATENCY_1);
 8001fe8:	003b      	movs	r3, r7
 8001fea:	2101      	movs	r1, #1
 8001fec:	0018      	movs	r0, r3
 8001fee:	f7ff fd07 	bl	8001a00 <HAL_RCC_ClockConfig>
}
 8001ff2:	46c0      	nop			; (mov r8, r8)
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	b013      	add	sp, #76	; 0x4c
 8001ff8:	bd90      	pop	{r4, r7, pc}
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	40007000 	.word	0x40007000
 8002000:	ffffe7ff 	.word	0xffffe7ff

08002004 <HAL_GetTick>:
/*
 * CALLBACK FUNCTIONS
 */

uint32_t HAL_GetTick(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
	return gTicks;
 8002008:	4b02      	ldr	r3, [pc, #8]	; (8002014 <HAL_GetTick+0x10>)
 800200a:	681b      	ldr	r3, [r3, #0]
}
 800200c:	0018      	movs	r0, r3
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	46c0      	nop			; (mov r8, r8)
 8002014:	200000e8 	.word	0x200000e8

08002018 <SysTick_Handler>:
/*
 * INTERRUPT ROUTINES
 */

void SysTick_Handler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
	gTicks += MS_PER_SYSTICK;
 800201c:	4b03      	ldr	r3, [pc, #12]	; (800202c <SysTick_Handler+0x14>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	1c5a      	adds	r2, r3, #1
 8002022:	4b02      	ldr	r3, [pc, #8]	; (800202c <SysTick_Handler+0x14>)
 8002024:	601a      	str	r2, [r3, #0]
	if (gTickCallback != NULL)
	{
		gTickCallback();
	}
#endif
}
 8002026:	46c0      	nop			; (mov r8, r8)
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	200000e8 	.word	0x200000e8

08002030 <GPIO_Set>:
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
	gpio->BSRR = (uint32_t)pin;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	683a      	ldr	r2, [r7, #0]
 800203e:	619a      	str	r2, [r3, #24]
}
 8002040:	46c0      	nop			; (mov r8, r8)
 8002042:	46bd      	mov	sp, r7
 8002044:	b002      	add	sp, #8
 8002046:	bd80      	pop	{r7, pc}

08002048 <GPIO_Reset>:
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
	gpio->BRR = (uint32_t)pin;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002058:	46c0      	nop			; (mov r8, r8)
 800205a:	46bd      	mov	sp, r7
 800205c:	b002      	add	sp, #8
 800205e:	bd80      	pop	{r7, pc}

08002060 <GPIO_Write>:
/*
 * PUBLIC FUNCTIONS
 */

void GPIO_Write(GPIO_t * gpio, uint32_t pin, GPIO_PinState state)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	1dfb      	adds	r3, r7, #7
 800206c:	701a      	strb	r2, [r3, #0]
	if (state != GPIO_PIN_RESET)
 800206e:	1dfb      	adds	r3, r7, #7
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d006      	beq.n	8002084 <GPIO_Write+0x24>
	{
		GPIO_Set(gpio, pin);
 8002076:	68ba      	ldr	r2, [r7, #8]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	0011      	movs	r1, r2
 800207c:	0018      	movs	r0, r3
 800207e:	f7ff ffd7 	bl	8002030 <GPIO_Set>
	}
	else
	{
		GPIO_Reset(gpio, pin);
	}
}
 8002082:	e005      	b.n	8002090 <GPIO_Write+0x30>
		GPIO_Reset(gpio, pin);
 8002084:	68ba      	ldr	r2, [r7, #8]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	0011      	movs	r1, r2
 800208a:	0018      	movs	r0, r3
 800208c:	f7ff ffdc 	bl	8002048 <GPIO_Reset>
}
 8002090:	46c0      	nop			; (mov r8, r8)
 8002092:	46bd      	mov	sp, r7
 8002094:	b004      	add	sp, #16
 8002096:	bd80      	pop	{r7, pc}

08002098 <GPIO_EnableOutput>:

void GPIO_EnableOutput(GPIO_t * gpio, uint32_t pin, GPIO_PinState state)
{
 8002098:	b590      	push	{r4, r7, lr}
 800209a:	b08b      	sub	sp, #44	; 0x2c
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	1dfb      	adds	r3, r7, #7
 80020a4:	701a      	strb	r2, [r3, #0]
	GPIO_InitTypeDef init = {
 80020a6:	2414      	movs	r4, #20
 80020a8:	193b      	adds	r3, r7, r4
 80020aa:	0018      	movs	r0, r3
 80020ac:	2314      	movs	r3, #20
 80020ae:	001a      	movs	r2, r3
 80020b0:	2100      	movs	r1, #0
 80020b2:	f000 fb2b 	bl	800270c <memset>
 80020b6:	193b      	adds	r3, r7, r4
 80020b8:	68ba      	ldr	r2, [r7, #8]
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	193b      	adds	r3, r7, r4
 80020be:	2201      	movs	r2, #1
 80020c0:	605a      	str	r2, [r3, #4]
	  .Mode = GPIO_MODE_OUTPUT_PP,
	  .Pin = pin,
	  .Pull = GPIO_NOPULL,
	  .Speed = GPIO_SPEED_LOW,
	};
	HAL_GPIO_Init(gpio, &init);
 80020c2:	193a      	adds	r2, r7, r4
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	0011      	movs	r1, r2
 80020c8:	0018      	movs	r0, r3
 80020ca:	f7fe ffb9 	bl	8001040 <HAL_GPIO_Init>
	GPIO_Write(gpio, pin, state);
 80020ce:	1dfb      	adds	r3, r7, #7
 80020d0:	781a      	ldrb	r2, [r3, #0]
 80020d2:	68b9      	ldr	r1, [r7, #8]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	0018      	movs	r0, r3
 80020d8:	f7ff ffc2 	bl	8002060 <GPIO_Write>
}
 80020dc:	46c0      	nop			; (mov r8, r8)
 80020de:	46bd      	mov	sp, r7
 80020e0:	b00b      	add	sp, #44	; 0x2c
 80020e2:	bd90      	pop	{r4, r7, pc}

080020e4 <GPIO_EnableIRQ>:
	HAL_GPIO_Init(gpio, &init);
}

#ifdef USE_GPIO_IRQS
void GPIO_EnableIRQ(GPIO_t * gpio, uint32_t pin, uint32_t pullup, GPIO_IT_Dir_t dir, VoidFunction_t callback)
{
 80020e4:	b590      	push	{r4, r7, lr}
 80020e6:	b08b      	sub	sp, #44	; 0x2c
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
 80020f0:	603b      	str	r3, [r7, #0]
	int n = 0;
 80020f2:	2300      	movs	r3, #0
 80020f4:	627b      	str	r3, [r7, #36]	; 0x24
	while ((pin & (1 << n)) == 0) { n++; }
 80020f6:	e002      	b.n	80020fe <GPIO_EnableIRQ+0x1a>
 80020f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fa:	3301      	adds	r3, #1
 80020fc:	627b      	str	r3, [r7, #36]	; 0x24
 80020fe:	2201      	movs	r2, #1
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	409a      	lsls	r2, r3
 8002104:	0013      	movs	r3, r2
 8002106:	001a      	movs	r2, r3
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	4013      	ands	r3, r2
 800210c:	d0f4      	beq.n	80020f8 <GPIO_EnableIRQ+0x14>

	gCallback[n] = callback;
 800210e:	4b14      	ldr	r3, [pc, #80]	; (8002160 <GPIO_EnableIRQ+0x7c>)
 8002110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002112:	0092      	lsls	r2, r2, #2
 8002114:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002116:	50d1      	str	r1, [r2, r3]

	GPIO_InitTypeDef init = {
 8002118:	2410      	movs	r4, #16
 800211a:	193b      	adds	r3, r7, r4
 800211c:	0018      	movs	r0, r3
 800211e:	2314      	movs	r3, #20
 8002120:	001a      	movs	r2, r3
 8002122:	2100      	movs	r1, #0
 8002124:	f000 faf2 	bl	800270c <memset>
 8002128:	0021      	movs	r1, r4
 800212a:	187b      	adds	r3, r7, r1
 800212c:	68ba      	ldr	r2, [r7, #8]
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	187b      	adds	r3, r7, r1
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	187b      	adds	r3, r7, r1
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	609a      	str	r2, [r3, #8]
 800213c:	187b      	adds	r3, r7, r1
 800213e:	2203      	movs	r2, #3
 8002140:	60da      	str	r2, [r3, #12]
	  .Mode = dir,
	  .Pin = pin,
	  .Pull = pullup,
	  .Speed = GPIO_SPEED_HIGH,
	};
	HAL_GPIO_Init(gpio, &init);
 8002142:	187a      	adds	r2, r7, r1
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	0011      	movs	r1, r2
 8002148:	0018      	movs	r0, r3
 800214a:	f7fe ff79 	bl	8001040 <HAL_GPIO_Init>
	EXTIx_EnableIRQn(n);
 800214e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002150:	0018      	movs	r0, r3
 8002152:	f000 f825 	bl	80021a0 <EXTIx_EnableIRQn>
}
 8002156:	46c0      	nop			; (mov r8, r8)
 8002158:	46bd      	mov	sp, r7
 800215a:	b00b      	add	sp, #44	; 0x2c
 800215c:	bd90      	pop	{r4, r7, pc}
 800215e:	46c0      	nop			; (mov r8, r8)
 8002160:	20000014 	.word	0x20000014

08002164 <EXTIx_IRQHandler>:
 * PRIVATE FUNCTIONS
 */

#ifdef USE_GPIO_IRQS
static inline void EXTIx_IRQHandler(int n)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
	if (__HAL_GPIO_EXTI_GET_IT(1 << n) != RESET)
 800216c:	4b0a      	ldr	r3, [pc, #40]	; (8002198 <EXTIx_IRQHandler+0x34>)
 800216e:	695b      	ldr	r3, [r3, #20]
 8002170:	2101      	movs	r1, #1
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	4091      	lsls	r1, r2
 8002176:	000a      	movs	r2, r1
 8002178:	4013      	ands	r3, r2
 800217a:	d009      	beq.n	8002190 <EXTIx_IRQHandler+0x2c>
	{
		__HAL_GPIO_EXTI_CLEAR_IT(1 << n);
 800217c:	2201      	movs	r2, #1
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	409a      	lsls	r2, r3
 8002182:	4b05      	ldr	r3, [pc, #20]	; (8002198 <EXTIx_IRQHandler+0x34>)
 8002184:	615a      	str	r2, [r3, #20]
		gCallback[n]();
 8002186:	4b05      	ldr	r3, [pc, #20]	; (800219c <EXTIx_IRQHandler+0x38>)
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	0092      	lsls	r2, r2, #2
 800218c:	58d3      	ldr	r3, [r2, r3]
 800218e:	4798      	blx	r3
	}
}
 8002190:	46c0      	nop			; (mov r8, r8)
 8002192:	46bd      	mov	sp, r7
 8002194:	b002      	add	sp, #8
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40010400 	.word	0x40010400
 800219c:	20000014 	.word	0x20000014

080021a0 <EXTIx_EnableIRQn>:

static void EXTIx_EnableIRQn(int n)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
	if (n <= 1)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	dc03      	bgt.n	80021b6 <EXTIx_EnableIRQn+0x16>
	{
		HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80021ae:	2005      	movs	r0, #5
 80021b0:	f7fe ff29 	bl	8001006 <HAL_NVIC_EnableIRQ>
	}
	else
	{
		HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
	}
}
 80021b4:	e009      	b.n	80021ca <EXTIx_EnableIRQn+0x2a>
	else if (n <= 3)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2b03      	cmp	r3, #3
 80021ba:	dc03      	bgt.n	80021c4 <EXTIx_EnableIRQn+0x24>
		HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80021bc:	2006      	movs	r0, #6
 80021be:	f7fe ff22 	bl	8001006 <HAL_NVIC_EnableIRQ>
}
 80021c2:	e002      	b.n	80021ca <EXTIx_EnableIRQn+0x2a>
		HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80021c4:	2007      	movs	r0, #7
 80021c6:	f7fe ff1e 	bl	8001006 <HAL_NVIC_EnableIRQ>
}
 80021ca:	46c0      	nop			; (mov r8, r8)
 80021cc:	46bd      	mov	sp, r7
 80021ce:	b002      	add	sp, #8
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <EXTIx_DefaultHandler>:

static void EXTIx_DefaultHandler(void)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	af00      	add	r7, sp, #0
#ifdef DEBUG
	__BKPT();
 80021d6:	be00      	bkpt	0x0000
#endif
}
 80021d8:	46c0      	nop			; (mov r8, r8)
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <EXTI4_15_IRQHandler>:
#if    defined(USE_EXTI_4) || defined(USE_EXTI_5) || defined(USE_EXTI_6)   \
    || defined(USE_EXTI_7) || defined(USE_EXTI_8) || defined(USE_EXTI_9)   \
	|| defined(USE_EXTI_10) || defined(USE_EXTI_11) || defined(USE_EXTI_12)\
	|| defined(USE_EXTI_13) || defined(USE_EXTI_14) || defined(USE_EXTI_15)
void EXTI4_15_IRQHandler(void)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	af00      	add	r7, sp, #0
#endif
#ifdef USE_EXTI_7
	EXTIx_IRQHandler(7);
#endif
#ifdef USE_EXTI_8
	EXTIx_IRQHandler(8);
 80021e2:	2008      	movs	r0, #8
 80021e4:	f7ff ffbe 	bl	8002164 <EXTIx_IRQHandler>
#endif
#ifdef USE_EXTI_9
	EXTIx_IRQHandler(9);
 80021e8:	2009      	movs	r0, #9
 80021ea:	f7ff ffbb 	bl	8002164 <EXTIx_IRQHandler>
#endif
#ifdef USE_EXTI_10
	EXTIx_IRQHandler(10);
 80021ee:	200a      	movs	r0, #10
 80021f0:	f7ff ffb8 	bl	8002164 <EXTIx_IRQHandler>
#endif
#ifdef USE_EXTI_14
	EXTIx_IRQHandler(14);
#endif
#ifdef USE_EXTI_15
	EXTIx_IRQHandler(15);
 80021f4:	200f      	movs	r0, #15
 80021f6:	f7ff ffb5 	bl	8002164 <EXTIx_IRQHandler>
#endif
}
 80021fa:	46c0      	nop			; (mov r8, r8)
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <TIM_Init>:
/*
 * PUBLIC FUNCTIONS
 */

void TIM_Init(TIM_t * tim, uint32_t freq, uint32_t reload)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
	TIMx_Init(tim);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	0018      	movs	r0, r3
 8002210:	f000 f992 	bl	8002538 <TIMx_Init>

	uint32_t cr1 = tim->Instance->CR1;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	617b      	str	r3, [r7, #20]
	cr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS | TIM_CR1_CKD | TIM_CR1_ARPE);
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	4a0d      	ldr	r2, [pc, #52]	; (8002254 <TIM_Init+0x54>)
 8002220:	4013      	ands	r3, r2
 8002222:	617b      	str	r3, [r7, #20]
	cr1 |= TIM_AUTORELOAD_PRELOAD_ENABLE | TIM_CLOCKDIVISION_DIV1 | TIM_COUNTERMODE_UP;
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	2280      	movs	r2, #128	; 0x80
 8002228:	4313      	orrs	r3, r2
 800222a:	617b      	str	r3, [r7, #20]
	tim->Instance->CR1 = cr1;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	697a      	ldr	r2, [r7, #20]
 8002232:	601a      	str	r2, [r3, #0]

	TIM_SetFreq(tim, freq);
 8002234:	68ba      	ldr	r2, [r7, #8]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	0011      	movs	r1, r2
 800223a:	0018      	movs	r0, r3
 800223c:	f000 f80c 	bl	8002258 <TIM_SetFreq>
	TIM_SetReload(tim, reload);
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	0011      	movs	r1, r2
 8002246:	0018      	movs	r0, r3
 8002248:	f000 f81d 	bl	8002286 <TIM_SetReload>
}
 800224c:	46c0      	nop			; (mov r8, r8)
 800224e:	46bd      	mov	sp, r7
 8002250:	b006      	add	sp, #24
 8002252:	bd80      	pop	{r7, pc}
 8002254:	fffffc0f 	.word	0xfffffc0f

08002258 <TIM_SetFreq>:

void TIM_SetFreq(TIM_t * tim, uint32_t freq)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
	uint32_t sysclk = HAL_RCC_GetPCLK1Freq();
 8002262:	f7ff fdc5 	bl	8001df0 <HAL_RCC_GetPCLK1Freq>
 8002266:	0003      	movs	r3, r0
 8002268:	60fb      	str	r3, [r7, #12]
	tim->Instance->PSC = (sysclk / freq) - 1;
 800226a:	6839      	ldr	r1, [r7, #0]
 800226c:	68f8      	ldr	r0, [r7, #12]
 800226e:	f7fd ff4b 	bl	8000108 <__udivsi3>
 8002272:	0003      	movs	r3, r0
 8002274:	001a      	movs	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	3a01      	subs	r2, #1
 800227c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800227e:	46c0      	nop			; (mov r8, r8)
 8002280:	46bd      	mov	sp, r7
 8002282:	b004      	add	sp, #16
 8002284:	bd80      	pop	{r7, pc}

08002286 <TIM_SetReload>:

void TIM_SetReload(TIM_t * tim, uint32_t reload)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b082      	sub	sp, #8
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
 800228e:	6039      	str	r1, [r7, #0]
	tim->Instance->ARR = reload;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002298:	46c0      	nop			; (mov r8, r8)
 800229a:	46bd      	mov	sp, r7
 800229c:	b002      	add	sp, #8
 800229e:	bd80      	pop	{r7, pc}

080022a0 <TIM_OnReload>:

#ifdef USE_TIM_IRQS
void TIM_OnReload(TIM_t * tim, VoidFunction_t callback)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
	__HAL_TIM_ENABLE_IT(tim, TIM_IT_UPDATE);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68da      	ldr	r2, [r3, #12]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2101      	movs	r1, #1
 80022b6:	430a      	orrs	r2, r1
 80022b8:	60da      	str	r2, [r3, #12]
	tim->ReloadCallback = callback;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	605a      	str	r2, [r3, #4]
}
 80022c0:	46c0      	nop			; (mov r8, r8)
 80022c2:	46bd      	mov	sp, r7
 80022c4:	b002      	add	sp, #8
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <TIM_OnPulse>:

void TIM_OnPulse(TIM_t * tim, uint32_t ch, VoidFunction_t callback)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
	// WARN: This will fail horribly if ch is greater than 4.
	TIM_EnableOCx(tim, ch, TIM_OCMODE_ACTIVE);
 80022d4:	68b9      	ldr	r1, [r7, #8]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2210      	movs	r2, #16
 80022da:	0018      	movs	r0, r3
 80022dc:	f000 f880 	bl	80023e0 <TIM_EnableOCx>
	// Note that the channels IT's are 1 << 1 through 1 << 4
	__HAL_TIM_ENABLE_IT(tim, TIM_IT_CC1 << ch);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68d9      	ldr	r1, [r3, #12]
 80022e6:	2202      	movs	r2, #2
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	409a      	lsls	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	430a      	orrs	r2, r1
 80022f2:	60da      	str	r2, [r3, #12]
	tim->PulseCallback[ch] = callback;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	68ba      	ldr	r2, [r7, #8]
 80022f8:	3202      	adds	r2, #2
 80022fa:	0092      	lsls	r2, r2, #2
 80022fc:	6879      	ldr	r1, [r7, #4]
 80022fe:	50d1      	str	r1, [r2, r3]
}
 8002300:	46c0      	nop			; (mov r8, r8)
 8002302:	46bd      	mov	sp, r7
 8002304:	b004      	add	sp, #16
 8002306:	bd80      	pop	{r7, pc}

08002308 <TIM_EnablePwm>:
#endif //USE_TIM_IRQS

void TIM_EnablePwm(TIM_t * tim, uint32_t ch, GPIO_t * gpio, uint32_t pin, uint32_t af)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b08a      	sub	sp, #40	; 0x28
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
 8002314:	603b      	str	r3, [r7, #0]
	// TIM_CCMR1_OC1PE is the output compare preload
	TIM_EnableOCx(tim, ch, TIM_OCMODE_PWM1 | TIM_CCMR1_OC1PE | TIM_OCFAST_ENABLE);
 8002316:	68b9      	ldr	r1, [r7, #8]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	226c      	movs	r2, #108	; 0x6c
 800231c:	0018      	movs	r0, r3
 800231e:	f000 f85f 	bl	80023e0 <TIM_EnableOCx>

	GPIO_InitTypeDef init = {
 8002322:	2114      	movs	r1, #20
 8002324:	187b      	adds	r3, r7, r1
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	187b      	adds	r3, r7, r1
 800232c:	2202      	movs	r2, #2
 800232e:	605a      	str	r2, [r3, #4]
 8002330:	187b      	adds	r3, r7, r1
 8002332:	2200      	movs	r2, #0
 8002334:	609a      	str	r2, [r3, #8]
 8002336:	187b      	adds	r3, r7, r1
 8002338:	2202      	movs	r2, #2
 800233a:	60da      	str	r2, [r3, #12]
 800233c:	187b      	adds	r3, r7, r1
 800233e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002340:	611a      	str	r2, [r3, #16]
			.Pull = GPIO_NOPULL,
			.Speed = GPIO_SPEED_FREQ_HIGH,
			.Mode = GPIO_MODE_AF_PP,
			.Alternate = af,
	};
	HAL_GPIO_Init(gpio, &init);
 8002342:	187a      	adds	r2, r7, r1
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	0011      	movs	r1, r2
 8002348:	0018      	movs	r0, r3
 800234a:	f7fe fe79 	bl	8001040 <HAL_GPIO_Init>
}
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	46bd      	mov	sp, r7
 8002352:	b00a      	add	sp, #40	; 0x28
 8002354:	bd80      	pop	{r7, pc}

08002356 <TIM_SetPulse>:


void TIM_SetPulse(TIM_t * tim, uint32_t ch, uint32_t pulse)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b084      	sub	sp, #16
 800235a:	af00      	add	r7, sp, #0
 800235c:	60f8      	str	r0, [r7, #12]
 800235e:	60b9      	str	r1, [r7, #8]
 8002360:	607a      	str	r2, [r7, #4]
	switch (ch)
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	2b03      	cmp	r3, #3
 8002366:	d01e      	beq.n	80023a6 <TIM_SetPulse+0x50>
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	2b03      	cmp	r3, #3
 800236c:	d820      	bhi.n	80023b0 <TIM_SetPulse+0x5a>
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	2b02      	cmp	r3, #2
 8002372:	d013      	beq.n	800239c <TIM_SetPulse+0x46>
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	2b02      	cmp	r3, #2
 8002378:	d81a      	bhi.n	80023b0 <TIM_SetPulse+0x5a>
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d003      	beq.n	8002388 <TIM_SetPulse+0x32>
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d005      	beq.n	8002392 <TIM_SetPulse+0x3c>
	case 3:
		tim->Instance->CCR4 = pulse;
		break;
	}

}
 8002386:	e013      	b.n	80023b0 <TIM_SetPulse+0x5a>
		tim->Instance->CCR1 = pulse;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8002390:	e00e      	b.n	80023b0 <TIM_SetPulse+0x5a>
		tim->Instance->CCR2 = pulse;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 800239a:	e009      	b.n	80023b0 <TIM_SetPulse+0x5a>
		tim->Instance->CCR3 = pulse;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 80023a4:	e004      	b.n	80023b0 <TIM_SetPulse+0x5a>
		tim->Instance->CCR4 = pulse;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 80023ae:	46c0      	nop			; (mov r8, r8)
}
 80023b0:	46c0      	nop			; (mov r8, r8)
 80023b2:	46bd      	mov	sp, r7
 80023b4:	b004      	add	sp, #16
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <TIM_Start>:

void TIM_Start(TIM_t * tim)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
	TIM_Reload(tim);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	0018      	movs	r0, r3
 80023c4:	f000 f89a 	bl	80024fc <TIM_Reload>
	__HAL_TIM_ENABLE(tim);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2101      	movs	r1, #1
 80023d4:	430a      	orrs	r2, r1
 80023d6:	601a      	str	r2, [r3, #0]
}
 80023d8:	46c0      	nop			; (mov r8, r8)
 80023da:	46bd      	mov	sp, r7
 80023dc:	b002      	add	sp, #8
 80023de:	bd80      	pop	{r7, pc}

080023e0 <TIM_EnableOCx>:
/*
 * PRIVATE FUNCTIONS
 */

static void TIM_EnableOCx(TIM_t * tim, uint32_t oc, uint32_t mode)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
	// Disable the channel during the update.
	TIM_DISABLE_CCx(tim, oc);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6a1a      	ldr	r2, [r3, #32]
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	2101      	movs	r1, #1
 80023f8:	4099      	lsls	r1, r3
 80023fa:	000b      	movs	r3, r1
 80023fc:	43d9      	mvns	r1, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	400a      	ands	r2, r1
 8002404:	621a      	str	r2, [r3, #32]
	switch (oc)
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	2b03      	cmp	r3, #3
 800240a:	d04c      	beq.n	80024a6 <TIM_EnableOCx+0xc6>
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	2b03      	cmp	r3, #3
 8002410:	d85e      	bhi.n	80024d0 <TIM_EnableOCx+0xf0>
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	2b02      	cmp	r3, #2
 8002416:	d032      	beq.n	800247e <TIM_EnableOCx+0x9e>
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	2b02      	cmp	r3, #2
 800241c:	d858      	bhi.n	80024d0 <TIM_EnableOCx+0xf0>
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d003      	beq.n	800242c <TIM_EnableOCx+0x4c>
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d014      	beq.n	8002454 <TIM_EnableOCx+0x74>
 800242a:	e051      	b.n	80024d0 <TIM_EnableOCx+0xf0>
	{
	case 0:
		MODIFY_REG(tim->Instance->CCMR1, TIM_CCMRx_MSK, mode);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	227f      	movs	r2, #127	; 0x7f
 8002434:	4393      	bics	r3, r2
 8002436:	0019      	movs	r1, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	430a      	orrs	r2, r1
 8002440:	619a      	str	r2, [r3, #24]
		MODIFY_REG(tim->Instance->CCER, TIM_CCER_CC1P, TIM_OCPOLARITY_HIGH);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	6a1a      	ldr	r2, [r3, #32]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2102      	movs	r1, #2
 800244e:	438a      	bics	r2, r1
 8002450:	621a      	str	r2, [r3, #32]
		break;
 8002452:	e03d      	b.n	80024d0 <TIM_EnableOCx+0xf0>
	case 1:
		MODIFY_REG(tim->Instance->CCMR1, TIM_CCMRx_MSK << 8, mode << 8);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	4a25      	ldr	r2, [pc, #148]	; (80024f0 <TIM_EnableOCx+0x110>)
 800245c:	4013      	ands	r3, r2
 800245e:	0019      	movs	r1, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	021a      	lsls	r2, r3, #8
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	430a      	orrs	r2, r1
 800246a:	619a      	str	r2, [r3, #24]
		MODIFY_REG(tim->Instance->CCER, TIM_CCER_CC2P, TIM_OCPOLARITY_HIGH << 4);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	6a1a      	ldr	r2, [r3, #32]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2120      	movs	r1, #32
 8002478:	438a      	bics	r2, r1
 800247a:	621a      	str	r2, [r3, #32]
		break;
 800247c:	e028      	b.n	80024d0 <TIM_EnableOCx+0xf0>
	case 2:
		MODIFY_REG(tim->Instance->CCMR2, TIM_CCMRx_MSK, mode);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	69db      	ldr	r3, [r3, #28]
 8002484:	227f      	movs	r2, #127	; 0x7f
 8002486:	4393      	bics	r3, r2
 8002488:	0019      	movs	r1, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	430a      	orrs	r2, r1
 8002492:	61da      	str	r2, [r3, #28]
		MODIFY_REG(tim->Instance->CCER, TIM_CCER_CC3P, TIM_OCPOLARITY_HIGH << 8);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6a1a      	ldr	r2, [r3, #32]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4915      	ldr	r1, [pc, #84]	; (80024f4 <TIM_EnableOCx+0x114>)
 80024a0:	400a      	ands	r2, r1
 80024a2:	621a      	str	r2, [r3, #32]
		break;
 80024a4:	e014      	b.n	80024d0 <TIM_EnableOCx+0xf0>
	case 3:
		MODIFY_REG(tim->Instance->CCMR2, TIM_CCMRx_MSK << 8, mode << 8);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	69db      	ldr	r3, [r3, #28]
 80024ac:	4a10      	ldr	r2, [pc, #64]	; (80024f0 <TIM_EnableOCx+0x110>)
 80024ae:	4013      	ands	r3, r2
 80024b0:	0019      	movs	r1, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	021a      	lsls	r2, r3, #8
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	430a      	orrs	r2, r1
 80024bc:	61da      	str	r2, [r3, #28]
		MODIFY_REG(tim->Instance->CCER, TIM_CCER_CC4P, TIM_OCPOLARITY_HIGH << 12);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6a1a      	ldr	r2, [r3, #32]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	490b      	ldr	r1, [pc, #44]	; (80024f8 <TIM_EnableOCx+0x118>)
 80024ca:	400a      	ands	r2, r1
 80024cc:	621a      	str	r2, [r3, #32]
		break;
 80024ce:	46c0      	nop			; (mov r8, r8)
	}
	TIM_ENABLE_CCx(tim, oc);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6a19      	ldr	r1, [r3, #32]
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	2201      	movs	r2, #1
 80024dc:	409a      	lsls	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	430a      	orrs	r2, r1
 80024e4:	621a      	str	r2, [r3, #32]
	//	MODIFY_REG(tmpcr2, TIM_CR2_OIS1 | TIM_CR2_OIS1N, TIM_OCIDLESTATE_SET | TIM_OCNIDLESTATE_SET);
	//	TIMx->CR2 = tmpcr2;
	//}


}
 80024e6:	46c0      	nop			; (mov r8, r8)
 80024e8:	46bd      	mov	sp, r7
 80024ea:	b004      	add	sp, #16
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	46c0      	nop			; (mov r8, r8)
 80024f0:	ffff80ff 	.word	0xffff80ff
 80024f4:	fffffdff 	.word	0xfffffdff
 80024f8:	ffffdfff 	.word	0xffffdfff

080024fc <TIM_Reload>:

static void TIM_Reload(TIM_t * tim)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
	// Disable all timer event sources.
	uint32_t itSources = tim->Instance->DIER;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	60fb      	str	r3, [r7, #12]
	tim->Instance->DIER = 0;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2200      	movs	r2, #0
 8002512:	60da      	str	r2, [r3, #12]

	// Update the prescalar
	tim->Instance->EGR = TIM_EGR_UG;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2201      	movs	r2, #1
 800251a:	615a      	str	r2, [r3, #20]

	// Clear the event before it occurrs.
	__HAL_TIM_CLEAR_IT(tim, TIM_IT_UPDATE);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2202      	movs	r2, #2
 8002522:	4252      	negs	r2, r2
 8002524:	611a      	str	r2, [r3, #16]
	tim->Instance->DIER = itSources;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	60da      	str	r2, [r3, #12]
}
 800252e:	46c0      	nop			; (mov r8, r8)
 8002530:	46bd      	mov	sp, r7
 8002532:	b004      	add	sp, #16
 8002534:	bd80      	pop	{r7, pc}
	...

08002538 <TIMx_Init>:

static void TIMx_Init(TIM_t * tim)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
		__HAL_RCC_TIM1_CLK_ENABLE();
	}

#endif
#ifdef USE_TIM2
	if (tim == TIM_2)
 8002540:	4b1d      	ldr	r3, [pc, #116]	; (80025b8 <TIMx_Init+0x80>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	429a      	cmp	r2, r3
 8002548:	d108      	bne.n	800255c <TIMx_Init+0x24>
	{
		HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800254a:	200f      	movs	r0, #15
 800254c:	f7fe fd5b 	bl	8001006 <HAL_NVIC_EnableIRQ>
		__HAL_RCC_TIM2_CLK_ENABLE();
 8002550:	4b1a      	ldr	r3, [pc, #104]	; (80025bc <TIMx_Init+0x84>)
 8002552:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002554:	4b19      	ldr	r3, [pc, #100]	; (80025bc <TIMx_Init+0x84>)
 8002556:	2101      	movs	r1, #1
 8002558:	430a      	orrs	r2, r1
 800255a:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
		__HAL_RCC_TIM3_CLK_ENABLE();
	}
#endif
#ifdef USE_TIM6
	if (tim == TIM_6)
 800255c:	4b18      	ldr	r3, [pc, #96]	; (80025c0 <TIMx_Init+0x88>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	429a      	cmp	r2, r3
 8002564:	d108      	bne.n	8002578 <TIMx_Init+0x40>
	{
		HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8002566:	2011      	movs	r0, #17
 8002568:	f7fe fd4d 	bl	8001006 <HAL_NVIC_EnableIRQ>
		__HAL_RCC_TIM6_CLK_ENABLE();
 800256c:	4b13      	ldr	r3, [pc, #76]	; (80025bc <TIMx_Init+0x84>)
 800256e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002570:	4b12      	ldr	r3, [pc, #72]	; (80025bc <TIMx_Init+0x84>)
 8002572:	2110      	movs	r1, #16
 8002574:	430a      	orrs	r2, r1
 8002576:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_NVIC_EnableIRQ(TIM17_IRQn);
		__HAL_RCC_TIM17_CLK_ENABLE();
	}
#endif
#ifdef USE_TIM21
	if (tim == TIM_21)
 8002578:	4b12      	ldr	r3, [pc, #72]	; (80025c4 <TIMx_Init+0x8c>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	429a      	cmp	r2, r3
 8002580:	d108      	bne.n	8002594 <TIMx_Init+0x5c>
	{
		HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8002582:	2014      	movs	r0, #20
 8002584:	f7fe fd3f 	bl	8001006 <HAL_NVIC_EnableIRQ>
		__HAL_RCC_TIM21_CLK_ENABLE();
 8002588:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <TIMx_Init+0x84>)
 800258a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800258c:	4b0b      	ldr	r3, [pc, #44]	; (80025bc <TIMx_Init+0x84>)
 800258e:	2104      	movs	r1, #4
 8002590:	430a      	orrs	r2, r1
 8002592:	635a      	str	r2, [r3, #52]	; 0x34
	}
#endif
#ifdef USE_TIM22
	if (tim == TIM_22)
 8002594:	4b0c      	ldr	r3, [pc, #48]	; (80025c8 <TIMx_Init+0x90>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	429a      	cmp	r2, r3
 800259c:	d108      	bne.n	80025b0 <TIMx_Init+0x78>
	{
		HAL_NVIC_EnableIRQ(TIM22_IRQn);
 800259e:	2016      	movs	r0, #22
 80025a0:	f7fe fd31 	bl	8001006 <HAL_NVIC_EnableIRQ>
		__HAL_RCC_TIM22_CLK_ENABLE();
 80025a4:	4b05      	ldr	r3, [pc, #20]	; (80025bc <TIMx_Init+0x84>)
 80025a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025a8:	4b04      	ldr	r3, [pc, #16]	; (80025bc <TIMx_Init+0x84>)
 80025aa:	2120      	movs	r1, #32
 80025ac:	430a      	orrs	r2, r1
 80025ae:	635a      	str	r2, [r3, #52]	; 0x34
	}
#endif
}
 80025b0:	46c0      	nop			; (mov r8, r8)
 80025b2:	46bd      	mov	sp, r7
 80025b4:	b002      	add	sp, #8
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	2000006c 	.word	0x2000006c
 80025bc:	40021000 	.word	0x40021000
 80025c0:	20000088 	.word	0x20000088
 80025c4:	200000a4 	.word	0x200000a4
 80025c8:	200000c0 	.word	0x200000c0

080025cc <TIM_IRQHandler>:
 */

#ifdef USE_TIM_IRQS

static void TIM_IRQHandler(TIM_t * tim)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
	uint32_t irqs = TIM_GET_IRQ_SOURCES(tim);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	691a      	ldr	r2, [r3, #16]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	4013      	ands	r3, r2
 80025e2:	60fb      	str	r3, [r7, #12]
	if(irqs & TIM_FLAG_CC1)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2202      	movs	r2, #2
 80025e8:	4013      	ands	r3, r2
 80025ea:	d007      	beq.n	80025fc <TIM_IRQHandler+0x30>
	{
		__HAL_TIM_CLEAR_IT(tim, TIM_IT_CC1);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2203      	movs	r2, #3
 80025f2:	4252      	negs	r2, r2
 80025f4:	611a      	str	r2, [r3, #16]
		tim->PulseCallback[0]();
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	4798      	blx	r3
	}
	if(irqs & TIM_FLAG_CC2)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2204      	movs	r2, #4
 8002600:	4013      	ands	r3, r2
 8002602:	d007      	beq.n	8002614 <TIM_IRQHandler+0x48>
	{
		__HAL_TIM_CLEAR_IT(tim, TIM_IT_CC2);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2205      	movs	r2, #5
 800260a:	4252      	negs	r2, r2
 800260c:	611a      	str	r2, [r3, #16]
		tim->PulseCallback[1]();
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	4798      	blx	r3
	}
	if(irqs & TIM_FLAG_CC3)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2208      	movs	r2, #8
 8002618:	4013      	ands	r3, r2
 800261a:	d007      	beq.n	800262c <TIM_IRQHandler+0x60>
	{
		__HAL_TIM_CLEAR_IT(tim, TIM_IT_CC3);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2209      	movs	r2, #9
 8002622:	4252      	negs	r2, r2
 8002624:	611a      	str	r2, [r3, #16]
		tim->PulseCallback[2]();
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	4798      	blx	r3
	}
	if(irqs & TIM_FLAG_CC4)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2210      	movs	r2, #16
 8002630:	4013      	ands	r3, r2
 8002632:	d007      	beq.n	8002644 <TIM_IRQHandler+0x78>
	{
		__HAL_TIM_CLEAR_IT(tim, TIM_IT_CC4);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2211      	movs	r2, #17
 800263a:	4252      	negs	r2, r2
 800263c:	611a      	str	r2, [r3, #16]
		tim->PulseCallback[3]();
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	4798      	blx	r3
	}
	if(irqs & TIM_FLAG_UPDATE)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2201      	movs	r2, #1
 8002648:	4013      	ands	r3, r2
 800264a:	d007      	beq.n	800265c <TIM_IRQHandler+0x90>
	{
		__HAL_TIM_CLEAR_IT(tim, TIM_IT_UPDATE);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2202      	movs	r2, #2
 8002652:	4252      	negs	r2, r2
 8002654:	611a      	str	r2, [r3, #16]
		tim->ReloadCallback();
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	4798      	blx	r3
	}
}
 800265c:	46c0      	nop			; (mov r8, r8)
 800265e:	46bd      	mov	sp, r7
 8002660:	b004      	add	sp, #16
 8002662:	bd80      	pop	{r7, pc}

08002664 <TIM2_IRQHandler>:
	TIM_IRQHandler(TIM_1);
}
#endif
#ifdef USE_TIM2
void TIM2_IRQHandler(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
	TIM_IRQHandler(TIM_2);
 8002668:	4b03      	ldr	r3, [pc, #12]	; (8002678 <TIM2_IRQHandler+0x14>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	0018      	movs	r0, r3
 800266e:	f7ff ffad 	bl	80025cc <TIM_IRQHandler>
}
 8002672:	46c0      	nop			; (mov r8, r8)
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	2000006c 	.word	0x2000006c

0800267c <TIM6_IRQHandler>:
	TIM_IRQHandler(TIM_3);
}
#endif
#ifdef USE_TIM6
void TIM6_IRQHandler(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
	TIM_IRQHandler(TIM_6);
 8002680:	4b03      	ldr	r3, [pc, #12]	; (8002690 <TIM6_IRQHandler+0x14>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	0018      	movs	r0, r3
 8002686:	f7ff ffa1 	bl	80025cc <TIM_IRQHandler>
}
 800268a:	46c0      	nop			; (mov r8, r8)
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	20000088 	.word	0x20000088

08002694 <TIM21_IRQHandler>:
	TIM_IRQHandler(TIM_17);
}
#endif
#ifdef USE_TIM21
void TIM21_IRQHandler(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
	TIM_IRQHandler(TIM_21);
 8002698:	4b03      	ldr	r3, [pc, #12]	; (80026a8 <TIM21_IRQHandler+0x14>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	0018      	movs	r0, r3
 800269e:	f7ff ff95 	bl	80025cc <TIM_IRQHandler>
}
 80026a2:	46c0      	nop			; (mov r8, r8)
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	200000a4 	.word	0x200000a4

080026ac <TIM22_IRQHandler>:
#endif
#ifdef USE_TIM22
void TIM22_IRQHandler(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
	TIM_IRQHandler(TIM_22);
 80026b0:	4b03      	ldr	r3, [pc, #12]	; (80026c0 <TIM22_IRQHandler+0x14>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	0018      	movs	r0, r3
 80026b6:	f7ff ff89 	bl	80025cc <TIM_IRQHandler>
}
 80026ba:	46c0      	nop			; (mov r8, r8)
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	200000c0 	.word	0x200000c0

080026c4 <__libc_init_array>:
 80026c4:	b570      	push	{r4, r5, r6, lr}
 80026c6:	2600      	movs	r6, #0
 80026c8:	4d0c      	ldr	r5, [pc, #48]	; (80026fc <__libc_init_array+0x38>)
 80026ca:	4c0d      	ldr	r4, [pc, #52]	; (8002700 <__libc_init_array+0x3c>)
 80026cc:	1b64      	subs	r4, r4, r5
 80026ce:	10a4      	asrs	r4, r4, #2
 80026d0:	42a6      	cmp	r6, r4
 80026d2:	d109      	bne.n	80026e8 <__libc_init_array+0x24>
 80026d4:	2600      	movs	r6, #0
 80026d6:	f000 f821 	bl	800271c <_init>
 80026da:	4d0a      	ldr	r5, [pc, #40]	; (8002704 <__libc_init_array+0x40>)
 80026dc:	4c0a      	ldr	r4, [pc, #40]	; (8002708 <__libc_init_array+0x44>)
 80026de:	1b64      	subs	r4, r4, r5
 80026e0:	10a4      	asrs	r4, r4, #2
 80026e2:	42a6      	cmp	r6, r4
 80026e4:	d105      	bne.n	80026f2 <__libc_init_array+0x2e>
 80026e6:	bd70      	pop	{r4, r5, r6, pc}
 80026e8:	00b3      	lsls	r3, r6, #2
 80026ea:	58eb      	ldr	r3, [r5, r3]
 80026ec:	4798      	blx	r3
 80026ee:	3601      	adds	r6, #1
 80026f0:	e7ee      	b.n	80026d0 <__libc_init_array+0xc>
 80026f2:	00b3      	lsls	r3, r6, #2
 80026f4:	58eb      	ldr	r3, [r5, r3]
 80026f6:	4798      	blx	r3
 80026f8:	3601      	adds	r6, #1
 80026fa:	e7f2      	b.n	80026e2 <__libc_init_array+0x1e>
 80026fc:	08002760 	.word	0x08002760
 8002700:	08002760 	.word	0x08002760
 8002704:	08002760 	.word	0x08002760
 8002708:	08002764 	.word	0x08002764

0800270c <memset>:
 800270c:	0003      	movs	r3, r0
 800270e:	1882      	adds	r2, r0, r2
 8002710:	4293      	cmp	r3, r2
 8002712:	d100      	bne.n	8002716 <memset+0xa>
 8002714:	4770      	bx	lr
 8002716:	7019      	strb	r1, [r3, #0]
 8002718:	3301      	adds	r3, #1
 800271a:	e7f9      	b.n	8002710 <memset+0x4>

0800271c <_init>:
 800271c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800271e:	46c0      	nop			; (mov r8, r8)
 8002720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002722:	bc08      	pop	{r3}
 8002724:	469e      	mov	lr, r3
 8002726:	4770      	bx	lr

08002728 <_fini>:
 8002728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800272a:	46c0      	nop			; (mov r8, r8)
 800272c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800272e:	bc08      	pop	{r3}
 8002730:	469e      	mov	lr, r3
 8002732:	4770      	bx	lr
