
THE_BRAINS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d98  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08002e58  08002e58  000201a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08002e58  08002e58  000201a8  2**0
                  CONTENTS
  4 .ARM          00000000  08002e58  08002e58  000201a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e58  08002e58  000201a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e58  08002e58  00012e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e5c  08002e5c  00012e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a8  20000000  08002e60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  200001a8  08003008  000201a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  08003008  00020238  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000079be  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e1a  00000000  00000000  00027b8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000648  00000000  00000000  000299a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000560  00000000  00000000  00029ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014a10  00000000  00000000  0002a550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009666  00000000  00000000  0003ef60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f669  00000000  00000000  000485c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c7c2f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000013e0  00000000  00000000  000c7c84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001a8 	.word	0x200001a8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002e40 	.word	0x08002e40

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001ac 	.word	0x200001ac
 8000104:	08002e40 	.word	0x08002e40

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <GPIO_EnableOutput>:
{
	GPIO_Init(gpio, pin, GPIO_Mode_Analog);
}

static inline void GPIO_EnableOutput(GPIO_t * gpio, uint32_t pin, GPIO_State_t state)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	60f8      	str	r0, [r7, #12]
 80003fc:	60b9      	str	r1, [r7, #8]
 80003fe:	1dfb      	adds	r3, r7, #7
 8000400:	701a      	strb	r2, [r3, #0]
	GPIO_Write(gpio, pin, state);
 8000402:	1dfb      	adds	r3, r7, #7
 8000404:	781a      	ldrb	r2, [r3, #0]
 8000406:	68b9      	ldr	r1, [r7, #8]
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	0018      	movs	r0, r3
 800040c:	f001 ff4c 	bl	80022a8 <GPIO_Write>
	GPIO_Init(gpio, pin, GPIO_Mode_Output);
 8000410:	68b9      	ldr	r1, [r7, #8]
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	2201      	movs	r2, #1
 8000416:	0018      	movs	r0, r3
 8000418:	f001 ffac 	bl	8002374 <GPIO_Init>
}
 800041c:	46c0      	nop			; (mov r8, r8)
 800041e:	46bd      	mov	sp, r7
 8000420:	b004      	add	sp, #16
 8000422:	bd80      	pop	{r7, pc}

08000424 <GPIO_Read>:
{
	gpio->BRR = (uint32_t)pin;
}

static inline GPIO_State_t GPIO_Read(GPIO_t * gpio, uint32_t pin)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	6039      	str	r1, [r7, #0]
	return ((gpio->IDR & pin) > 0);
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	691b      	ldr	r3, [r3, #16]
 8000432:	683a      	ldr	r2, [r7, #0]
 8000434:	4013      	ands	r3, r2
 8000436:	1e5a      	subs	r2, r3, #1
 8000438:	4193      	sbcs	r3, r2
 800043a:	b2db      	uxtb	r3, r3
}
 800043c:	0018      	movs	r0, r3
 800043e:	46bd      	mov	sp, r7
 8000440:	b002      	add	sp, #8
 8000442:	bd80      	pop	{r7, pc}

08000444 <CORE_GetTick>:
/*
 * INLINE FUNCTION DEFINITIONS
 */

static inline uint32_t CORE_GetTick(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
	return gTicks;
 8000448:	4b02      	ldr	r3, [pc, #8]	; (8000454 <CORE_GetTick+0x10>)
 800044a:	681b      	ldr	r3, [r3, #0]
}
 800044c:	0018      	movs	r0, r3
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	46c0      	nop			; (mov r8, r8)
 8000454:	200001d4 	.word	0x200001d4

08000458 <LED_Init>:
 * PUBLIC FUNCTIONS
 */


void LED_Init (void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
	GPIO_EnableOutput(LED_STATUS_GPIO, LED_STATUS_PIN, false);
 800045c:	23a0      	movs	r3, #160	; 0xa0
 800045e:	05db      	lsls	r3, r3, #23
 8000460:	2200      	movs	r2, #0
 8000462:	2101      	movs	r1, #1
 8000464:	0018      	movs	r0, r3
 8000466:	f7ff ffc5 	bl	80003f4 <GPIO_EnableOutput>
	GPIO_EnableOutput(LED_FAULT_GPIO, LED_FAULT_PIN, false);
 800046a:	2380      	movs	r3, #128	; 0x80
 800046c:	01db      	lsls	r3, r3, #7
 800046e:	4804      	ldr	r0, [pc, #16]	; (8000480 <LED_Init+0x28>)
 8000470:	2200      	movs	r2, #0
 8000472:	0019      	movs	r1, r3
 8000474:	f7ff ffbe 	bl	80003f4 <GPIO_EnableOutput>
}
 8000478:	46c0      	nop			; (mov r8, r8)
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	46c0      	nop			; (mov r8, r8)
 8000480:	50000800 	.word	0x50000800

08000484 <LED_GreenON>:

void LED_GreenON (void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
	GPIO_Write(LED_STATUS_GPIO, LED_STATUS_PIN, true);
 8000488:	23a0      	movs	r3, #160	; 0xa0
 800048a:	05db      	lsls	r3, r3, #23
 800048c:	2201      	movs	r2, #1
 800048e:	2101      	movs	r1, #1
 8000490:	0018      	movs	r0, r3
 8000492:	f001 ff09 	bl	80022a8 <GPIO_Write>
}
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}

0800049c <LED_RedON>:

void LED_RedON (void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
	GPIO_Write(LED_FAULT_GPIO, LED_FAULT_PIN, true);
 80004a0:	2380      	movs	r3, #128	; 0x80
 80004a2:	01db      	lsls	r3, r3, #7
 80004a4:	4803      	ldr	r0, [pc, #12]	; (80004b4 <LED_RedON+0x18>)
 80004a6:	2201      	movs	r2, #1
 80004a8:	0019      	movs	r1, r3
 80004aa:	f001 fefd 	bl	80022a8 <GPIO_Write>
}
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	50000800 	.word	0x50000800

080004b8 <LED_GreenOFF>:

void LED_GreenOFF (void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
	GPIO_Write(LED_STATUS_GPIO, LED_STATUS_PIN, false);
 80004bc:	23a0      	movs	r3, #160	; 0xa0
 80004be:	05db      	lsls	r3, r3, #23
 80004c0:	2200      	movs	r2, #0
 80004c2:	2101      	movs	r1, #1
 80004c4:	0018      	movs	r0, r3
 80004c6:	f001 feef 	bl	80022a8 <GPIO_Write>
}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}

080004d0 <LED_RedOFF>:

void LED_RedOFF (void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	GPIO_Write(LED_FAULT_GPIO, LED_FAULT_PIN, false);
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	01db      	lsls	r3, r3, #7
 80004d8:	4803      	ldr	r0, [pc, #12]	; (80004e8 <LED_RedOFF+0x18>)
 80004da:	2200      	movs	r2, #0
 80004dc:	0019      	movs	r1, r3
 80004de:	f001 fee3 	bl	80022a8 <GPIO_Write>
}
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	50000800 	.word	0x50000800

080004ec <LED_GreenState>:

bool LED_GreenState (void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	return GPIO_Read(LED_STATUS_GPIO, LED_STATUS_PIN);
 80004f0:	23a0      	movs	r3, #160	; 0xa0
 80004f2:	05db      	lsls	r3, r3, #23
 80004f4:	2101      	movs	r1, #1
 80004f6:	0018      	movs	r0, r3
 80004f8:	f7ff ff94 	bl	8000424 <GPIO_Read>
 80004fc:	0003      	movs	r3, r0
}
 80004fe:	0018      	movs	r0, r3
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}

08000504 <LED_Pulse>:
{
	return GPIO_Read(LED_FAULT_GPIO, LED_FAULT_PIN);
}

void LED_Pulse (void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
	uint32_t tick = CORE_GetTick();
 800050a:	f7ff ff9b 	bl	8000444 <CORE_GetTick>
 800050e:	0003      	movs	r3, r0
 8000510:	607b      	str	r3, [r7, #4]
	LED_RedON();
 8000512:	f7ff ffc3 	bl	800049c <LED_RedON>
	LED_GreenON();
 8000516:	f7ff ffb5 	bl	8000484 <LED_GreenON>
	while (PULSEON > (CORE_GetTick() - tick)) { CORE_Idle(); }
 800051a:	e001      	b.n	8000520 <LED_Pulse+0x1c>
 800051c:	f001 fd76 	bl	800200c <CORE_Idle>
 8000520:	f7ff ff90 	bl	8000444 <CORE_GetTick>
 8000524:	0002      	movs	r2, r0
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	1ad3      	subs	r3, r2, r3
 800052a:	2bc7      	cmp	r3, #199	; 0xc7
 800052c:	d9f6      	bls.n	800051c <LED_Pulse+0x18>
	LED_RedOFF();
 800052e:	f7ff ffcf 	bl	80004d0 <LED_RedOFF>
	LED_GreenOFF();
 8000532:	f7ff ffc1 	bl	80004b8 <LED_GreenOFF>
}
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	46bd      	mov	sp, r7
 800053a:	b002      	add	sp, #8
 800053c:	bd80      	pop	{r7, pc}

0800053e <LED_nPulse>:
{
	LED_nPulse(3);
}

void LED_nPulse (uint8_t n)
{
 800053e:	b580      	push	{r7, lr}
 8000540:	b084      	sub	sp, #16
 8000542:	af00      	add	r7, sp, #0
 8000544:	0002      	movs	r2, r0
 8000546:	1dfb      	adds	r3, r7, #7
 8000548:	701a      	strb	r2, [r3, #0]
	uint32_t tick = CORE_GetTick();
 800054a:	f7ff ff7b 	bl	8000444 <CORE_GetTick>
 800054e:	0003      	movs	r3, r0
 8000550:	60bb      	str	r3, [r7, #8]
	LED_GreenOFF();
 8000552:	f7ff ffb1 	bl	80004b8 <LED_GreenOFF>
	LED_RedOFF();
 8000556:	f7ff ffbb 	bl	80004d0 <LED_RedOFF>
	while (PULSEOFF > (CORE_GetTick() - tick)) { CORE_Idle(); }
 800055a:	e001      	b.n	8000560 <LED_nPulse+0x22>
 800055c:	f001 fd56 	bl	800200c <CORE_Idle>
 8000560:	f7ff ff70 	bl	8000444 <CORE_GetTick>
 8000564:	0002      	movs	r2, r0
 8000566:	68bb      	ldr	r3, [r7, #8]
 8000568:	1ad2      	subs	r2, r2, r3
 800056a:	2396      	movs	r3, #150	; 0x96
 800056c:	005b      	lsls	r3, r3, #1
 800056e:	429a      	cmp	r2, r3
 8000570:	d3f4      	bcc.n	800055c <LED_nPulse+0x1e>

	for (uint8_t i = 0; i < n; i++)
 8000572:	230f      	movs	r3, #15
 8000574:	18fb      	adds	r3, r7, r3
 8000576:	2200      	movs	r2, #0
 8000578:	701a      	strb	r2, [r3, #0]
 800057a:	e017      	b.n	80005ac <LED_nPulse+0x6e>
	{
		LED_Pulse();
 800057c:	f7ff ffc2 	bl	8000504 <LED_Pulse>
		tick = CORE_GetTick();
 8000580:	f7ff ff60 	bl	8000444 <CORE_GetTick>
 8000584:	0003      	movs	r3, r0
 8000586:	60bb      	str	r3, [r7, #8]
		while (PULSEOFF > (CORE_GetTick() - tick)) { CORE_Idle(); }
 8000588:	e001      	b.n	800058e <LED_nPulse+0x50>
 800058a:	f001 fd3f 	bl	800200c <CORE_Idle>
 800058e:	f7ff ff59 	bl	8000444 <CORE_GetTick>
 8000592:	0002      	movs	r2, r0
 8000594:	68bb      	ldr	r3, [r7, #8]
 8000596:	1ad2      	subs	r2, r2, r3
 8000598:	2396      	movs	r3, #150	; 0x96
 800059a:	005b      	lsls	r3, r3, #1
 800059c:	429a      	cmp	r2, r3
 800059e:	d3f4      	bcc.n	800058a <LED_nPulse+0x4c>
	for (uint8_t i = 0; i < n; i++)
 80005a0:	210f      	movs	r1, #15
 80005a2:	187b      	adds	r3, r7, r1
 80005a4:	781a      	ldrb	r2, [r3, #0]
 80005a6:	187b      	adds	r3, r7, r1
 80005a8:	3201      	adds	r2, #1
 80005aa:	701a      	strb	r2, [r3, #0]
 80005ac:	230f      	movs	r3, #15
 80005ae:	18fa      	adds	r2, r7, r3
 80005b0:	1dfb      	adds	r3, r7, #7
 80005b2:	7812      	ldrb	r2, [r2, #0]
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	d3e0      	bcc.n	800057c <LED_nPulse+0x3e>
	}
}
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	46c0      	nop			; (mov r8, r8)
 80005be:	46bd      	mov	sp, r7
 80005c0:	b004      	add	sp, #16
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <GPIO_EnableOutput>:
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	1dfb      	adds	r3, r7, #7
 80005d0:	701a      	strb	r2, [r3, #0]
	GPIO_Write(gpio, pin, state);
 80005d2:	1dfb      	adds	r3, r7, #7
 80005d4:	781a      	ldrb	r2, [r3, #0]
 80005d6:	68b9      	ldr	r1, [r7, #8]
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	0018      	movs	r0, r3
 80005dc:	f001 fe64 	bl	80022a8 <GPIO_Write>
	GPIO_Init(gpio, pin, GPIO_Mode_Output);
 80005e0:	68b9      	ldr	r1, [r7, #8]
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	2201      	movs	r2, #1
 80005e6:	0018      	movs	r0, r3
 80005e8:	f001 fec4 	bl	8002374 <GPIO_Init>
}
 80005ec:	46c0      	nop			; (mov r8, r8)
 80005ee:	46bd      	mov	sp, r7
 80005f0:	b004      	add	sp, #16
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <MOTOR_Init>:
/*
 * PUBLIC FUNCTIONS
 */

void MOTOR_Init (void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af02      	add	r7, sp, #8
	TIM_Init(TIM_MOTOR, TIM_MOTOR_FREQ, TIM_MOTOR_RELOAD);
 80005fa:	4b25      	ldr	r3, [pc, #148]	; (8000690 <MOTOR_Init+0x9c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4925      	ldr	r1, [pc, #148]	; (8000694 <MOTOR_Init+0xa0>)
 8000600:	22ff      	movs	r2, #255	; 0xff
 8000602:	0018      	movs	r0, r3
 8000604:	f002 f880 	bl	8002708 <TIM_Init>

#if defined(USE_DRV8212)
	GPIO_EnableOutput(MOTOR_LMODE_GPIO, MOTOR_LMODE_PIN, MODE_PWM);
 8000608:	2380      	movs	r3, #128	; 0x80
 800060a:	005b      	lsls	r3, r3, #1
 800060c:	4822      	ldr	r0, [pc, #136]	; (8000698 <MOTOR_Init+0xa4>)
 800060e:	2200      	movs	r2, #0
 8000610:	0019      	movs	r1, r3
 8000612:	f7ff ffd7 	bl	80005c4 <GPIO_EnableOutput>
	GPIO_EnableOutput(MOTOR_RMODE_GPIO, MOTOR_RMODE_PIN, MODE_PWM);
 8000616:	4b20      	ldr	r3, [pc, #128]	; (8000698 <MOTOR_Init+0xa4>)
 8000618:	2200      	movs	r2, #0
 800061a:	2104      	movs	r1, #4
 800061c:	0018      	movs	r0, r3
 800061e:	f7ff ffd1 	bl	80005c4 <GPIO_EnableOutput>
#endif

	TIM_EnablePwm(TIM_MOTOR, MOTOR_LPWM1_CH, MOTOR_LPWM1_GPIO, MOTOR_LPWM1_PIN, TIM_MOTOR_AF5);
 8000622:	4b1b      	ldr	r3, [pc, #108]	; (8000690 <MOTOR_Init+0x9c>)
 8000624:	6818      	ldr	r0, [r3, #0]
 8000626:	2380      	movs	r3, #128	; 0x80
 8000628:	021b      	lsls	r3, r3, #8
 800062a:	22a0      	movs	r2, #160	; 0xa0
 800062c:	05d2      	lsls	r2, r2, #23
 800062e:	2105      	movs	r1, #5
 8000630:	9100      	str	r1, [sp, #0]
 8000632:	2100      	movs	r1, #0
 8000634:	f002 f8f3 	bl	800281e <TIM_EnablePwm>
	TIM_EnablePwm(TIM_MOTOR, MOTOR_LPWM2_CH, MOTOR_LPWM2_GPIO, MOTOR_LPWM2_PIN, TIM_MOTOR_AF2);
 8000638:	4b15      	ldr	r3, [pc, #84]	; (8000690 <MOTOR_Init+0x9c>)
 800063a:	6818      	ldr	r0, [r3, #0]
 800063c:	4a16      	ldr	r2, [pc, #88]	; (8000698 <MOTOR_Init+0xa4>)
 800063e:	2302      	movs	r3, #2
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	2308      	movs	r3, #8
 8000644:	2101      	movs	r1, #1
 8000646:	f002 f8ea 	bl	800281e <TIM_EnablePwm>
	TIM_EnablePwm(TIM_MOTOR, MOTOR_RPWM1_CH, MOTOR_RPWM1_GPIO, MOTOR_RPWM1_PIN, TIM_MOTOR_AF2);
 800064a:	4b11      	ldr	r3, [pc, #68]	; (8000690 <MOTOR_Init+0x9c>)
 800064c:	6818      	ldr	r0, [r3, #0]
 800064e:	2380      	movs	r3, #128	; 0x80
 8000650:	00db      	lsls	r3, r3, #3
 8000652:	4911      	ldr	r1, [pc, #68]	; (8000698 <MOTOR_Init+0xa4>)
 8000654:	2202      	movs	r2, #2
 8000656:	9200      	str	r2, [sp, #0]
 8000658:	000a      	movs	r2, r1
 800065a:	2102      	movs	r1, #2
 800065c:	f002 f8df 	bl	800281e <TIM_EnablePwm>
	TIM_EnablePwm(TIM_MOTOR, MOTOR_RPWM2_CH, MOTOR_RPWM2_GPIO, MOTOR_RPWM2_PIN, TIM_MOTOR_AF2);
 8000660:	4b0b      	ldr	r3, [pc, #44]	; (8000690 <MOTOR_Init+0x9c>)
 8000662:	6818      	ldr	r0, [r3, #0]
 8000664:	2380      	movs	r3, #128	; 0x80
 8000666:	011b      	lsls	r3, r3, #4
 8000668:	490b      	ldr	r1, [pc, #44]	; (8000698 <MOTOR_Init+0xa4>)
 800066a:	2202      	movs	r2, #2
 800066c:	9200      	str	r2, [sp, #0]
 800066e:	000a      	movs	r2, r1
 8000670:	2103      	movs	r1, #3
 8000672:	f002 f8d4 	bl	800281e <TIM_EnablePwm>

	MOTOR_Update(MOTOR_OFF, MOTOR_OFF);
 8000676:	2100      	movs	r1, #0
 8000678:	2000      	movs	r0, #0
 800067a:	f000 f80f 	bl	800069c <MOTOR_Update>
	TIM_Start(TIM_MOTOR);
 800067e:	4b04      	ldr	r3, [pc, #16]	; (8000690 <MOTOR_Init+0x9c>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	0018      	movs	r0, r3
 8000684:	f002 f914 	bl	80028b0 <TIM_Start>
}
 8000688:	46c0      	nop			; (mov r8, r8)
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	20000038 	.word	0x20000038
 8000694:	004e2000 	.word	0x004e2000
 8000698:	50000400 	.word	0x50000400

0800069c <MOTOR_Update>:


void MOTOR_Update (int32_t M1, int32_t M2)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	6039      	str	r1, [r7, #0]
	MOTOR_M1_Update(M1);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	0018      	movs	r0, r3
 80006aa:	f000 f849 	bl	8000740 <MOTOR_M1_Update>
	MOTOR_M2_Update(M2);
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	0018      	movs	r0, r3
 80006b2:	f000 f88d 	bl	80007d0 <MOTOR_M2_Update>
}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	46bd      	mov	sp, r7
 80006ba:	b002      	add	sp, #8
 80006bc:	bd80      	pop	{r7, pc}
	...

080006c0 <MOTOR_M1_Brake>:
/*
 * PRIVATE FUNCTIONS
 */

void MOTOR_M1_Brake (void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	GPIO_Write(MOTOR_LMODE_GPIO, MOTOR_LMODE_PIN, MODE_BRAKE);
 80006c4:	2380      	movs	r3, #128	; 0x80
 80006c6:	005b      	lsls	r3, r3, #1
 80006c8:	480b      	ldr	r0, [pc, #44]	; (80006f8 <MOTOR_M1_Brake+0x38>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	0019      	movs	r1, r3
 80006ce:	f001 fdeb 	bl	80022a8 <GPIO_Write>
	TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM1_CH, PWM_BRAKE);
 80006d2:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <MOTOR_M1_Brake+0x3c>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	2280      	movs	r2, #128	; 0x80
 80006d8:	0052      	lsls	r2, r2, #1
 80006da:	2100      	movs	r1, #0
 80006dc:	0018      	movs	r0, r3
 80006de:	f002 f8b9 	bl	8002854 <TIM_SetPulse>
	TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM2_CH, PWM_BRAKE);
 80006e2:	4b06      	ldr	r3, [pc, #24]	; (80006fc <MOTOR_M1_Brake+0x3c>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	2280      	movs	r2, #128	; 0x80
 80006e8:	0052      	lsls	r2, r2, #1
 80006ea:	2101      	movs	r1, #1
 80006ec:	0018      	movs	r0, r3
 80006ee:	f002 f8b1 	bl	8002854 <TIM_SetPulse>
}
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	50000400 	.word	0x50000400
 80006fc:	20000038 	.word	0x20000038

08000700 <MOTOR_M2_Brake>:

void MOTOR_M2_Brake (void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
	GPIO_Write(MOTOR_RMODE_GPIO, MOTOR_RMODE_PIN, MODE_BRAKE);
 8000704:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <MOTOR_M2_Brake+0x38>)
 8000706:	2200      	movs	r2, #0
 8000708:	2104      	movs	r1, #4
 800070a:	0018      	movs	r0, r3
 800070c:	f001 fdcc 	bl	80022a8 <GPIO_Write>
	TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM1_CH, PWM_BRAKE);
 8000710:	4b0a      	ldr	r3, [pc, #40]	; (800073c <MOTOR_M2_Brake+0x3c>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2280      	movs	r2, #128	; 0x80
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	2102      	movs	r1, #2
 800071a:	0018      	movs	r0, r3
 800071c:	f002 f89a 	bl	8002854 <TIM_SetPulse>
	TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM2_CH, PWM_BRAKE);
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <MOTOR_M2_Brake+0x3c>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2280      	movs	r2, #128	; 0x80
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	2103      	movs	r1, #3
 800072a:	0018      	movs	r0, r3
 800072c:	f002 f892 	bl	8002854 <TIM_SetPulse>
}
 8000730:	46c0      	nop			; (mov r8, r8)
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	50000400 	.word	0x50000400
 800073c:	20000038 	.word	0x20000038

08000740 <MOTOR_M1_Update>:
	TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM1_CH, PWM_COAST);
	TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM2_CH, PWM_COAST);
}

void MOTOR_M1_Update (int32_t throttle)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	bool reverse = false;
 8000748:	210f      	movs	r1, #15
 800074a:	187b      	adds	r3, r7, r1
 800074c:	2200      	movs	r2, #0
 800074e:	701a      	strb	r2, [r3, #0]

	// Check if reversing
	if (throttle < MOTOR_OFF) {
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	2b00      	cmp	r3, #0
 8000754:	da05      	bge.n	8000762 <MOTOR_M1_Update+0x22>
		reverse = true;
 8000756:	187b      	adds	r3, r7, r1
 8000758:	2201      	movs	r2, #1
 800075a:	701a      	strb	r2, [r3, #0]
		throttle = -throttle;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	425b      	negs	r3, r3
 8000760:	607b      	str	r3, [r7, #4]
	}

	// Clamp maximum speed
	if (throttle > MOTOR_MAX) {
 8000762:	687a      	ldr	r2, [r7, #4]
 8000764:	2380      	movs	r3, #128	; 0x80
 8000766:	005b      	lsls	r3, r3, #1
 8000768:	429a      	cmp	r2, r3
 800076a:	dd02      	ble.n	8000772 <MOTOR_M1_Update+0x32>
		throttle = MOTOR_MAX;
 800076c:	2380      	movs	r3, #128	; 0x80
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	607b      	str	r3, [r7, #4]
	}

	if (throttle <= MOTOR_OFF + MOTOR_STALL) {
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	2b32      	cmp	r3, #50	; 0x32
 8000776:	dc02      	bgt.n	800077e <MOTOR_M1_Update+0x3e>
		if (MOTOR_BRAKE) {
			MOTOR_M1_Brake();
 8000778:	f7ff ffa2 	bl	80006c0 <MOTOR_M1_Brake>
		TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM2_CH, throttle);
	} else {
		TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM1_CH, throttle);
		TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM2_CH, 0);
	}
}
 800077c:	e021      	b.n	80007c2 <MOTOR_M1_Update+0x82>
	} else if (reverse) {
 800077e:	230f      	movs	r3, #15
 8000780:	18fb      	adds	r3, r7, r3
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d00e      	beq.n	80007a6 <MOTOR_M1_Update+0x66>
		TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM1_CH, 0);
 8000788:	4b10      	ldr	r3, [pc, #64]	; (80007cc <MOTOR_M1_Update+0x8c>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2200      	movs	r2, #0
 800078e:	2100      	movs	r1, #0
 8000790:	0018      	movs	r0, r3
 8000792:	f002 f85f 	bl	8002854 <TIM_SetPulse>
		TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM2_CH, throttle);
 8000796:	4b0d      	ldr	r3, [pc, #52]	; (80007cc <MOTOR_M1_Update+0x8c>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	687a      	ldr	r2, [r7, #4]
 800079c:	2101      	movs	r1, #1
 800079e:	0018      	movs	r0, r3
 80007a0:	f002 f858 	bl	8002854 <TIM_SetPulse>
}
 80007a4:	e00d      	b.n	80007c2 <MOTOR_M1_Update+0x82>
		TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM1_CH, throttle);
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MOTOR_M1_Update+0x8c>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	687a      	ldr	r2, [r7, #4]
 80007ac:	2100      	movs	r1, #0
 80007ae:	0018      	movs	r0, r3
 80007b0:	f002 f850 	bl	8002854 <TIM_SetPulse>
		TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM2_CH, 0);
 80007b4:	4b05      	ldr	r3, [pc, #20]	; (80007cc <MOTOR_M1_Update+0x8c>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2200      	movs	r2, #0
 80007ba:	2101      	movs	r1, #1
 80007bc:	0018      	movs	r0, r3
 80007be:	f002 f849 	bl	8002854 <TIM_SetPulse>
}
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	46bd      	mov	sp, r7
 80007c6:	b004      	add	sp, #16
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	20000038 	.word	0x20000038

080007d0 <MOTOR_M2_Update>:

void MOTOR_M2_Update (int32_t throttle)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	bool reverse = false;
 80007d8:	210f      	movs	r1, #15
 80007da:	187b      	adds	r3, r7, r1
 80007dc:	2200      	movs	r2, #0
 80007de:	701a      	strb	r2, [r3, #0]

	// Check if reversing
	if (throttle < 0) {
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	da05      	bge.n	80007f2 <MOTOR_M2_Update+0x22>
		reverse = true;
 80007e6:	187b      	adds	r3, r7, r1
 80007e8:	2201      	movs	r2, #1
 80007ea:	701a      	strb	r2, [r3, #0]
		throttle = -throttle;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	425b      	negs	r3, r3
 80007f0:	607b      	str	r3, [r7, #4]
	}

	// Clamp maximum speed
	if (throttle > MOTOR_MAX) {
 80007f2:	687a      	ldr	r2, [r7, #4]
 80007f4:	2380      	movs	r3, #128	; 0x80
 80007f6:	005b      	lsls	r3, r3, #1
 80007f8:	429a      	cmp	r2, r3
 80007fa:	dd02      	ble.n	8000802 <MOTOR_M2_Update+0x32>
		throttle = MOTOR_MAX;
 80007fc:	2380      	movs	r3, #128	; 0x80
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	607b      	str	r3, [r7, #4]
	}

	if (throttle <= MOTOR_OFF + MOTOR_STALL) {
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2b32      	cmp	r3, #50	; 0x32
 8000806:	dc02      	bgt.n	800080e <MOTOR_M2_Update+0x3e>
		if (MOTOR_BRAKE) {
			MOTOR_M2_Brake();
 8000808:	f7ff ff7a 	bl	8000700 <MOTOR_M2_Brake>
		TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM2_CH, throttle);
	} else {
		TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM1_CH, throttle);
		TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM2_CH, 0);
	}
}
 800080c:	e021      	b.n	8000852 <MOTOR_M2_Update+0x82>
	} else if (reverse) {
 800080e:	230f      	movs	r3, #15
 8000810:	18fb      	adds	r3, r7, r3
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d00e      	beq.n	8000836 <MOTOR_M2_Update+0x66>
		TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM1_CH, 0);
 8000818:	4b10      	ldr	r3, [pc, #64]	; (800085c <MOTOR_M2_Update+0x8c>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2200      	movs	r2, #0
 800081e:	2102      	movs	r1, #2
 8000820:	0018      	movs	r0, r3
 8000822:	f002 f817 	bl	8002854 <TIM_SetPulse>
		TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM2_CH, throttle);
 8000826:	4b0d      	ldr	r3, [pc, #52]	; (800085c <MOTOR_M2_Update+0x8c>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	687a      	ldr	r2, [r7, #4]
 800082c:	2103      	movs	r1, #3
 800082e:	0018      	movs	r0, r3
 8000830:	f002 f810 	bl	8002854 <TIM_SetPulse>
}
 8000834:	e00d      	b.n	8000852 <MOTOR_M2_Update+0x82>
		TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM1_CH, throttle);
 8000836:	4b09      	ldr	r3, [pc, #36]	; (800085c <MOTOR_M2_Update+0x8c>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	687a      	ldr	r2, [r7, #4]
 800083c:	2102      	movs	r1, #2
 800083e:	0018      	movs	r0, r3
 8000840:	f002 f808 	bl	8002854 <TIM_SetPulse>
		TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM2_CH, 0);
 8000844:	4b05      	ldr	r3, [pc, #20]	; (800085c <MOTOR_M2_Update+0x8c>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2200      	movs	r2, #0
 800084a:	2103      	movs	r1, #3
 800084c:	0018      	movs	r0, r3
 800084e:	f002 f801 	bl	8002854 <TIM_SetPulse>
}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	46bd      	mov	sp, r7
 8000856:	b004      	add	sp, #16
 8000858:	bd80      	pop	{r7, pc}
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	20000038 	.word	0x20000038

08000860 <GPIO_EnableInput>:
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	60b9      	str	r1, [r7, #8]
 800086a:	1dfb      	adds	r3, r7, #7
 800086c:	701a      	strb	r2, [r3, #0]
	GPIO_Init(gpio, pin, GPIO_Mode_Input | pull);
 800086e:	1dfb      	adds	r3, r7, #7
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	b29a      	uxth	r2, r3
 8000874:	68b9      	ldr	r1, [r7, #8]
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	0018      	movs	r0, r3
 800087a:	f001 fd7b 	bl	8002374 <GPIO_Init>
}
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	46bd      	mov	sp, r7
 8000882:	b004      	add	sp, #16
 8000884:	bd80      	pop	{r7, pc}

08000886 <GPIO_Read>:
{
 8000886:	b580      	push	{r7, lr}
 8000888:	b082      	sub	sp, #8
 800088a:	af00      	add	r7, sp, #0
 800088c:	6078      	str	r0, [r7, #4]
 800088e:	6039      	str	r1, [r7, #0]
	return ((gpio->IDR & pin) > 0);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	691b      	ldr	r3, [r3, #16]
 8000894:	683a      	ldr	r2, [r7, #0]
 8000896:	4013      	ands	r3, r2
 8000898:	1e5a      	subs	r2, r3, #1
 800089a:	4193      	sbcs	r3, r2
 800089c:	b2db      	uxtb	r3, r3
}
 800089e:	0018      	movs	r0, r3
 80008a0:	46bd      	mov	sp, r7
 80008a2:	b002      	add	sp, #8
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <TIM_Read>:
/*
 * INLINE FUNCTION DEFINITIONS
 */

static inline uint32_t TIM_Read(TIM_t * tim)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b082      	sub	sp, #8
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	6078      	str	r0, [r7, #4]
	return tim->Instance->CNT;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80008b4:	0018      	movs	r0, r3
 80008b6:	46bd      	mov	sp, r7
 80008b8:	b002      	add	sp, #8
 80008ba:	bd80      	pop	{r7, pc}

080008bc <CORE_GetTick>:
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
	return gTicks;
 80008c0:	4b02      	ldr	r3, [pc, #8]	; (80008cc <CORE_GetTick+0x10>)
 80008c2:	681b      	ldr	r3, [r3, #0]
}
 80008c4:	0018      	movs	r0, r3
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	200001d4 	.word	0x200001d4

080008d0 <RADIO_Init>:
/*
 * PUBLIC FUNCTIONS
 */

void RADIO_Init (void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
	TIM_Init(TIM_RADIO, TIM_RADIO_FREQ, TIM_RADIO_RELOAD);
 80008d4:	4b26      	ldr	r3, [pc, #152]	; (8000970 <RADIO_Init+0xa0>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a26      	ldr	r2, [pc, #152]	; (8000974 <RADIO_Init+0xa4>)
 80008da:	4927      	ldr	r1, [pc, #156]	; (8000978 <RADIO_Init+0xa8>)
 80008dc:	0018      	movs	r0, r3
 80008de:	f001 ff13 	bl	8002708 <TIM_Init>
	TIM_Start(TIM_RADIO);
 80008e2:	4b23      	ldr	r3, [pc, #140]	; (8000970 <RADIO_Init+0xa0>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	0018      	movs	r0, r3
 80008e8:	f001 ffe2 	bl	80028b0 <TIM_Start>
	GPIO_EnableInput(RADIO_S1_GPIO, RADIO_S1_PIN, GPIO_Pull_Down);
 80008ec:	2380      	movs	r3, #128	; 0x80
 80008ee:	00d9      	lsls	r1, r3, #3
 80008f0:	23a0      	movs	r3, #160	; 0xa0
 80008f2:	05db      	lsls	r3, r3, #23
 80008f4:	2220      	movs	r2, #32
 80008f6:	0018      	movs	r0, r3
 80008f8:	f7ff ffb2 	bl	8000860 <GPIO_EnableInput>
	GPIO_EnableInput(RADIO_S2_GPIO, RADIO_S2_PIN, GPIO_Pull_Down);
 80008fc:	2380      	movs	r3, #128	; 0x80
 80008fe:	0099      	lsls	r1, r3, #2
 8000900:	23a0      	movs	r3, #160	; 0xa0
 8000902:	05db      	lsls	r3, r3, #23
 8000904:	2220      	movs	r2, #32
 8000906:	0018      	movs	r0, r3
 8000908:	f7ff ffaa 	bl	8000860 <GPIO_EnableInput>
	GPIO_EnableInput(RADIO_S3_GPIO, RADIO_S3_PIN, GPIO_Pull_Down);
 800090c:	2380      	movs	r3, #128	; 0x80
 800090e:	0059      	lsls	r1, r3, #1
 8000910:	23a0      	movs	r3, #160	; 0xa0
 8000912:	05db      	lsls	r3, r3, #23
 8000914:	2220      	movs	r2, #32
 8000916:	0018      	movs	r0, r3
 8000918:	f7ff ffa2 	bl	8000860 <GPIO_EnableInput>
	GPIO_EnableInput(RADIO_S4_GPIO, RADIO_S4_PIN, GPIO_Pull_Down);
 800091c:	2380      	movs	r3, #128	; 0x80
 800091e:	021b      	lsls	r3, r3, #8
 8000920:	4816      	ldr	r0, [pc, #88]	; (800097c <RADIO_Init+0xac>)
 8000922:	2220      	movs	r2, #32
 8000924:	0019      	movs	r1, r3
 8000926:	f7ff ff9b 	bl	8000860 <GPIO_EnableInput>
	GPIO_OnChange(RADIO_S1_GPIO, RADIO_S1_PIN, GPIO_IT_Both, RADIO_SPWM1_IRQ);
 800092a:	4b15      	ldr	r3, [pc, #84]	; (8000980 <RADIO_Init+0xb0>)
 800092c:	2280      	movs	r2, #128	; 0x80
 800092e:	00d1      	lsls	r1, r2, #3
 8000930:	22a0      	movs	r2, #160	; 0xa0
 8000932:	05d0      	lsls	r0, r2, #23
 8000934:	2203      	movs	r2, #3
 8000936:	f001 fcf1 	bl	800231c <GPIO_OnChange>
	GPIO_OnChange(RADIO_S2_GPIO, RADIO_S2_PIN, GPIO_IT_Both, RADIO_SPWM2_IRQ);
 800093a:	4b12      	ldr	r3, [pc, #72]	; (8000984 <RADIO_Init+0xb4>)
 800093c:	2280      	movs	r2, #128	; 0x80
 800093e:	0091      	lsls	r1, r2, #2
 8000940:	22a0      	movs	r2, #160	; 0xa0
 8000942:	05d0      	lsls	r0, r2, #23
 8000944:	2203      	movs	r2, #3
 8000946:	f001 fce9 	bl	800231c <GPIO_OnChange>
	GPIO_OnChange(RADIO_S3_GPIO, RADIO_S3_PIN, GPIO_IT_Both, RADIO_SPWM3_IRQ);
 800094a:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <RADIO_Init+0xb8>)
 800094c:	2280      	movs	r2, #128	; 0x80
 800094e:	0051      	lsls	r1, r2, #1
 8000950:	22a0      	movs	r2, #160	; 0xa0
 8000952:	05d0      	lsls	r0, r2, #23
 8000954:	2203      	movs	r2, #3
 8000956:	f001 fce1 	bl	800231c <GPIO_OnChange>
	GPIO_OnChange(RADIO_S4_GPIO, RADIO_S4_PIN, GPIO_IT_Both, RADIO_SPWM4_IRQ);
 800095a:	4b0c      	ldr	r3, [pc, #48]	; (800098c <RADIO_Init+0xbc>)
 800095c:	2280      	movs	r2, #128	; 0x80
 800095e:	0211      	lsls	r1, r2, #8
 8000960:	4806      	ldr	r0, [pc, #24]	; (800097c <RADIO_Init+0xac>)
 8000962:	2203      	movs	r2, #3
 8000964:	f001 fcda 	bl	800231c <GPIO_OnChange>
}
 8000968:	46c0      	nop			; (mov r8, r8)
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	20000054 	.word	0x20000054
 8000974:	0000ffff 	.word	0x0000ffff
 8000978:	000f4240 	.word	0x000f4240
 800097c:	50000400 	.word	0x50000400
 8000980:	08000991 	.word	0x08000991
 8000984:	08000a1d 	.word	0x08000a1d
 8000988:	08000aa9 	.word	0x08000aa9
 800098c:	08000b35 	.word	0x08000b35

08000990 <RADIO_SPWM1_IRQ>:
/*
 * INTERRUPT ROUTINES
 */

void RADIO_SPWM1_IRQ (void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
	uint16_t now = TIM_Read(TIM_RADIO);
 8000996:	4b1c      	ldr	r3, [pc, #112]	; (8000a08 <RADIO_SPWM1_IRQ+0x78>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	0018      	movs	r0, r3
 800099c:	f7ff ff83 	bl	80008a6 <TIM_Read>
 80009a0:	0002      	movs	r2, r0
 80009a2:	1dbb      	adds	r3, r7, #6
 80009a4:	801a      	strh	r2, [r3, #0]
	uint16_t pulse = 0;
 80009a6:	1d3b      	adds	r3, r7, #4
 80009a8:	2200      	movs	r2, #0
 80009aa:	801a      	strh	r2, [r3, #0]
	static uint16_t tick;

	if (GPIO_Read(RADIO_S1_GPIO, RADIO_S1_PIN))
 80009ac:	2380      	movs	r3, #128	; 0x80
 80009ae:	00da      	lsls	r2, r3, #3
 80009b0:	23a0      	movs	r3, #160	; 0xa0
 80009b2:	05db      	lsls	r3, r3, #23
 80009b4:	0011      	movs	r1, r2
 80009b6:	0018      	movs	r0, r3
 80009b8:	f7ff ff65 	bl	8000886 <GPIO_Read>
 80009bc:	1e03      	subs	r3, r0, #0
 80009be:	d004      	beq.n	80009ca <RADIO_SPWM1_IRQ+0x3a>
	{
		tick = now;
 80009c0:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <RADIO_SPWM1_IRQ+0x7c>)
 80009c2:	1dba      	adds	r2, r7, #6
 80009c4:	8812      	ldrh	r2, [r2, #0]
 80009c6:	801a      	strh	r2, [r3, #0]
		{
			input[IP1] = pulse;
			inputHeartbeat = CORE_GetTick();
		}
	}
}
 80009c8:	e01a      	b.n	8000a00 <RADIO_SPWM1_IRQ+0x70>
		pulse = now - tick;
 80009ca:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <RADIO_SPWM1_IRQ+0x7c>)
 80009cc:	881a      	ldrh	r2, [r3, #0]
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	1db9      	adds	r1, r7, #6
 80009d2:	8809      	ldrh	r1, [r1, #0]
 80009d4:	1a8a      	subs	r2, r1, r2
 80009d6:	801a      	strh	r2, [r3, #0]
		if (pulse <= (RADIO_MAX + RADIO_THRESH) && pulse >= (RADIO_MIN - RADIO_THRESH))
 80009d8:	1d3b      	adds	r3, r7, #4
 80009da:	881b      	ldrh	r3, [r3, #0]
 80009dc:	4a0c      	ldr	r2, [pc, #48]	; (8000a10 <RADIO_SPWM1_IRQ+0x80>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d80e      	bhi.n	8000a00 <RADIO_SPWM1_IRQ+0x70>
 80009e2:	1d3b      	adds	r3, r7, #4
 80009e4:	881a      	ldrh	r2, [r3, #0]
 80009e6:	23fa      	movs	r3, #250	; 0xfa
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	429a      	cmp	r2, r3
 80009ec:	d308      	bcc.n	8000a00 <RADIO_SPWM1_IRQ+0x70>
			input[IP1] = pulse;
 80009ee:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <RADIO_SPWM1_IRQ+0x84>)
 80009f0:	1d3a      	adds	r2, r7, #4
 80009f2:	8812      	ldrh	r2, [r2, #0]
 80009f4:	801a      	strh	r2, [r3, #0]
			inputHeartbeat = CORE_GetTick();
 80009f6:	f7ff ff61 	bl	80008bc <CORE_GetTick>
 80009fa:	0002      	movs	r2, r0
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <RADIO_SPWM1_IRQ+0x88>)
 80009fe:	601a      	str	r2, [r3, #0]
}
 8000a00:	46c0      	nop			; (mov r8, r8)
 8000a02:	46bd      	mov	sp, r7
 8000a04:	b002      	add	sp, #8
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000054 	.word	0x20000054
 8000a0c:	200001c8 	.word	0x200001c8
 8000a10:	000009c4 	.word	0x000009c4
 8000a14:	20000000 	.word	0x20000000
 8000a18:	200001c4 	.word	0x200001c4

08000a1c <RADIO_SPWM2_IRQ>:

void RADIO_SPWM2_IRQ (void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
	uint16_t now = TIM_Read(TIM_RADIO);
 8000a22:	4b1c      	ldr	r3, [pc, #112]	; (8000a94 <RADIO_SPWM2_IRQ+0x78>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	0018      	movs	r0, r3
 8000a28:	f7ff ff3d 	bl	80008a6 <TIM_Read>
 8000a2c:	0002      	movs	r2, r0
 8000a2e:	1dbb      	adds	r3, r7, #6
 8000a30:	801a      	strh	r2, [r3, #0]
	uint16_t pulse = 0;
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	2200      	movs	r2, #0
 8000a36:	801a      	strh	r2, [r3, #0]
	static uint16_t tick;

	if (GPIO_Read(RADIO_S2_GPIO, RADIO_S2_PIN))
 8000a38:	2380      	movs	r3, #128	; 0x80
 8000a3a:	009a      	lsls	r2, r3, #2
 8000a3c:	23a0      	movs	r3, #160	; 0xa0
 8000a3e:	05db      	lsls	r3, r3, #23
 8000a40:	0011      	movs	r1, r2
 8000a42:	0018      	movs	r0, r3
 8000a44:	f7ff ff1f 	bl	8000886 <GPIO_Read>
 8000a48:	1e03      	subs	r3, r0, #0
 8000a4a:	d004      	beq.n	8000a56 <RADIO_SPWM2_IRQ+0x3a>
	{
		tick = now;
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <RADIO_SPWM2_IRQ+0x7c>)
 8000a4e:	1dba      	adds	r2, r7, #6
 8000a50:	8812      	ldrh	r2, [r2, #0]
 8000a52:	801a      	strh	r2, [r3, #0]
		{
			input[IP2] = pulse;
			inputHeartbeat = CORE_GetTick();
		}
	}
}
 8000a54:	e01a      	b.n	8000a8c <RADIO_SPWM2_IRQ+0x70>
		pulse = now - tick;
 8000a56:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <RADIO_SPWM2_IRQ+0x7c>)
 8000a58:	881a      	ldrh	r2, [r3, #0]
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	1db9      	adds	r1, r7, #6
 8000a5e:	8809      	ldrh	r1, [r1, #0]
 8000a60:	1a8a      	subs	r2, r1, r2
 8000a62:	801a      	strh	r2, [r3, #0]
		if (pulse <= (RADIO_MAX + RADIO_THRESH) && pulse >= (RADIO_MIN - RADIO_THRESH))
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	881b      	ldrh	r3, [r3, #0]
 8000a68:	4a0c      	ldr	r2, [pc, #48]	; (8000a9c <RADIO_SPWM2_IRQ+0x80>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d80e      	bhi.n	8000a8c <RADIO_SPWM2_IRQ+0x70>
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	881a      	ldrh	r2, [r3, #0]
 8000a72:	23fa      	movs	r3, #250	; 0xfa
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d308      	bcc.n	8000a8c <RADIO_SPWM2_IRQ+0x70>
			input[IP2] = pulse;
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <RADIO_SPWM2_IRQ+0x84>)
 8000a7c:	1d3a      	adds	r2, r7, #4
 8000a7e:	8812      	ldrh	r2, [r2, #0]
 8000a80:	805a      	strh	r2, [r3, #2]
			inputHeartbeat = CORE_GetTick();
 8000a82:	f7ff ff1b 	bl	80008bc <CORE_GetTick>
 8000a86:	0002      	movs	r2, r0
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <RADIO_SPWM2_IRQ+0x88>)
 8000a8a:	601a      	str	r2, [r3, #0]
}
 8000a8c:	46c0      	nop			; (mov r8, r8)
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	b002      	add	sp, #8
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000054 	.word	0x20000054
 8000a98:	200001ca 	.word	0x200001ca
 8000a9c:	000009c4 	.word	0x000009c4
 8000aa0:	20000000 	.word	0x20000000
 8000aa4:	200001c4 	.word	0x200001c4

08000aa8 <RADIO_SPWM3_IRQ>:

void RADIO_SPWM3_IRQ (void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
	uint16_t now = TIM_Read(TIM_RADIO);
 8000aae:	4b1c      	ldr	r3, [pc, #112]	; (8000b20 <RADIO_SPWM3_IRQ+0x78>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f7ff fef7 	bl	80008a6 <TIM_Read>
 8000ab8:	0002      	movs	r2, r0
 8000aba:	1dbb      	adds	r3, r7, #6
 8000abc:	801a      	strh	r2, [r3, #0]
	uint16_t pulse = 0;
 8000abe:	1d3b      	adds	r3, r7, #4
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	801a      	strh	r2, [r3, #0]
	static uint16_t tick;

	if (GPIO_Read(RADIO_S3_GPIO, RADIO_S3_PIN))
 8000ac4:	2380      	movs	r3, #128	; 0x80
 8000ac6:	005a      	lsls	r2, r3, #1
 8000ac8:	23a0      	movs	r3, #160	; 0xa0
 8000aca:	05db      	lsls	r3, r3, #23
 8000acc:	0011      	movs	r1, r2
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f7ff fed9 	bl	8000886 <GPIO_Read>
 8000ad4:	1e03      	subs	r3, r0, #0
 8000ad6:	d004      	beq.n	8000ae2 <RADIO_SPWM3_IRQ+0x3a>
	{
		tick = now;
 8000ad8:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <RADIO_SPWM3_IRQ+0x7c>)
 8000ada:	1dba      	adds	r2, r7, #6
 8000adc:	8812      	ldrh	r2, [r2, #0]
 8000ade:	801a      	strh	r2, [r3, #0]
		{
			input[IP3] = pulse;
			inputHeartbeat = CORE_GetTick();
		}
	}
}
 8000ae0:	e01a      	b.n	8000b18 <RADIO_SPWM3_IRQ+0x70>
		pulse = now - tick;
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <RADIO_SPWM3_IRQ+0x7c>)
 8000ae4:	881a      	ldrh	r2, [r3, #0]
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	1db9      	adds	r1, r7, #6
 8000aea:	8809      	ldrh	r1, [r1, #0]
 8000aec:	1a8a      	subs	r2, r1, r2
 8000aee:	801a      	strh	r2, [r3, #0]
		if (pulse <= (RADIO_MAX + RADIO_THRESH) && pulse >= (RADIO_MIN - RADIO_THRESH))
 8000af0:	1d3b      	adds	r3, r7, #4
 8000af2:	881b      	ldrh	r3, [r3, #0]
 8000af4:	4a0c      	ldr	r2, [pc, #48]	; (8000b28 <RADIO_SPWM3_IRQ+0x80>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d80e      	bhi.n	8000b18 <RADIO_SPWM3_IRQ+0x70>
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	881a      	ldrh	r2, [r3, #0]
 8000afe:	23fa      	movs	r3, #250	; 0xfa
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d308      	bcc.n	8000b18 <RADIO_SPWM3_IRQ+0x70>
			input[IP3] = pulse;
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <RADIO_SPWM3_IRQ+0x84>)
 8000b08:	1d3a      	adds	r2, r7, #4
 8000b0a:	8812      	ldrh	r2, [r2, #0]
 8000b0c:	809a      	strh	r2, [r3, #4]
			inputHeartbeat = CORE_GetTick();
 8000b0e:	f7ff fed5 	bl	80008bc <CORE_GetTick>
 8000b12:	0002      	movs	r2, r0
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <RADIO_SPWM3_IRQ+0x88>)
 8000b16:	601a      	str	r2, [r3, #0]
}
 8000b18:	46c0      	nop			; (mov r8, r8)
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	b002      	add	sp, #8
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000054 	.word	0x20000054
 8000b24:	200001cc 	.word	0x200001cc
 8000b28:	000009c4 	.word	0x000009c4
 8000b2c:	20000000 	.word	0x20000000
 8000b30:	200001c4 	.word	0x200001c4

08000b34 <RADIO_SPWM4_IRQ>:

void RADIO_SPWM4_IRQ (void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
	uint16_t now = TIM_Read(TIM_RADIO);
 8000b3a:	4b1c      	ldr	r3, [pc, #112]	; (8000bac <RADIO_SPWM4_IRQ+0x78>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f7ff feb1 	bl	80008a6 <TIM_Read>
 8000b44:	0002      	movs	r2, r0
 8000b46:	1dbb      	adds	r3, r7, #6
 8000b48:	801a      	strh	r2, [r3, #0]
	uint16_t pulse = 0;
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	801a      	strh	r2, [r3, #0]
	static uint16_t tick;

	if (GPIO_Read(RADIO_S4_GPIO, RADIO_S4_PIN))
 8000b50:	2380      	movs	r3, #128	; 0x80
 8000b52:	021b      	lsls	r3, r3, #8
 8000b54:	4a16      	ldr	r2, [pc, #88]	; (8000bb0 <RADIO_SPWM4_IRQ+0x7c>)
 8000b56:	0019      	movs	r1, r3
 8000b58:	0010      	movs	r0, r2
 8000b5a:	f7ff fe94 	bl	8000886 <GPIO_Read>
 8000b5e:	1e03      	subs	r3, r0, #0
 8000b60:	d004      	beq.n	8000b6c <RADIO_SPWM4_IRQ+0x38>
	{
		tick = now;
 8000b62:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <RADIO_SPWM4_IRQ+0x80>)
 8000b64:	1dba      	adds	r2, r7, #6
 8000b66:	8812      	ldrh	r2, [r2, #0]
 8000b68:	801a      	strh	r2, [r3, #0]
		{
			input[IP4] = pulse;
			inputHeartbeat = CORE_GetTick();
		}
	}
}
 8000b6a:	e01a      	b.n	8000ba2 <RADIO_SPWM4_IRQ+0x6e>
		pulse = now - tick;
 8000b6c:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <RADIO_SPWM4_IRQ+0x80>)
 8000b6e:	881a      	ldrh	r2, [r3, #0]
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	1db9      	adds	r1, r7, #6
 8000b74:	8809      	ldrh	r1, [r1, #0]
 8000b76:	1a8a      	subs	r2, r1, r2
 8000b78:	801a      	strh	r2, [r3, #0]
		if (pulse <= (RADIO_MAX + RADIO_THRESH) && pulse >= (RADIO_MIN - RADIO_THRESH))
 8000b7a:	1d3b      	adds	r3, r7, #4
 8000b7c:	881b      	ldrh	r3, [r3, #0]
 8000b7e:	4a0e      	ldr	r2, [pc, #56]	; (8000bb8 <RADIO_SPWM4_IRQ+0x84>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d80e      	bhi.n	8000ba2 <RADIO_SPWM4_IRQ+0x6e>
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	881a      	ldrh	r2, [r3, #0]
 8000b88:	23fa      	movs	r3, #250	; 0xfa
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d308      	bcc.n	8000ba2 <RADIO_SPWM4_IRQ+0x6e>
			input[IP4] = pulse;
 8000b90:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <RADIO_SPWM4_IRQ+0x88>)
 8000b92:	1d3a      	adds	r2, r7, #4
 8000b94:	8812      	ldrh	r2, [r2, #0]
 8000b96:	80da      	strh	r2, [r3, #6]
			inputHeartbeat = CORE_GetTick();
 8000b98:	f7ff fe90 	bl	80008bc <CORE_GetTick>
 8000b9c:	0002      	movs	r2, r0
 8000b9e:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <RADIO_SPWM4_IRQ+0x8c>)
 8000ba0:	601a      	str	r2, [r3, #0]
}
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	b002      	add	sp, #8
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	20000054 	.word	0x20000054
 8000bb0:	50000400 	.word	0x50000400
 8000bb4:	200001ce 	.word	0x200001ce
 8000bb8:	000009c4 	.word	0x000009c4
 8000bbc:	20000000 	.word	0x20000000
 8000bc0:	200001c4 	.word	0x200001c4

08000bc4 <GPIO_EnableOutput>:
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	1dfb      	adds	r3, r7, #7
 8000bd0:	701a      	strb	r2, [r3, #0]
	GPIO_Write(gpio, pin, state);
 8000bd2:	1dfb      	adds	r3, r7, #7
 8000bd4:	781a      	ldrb	r2, [r3, #0]
 8000bd6:	68b9      	ldr	r1, [r7, #8]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	0018      	movs	r0, r3
 8000bdc:	f001 fb64 	bl	80022a8 <GPIO_Write>
	GPIO_Init(gpio, pin, GPIO_Mode_Output);
 8000be0:	68b9      	ldr	r1, [r7, #8]
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	2201      	movs	r2, #1
 8000be6:	0018      	movs	r0, r3
 8000be8:	f001 fbc4 	bl	8002374 <GPIO_Init>
}
 8000bec:	46c0      	nop			; (mov r8, r8)
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	b004      	add	sp, #16
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <GPIO_Set>:
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	6039      	str	r1, [r7, #0]
	gpio->BSRR = (uint32_t)pin;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	683a      	ldr	r2, [r7, #0]
 8000c02:	619a      	str	r2, [r3, #24]
}
 8000c04:	46c0      	nop			; (mov r8, r8)
 8000c06:	46bd      	mov	sp, r7
 8000c08:	b002      	add	sp, #8
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <GPIO_Reset>:
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
	gpio->BRR = (uint32_t)pin;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	683a      	ldr	r2, [r7, #0]
 8000c1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c1c:	46c0      	nop			; (mov r8, r8)
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	b002      	add	sp, #8
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <SERVO_Init>:
/*
 * PUBLIC FUNCTIONS
 */

void SERVO_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
	GPIO_EnableOutput(SERVO1_GPIO, SERVO1_PIN, GPIO_PIN_RESET);
 8000c28:	23a0      	movs	r3, #160	; 0xa0
 8000c2a:	05db      	lsls	r3, r3, #23
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2102      	movs	r1, #2
 8000c30:	0018      	movs	r0, r3
 8000c32:	f7ff ffc7 	bl	8000bc4 <GPIO_EnableOutput>
	TIM_Init(TIM_SERVO1, TIM_SERVO1_FREQ, TIM_SERVO1_RELOAD);
 8000c36:	4b22      	ldr	r3, [pc, #136]	; (8000cc0 <SERVO_Init+0x9c>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a22      	ldr	r2, [pc, #136]	; (8000cc4 <SERVO_Init+0xa0>)
 8000c3c:	4922      	ldr	r1, [pc, #136]	; (8000cc8 <SERVO_Init+0xa4>)
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f001 fd62 	bl	8002708 <TIM_Init>
	TIM_OnReload(TIM_SERVO1, SERVO1_TimerReloadISR);
 8000c44:	4b1e      	ldr	r3, [pc, #120]	; (8000cc0 <SERVO_Init+0x9c>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a20      	ldr	r2, [pc, #128]	; (8000ccc <SERVO_Init+0xa8>)
 8000c4a:	0011      	movs	r1, r2
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	f001 fdab 	bl	80027a8 <TIM_OnReload>
	TIM_OnPulse(TIM_SERVO1, 0, SERVO1_TimerPulseISR);
 8000c52:	4b1b      	ldr	r3, [pc, #108]	; (8000cc0 <SERVO_Init+0x9c>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a1e      	ldr	r2, [pc, #120]	; (8000cd0 <SERVO_Init+0xac>)
 8000c58:	2100      	movs	r1, #0
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f001 fdb8 	bl	80027d0 <TIM_OnPulse>
	SERVO_S1_Update(0);
 8000c60:	2000      	movs	r0, #0
 8000c62:	f000 f885 	bl	8000d70 <SERVO_S1_Update>
	TIM_Start(TIM_SERVO1);
 8000c66:	4b16      	ldr	r3, [pc, #88]	; (8000cc0 <SERVO_Init+0x9c>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	f001 fe20 	bl	80028b0 <TIM_Start>

	GPIO_EnableOutput(SERVO2_GPIO, SERVO2_PIN, GPIO_PIN_RESET);
 8000c70:	2380      	movs	r3, #128	; 0x80
 8000c72:	019b      	lsls	r3, r3, #6
 8000c74:	4817      	ldr	r0, [pc, #92]	; (8000cd4 <SERVO_Init+0xb0>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	0019      	movs	r1, r3
 8000c7a:	f7ff ffa3 	bl	8000bc4 <GPIO_EnableOutput>
	TIM_Init(TIM_SERVO2, TIM_SERVO2_FREQ, TIM_SERVO2_RELOAD);
 8000c7e:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <SERVO_Init+0xb4>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a10      	ldr	r2, [pc, #64]	; (8000cc4 <SERVO_Init+0xa0>)
 8000c84:	4910      	ldr	r1, [pc, #64]	; (8000cc8 <SERVO_Init+0xa4>)
 8000c86:	0018      	movs	r0, r3
 8000c88:	f001 fd3e 	bl	8002708 <TIM_Init>
	TIM_OnReload(TIM_SERVO2, SERVO2_TimerReloadISR);
 8000c8c:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <SERVO_Init+0xb4>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a12      	ldr	r2, [pc, #72]	; (8000cdc <SERVO_Init+0xb8>)
 8000c92:	0011      	movs	r1, r2
 8000c94:	0018      	movs	r0, r3
 8000c96:	f001 fd87 	bl	80027a8 <TIM_OnReload>
	TIM_OnPulse(TIM_SERVO2, 0, SERVO2_TimerPulseISR);
 8000c9a:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <SERVO_Init+0xb4>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a10      	ldr	r2, [pc, #64]	; (8000ce0 <SERVO_Init+0xbc>)
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	f001 fd94 	bl	80027d0 <TIM_OnPulse>
	SERVO_S2_Update(0);
 8000ca8:	2000      	movs	r0, #0
 8000caa:	f000 f875 	bl	8000d98 <SERVO_S2_Update>
	TIM_Start(TIM_SERVO2);
 8000cae:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <SERVO_Init+0xb4>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	f001 fdfc 	bl	80028b0 <TIM_Start>
}
 8000cb8:	46c0      	nop			; (mov r8, r8)
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	20000070 	.word	0x20000070
 8000cc4:	00002710 	.word	0x00002710
 8000cc8:	000f4240 	.word	0x000f4240
 8000ccc:	08000dc1 	.word	0x08000dc1
 8000cd0:	08000dd7 	.word	0x08000dd7
 8000cd4:	50000800 	.word	0x50000800
 8000cd8:	2000008c 	.word	0x2000008c
 8000cdc:	08000ded 	.word	0x08000ded
 8000ce0:	08000e09 	.word	0x08000e09

08000ce4 <SERVO_Deinit>:

void SERVO_Deinit(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
	TIM_Stop(TIM_SERVO1);
 8000ce8:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <SERVO_Deinit+0x50>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	0018      	movs	r0, r3
 8000cee:	f001 fdf3 	bl	80028d8 <TIM_Stop>
	TIM_Deinit(TIM_SERVO1);
 8000cf2:	4b10      	ldr	r3, [pc, #64]	; (8000d34 <SERVO_Deinit+0x50>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f001 fe06 	bl	8002908 <TIM_Deinit>
	GPIO_Write(SERVO1_GPIO, SERVO1_PIN, GPIO_PIN_RESET);
 8000cfc:	23a0      	movs	r3, #160	; 0xa0
 8000cfe:	05db      	lsls	r3, r3, #23
 8000d00:	2200      	movs	r2, #0
 8000d02:	2102      	movs	r1, #2
 8000d04:	0018      	movs	r0, r3
 8000d06:	f001 facf 	bl	80022a8 <GPIO_Write>

	TIM_Stop(TIM_SERVO2);
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <SERVO_Deinit+0x54>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	0018      	movs	r0, r3
 8000d10:	f001 fde2 	bl	80028d8 <TIM_Stop>
	TIM_Deinit(TIM_SERVO2);
 8000d14:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <SERVO_Deinit+0x54>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f001 fdf5 	bl	8002908 <TIM_Deinit>
	GPIO_Write(SERVO2_GPIO, SERVO2_PIN, GPIO_PIN_RESET);
 8000d1e:	2380      	movs	r3, #128	; 0x80
 8000d20:	019b      	lsls	r3, r3, #6
 8000d22:	4806      	ldr	r0, [pc, #24]	; (8000d3c <SERVO_Deinit+0x58>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	0019      	movs	r1, r3
 8000d28:	f001 fabe 	bl	80022a8 <GPIO_Write>
}
 8000d2c:	46c0      	nop			; (mov r8, r8)
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	20000070 	.word	0x20000070
 8000d38:	2000008c 	.word	0x2000008c
 8000d3c:	50000800 	.word	0x50000800

08000d40 <SERVO_Update>:

void SERVO_Update(uint16_t S1, uint16_t S2)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	0002      	movs	r2, r0
 8000d48:	1dbb      	adds	r3, r7, #6
 8000d4a:	801a      	strh	r2, [r3, #0]
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	1c0a      	adds	r2, r1, #0
 8000d50:	801a      	strh	r2, [r3, #0]
	SERVO_S1_Update(S1);
 8000d52:	1dbb      	adds	r3, r7, #6
 8000d54:	881b      	ldrh	r3, [r3, #0]
 8000d56:	0018      	movs	r0, r3
 8000d58:	f000 f80a 	bl	8000d70 <SERVO_S1_Update>
	SERVO_S2_Update(S2);
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	881b      	ldrh	r3, [r3, #0]
 8000d60:	0018      	movs	r0, r3
 8000d62:	f000 f819 	bl	8000d98 <SERVO_S2_Update>
}
 8000d66:	46c0      	nop			; (mov r8, r8)
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	b002      	add	sp, #8
 8000d6c:	bd80      	pop	{r7, pc}
	...

08000d70 <SERVO_S1_Update>:
/*
 * PRIVATE FUNCTIONS
 */

void SERVO_S1_Update(uint16_t pulse)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	0002      	movs	r2, r0
 8000d78:	1dbb      	adds	r3, r7, #6
 8000d7a:	801a      	strh	r2, [r3, #0]
	TIM_SetPulse(TIM_SERVO1, 0, pulse);
 8000d7c:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <SERVO_S1_Update+0x24>)
 8000d7e:	6818      	ldr	r0, [r3, #0]
 8000d80:	1dbb      	adds	r3, r7, #6
 8000d82:	881b      	ldrh	r3, [r3, #0]
 8000d84:	001a      	movs	r2, r3
 8000d86:	2100      	movs	r1, #0
 8000d88:	f001 fd64 	bl	8002854 <TIM_SetPulse>
}
 8000d8c:	46c0      	nop			; (mov r8, r8)
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	b002      	add	sp, #8
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000070 	.word	0x20000070

08000d98 <SERVO_S2_Update>:

void SERVO_S2_Update(uint16_t pulse)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	0002      	movs	r2, r0
 8000da0:	1dbb      	adds	r3, r7, #6
 8000da2:	801a      	strh	r2, [r3, #0]
	TIM_SetPulse(TIM_SERVO2, 0, pulse);
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <SERVO_S2_Update+0x24>)
 8000da6:	6818      	ldr	r0, [r3, #0]
 8000da8:	1dbb      	adds	r3, r7, #6
 8000daa:	881b      	ldrh	r3, [r3, #0]
 8000dac:	001a      	movs	r2, r3
 8000dae:	2100      	movs	r1, #0
 8000db0:	f001 fd50 	bl	8002854 <TIM_SetPulse>
}
 8000db4:	46c0      	nop			; (mov r8, r8)
 8000db6:	46bd      	mov	sp, r7
 8000db8:	b002      	add	sp, #8
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	2000008c 	.word	0x2000008c

08000dc0 <SERVO1_TimerReloadISR>:
/*
 * INTERRUPT ROUTINES
 */

static void SERVO1_TimerReloadISR(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
	GPIO_Set(SERVO1_GPIO, SERVO1_PIN);
 8000dc4:	23a0      	movs	r3, #160	; 0xa0
 8000dc6:	05db      	lsls	r3, r3, #23
 8000dc8:	2102      	movs	r1, #2
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f7ff ff12 	bl	8000bf4 <GPIO_Set>
}
 8000dd0:	46c0      	nop			; (mov r8, r8)
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <SERVO1_TimerPulseISR>:

static void SERVO1_TimerPulseISR(void)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	af00      	add	r7, sp, #0
	GPIO_Reset(SERVO1_GPIO, SERVO1_PIN);
 8000dda:	23a0      	movs	r3, #160	; 0xa0
 8000ddc:	05db      	lsls	r3, r3, #23
 8000dde:	2102      	movs	r1, #2
 8000de0:	0018      	movs	r0, r3
 8000de2:	f7ff ff13 	bl	8000c0c <GPIO_Reset>
}
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <SERVO2_TimerReloadISR>:

static void SERVO2_TimerReloadISR(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
	GPIO_Set(SERVO2_GPIO, SERVO2_PIN);
 8000df0:	2380      	movs	r3, #128	; 0x80
 8000df2:	019b      	lsls	r3, r3, #6
 8000df4:	4a03      	ldr	r2, [pc, #12]	; (8000e04 <SERVO2_TimerReloadISR+0x18>)
 8000df6:	0019      	movs	r1, r3
 8000df8:	0010      	movs	r0, r2
 8000dfa:	f7ff fefb 	bl	8000bf4 <GPIO_Set>
}
 8000dfe:	46c0      	nop			; (mov r8, r8)
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	50000800 	.word	0x50000800

08000e08 <SERVO2_TimerPulseISR>:

static void SERVO2_TimerPulseISR(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
	GPIO_Reset(SERVO2_GPIO, SERVO2_PIN);
 8000e0c:	2380      	movs	r3, #128	; 0x80
 8000e0e:	019b      	lsls	r3, r3, #6
 8000e10:	4a03      	ldr	r2, [pc, #12]	; (8000e20 <SERVO2_TimerPulseISR+0x18>)
 8000e12:	0019      	movs	r1, r3
 8000e14:	0010      	movs	r0, r2
 8000e16:	f7ff fef9 	bl	8000c0c <GPIO_Reset>
}
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	50000800 	.word	0x50000800

08000e24 <CORE_GetTick>:
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
	return gTicks;
 8000e28:	4b02      	ldr	r3, [pc, #8]	; (8000e34 <CORE_GetTick+0x10>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
}
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	46c0      	nop			; (mov r8, r8)
 8000e34:	200001d4 	.word	0x200001d4

08000e38 <GPIO_EnableInput>:
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	1dfb      	adds	r3, r7, #7
 8000e44:	701a      	strb	r2, [r3, #0]
	GPIO_Init(gpio, pin, GPIO_Mode_Input | pull);
 8000e46:	1dfb      	adds	r3, r7, #7
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	b29a      	uxth	r2, r3
 8000e4c:	68b9      	ldr	r1, [r7, #8]
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	0018      	movs	r0, r3
 8000e52:	f001 fa8f 	bl	8002374 <GPIO_Init>
}
 8000e56:	46c0      	nop			; (mov r8, r8)
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	b004      	add	sp, #16
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <GPIO_Read>:
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b082      	sub	sp, #8
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
 8000e66:	6039      	str	r1, [r7, #0]
	return ((gpio->IDR & pin) > 0);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	691b      	ldr	r3, [r3, #16]
 8000e6c:	683a      	ldr	r2, [r7, #0]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	1e5a      	subs	r2, r3, #1
 8000e72:	4193      	sbcs	r3, r2
 8000e74:	b2db      	uxtb	r3, r3
}
 8000e76:	0018      	movs	r0, r3
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	b002      	add	sp, #8
 8000e7c:	bd80      	pop	{r7, pc}
	...

08000e80 <SYSTEM_Init>:
/*
 * PUBLIC FUNCTIONS
 */

void SYSTEM_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
//	else
//	{
//		battery_fault = BATT_1S_LOW;
//	}
	// INIT THE CALIBRATION INPUT
	GPIO_EnableInput(CALIBRATE_GPIO, CALIBRATE_PIN, GPIO_Pull_Up);
 8000e84:	23a0      	movs	r3, #160	; 0xa0
 8000e86:	05db      	lsls	r3, r3, #23
 8000e88:	2210      	movs	r2, #16
 8000e8a:	2108      	movs	r1, #8
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	f7ff ffd3 	bl	8000e38 <GPIO_EnableInput>

	// INIT STATUS LED
	LED_Init();
 8000e92:	f7ff fae1 	bl	8000458 <LED_Init>

	// READ CONFIGURATION FROM EEPROM
	EEPROM_Read(EEPROM_OFFSET, &config, sizeof(config));
 8000e96:	4b27      	ldr	r3, [pc, #156]	; (8000f34 <SYSTEM_Init+0xb4>)
 8000e98:	2214      	movs	r2, #20
 8000e9a:	0019      	movs	r1, r3
 8000e9c:	2000      	movs	r0, #0
 8000e9e:	f001 f98d 	bl	80021bc <EEPROM_Read>

	// CHECK FOR VALID CONFIG
	if ((config.hashA != configDefault.hashA) || (config.hashB != configDefault.hashB))
 8000ea2:	4b24      	ldr	r3, [pc, #144]	; (8000f34 <SYSTEM_Init+0xb4>)
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	4b24      	ldr	r3, [pc, #144]	; (8000f38 <SYSTEM_Init+0xb8>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	d105      	bne.n	8000eba <SYSTEM_Init+0x3a>
 8000eae:	4b21      	ldr	r3, [pc, #132]	; (8000f34 <SYSTEM_Init+0xb4>)
 8000eb0:	691a      	ldr	r2, [r3, #16]
 8000eb2:	4b21      	ldr	r3, [pc, #132]	; (8000f38 <SYSTEM_Init+0xb8>)
 8000eb4:	691b      	ldr	r3, [r3, #16]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d038      	beq.n	8000f2c <SYSTEM_Init+0xac>
	{
		config.hashA = configDefault.hashA;
 8000eba:	4b1f      	ldr	r3, [pc, #124]	; (8000f38 <SYSTEM_Init+0xb8>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	4b1d      	ldr	r3, [pc, #116]	; (8000f34 <SYSTEM_Init+0xb4>)
 8000ec0:	601a      	str	r2, [r3, #0]
		config.mode = configDefault.mode;
 8000ec2:	4b1d      	ldr	r3, [pc, #116]	; (8000f38 <SYSTEM_Init+0xb8>)
 8000ec4:	791a      	ldrb	r2, [r3, #4]
 8000ec6:	4b1b      	ldr	r3, [pc, #108]	; (8000f34 <SYSTEM_Init+0xb4>)
 8000ec8:	711a      	strb	r2, [r3, #4]
		config.primaryCh = configDefault.primaryCh;
 8000eca:	4b1b      	ldr	r3, [pc, #108]	; (8000f38 <SYSTEM_Init+0xb8>)
 8000ecc:	795a      	ldrb	r2, [r3, #5]
 8000ece:	4b19      	ldr	r3, [pc, #100]	; (8000f34 <SYSTEM_Init+0xb4>)
 8000ed0:	715a      	strb	r2, [r3, #5]
		config.primaryRev = configDefault.primaryRev;
 8000ed2:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <SYSTEM_Init+0xb8>)
 8000ed4:	2206      	movs	r2, #6
 8000ed6:	569a      	ldrsb	r2, [r3, r2]
 8000ed8:	4b16      	ldr	r3, [pc, #88]	; (8000f34 <SYSTEM_Init+0xb4>)
 8000eda:	719a      	strb	r2, [r3, #6]
		config.secondaryCh = configDefault.secondaryCh;
 8000edc:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <SYSTEM_Init+0xb8>)
 8000ede:	79da      	ldrb	r2, [r3, #7]
 8000ee0:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <SYSTEM_Init+0xb4>)
 8000ee2:	71da      	strb	r2, [r3, #7]
		config.secondaryRev = configDefault.secondaryRev;
 8000ee4:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <SYSTEM_Init+0xb8>)
 8000ee6:	2208      	movs	r2, #8
 8000ee8:	569a      	ldrsb	r2, [r3, r2]
 8000eea:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <SYSTEM_Init+0xb4>)
 8000eec:	721a      	strb	r2, [r3, #8]
		config.servoChA = configDefault.servoChA;
 8000eee:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <SYSTEM_Init+0xb8>)
 8000ef0:	7a5a      	ldrb	r2, [r3, #9]
 8000ef2:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <SYSTEM_Init+0xb4>)
 8000ef4:	725a      	strb	r2, [r3, #9]
		config.servoRevA = configDefault.servoRevA;
 8000ef6:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <SYSTEM_Init+0xb8>)
 8000ef8:	220a      	movs	r2, #10
 8000efa:	569a      	ldrsb	r2, [r3, r2]
 8000efc:	4b0d      	ldr	r3, [pc, #52]	; (8000f34 <SYSTEM_Init+0xb4>)
 8000efe:	729a      	strb	r2, [r3, #10]
		config.servoChB = configDefault.servoChB;
 8000f00:	4b0d      	ldr	r3, [pc, #52]	; (8000f38 <SYSTEM_Init+0xb8>)
 8000f02:	7ada      	ldrb	r2, [r3, #11]
 8000f04:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <SYSTEM_Init+0xb4>)
 8000f06:	72da      	strb	r2, [r3, #11]
		config.servoRevB = configDefault.servoRevB;
 8000f08:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <SYSTEM_Init+0xb8>)
 8000f0a:	220c      	movs	r2, #12
 8000f0c:	569a      	ldrsb	r2, [r3, r2]
 8000f0e:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <SYSTEM_Init+0xb4>)
 8000f10:	731a      	strb	r2, [r3, #12]
		config.hashB = configDefault.hashB;
 8000f12:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <SYSTEM_Init+0xb8>)
 8000f14:	691a      	ldr	r2, [r3, #16]
 8000f16:	4b07      	ldr	r3, [pc, #28]	; (8000f34 <SYSTEM_Init+0xb4>)
 8000f18:	611a      	str	r2, [r3, #16]
		EEPROM_Write(EEPROM_OFFSET, &config, sizeof(config));
 8000f1a:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <SYSTEM_Init+0xb4>)
 8000f1c:	2214      	movs	r2, #20
 8000f1e:	0019      	movs	r1, r3
 8000f20:	2000      	movs	r0, #0
 8000f22:	f001 f915 	bl	8002150 <EEPROM_Write>
		LED_nPulse(5);
 8000f26:	2005      	movs	r0, #5
 8000f28:	f7ff fb09 	bl	800053e <LED_nPulse>
	}
}
 8000f2c:	46c0      	nop			; (mov r8, r8)
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	20000224 	.word	0x20000224
 8000f38:	20000008 	.word	0x20000008

08000f3c <SYSTEM_Update>:

void SYSTEM_Update(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
	status_p = status;
 8000f42:	4a3e      	ldr	r2, [pc, #248]	; (800103c <SYSTEM_Update+0x100>)
 8000f44:	4b3e      	ldr	r3, [pc, #248]	; (8001040 <SYSTEM_Update+0x104>)
 8000f46:	0010      	movs	r0, r2
 8000f48:	0019      	movs	r1, r3
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	001a      	movs	r2, r3
 8000f4e:	f001 ff6d 	bl	8002e2c <memcpy>

	static uint32_t tick;
	uint32_t now = CORE_GetTick();
 8000f52:	f7ff ff67 	bl	8000e24 <CORE_GetTick>
 8000f56:	0003      	movs	r3, r0
 8000f58:	607b      	str	r3, [r7, #4]
//	}
//	else { //status.faultTemp == true
//		if (SystemTemp < (TEMP_HIGH + TEMP_HYST)) { status.faultTemp = false; }
//	}

	if (INPUT_TIMEOUT <= CORE_GetTick() - inputHeartbeat)
 8000f5a:	f7ff ff63 	bl	8000e24 <CORE_GetTick>
 8000f5e:	0002      	movs	r2, r0
 8000f60:	4b38      	ldr	r3, [pc, #224]	; (8001044 <SYSTEM_Update+0x108>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	2b31      	cmp	r3, #49	; 0x31
 8000f68:	d903      	bls.n	8000f72 <SYSTEM_Update+0x36>
	{
		status.faultInput = true;
 8000f6a:	4b35      	ldr	r3, [pc, #212]	; (8001040 <SYSTEM_Update+0x104>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	701a      	strb	r2, [r3, #0]
 8000f70:	e002      	b.n	8000f78 <SYSTEM_Update+0x3c>
	}
	else
	{
		status.faultInput = false;
 8000f72:	4b33      	ldr	r3, [pc, #204]	; (8001040 <SYSTEM_Update+0x104>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	701a      	strb	r2, [r3, #0]
	}

	// CHECK FOR CALIBRATION INPUT
	if (calibrateWindow && now < CALIBRATE_TIMEOUT && !GPIO_Read(CALIBRATE_GPIO, CALIBRATE_PIN) && !status.faultInput)
 8000f78:	4b33      	ldr	r3, [pc, #204]	; (8001048 <SYSTEM_Update+0x10c>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d01d      	beq.n	8000fbc <SYSTEM_Update+0x80>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a32      	ldr	r2, [pc, #200]	; (800104c <SYSTEM_Update+0x110>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d819      	bhi.n	8000fbc <SYSTEM_Update+0x80>
 8000f88:	23a0      	movs	r3, #160	; 0xa0
 8000f8a:	05db      	lsls	r3, r3, #23
 8000f8c:	2108      	movs	r1, #8
 8000f8e:	0018      	movs	r0, r3
 8000f90:	f7ff ff65 	bl	8000e5e <GPIO_Read>
 8000f94:	0003      	movs	r3, r0
 8000f96:	001a      	movs	r2, r3
 8000f98:	2301      	movs	r3, #1
 8000f9a:	4053      	eors	r3, r2
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d00c      	beq.n	8000fbc <SYSTEM_Update+0x80>
 8000fa2:	4b27      	ldr	r3, [pc, #156]	; (8001040 <SYSTEM_Update+0x104>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	4053      	eors	r3, r2
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d005      	beq.n	8000fbc <SYSTEM_Update+0x80>
	{
		SYSTEM_Calibrate();
 8000fb0:	f000 f89e 	bl	80010f0 <SYSTEM_Calibrate>
		calibrateWindow = false;
 8000fb4:	4b24      	ldr	r3, [pc, #144]	; (8001048 <SYSTEM_Update+0x10c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	701a      	strb	r2, [r3, #0]
 8000fba:	e00a      	b.n	8000fd2 <SYSTEM_Update+0x96>
	}
	else if (calibrateWindow && now > CALIBRATE_TIMEOUT)
 8000fbc:	4b22      	ldr	r3, [pc, #136]	; (8001048 <SYSTEM_Update+0x10c>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d006      	beq.n	8000fd2 <SYSTEM_Update+0x96>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a22      	ldr	r2, [pc, #136]	; (8001050 <SYSTEM_Update+0x114>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d902      	bls.n	8000fd2 <SYSTEM_Update+0x96>
	{
		calibrateWindow = false;
 8000fcc:	4b1e      	ldr	r3, [pc, #120]	; (8001048 <SYSTEM_Update+0x10c>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	701a      	strb	r2, [r3, #0]
	}

	if (status.faultTemp)
 8000fd2:	4b1b      	ldr	r3, [pc, #108]	; (8001040 <SYSTEM_Update+0x104>)
 8000fd4:	789b      	ldrb	r3, [r3, #2]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d004      	beq.n	8000fe4 <SYSTEM_Update+0xa8>
	{
		LED_RedOFF();
 8000fda:	f7ff fa79 	bl	80004d0 <LED_RedOFF>
		LED_GreenON();
 8000fde:	f7ff fa51 	bl	8000484 <LED_GreenON>
	else
	{
		LED_RedON();
		LED_GreenOFF();
	}
}
 8000fe2:	e027      	b.n	8001034 <SYSTEM_Update+0xf8>
	else if (status.faultInput)
 8000fe4:	4b16      	ldr	r3, [pc, #88]	; (8001040 <SYSTEM_Update+0x104>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d016      	beq.n	800101a <SYSTEM_Update+0xde>
		LED_RedOFF();
 8000fec:	f7ff fa70 	bl	80004d0 <LED_RedOFF>
		if (FAULT_LED_FLASH <= (now - tick))
 8000ff0:	4b18      	ldr	r3, [pc, #96]	; (8001054 <SYSTEM_Update+0x118>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	1ad2      	subs	r2, r2, r3
 8000ff8:	23fa      	movs	r3, #250	; 0xfa
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d319      	bcc.n	8001034 <SYSTEM_Update+0xf8>
			if (LED_GreenState())
 8001000:	f7ff fa74 	bl	80004ec <LED_GreenState>
 8001004:	1e03      	subs	r3, r0, #0
 8001006:	d002      	beq.n	800100e <SYSTEM_Update+0xd2>
				LED_GreenOFF();
 8001008:	f7ff fa56 	bl	80004b8 <LED_GreenOFF>
 800100c:	e001      	b.n	8001012 <SYSTEM_Update+0xd6>
				LED_GreenON();
 800100e:	f7ff fa39 	bl	8000484 <LED_GreenON>
			tick = now;
 8001012:	4b10      	ldr	r3, [pc, #64]	; (8001054 <SYSTEM_Update+0x118>)
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	601a      	str	r2, [r3, #0]
}
 8001018:	e00c      	b.n	8001034 <SYSTEM_Update+0xf8>
	else if (status.faultBatt)
 800101a:	4b09      	ldr	r3, [pc, #36]	; (8001040 <SYSTEM_Update+0x104>)
 800101c:	785b      	ldrb	r3, [r3, #1]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d004      	beq.n	800102c <SYSTEM_Update+0xf0>
		LED_RedON();
 8001022:	f7ff fa3b 	bl	800049c <LED_RedON>
		LED_GreenON();
 8001026:	f7ff fa2d 	bl	8000484 <LED_GreenON>
}
 800102a:	e003      	b.n	8001034 <SYSTEM_Update+0xf8>
		LED_RedON();
 800102c:	f7ff fa36 	bl	800049c <LED_RedON>
		LED_GreenOFF();
 8001030:	f7ff fa42 	bl	80004b8 <LED_GreenOFF>
}
 8001034:	46c0      	nop			; (mov r8, r8)
 8001036:	46bd      	mov	sp, r7
 8001038:	b002      	add	sp, #8
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000218 	.word	0x20000218
 8001040:	20000220 	.word	0x20000220
 8001044:	200001c4 	.word	0x200001c4
 8001048:	2000001c 	.word	0x2000001c
 800104c:	00001387 	.word	0x00001387
 8001050:	00001388 	.word	0x00001388
 8001054:	200001d0 	.word	0x200001d0

08001058 <SYSTEM_RadioToMotor>:

int32_t SYSTEM_RadioToMotor (uint16_t radio)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	0002      	movs	r2, r0
 8001060:	1dbb      	adds	r3, r7, #6
 8001062:	801a      	strh	r2, [r3, #0]
	return (((int32_t)radio - RADIO_CENTER) * 256) / 500;
 8001064:	1dbb      	adds	r3, r7, #6
 8001066:	881b      	ldrh	r3, [r3, #0]
 8001068:	4a06      	ldr	r2, [pc, #24]	; (8001084 <SYSTEM_RadioToMotor+0x2c>)
 800106a:	4694      	mov	ip, r2
 800106c:	4463      	add	r3, ip
 800106e:	021b      	lsls	r3, r3, #8
 8001070:	22fa      	movs	r2, #250	; 0xfa
 8001072:	0051      	lsls	r1, r2, #1
 8001074:	0018      	movs	r0, r3
 8001076:	f7ff f8d1 	bl	800021c <__divsi3>
 800107a:	0003      	movs	r3, r0
}
 800107c:	0018      	movs	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	b002      	add	sp, #8
 8001082:	bd80      	pop	{r7, pc}
 8001084:	fffffa24 	.word	0xfffffa24

08001088 <SYSTEM_ReverseRadio>:

uint16_t SYSTEM_ReverseRadio(uint16_t radio)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	0002      	movs	r2, r0
 8001090:	1dbb      	adds	r3, r7, #6
 8001092:	801a      	strh	r2, [r3, #0]
	return ((2 * RADIO_CENTER) - radio);
 8001094:	1dbb      	adds	r3, r7, #6
 8001096:	881b      	ldrh	r3, [r3, #0]
 8001098:	4a03      	ldr	r2, [pc, #12]	; (80010a8 <SYSTEM_ReverseRadio+0x20>)
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	b29b      	uxth	r3, r3
}
 800109e:	0018      	movs	r0, r3
 80010a0:	46bd      	mov	sp, r7
 80010a2:	b002      	add	sp, #8
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	46c0      	nop			; (mov r8, r8)
 80010a8:	00000bb8 	.word	0x00000bb8

080010ac <SYSTEM_RadioTruncate>:

uint16_t SYSTEM_RadioTruncate (uint16_t radio)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	0002      	movs	r2, r0
 80010b4:	1dbb      	adds	r3, r7, #6
 80010b6:	801a      	strh	r2, [r3, #0]
	if (radio > RADIO_MAX)
 80010b8:	1dbb      	adds	r3, r7, #6
 80010ba:	881a      	ldrh	r2, [r3, #0]
 80010bc:	23fa      	movs	r3, #250	; 0xfa
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d904      	bls.n	80010ce <SYSTEM_RadioTruncate+0x22>
	{
		radio = RADIO_MAX;
 80010c4:	1dbb      	adds	r3, r7, #6
 80010c6:	22fa      	movs	r2, #250	; 0xfa
 80010c8:	00d2      	lsls	r2, r2, #3
 80010ca:	801a      	strh	r2, [r3, #0]
 80010cc:	e009      	b.n	80010e2 <SYSTEM_RadioTruncate+0x36>
	}
	else if (radio < RADIO_MIN)
 80010ce:	1dbb      	adds	r3, r7, #6
 80010d0:	881a      	ldrh	r2, [r3, #0]
 80010d2:	23fa      	movs	r3, #250	; 0xfa
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d203      	bcs.n	80010e2 <SYSTEM_RadioTruncate+0x36>
	{
		radio = RADIO_MIN;
 80010da:	1dbb      	adds	r3, r7, #6
 80010dc:	22fa      	movs	r2, #250	; 0xfa
 80010de:	0092      	lsls	r2, r2, #2
 80010e0:	801a      	strh	r2, [r3, #0]
	}
	return radio;
 80010e2:	1dbb      	adds	r3, r7, #6
 80010e4:	881b      	ldrh	r3, [r3, #0]
}
 80010e6:	0018      	movs	r0, r3
 80010e8:	46bd      	mov	sp, r7
 80010ea:	b002      	add	sp, #8
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <SYSTEM_Calibrate>:
	uint32_t mv = AIN_AinToMv(ain);
	return AIN_AinToDivider(mv, BATTERY_DET_RLOW, BATTERY_DET_RHIGH);
}

void SYSTEM_Calibrate(void)
{
 80010f0:	b5b0      	push	{r4, r5, r7, lr}
 80010f2:	b090      	sub	sp, #64	; 0x40
 80010f4:	af00      	add	r7, sp, #0
	MOTOR_Update(MOTOR_OFF, MOTOR_OFF);
 80010f6:	2100      	movs	r1, #0
 80010f8:	2000      	movs	r0, #0
 80010fa:	f7ff facf 	bl	800069c <MOTOR_Update>
	SERVO_Deinit();
 80010fe:	f7ff fdf1 	bl	8000ce4 <SERVO_Deinit>
	SYSTEM_Config configInt;
	bool calibrated;
	uint16_t inputZero[NUM_TOTALINPUTS];

	// SAMPLE INPUTS FOR ZERO REFERENCE
	for (uint8_t i = 0; i < NUM_TOTALINPUTS; i++)
 8001102:	233e      	movs	r3, #62	; 0x3e
 8001104:	18fb      	adds	r3, r7, r3
 8001106:	2200      	movs	r2, #0
 8001108:	701a      	strb	r2, [r3, #0]
 800110a:	e011      	b.n	8001130 <SYSTEM_Calibrate+0x40>
	{
		inputZero[i] = input[i];
 800110c:	203e      	movs	r0, #62	; 0x3e
 800110e:	183b      	adds	r3, r7, r0
 8001110:	7819      	ldrb	r1, [r3, #0]
 8001112:	183b      	adds	r3, r7, r0
 8001114:	781a      	ldrb	r2, [r3, #0]
 8001116:	4bd2      	ldr	r3, [pc, #840]	; (8001460 <SYSTEM_Calibrate+0x370>)
 8001118:	0049      	lsls	r1, r1, #1
 800111a:	5acb      	ldrh	r3, [r1, r3]
 800111c:	b299      	uxth	r1, r3
 800111e:	2318      	movs	r3, #24
 8001120:	18fb      	adds	r3, r7, r3
 8001122:	0052      	lsls	r2, r2, #1
 8001124:	52d1      	strh	r1, [r2, r3]
	for (uint8_t i = 0; i < NUM_TOTALINPUTS; i++)
 8001126:	183b      	adds	r3, r7, r0
 8001128:	781a      	ldrb	r2, [r3, #0]
 800112a:	183b      	adds	r3, r7, r0
 800112c:	3201      	adds	r2, #1
 800112e:	701a      	strb	r2, [r3, #0]
 8001130:	233e      	movs	r3, #62	; 0x3e
 8001132:	18fb      	adds	r3, r7, r3
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b03      	cmp	r3, #3
 8001138:	d9e8      	bls.n	800110c <SYSTEM_Calibrate+0x1c>
	}

	// TURN ON LEDS TO TELL OPERATOR CALIBRATION IS STARTING
	LED_nPulse(4);
 800113a:	2004      	movs	r0, #4
 800113c:	f7ff f9ff 	bl	800053e <LED_nPulse>
	CORE_Delay(300);
 8001140:	2396      	movs	r3, #150	; 0x96
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	0018      	movs	r0, r3
 8001146:	f000 ff67 	bl	8002018 <CORE_Delay>
	LED_GreenON();
 800114a:	f7ff f99b 	bl	8000484 <LED_GreenON>
	LED_RedON();
 800114e:	f7ff f9a5 	bl	800049c <LED_RedON>

	// CHECK FOR OPERATOR INPUT
	calibrated = false;
 8001152:	233f      	movs	r3, #63	; 0x3f
 8001154:	18fb      	adds	r3, r7, r3
 8001156:	2200      	movs	r2, #0
 8001158:	701a      	strb	r2, [r3, #0]
	while (!calibrated)
 800115a:	e09c      	b.n	8001296 <SYSTEM_Calibrate+0x1a6>
	{
		CORE_Delay(CALIBRATE_RADIO_POLL_PERIOD);
 800115c:	23fa      	movs	r3, #250	; 0xfa
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	0018      	movs	r0, r3
 8001162:	f000 ff59 	bl	8002018 <CORE_Delay>

		uint8_t numSticks = 0;
 8001166:	233d      	movs	r3, #61	; 0x3d
 8001168:	18fb      	adds	r3, r7, r3
 800116a:	2200      	movs	r2, #0
 800116c:	701a      	strb	r2, [r3, #0]

		for (uint8_t i = 0; i < NUM_TOTALINPUTS; i++)
 800116e:	233c      	movs	r3, #60	; 0x3c
 8001170:	18fb      	adds	r3, r7, r3
 8001172:	2200      	movs	r2, #0
 8001174:	701a      	strb	r2, [r3, #0]
 8001176:	e06a      	b.n	800124e <SYSTEM_Calibrate+0x15e>
		{
			if (input[i] > (inputZero[i] + CALIBRATE_INPUT_THRESHOLD))
 8001178:	203c      	movs	r0, #60	; 0x3c
 800117a:	183b      	adds	r3, r7, r0
 800117c:	781a      	ldrb	r2, [r3, #0]
 800117e:	4bb8      	ldr	r3, [pc, #736]	; (8001460 <SYSTEM_Calibrate+0x370>)
 8001180:	0052      	lsls	r2, r2, #1
 8001182:	5ad3      	ldrh	r3, [r2, r3]
 8001184:	b29b      	uxth	r3, r3
 8001186:	0019      	movs	r1, r3
 8001188:	183b      	adds	r3, r7, r0
 800118a:	781a      	ldrb	r2, [r3, #0]
 800118c:	2318      	movs	r3, #24
 800118e:	18fb      	adds	r3, r7, r3
 8001190:	0052      	lsls	r2, r2, #1
 8001192:	5ad3      	ldrh	r3, [r2, r3]
 8001194:	3364      	adds	r3, #100	; 0x64
 8001196:	4299      	cmp	r1, r3
 8001198:	dd21      	ble.n	80011de <SYSTEM_Calibrate+0xee>
			{
				numSticks += 1;
 800119a:	213d      	movs	r1, #61	; 0x3d
 800119c:	187b      	adds	r3, r7, r1
 800119e:	187a      	adds	r2, r7, r1
 80011a0:	7812      	ldrb	r2, [r2, #0]
 80011a2:	3201      	adds	r2, #1
 80011a4:	701a      	strb	r2, [r3, #0]
				if (numSticks == 1)
 80011a6:	187b      	adds	r3, r7, r1
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d108      	bne.n	80011c0 <SYSTEM_Calibrate+0xd0>
				{
					configInt.primaryCh = i;
 80011ae:	2120      	movs	r1, #32
 80011b0:	187b      	adds	r3, r7, r1
 80011b2:	183a      	adds	r2, r7, r0
 80011b4:	7812      	ldrb	r2, [r2, #0]
 80011b6:	715a      	strb	r2, [r3, #5]
					configInt.primaryRev = CH_FWD;
 80011b8:	187b      	adds	r3, r7, r1
 80011ba:	2201      	movs	r2, #1
 80011bc:	719a      	strb	r2, [r3, #6]
 80011be:	e040      	b.n	8001242 <SYSTEM_Calibrate+0x152>
				}
				else if (numSticks == 2)
 80011c0:	233d      	movs	r3, #61	; 0x3d
 80011c2:	18fb      	adds	r3, r7, r3
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d13b      	bne.n	8001242 <SYSTEM_Calibrate+0x152>
				{
					configInt.secondaryCh = i;
 80011ca:	2120      	movs	r1, #32
 80011cc:	187b      	adds	r3, r7, r1
 80011ce:	223c      	movs	r2, #60	; 0x3c
 80011d0:	18ba      	adds	r2, r7, r2
 80011d2:	7812      	ldrb	r2, [r2, #0]
 80011d4:	71da      	strb	r2, [r3, #7]
					configInt.secondaryRev = CH_FWD;
 80011d6:	187b      	adds	r3, r7, r1
 80011d8:	2201      	movs	r2, #1
 80011da:	721a      	strb	r2, [r3, #8]
 80011dc:	e031      	b.n	8001242 <SYSTEM_Calibrate+0x152>
				}
			}
			else if (input[i] < (inputZero[i] - CALIBRATE_INPUT_THRESHOLD))
 80011de:	203c      	movs	r0, #60	; 0x3c
 80011e0:	183b      	adds	r3, r7, r0
 80011e2:	781a      	ldrb	r2, [r3, #0]
 80011e4:	4b9e      	ldr	r3, [pc, #632]	; (8001460 <SYSTEM_Calibrate+0x370>)
 80011e6:	0052      	lsls	r2, r2, #1
 80011e8:	5ad3      	ldrh	r3, [r2, r3]
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	0019      	movs	r1, r3
 80011ee:	183b      	adds	r3, r7, r0
 80011f0:	781a      	ldrb	r2, [r3, #0]
 80011f2:	2318      	movs	r3, #24
 80011f4:	18fb      	adds	r3, r7, r3
 80011f6:	0052      	lsls	r2, r2, #1
 80011f8:	5ad3      	ldrh	r3, [r2, r3]
 80011fa:	3b64      	subs	r3, #100	; 0x64
 80011fc:	4299      	cmp	r1, r3
 80011fe:	da20      	bge.n	8001242 <SYSTEM_Calibrate+0x152>
			{
				numSticks += 1;
 8001200:	213d      	movs	r1, #61	; 0x3d
 8001202:	187b      	adds	r3, r7, r1
 8001204:	187a      	adds	r2, r7, r1
 8001206:	7812      	ldrb	r2, [r2, #0]
 8001208:	3201      	adds	r2, #1
 800120a:	701a      	strb	r2, [r3, #0]
				if (numSticks == 1)
 800120c:	187b      	adds	r3, r7, r1
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d108      	bne.n	8001226 <SYSTEM_Calibrate+0x136>
				{
					configInt.primaryCh = i;
 8001214:	2120      	movs	r1, #32
 8001216:	187b      	adds	r3, r7, r1
 8001218:	183a      	adds	r2, r7, r0
 800121a:	7812      	ldrb	r2, [r2, #0]
 800121c:	715a      	strb	r2, [r3, #5]
					configInt.primaryRev = CH_RVS;
 800121e:	187b      	adds	r3, r7, r1
 8001220:	22ff      	movs	r2, #255	; 0xff
 8001222:	719a      	strb	r2, [r3, #6]
 8001224:	e00d      	b.n	8001242 <SYSTEM_Calibrate+0x152>
				}
				else if (numSticks == 2)
 8001226:	233d      	movs	r3, #61	; 0x3d
 8001228:	18fb      	adds	r3, r7, r3
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b02      	cmp	r3, #2
 800122e:	d108      	bne.n	8001242 <SYSTEM_Calibrate+0x152>
				{
					configInt.secondaryCh = i;
 8001230:	2120      	movs	r1, #32
 8001232:	187b      	adds	r3, r7, r1
 8001234:	223c      	movs	r2, #60	; 0x3c
 8001236:	18ba      	adds	r2, r7, r2
 8001238:	7812      	ldrb	r2, [r2, #0]
 800123a:	71da      	strb	r2, [r3, #7]
					configInt.secondaryRev = CH_RVS;
 800123c:	187b      	adds	r3, r7, r1
 800123e:	22ff      	movs	r2, #255	; 0xff
 8001240:	721a      	strb	r2, [r3, #8]
		for (uint8_t i = 0; i < NUM_TOTALINPUTS; i++)
 8001242:	213c      	movs	r1, #60	; 0x3c
 8001244:	187b      	adds	r3, r7, r1
 8001246:	781a      	ldrb	r2, [r3, #0]
 8001248:	187b      	adds	r3, r7, r1
 800124a:	3201      	adds	r2, #1
 800124c:	701a      	strb	r2, [r3, #0]
 800124e:	233c      	movs	r3, #60	; 0x3c
 8001250:	18fb      	adds	r3, r7, r3
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b03      	cmp	r3, #3
 8001256:	d98f      	bls.n	8001178 <SYSTEM_Calibrate+0x88>
				}
			}
		}
		if (numSticks == 1)
 8001258:	233d      	movs	r3, #61	; 0x3d
 800125a:	18fb      	adds	r3, r7, r3
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2b01      	cmp	r3, #1
 8001260:	d108      	bne.n	8001274 <SYSTEM_Calibrate+0x184>
		{
			configInt.mode = ARCADE;
 8001262:	2320      	movs	r3, #32
 8001264:	18fb      	adds	r3, r7, r3
 8001266:	2202      	movs	r2, #2
 8001268:	711a      	strb	r2, [r3, #4]
			calibrated = true;
 800126a:	233f      	movs	r3, #63	; 0x3f
 800126c:	18fb      	adds	r3, r7, r3
 800126e:	2201      	movs	r2, #1
 8001270:	701a      	strb	r2, [r3, #0]
 8001272:	e010      	b.n	8001296 <SYSTEM_Calibrate+0x1a6>
 8001274:	213f      	movs	r1, #63	; 0x3f
 8001276:	187b      	adds	r3, r7, r1
 8001278:	187a      	adds	r2, r7, r1
 800127a:	7812      	ldrb	r2, [r2, #0]
 800127c:	701a      	strb	r2, [r3, #0]
		}
		else if (numSticks == 2)
 800127e:	233d      	movs	r3, #61	; 0x3d
 8001280:	18fb      	adds	r3, r7, r3
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b02      	cmp	r3, #2
 8001286:	d106      	bne.n	8001296 <SYSTEM_Calibrate+0x1a6>
		{
			configInt.mode = TANK;
 8001288:	2320      	movs	r3, #32
 800128a:	18fb      	adds	r3, r7, r3
 800128c:	2201      	movs	r2, #1
 800128e:	711a      	strb	r2, [r3, #4]
			calibrated = true;
 8001290:	187b      	adds	r3, r7, r1
 8001292:	2201      	movs	r2, #1
 8001294:	701a      	strb	r2, [r3, #0]
	while (!calibrated)
 8001296:	243f      	movs	r4, #63	; 0x3f
 8001298:	193b      	adds	r3, r7, r4
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2201      	movs	r2, #1
 800129e:	4053      	eors	r3, r2
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d000      	beq.n	80012a8 <SYSTEM_Calibrate+0x1b8>
 80012a6:	e759      	b.n	800115c <SYSTEM_Calibrate+0x6c>
		}
	}

	// WAIT FOR INPUTS TO FALL BACK TO ZERO REFERENCE
	SYSTEM_WaitForResetInputs(inputZero);
 80012a8:	2318      	movs	r3, #24
 80012aa:	18fb      	adds	r3, r7, r3
 80012ac:	0018      	movs	r0, r3
 80012ae:	f000 fb21 	bl	80018f4 <SYSTEM_WaitForResetInputs>
	CORE_Delay(100);
 80012b2:	2064      	movs	r0, #100	; 0x64
 80012b4:	f000 feb0 	bl	8002018 <CORE_Delay>
	LED_RedOFF();
 80012b8:	f7ff f90a 	bl	80004d0 <LED_RedOFF>
	LED_GreenOFF();
 80012bc:	f7ff f8fc 	bl	80004b8 <LED_GreenOFF>

	// 	DELAY BETWEEN TESTS
	CORE_Delay(2000);
 80012c0:	23fa      	movs	r3, #250	; 0xfa
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	0018      	movs	r0, r3
 80012c6:	f000 fea7 	bl	8002018 <CORE_Delay>

	// TURN ON LEDS TO TELL OPERATOR CALIBRATION IS STARTING
	LED_GreenON();
 80012ca:	f7ff f8db 	bl	8000484 <LED_GreenON>
	LED_RedON();
 80012ce:	f7ff f8e5 	bl	800049c <LED_RedON>

	// CHECK FOR OPERATOR INPUT
	calibrated = false;
 80012d2:	193b      	adds	r3, r7, r4
 80012d4:	2200      	movs	r2, #0
 80012d6:	701a      	strb	r2, [r3, #0]
	SYSTEM_Config configInt2;
	while (!calibrated)
 80012d8:	e182      	b.n	80015e0 <SYSTEM_Calibrate+0x4f0>
	{
		CORE_Delay(CALIBRATE_RADIO_POLL_PERIOD);
 80012da:	23fa      	movs	r3, #250	; 0xfa
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	0018      	movs	r0, r3
 80012e0:	f000 fe9a 	bl	8002018 <CORE_Delay>

		uint8_t numSticks = 0;
 80012e4:	233b      	movs	r3, #59	; 0x3b
 80012e6:	18fb      	adds	r3, r7, r3
 80012e8:	2200      	movs	r2, #0
 80012ea:	701a      	strb	r2, [r3, #0]

		if (configInt.mode == ARCADE)
 80012ec:	2320      	movs	r3, #32
 80012ee:	18fb      	adds	r3, r7, r3
 80012f0:	791b      	ldrb	r3, [r3, #4]
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d000      	beq.n	80012f8 <SYSTEM_Calibrate+0x208>
 80012f6:	e071      	b.n	80013dc <SYSTEM_Calibrate+0x2ec>
		{
			for (uint8_t i = 0; i < NUM_TOTALINPUTS; i++)
 80012f8:	233a      	movs	r3, #58	; 0x3a
 80012fa:	18fb      	adds	r3, r7, r3
 80012fc:	2200      	movs	r2, #0
 80012fe:	701a      	strb	r2, [r3, #0]
 8001300:	e058      	b.n	80013b4 <SYSTEM_Calibrate+0x2c4>
			{
				if (input[i] > (inputZero[i] + CALIBRATE_INPUT_THRESHOLD))
 8001302:	203a      	movs	r0, #58	; 0x3a
 8001304:	183b      	adds	r3, r7, r0
 8001306:	781a      	ldrb	r2, [r3, #0]
 8001308:	4b55      	ldr	r3, [pc, #340]	; (8001460 <SYSTEM_Calibrate+0x370>)
 800130a:	0052      	lsls	r2, r2, #1
 800130c:	5ad3      	ldrh	r3, [r2, r3]
 800130e:	b29b      	uxth	r3, r3
 8001310:	0019      	movs	r1, r3
 8001312:	183b      	adds	r3, r7, r0
 8001314:	781a      	ldrb	r2, [r3, #0]
 8001316:	2318      	movs	r3, #24
 8001318:	18fb      	adds	r3, r7, r3
 800131a:	0052      	lsls	r2, r2, #1
 800131c:	5ad3      	ldrh	r3, [r2, r3]
 800131e:	3364      	adds	r3, #100	; 0x64
 8001320:	4299      	cmp	r1, r3
 8001322:	dd18      	ble.n	8001356 <SYSTEM_Calibrate+0x266>
				{
					numSticks += 1;
 8001324:	213b      	movs	r1, #59	; 0x3b
 8001326:	187b      	adds	r3, r7, r1
 8001328:	187a      	adds	r2, r7, r1
 800132a:	7812      	ldrb	r2, [r2, #0]
 800132c:	3201      	adds	r2, #1
 800132e:	701a      	strb	r2, [r3, #0]
					if ((numSticks == 1) && (configInt.primaryCh != i))
 8001330:	187b      	adds	r3, r7, r1
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d137      	bne.n	80013a8 <SYSTEM_Calibrate+0x2b8>
 8001338:	2120      	movs	r1, #32
 800133a:	187b      	adds	r3, r7, r1
 800133c:	795b      	ldrb	r3, [r3, #5]
 800133e:	183a      	adds	r2, r7, r0
 8001340:	7812      	ldrb	r2, [r2, #0]
 8001342:	429a      	cmp	r2, r3
 8001344:	d030      	beq.n	80013a8 <SYSTEM_Calibrate+0x2b8>
					{
						configInt.secondaryCh = i;
 8001346:	187b      	adds	r3, r7, r1
 8001348:	183a      	adds	r2, r7, r0
 800134a:	7812      	ldrb	r2, [r2, #0]
 800134c:	71da      	strb	r2, [r3, #7]
						configInt.secondaryRev = CH_FWD;
 800134e:	187b      	adds	r3, r7, r1
 8001350:	2201      	movs	r2, #1
 8001352:	721a      	strb	r2, [r3, #8]
 8001354:	e028      	b.n	80013a8 <SYSTEM_Calibrate+0x2b8>
					}
				}
				else if (input[i] < (inputZero[i] - CALIBRATE_INPUT_THRESHOLD))
 8001356:	203a      	movs	r0, #58	; 0x3a
 8001358:	183b      	adds	r3, r7, r0
 800135a:	781a      	ldrb	r2, [r3, #0]
 800135c:	4b40      	ldr	r3, [pc, #256]	; (8001460 <SYSTEM_Calibrate+0x370>)
 800135e:	0052      	lsls	r2, r2, #1
 8001360:	5ad3      	ldrh	r3, [r2, r3]
 8001362:	b29b      	uxth	r3, r3
 8001364:	0019      	movs	r1, r3
 8001366:	183b      	adds	r3, r7, r0
 8001368:	781a      	ldrb	r2, [r3, #0]
 800136a:	2318      	movs	r3, #24
 800136c:	18fb      	adds	r3, r7, r3
 800136e:	0052      	lsls	r2, r2, #1
 8001370:	5ad3      	ldrh	r3, [r2, r3]
 8001372:	3b64      	subs	r3, #100	; 0x64
 8001374:	4299      	cmp	r1, r3
 8001376:	da17      	bge.n	80013a8 <SYSTEM_Calibrate+0x2b8>
				{
					numSticks += 1;
 8001378:	213b      	movs	r1, #59	; 0x3b
 800137a:	187b      	adds	r3, r7, r1
 800137c:	187a      	adds	r2, r7, r1
 800137e:	7812      	ldrb	r2, [r2, #0]
 8001380:	3201      	adds	r2, #1
 8001382:	701a      	strb	r2, [r3, #0]
					if ((numSticks == 1) && (configInt.primaryCh != i))
 8001384:	187b      	adds	r3, r7, r1
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d10d      	bne.n	80013a8 <SYSTEM_Calibrate+0x2b8>
 800138c:	2120      	movs	r1, #32
 800138e:	187b      	adds	r3, r7, r1
 8001390:	795b      	ldrb	r3, [r3, #5]
 8001392:	183a      	adds	r2, r7, r0
 8001394:	7812      	ldrb	r2, [r2, #0]
 8001396:	429a      	cmp	r2, r3
 8001398:	d006      	beq.n	80013a8 <SYSTEM_Calibrate+0x2b8>
					{
						configInt.secondaryCh = i;
 800139a:	187b      	adds	r3, r7, r1
 800139c:	183a      	adds	r2, r7, r0
 800139e:	7812      	ldrb	r2, [r2, #0]
 80013a0:	71da      	strb	r2, [r3, #7]
						configInt.secondaryRev = CH_RVS;
 80013a2:	187b      	adds	r3, r7, r1
 80013a4:	22ff      	movs	r2, #255	; 0xff
 80013a6:	721a      	strb	r2, [r3, #8]
			for (uint8_t i = 0; i < NUM_TOTALINPUTS; i++)
 80013a8:	213a      	movs	r1, #58	; 0x3a
 80013aa:	187b      	adds	r3, r7, r1
 80013ac:	781a      	ldrb	r2, [r3, #0]
 80013ae:	187b      	adds	r3, r7, r1
 80013b0:	3201      	adds	r2, #1
 80013b2:	701a      	strb	r2, [r3, #0]
 80013b4:	233a      	movs	r3, #58	; 0x3a
 80013b6:	18fb      	adds	r3, r7, r3
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b03      	cmp	r3, #3
 80013bc:	d9a1      	bls.n	8001302 <SYSTEM_Calibrate+0x212>
 80013be:	213f      	movs	r1, #63	; 0x3f
 80013c0:	187b      	adds	r3, r7, r1
 80013c2:	187a      	adds	r2, r7, r1
 80013c4:	7812      	ldrb	r2, [r2, #0]
 80013c6:	701a      	strb	r2, [r3, #0]
					}
				}
			}
			if (numSticks == 1)
 80013c8:	233b      	movs	r3, #59	; 0x3b
 80013ca:	18fb      	adds	r3, r7, r3
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d000      	beq.n	80013d4 <SYSTEM_Calibrate+0x2e4>
 80013d2:	e105      	b.n	80015e0 <SYSTEM_Calibrate+0x4f0>
			{
				calibrated = true;
 80013d4:	187b      	adds	r3, r7, r1
 80013d6:	2201      	movs	r2, #1
 80013d8:	701a      	strb	r2, [r3, #0]
 80013da:	e101      	b.n	80015e0 <SYSTEM_Calibrate+0x4f0>
			}
		}
		else if (configInt.mode == TANK)
 80013dc:	2320      	movs	r3, #32
 80013de:	18fb      	adds	r3, r7, r3
 80013e0:	791b      	ldrb	r3, [r3, #4]
 80013e2:	213f      	movs	r1, #63	; 0x3f
 80013e4:	187a      	adds	r2, r7, r1
 80013e6:	1879      	adds	r1, r7, r1
 80013e8:	7809      	ldrb	r1, [r1, #0]
 80013ea:	7011      	strb	r1, [r2, #0]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d000      	beq.n	80013f2 <SYSTEM_Calibrate+0x302>
 80013f0:	e0f6      	b.n	80015e0 <SYSTEM_Calibrate+0x4f0>
		{
			for (uint8_t i = 0; i < NUM_TOTALINPUTS; i++)
 80013f2:	2339      	movs	r3, #57	; 0x39
 80013f4:	18fb      	adds	r3, r7, r3
 80013f6:	2200      	movs	r2, #0
 80013f8:	701a      	strb	r2, [r3, #0]
 80013fa:	e069      	b.n	80014d0 <SYSTEM_Calibrate+0x3e0>
			{
				if (input[i] > (inputZero[i] + CALIBRATE_INPUT_THRESHOLD))
 80013fc:	2039      	movs	r0, #57	; 0x39
 80013fe:	183b      	adds	r3, r7, r0
 8001400:	781a      	ldrb	r2, [r3, #0]
 8001402:	4b17      	ldr	r3, [pc, #92]	; (8001460 <SYSTEM_Calibrate+0x370>)
 8001404:	0052      	lsls	r2, r2, #1
 8001406:	5ad3      	ldrh	r3, [r2, r3]
 8001408:	b29b      	uxth	r3, r3
 800140a:	0019      	movs	r1, r3
 800140c:	183b      	adds	r3, r7, r0
 800140e:	781a      	ldrb	r2, [r3, #0]
 8001410:	2318      	movs	r3, #24
 8001412:	18fb      	adds	r3, r7, r3
 8001414:	0052      	lsls	r2, r2, #1
 8001416:	5ad3      	ldrh	r3, [r2, r3]
 8001418:	3364      	adds	r3, #100	; 0x64
 800141a:	4299      	cmp	r1, r3
 800141c:	dd22      	ble.n	8001464 <SYSTEM_Calibrate+0x374>
				{
					numSticks += 1;
 800141e:	213b      	movs	r1, #59	; 0x3b
 8001420:	187b      	adds	r3, r7, r1
 8001422:	187a      	adds	r2, r7, r1
 8001424:	7812      	ldrb	r2, [r2, #0]
 8001426:	3201      	adds	r2, #1
 8001428:	701a      	strb	r2, [r3, #0]
					if (numSticks == 1)
 800142a:	187b      	adds	r3, r7, r1
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d107      	bne.n	8001442 <SYSTEM_Calibrate+0x352>
					{
						configInt2.primaryCh = i;
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	183a      	adds	r2, r7, r0
 8001436:	7812      	ldrb	r2, [r2, #0]
 8001438:	715a      	strb	r2, [r3, #5]
						configInt2.primaryRev = CH_FWD;
 800143a:	1d3b      	adds	r3, r7, #4
 800143c:	2201      	movs	r2, #1
 800143e:	719a      	strb	r2, [r3, #6]
 8001440:	e040      	b.n	80014c4 <SYSTEM_Calibrate+0x3d4>
					}
					else if (numSticks == 2)
 8001442:	233b      	movs	r3, #59	; 0x3b
 8001444:	18fb      	adds	r3, r7, r3
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b02      	cmp	r3, #2
 800144a:	d13b      	bne.n	80014c4 <SYSTEM_Calibrate+0x3d4>
					{
						configInt2.secondaryCh = i;
 800144c:	1d3b      	adds	r3, r7, #4
 800144e:	2239      	movs	r2, #57	; 0x39
 8001450:	18ba      	adds	r2, r7, r2
 8001452:	7812      	ldrb	r2, [r2, #0]
 8001454:	71da      	strb	r2, [r3, #7]
						configInt2.secondaryRev = CH_FWD;
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	2201      	movs	r2, #1
 800145a:	721a      	strb	r2, [r3, #8]
 800145c:	e032      	b.n	80014c4 <SYSTEM_Calibrate+0x3d4>
 800145e:	46c0      	nop			; (mov r8, r8)
 8001460:	20000000 	.word	0x20000000
					}
				}
				else if (input[i] < (inputZero[i] - CALIBRATE_INPUT_THRESHOLD))
 8001464:	2039      	movs	r0, #57	; 0x39
 8001466:	183b      	adds	r3, r7, r0
 8001468:	781a      	ldrb	r2, [r3, #0]
 800146a:	4bda      	ldr	r3, [pc, #872]	; (80017d4 <SYSTEM_Calibrate+0x6e4>)
 800146c:	0052      	lsls	r2, r2, #1
 800146e:	5ad3      	ldrh	r3, [r2, r3]
 8001470:	b29b      	uxth	r3, r3
 8001472:	0019      	movs	r1, r3
 8001474:	183b      	adds	r3, r7, r0
 8001476:	781a      	ldrb	r2, [r3, #0]
 8001478:	2318      	movs	r3, #24
 800147a:	18fb      	adds	r3, r7, r3
 800147c:	0052      	lsls	r2, r2, #1
 800147e:	5ad3      	ldrh	r3, [r2, r3]
 8001480:	3b64      	subs	r3, #100	; 0x64
 8001482:	4299      	cmp	r1, r3
 8001484:	da1e      	bge.n	80014c4 <SYSTEM_Calibrate+0x3d4>
				{
					numSticks += 1;
 8001486:	213b      	movs	r1, #59	; 0x3b
 8001488:	187b      	adds	r3, r7, r1
 800148a:	187a      	adds	r2, r7, r1
 800148c:	7812      	ldrb	r2, [r2, #0]
 800148e:	3201      	adds	r2, #1
 8001490:	701a      	strb	r2, [r3, #0]
					if (numSticks == 1)
 8001492:	187b      	adds	r3, r7, r1
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d107      	bne.n	80014aa <SYSTEM_Calibrate+0x3ba>
					{
						configInt2.primaryCh = i;
 800149a:	1d3b      	adds	r3, r7, #4
 800149c:	183a      	adds	r2, r7, r0
 800149e:	7812      	ldrb	r2, [r2, #0]
 80014a0:	715a      	strb	r2, [r3, #5]
						configInt2.primaryRev = CH_RVS;
 80014a2:	1d3b      	adds	r3, r7, #4
 80014a4:	22ff      	movs	r2, #255	; 0xff
 80014a6:	719a      	strb	r2, [r3, #6]
 80014a8:	e00c      	b.n	80014c4 <SYSTEM_Calibrate+0x3d4>
					}
					else if (numSticks == 2)
 80014aa:	233b      	movs	r3, #59	; 0x3b
 80014ac:	18fb      	adds	r3, r7, r3
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d107      	bne.n	80014c4 <SYSTEM_Calibrate+0x3d4>
					{
						configInt2.secondaryCh = i;
 80014b4:	1d3b      	adds	r3, r7, #4
 80014b6:	2239      	movs	r2, #57	; 0x39
 80014b8:	18ba      	adds	r2, r7, r2
 80014ba:	7812      	ldrb	r2, [r2, #0]
 80014bc:	71da      	strb	r2, [r3, #7]
						configInt2.secondaryRev = CH_RVS;
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	22ff      	movs	r2, #255	; 0xff
 80014c2:	721a      	strb	r2, [r3, #8]
			for (uint8_t i = 0; i < NUM_TOTALINPUTS; i++)
 80014c4:	2139      	movs	r1, #57	; 0x39
 80014c6:	187b      	adds	r3, r7, r1
 80014c8:	781a      	ldrb	r2, [r3, #0]
 80014ca:	187b      	adds	r3, r7, r1
 80014cc:	3201      	adds	r2, #1
 80014ce:	701a      	strb	r2, [r3, #0]
 80014d0:	2339      	movs	r3, #57	; 0x39
 80014d2:	18fb      	adds	r3, r7, r3
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b03      	cmp	r3, #3
 80014d8:	d990      	bls.n	80013fc <SYSTEM_Calibrate+0x30c>
 80014da:	213f      	movs	r1, #63	; 0x3f
 80014dc:	187b      	adds	r3, r7, r1
 80014de:	187a      	adds	r2, r7, r1
 80014e0:	7812      	ldrb	r2, [r2, #0]
 80014e2:	701a      	strb	r2, [r3, #0]
					}
				}
			}
			if (numSticks == 2 &&
 80014e4:	233b      	movs	r3, #59	; 0x3b
 80014e6:	18fb      	adds	r3, r7, r3
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d000      	beq.n	80014f0 <SYSTEM_Calibrate+0x400>
 80014ee:	e077      	b.n	80015e0 <SYSTEM_Calibrate+0x4f0>
				((configInt.primaryCh == configInt2.primaryCh) || (configInt.primaryCh == configInt2.secondaryCh)) &&
 80014f0:	2020      	movs	r0, #32
 80014f2:	183b      	adds	r3, r7, r0
 80014f4:	795a      	ldrb	r2, [r3, #5]
 80014f6:	1d3b      	adds	r3, r7, #4
 80014f8:	795b      	ldrb	r3, [r3, #5]
			if (numSticks == 2 &&
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d00a      	beq.n	8001514 <SYSTEM_Calibrate+0x424>
				((configInt.primaryCh == configInt2.primaryCh) || (configInt.primaryCh == configInt2.secondaryCh)) &&
 80014fe:	183b      	adds	r3, r7, r0
 8001500:	795a      	ldrb	r2, [r3, #5]
 8001502:	1d3b      	adds	r3, r7, #4
 8001504:	79db      	ldrb	r3, [r3, #7]
 8001506:	0008      	movs	r0, r1
 8001508:	1879      	adds	r1, r7, r1
 800150a:	1838      	adds	r0, r7, r0
 800150c:	7800      	ldrb	r0, [r0, #0]
 800150e:	7008      	strb	r0, [r1, #0]
 8001510:	429a      	cmp	r2, r3
 8001512:	d165      	bne.n	80015e0 <SYSTEM_Calibrate+0x4f0>
				((configInt.secondaryCh == configInt2.secondaryCh) || (configInt.secondaryCh == configInt2.primaryCh)) &&
 8001514:	2120      	movs	r1, #32
 8001516:	187b      	adds	r3, r7, r1
 8001518:	79da      	ldrb	r2, [r3, #7]
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	79db      	ldrb	r3, [r3, #7]
				((configInt.primaryCh == configInt2.primaryCh) || (configInt.primaryCh == configInt2.secondaryCh)) &&
 800151e:	429a      	cmp	r2, r3
 8001520:	d00a      	beq.n	8001538 <SYSTEM_Calibrate+0x448>
				((configInt.secondaryCh == configInt2.secondaryCh) || (configInt.secondaryCh == configInt2.primaryCh)) &&
 8001522:	187b      	adds	r3, r7, r1
 8001524:	79da      	ldrb	r2, [r3, #7]
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	795b      	ldrb	r3, [r3, #5]
 800152a:	203f      	movs	r0, #63	; 0x3f
 800152c:	1839      	adds	r1, r7, r0
 800152e:	1838      	adds	r0, r7, r0
 8001530:	7800      	ldrb	r0, [r0, #0]
 8001532:	7008      	strb	r0, [r1, #0]
 8001534:	429a      	cmp	r2, r3
 8001536:	d153      	bne.n	80015e0 <SYSTEM_Calibrate+0x4f0>
				((configInt.primaryRev == configInt2.primaryRev) || (configInt.secondaryRev == configInt2.secondaryRev)) &&
 8001538:	2120      	movs	r1, #32
 800153a:	187b      	adds	r3, r7, r1
 800153c:	2206      	movs	r2, #6
 800153e:	569a      	ldrsb	r2, [r3, r2]
 8001540:	1d3b      	adds	r3, r7, #4
 8001542:	799b      	ldrb	r3, [r3, #6]
 8001544:	b25b      	sxtb	r3, r3
				((configInt.secondaryCh == configInt2.secondaryCh) || (configInt.secondaryCh == configInt2.primaryCh)) &&
 8001546:	429a      	cmp	r2, r3
 8001548:	d00c      	beq.n	8001564 <SYSTEM_Calibrate+0x474>
				((configInt.primaryRev == configInt2.primaryRev) || (configInt.secondaryRev == configInt2.secondaryRev)) &&
 800154a:	187b      	adds	r3, r7, r1
 800154c:	2208      	movs	r2, #8
 800154e:	569a      	ldrsb	r2, [r3, r2]
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	7a1b      	ldrb	r3, [r3, #8]
 8001554:	b25b      	sxtb	r3, r3
 8001556:	203f      	movs	r0, #63	; 0x3f
 8001558:	1839      	adds	r1, r7, r0
 800155a:	1838      	adds	r0, r7, r0
 800155c:	7800      	ldrb	r0, [r0, #0]
 800155e:	7008      	strb	r0, [r1, #0]
 8001560:	429a      	cmp	r2, r3
 8001562:	d13d      	bne.n	80015e0 <SYSTEM_Calibrate+0x4f0>
				((configInt.primaryRev != configInt2.primaryRev) || (configInt.secondaryRev != configInt2.secondaryRev)))
 8001564:	2120      	movs	r1, #32
 8001566:	187b      	adds	r3, r7, r1
 8001568:	2206      	movs	r2, #6
 800156a:	569a      	ldrsb	r2, [r3, r2]
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	799b      	ldrb	r3, [r3, #6]
 8001570:	b25b      	sxtb	r3, r3
				((configInt.primaryRev == configInt2.primaryRev) || (configInt.secondaryRev == configInt2.secondaryRev)) &&
 8001572:	429a      	cmp	r2, r3
 8001574:	d10c      	bne.n	8001590 <SYSTEM_Calibrate+0x4a0>
				((configInt.primaryRev != configInt2.primaryRev) || (configInt.secondaryRev != configInt2.secondaryRev)))
 8001576:	187b      	adds	r3, r7, r1
 8001578:	2208      	movs	r2, #8
 800157a:	569a      	ldrsb	r2, [r3, r2]
 800157c:	1d3b      	adds	r3, r7, #4
 800157e:	7a1b      	ldrb	r3, [r3, #8]
 8001580:	b25b      	sxtb	r3, r3
 8001582:	203f      	movs	r0, #63	; 0x3f
 8001584:	1839      	adds	r1, r7, r0
 8001586:	1838      	adds	r0, r7, r0
 8001588:	7800      	ldrb	r0, [r0, #0]
 800158a:	7008      	strb	r0, [r1, #0]
 800158c:	429a      	cmp	r2, r3
 800158e:	d027      	beq.n	80015e0 <SYSTEM_Calibrate+0x4f0>
			{
				calibrated = true;
 8001590:	233f      	movs	r3, #63	; 0x3f
 8001592:	18fb      	adds	r3, r7, r3
 8001594:	2201      	movs	r2, #1
 8001596:	701a      	strb	r2, [r3, #0]
				if (configInt.secondaryRev != configInt2.secondaryRev)
 8001598:	2120      	movs	r1, #32
 800159a:	187b      	adds	r3, r7, r1
 800159c:	2208      	movs	r2, #8
 800159e:	569a      	ldrsb	r2, [r3, r2]
 80015a0:	1d3b      	adds	r3, r7, #4
 80015a2:	7a1b      	ldrb	r3, [r3, #8]
 80015a4:	b25b      	sxtb	r3, r3
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d01a      	beq.n	80015e0 <SYSTEM_Calibrate+0x4f0>
				{
					configInt2.primaryCh = configInt.secondaryCh;
 80015aa:	187b      	adds	r3, r7, r1
 80015ac:	79da      	ldrb	r2, [r3, #7]
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	715a      	strb	r2, [r3, #5]
					configInt2.primaryRev = configInt.secondaryRev;
 80015b2:	187b      	adds	r3, r7, r1
 80015b4:	2208      	movs	r2, #8
 80015b6:	569a      	ldrsb	r2, [r3, r2]
 80015b8:	1d3b      	adds	r3, r7, #4
 80015ba:	719a      	strb	r2, [r3, #6]
					configInt.secondaryCh = configInt.primaryCh;
 80015bc:	187b      	adds	r3, r7, r1
 80015be:	795a      	ldrb	r2, [r3, #5]
 80015c0:	187b      	adds	r3, r7, r1
 80015c2:	71da      	strb	r2, [r3, #7]
					configInt.secondaryRev = configInt.primaryRev;
 80015c4:	187b      	adds	r3, r7, r1
 80015c6:	2206      	movs	r2, #6
 80015c8:	569a      	ldrsb	r2, [r3, r2]
 80015ca:	187b      	adds	r3, r7, r1
 80015cc:	721a      	strb	r2, [r3, #8]
					configInt.primaryCh = configInt2.primaryCh;
 80015ce:	1d3b      	adds	r3, r7, #4
 80015d0:	795a      	ldrb	r2, [r3, #5]
 80015d2:	187b      	adds	r3, r7, r1
 80015d4:	715a      	strb	r2, [r3, #5]
					configInt.primaryRev = configInt2.primaryRev;
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	2206      	movs	r2, #6
 80015da:	569a      	ldrsb	r2, [r3, r2]
 80015dc:	187b      	adds	r3, r7, r1
 80015de:	719a      	strb	r2, [r3, #6]
	while (!calibrated)
 80015e0:	243f      	movs	r4, #63	; 0x3f
 80015e2:	193b      	adds	r3, r7, r4
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2201      	movs	r2, #1
 80015e8:	4053      	eors	r3, r2
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d000      	beq.n	80015f2 <SYSTEM_Calibrate+0x502>
 80015f0:	e673      	b.n	80012da <SYSTEM_Calibrate+0x1ea>
			}
		}
	}

	// WAIT FOR INPUTS TO FALL BACK TO ZERO REFERENCE
	SYSTEM_WaitForResetInputs(inputZero);
 80015f2:	2318      	movs	r3, #24
 80015f4:	18fb      	adds	r3, r7, r3
 80015f6:	0018      	movs	r0, r3
 80015f8:	f000 f97c 	bl	80018f4 <SYSTEM_WaitForResetInputs>
	CORE_Delay(100);
 80015fc:	2064      	movs	r0, #100	; 0x64
 80015fe:	f000 fd0b 	bl	8002018 <CORE_Delay>
	LED_RedOFF();
 8001602:	f7fe ff65 	bl	80004d0 <LED_RedOFF>
	LED_GreenOFF();
 8001606:	f7fe ff57 	bl	80004b8 <LED_GreenOFF>

	// 	DELAY BETWEEN TESTS
	CORE_Delay(2000);
 800160a:	23fa      	movs	r3, #250	; 0xfa
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	0018      	movs	r0, r3
 8001610:	f000 fd02 	bl	8002018 <CORE_Delay>

	// TURN ON LEDS TO TELL OPERATOR CALIBRATION IS STARTING
	LED_GreenON();
 8001614:	f7fe ff36 	bl	8000484 <LED_GreenON>
	LED_RedON();
 8001618:	f7fe ff40 	bl	800049c <LED_RedON>

	// CHECK FOR OPERATOR INPUT
	calibrated = false;
 800161c:	193b      	adds	r3, r7, r4
 800161e:	2200      	movs	r2, #0
 8001620:	701a      	strb	r2, [r3, #0]
	while (!calibrated)
 8001622:	e082      	b.n	800172a <SYSTEM_Calibrate+0x63a>
	{
		CORE_Delay(CALIBRATE_RADIO_POLL_PERIOD);
 8001624:	23fa      	movs	r3, #250	; 0xfa
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	0018      	movs	r0, r3
 800162a:	f000 fcf5 	bl	8002018 <CORE_Delay>

		uint8_t numSticks = 0;
 800162e:	2338      	movs	r3, #56	; 0x38
 8001630:	18fb      	adds	r3, r7, r3
 8001632:	2200      	movs	r2, #0
 8001634:	701a      	strb	r2, [r3, #0]

		for (uint8_t i = 0; i < NUM_TOTALINPUTS; i++)
 8001636:	2337      	movs	r3, #55	; 0x37
 8001638:	18fb      	adds	r3, r7, r3
 800163a:	2200      	movs	r2, #0
 800163c:	701a      	strb	r2, [r3, #0]
 800163e:	e04c      	b.n	80016da <SYSTEM_Calibrate+0x5ea>
		{
			if (input[i] > (inputZero[i] + CALIBRATE_INPUT_THRESHOLD))
 8001640:	2037      	movs	r0, #55	; 0x37
 8001642:	183b      	adds	r3, r7, r0
 8001644:	781a      	ldrb	r2, [r3, #0]
 8001646:	4b63      	ldr	r3, [pc, #396]	; (80017d4 <SYSTEM_Calibrate+0x6e4>)
 8001648:	0052      	lsls	r2, r2, #1
 800164a:	5ad3      	ldrh	r3, [r2, r3]
 800164c:	b29b      	uxth	r3, r3
 800164e:	0019      	movs	r1, r3
 8001650:	183b      	adds	r3, r7, r0
 8001652:	781a      	ldrb	r2, [r3, #0]
 8001654:	2318      	movs	r3, #24
 8001656:	18fb      	adds	r3, r7, r3
 8001658:	0052      	lsls	r2, r2, #1
 800165a:	5ad3      	ldrh	r3, [r2, r3]
 800165c:	3364      	adds	r3, #100	; 0x64
 800165e:	4299      	cmp	r1, r3
 8001660:	dd12      	ble.n	8001688 <SYSTEM_Calibrate+0x598>
			{
				numSticks += 1;
 8001662:	2138      	movs	r1, #56	; 0x38
 8001664:	187b      	adds	r3, r7, r1
 8001666:	187a      	adds	r2, r7, r1
 8001668:	7812      	ldrb	r2, [r2, #0]
 800166a:	3201      	adds	r2, #1
 800166c:	701a      	strb	r2, [r3, #0]
				if (numSticks == 1)
 800166e:	187b      	adds	r3, r7, r1
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d12b      	bne.n	80016ce <SYSTEM_Calibrate+0x5de>
				{
					configInt.servoChA = i;
 8001676:	2120      	movs	r1, #32
 8001678:	187b      	adds	r3, r7, r1
 800167a:	183a      	adds	r2, r7, r0
 800167c:	7812      	ldrb	r2, [r2, #0]
 800167e:	725a      	strb	r2, [r3, #9]
					configInt.servoRevA = CH_FWD;
 8001680:	187b      	adds	r3, r7, r1
 8001682:	2201      	movs	r2, #1
 8001684:	729a      	strb	r2, [r3, #10]
 8001686:	e022      	b.n	80016ce <SYSTEM_Calibrate+0x5de>
				}
			}
			else if (input[i] < (inputZero[i] - CALIBRATE_INPUT_THRESHOLD))
 8001688:	2037      	movs	r0, #55	; 0x37
 800168a:	183b      	adds	r3, r7, r0
 800168c:	781a      	ldrb	r2, [r3, #0]
 800168e:	4b51      	ldr	r3, [pc, #324]	; (80017d4 <SYSTEM_Calibrate+0x6e4>)
 8001690:	0052      	lsls	r2, r2, #1
 8001692:	5ad3      	ldrh	r3, [r2, r3]
 8001694:	b29b      	uxth	r3, r3
 8001696:	0019      	movs	r1, r3
 8001698:	183b      	adds	r3, r7, r0
 800169a:	781a      	ldrb	r2, [r3, #0]
 800169c:	2318      	movs	r3, #24
 800169e:	18fb      	adds	r3, r7, r3
 80016a0:	0052      	lsls	r2, r2, #1
 80016a2:	5ad3      	ldrh	r3, [r2, r3]
 80016a4:	3b64      	subs	r3, #100	; 0x64
 80016a6:	4299      	cmp	r1, r3
 80016a8:	da11      	bge.n	80016ce <SYSTEM_Calibrate+0x5de>
			{
				numSticks += 1;
 80016aa:	2138      	movs	r1, #56	; 0x38
 80016ac:	187b      	adds	r3, r7, r1
 80016ae:	187a      	adds	r2, r7, r1
 80016b0:	7812      	ldrb	r2, [r2, #0]
 80016b2:	3201      	adds	r2, #1
 80016b4:	701a      	strb	r2, [r3, #0]
				if (numSticks == 1)
 80016b6:	187b      	adds	r3, r7, r1
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d107      	bne.n	80016ce <SYSTEM_Calibrate+0x5de>
				{
					configInt.servoChA = i;
 80016be:	2120      	movs	r1, #32
 80016c0:	187b      	adds	r3, r7, r1
 80016c2:	183a      	adds	r2, r7, r0
 80016c4:	7812      	ldrb	r2, [r2, #0]
 80016c6:	725a      	strb	r2, [r3, #9]
					configInt.servoRevA = CH_RVS;
 80016c8:	187b      	adds	r3, r7, r1
 80016ca:	22ff      	movs	r2, #255	; 0xff
 80016cc:	729a      	strb	r2, [r3, #10]
		for (uint8_t i = 0; i < NUM_TOTALINPUTS; i++)
 80016ce:	2137      	movs	r1, #55	; 0x37
 80016d0:	187b      	adds	r3, r7, r1
 80016d2:	781a      	ldrb	r2, [r3, #0]
 80016d4:	187b      	adds	r3, r7, r1
 80016d6:	3201      	adds	r2, #1
 80016d8:	701a      	strb	r2, [r3, #0]
 80016da:	2337      	movs	r3, #55	; 0x37
 80016dc:	18fb      	adds	r3, r7, r3
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b03      	cmp	r3, #3
 80016e2:	d9ad      	bls.n	8001640 <SYSTEM_Calibrate+0x550>
 80016e4:	213f      	movs	r1, #63	; 0x3f
 80016e6:	187b      	adds	r3, r7, r1
 80016e8:	187a      	adds	r2, r7, r1
 80016ea:	7812      	ldrb	r2, [r2, #0]
 80016ec:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		if (numSticks == 1 && (configInt.servoChA != configInt.primaryCh) && (configInt.servoChA != configInt.secondaryCh))
 80016ee:	2338      	movs	r3, #56	; 0x38
 80016f0:	18fb      	adds	r3, r7, r3
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d118      	bne.n	800172a <SYSTEM_Calibrate+0x63a>
 80016f8:	2520      	movs	r5, #32
 80016fa:	197b      	adds	r3, r7, r5
 80016fc:	7a5a      	ldrb	r2, [r3, #9]
 80016fe:	197b      	adds	r3, r7, r5
 8001700:	795b      	ldrb	r3, [r3, #5]
 8001702:	000c      	movs	r4, r1
 8001704:	1939      	adds	r1, r7, r4
 8001706:	1938      	adds	r0, r7, r4
 8001708:	7800      	ldrb	r0, [r0, #0]
 800170a:	7008      	strb	r0, [r1, #0]
 800170c:	429a      	cmp	r2, r3
 800170e:	d00c      	beq.n	800172a <SYSTEM_Calibrate+0x63a>
 8001710:	197b      	adds	r3, r7, r5
 8001712:	7a5a      	ldrb	r2, [r3, #9]
 8001714:	197b      	adds	r3, r7, r5
 8001716:	79db      	ldrb	r3, [r3, #7]
 8001718:	1939      	adds	r1, r7, r4
 800171a:	1938      	adds	r0, r7, r4
 800171c:	7800      	ldrb	r0, [r0, #0]
 800171e:	7008      	strb	r0, [r1, #0]
 8001720:	429a      	cmp	r2, r3
 8001722:	d002      	beq.n	800172a <SYSTEM_Calibrate+0x63a>
		{
			calibrated = true;
 8001724:	193b      	adds	r3, r7, r4
 8001726:	2201      	movs	r2, #1
 8001728:	701a      	strb	r2, [r3, #0]
	while (!calibrated)
 800172a:	243f      	movs	r4, #63	; 0x3f
 800172c:	193b      	adds	r3, r7, r4
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2201      	movs	r2, #1
 8001732:	4053      	eors	r3, r2
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d000      	beq.n	800173c <SYSTEM_Calibrate+0x64c>
 800173a:	e773      	b.n	8001624 <SYSTEM_Calibrate+0x534>
		}
	}

	// WAIT FOR INPUTS TO FALL BACK TO ZERO REFERENCE
	SYSTEM_WaitForResetInputs(inputZero);
 800173c:	2318      	movs	r3, #24
 800173e:	18fb      	adds	r3, r7, r3
 8001740:	0018      	movs	r0, r3
 8001742:	f000 f8d7 	bl	80018f4 <SYSTEM_WaitForResetInputs>
	CORE_Delay(100);
 8001746:	2064      	movs	r0, #100	; 0x64
 8001748:	f000 fc66 	bl	8002018 <CORE_Delay>
	LED_RedOFF();
 800174c:	f7fe fec0 	bl	80004d0 <LED_RedOFF>
	LED_GreenOFF();
 8001750:	f7fe feb2 	bl	80004b8 <LED_GreenOFF>

	// 	DELAY BETWEEN TESTS
	CORE_Delay(2000);
 8001754:	23fa      	movs	r3, #250	; 0xfa
 8001756:	00db      	lsls	r3, r3, #3
 8001758:	0018      	movs	r0, r3
 800175a:	f000 fc5d 	bl	8002018 <CORE_Delay>

	// TURN ON LEDS TO TELL OPERATOR CALIBRATION IS STARTING
	LED_GreenON();
 800175e:	f7fe fe91 	bl	8000484 <LED_GreenON>
	LED_RedON();
 8001762:	f7fe fe9b 	bl	800049c <LED_RedON>

	// CHECK FOR OPERATOR INPUT
	calibrated = false;
 8001766:	193b      	adds	r3, r7, r4
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]
	while (!calibrated)
 800176c:	e085      	b.n	800187a <SYSTEM_Calibrate+0x78a>
	{
		CORE_Delay(CALIBRATE_RADIO_POLL_PERIOD);
 800176e:	23fa      	movs	r3, #250	; 0xfa
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	0018      	movs	r0, r3
 8001774:	f000 fc50 	bl	8002018 <CORE_Delay>

		uint8_t numSticks = 0;
 8001778:	2336      	movs	r3, #54	; 0x36
 800177a:	18fb      	adds	r3, r7, r3
 800177c:	2200      	movs	r2, #0
 800177e:	701a      	strb	r2, [r3, #0]

		for (uint8_t i = 0; i < NUM_TOTALINPUTS; i++)
 8001780:	2335      	movs	r3, #53	; 0x35
 8001782:	18fb      	adds	r3, r7, r3
 8001784:	2200      	movs	r2, #0
 8001786:	701a      	strb	r2, [r3, #0]
 8001788:	e04f      	b.n	800182a <SYSTEM_Calibrate+0x73a>
		{
			if (input[i] > (inputZero[i] + CALIBRATE_INPUT_THRESHOLD))
 800178a:	2035      	movs	r0, #53	; 0x35
 800178c:	183b      	adds	r3, r7, r0
 800178e:	781a      	ldrb	r2, [r3, #0]
 8001790:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <SYSTEM_Calibrate+0x6e4>)
 8001792:	0052      	lsls	r2, r2, #1
 8001794:	5ad3      	ldrh	r3, [r2, r3]
 8001796:	b29b      	uxth	r3, r3
 8001798:	0019      	movs	r1, r3
 800179a:	183b      	adds	r3, r7, r0
 800179c:	781a      	ldrb	r2, [r3, #0]
 800179e:	2318      	movs	r3, #24
 80017a0:	18fb      	adds	r3, r7, r3
 80017a2:	0052      	lsls	r2, r2, #1
 80017a4:	5ad3      	ldrh	r3, [r2, r3]
 80017a6:	3364      	adds	r3, #100	; 0x64
 80017a8:	4299      	cmp	r1, r3
 80017aa:	dd15      	ble.n	80017d8 <SYSTEM_Calibrate+0x6e8>
			{
				numSticks += 1;
 80017ac:	2136      	movs	r1, #54	; 0x36
 80017ae:	187b      	adds	r3, r7, r1
 80017b0:	187a      	adds	r2, r7, r1
 80017b2:	7812      	ldrb	r2, [r2, #0]
 80017b4:	3201      	adds	r2, #1
 80017b6:	701a      	strb	r2, [r3, #0]
				if (numSticks == 1)
 80017b8:	187b      	adds	r3, r7, r1
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d12e      	bne.n	800181e <SYSTEM_Calibrate+0x72e>
				{
					configInt.servoChB = i;
 80017c0:	2120      	movs	r1, #32
 80017c2:	187b      	adds	r3, r7, r1
 80017c4:	183a      	adds	r2, r7, r0
 80017c6:	7812      	ldrb	r2, [r2, #0]
 80017c8:	72da      	strb	r2, [r3, #11]
					configInt.servoRevB = CH_FWD;
 80017ca:	187b      	adds	r3, r7, r1
 80017cc:	2201      	movs	r2, #1
 80017ce:	731a      	strb	r2, [r3, #12]
 80017d0:	e025      	b.n	800181e <SYSTEM_Calibrate+0x72e>
 80017d2:	46c0      	nop			; (mov r8, r8)
 80017d4:	20000000 	.word	0x20000000
				}
			}
			else if (input[i] < (inputZero[i] - CALIBRATE_INPUT_THRESHOLD))
 80017d8:	2035      	movs	r0, #53	; 0x35
 80017da:	183b      	adds	r3, r7, r0
 80017dc:	781a      	ldrb	r2, [r3, #0]
 80017de:	4b43      	ldr	r3, [pc, #268]	; (80018ec <SYSTEM_Calibrate+0x7fc>)
 80017e0:	0052      	lsls	r2, r2, #1
 80017e2:	5ad3      	ldrh	r3, [r2, r3]
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	0019      	movs	r1, r3
 80017e8:	183b      	adds	r3, r7, r0
 80017ea:	781a      	ldrb	r2, [r3, #0]
 80017ec:	2318      	movs	r3, #24
 80017ee:	18fb      	adds	r3, r7, r3
 80017f0:	0052      	lsls	r2, r2, #1
 80017f2:	5ad3      	ldrh	r3, [r2, r3]
 80017f4:	3b64      	subs	r3, #100	; 0x64
 80017f6:	4299      	cmp	r1, r3
 80017f8:	da11      	bge.n	800181e <SYSTEM_Calibrate+0x72e>
			{
				numSticks += 1;
 80017fa:	2136      	movs	r1, #54	; 0x36
 80017fc:	187b      	adds	r3, r7, r1
 80017fe:	187a      	adds	r2, r7, r1
 8001800:	7812      	ldrb	r2, [r2, #0]
 8001802:	3201      	adds	r2, #1
 8001804:	701a      	strb	r2, [r3, #0]
				if (numSticks == 1)
 8001806:	187b      	adds	r3, r7, r1
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d107      	bne.n	800181e <SYSTEM_Calibrate+0x72e>
				{
					configInt.servoChB = i;
 800180e:	2120      	movs	r1, #32
 8001810:	187b      	adds	r3, r7, r1
 8001812:	183a      	adds	r2, r7, r0
 8001814:	7812      	ldrb	r2, [r2, #0]
 8001816:	72da      	strb	r2, [r3, #11]
					configInt.servoRevB = CH_RVS;
 8001818:	187b      	adds	r3, r7, r1
 800181a:	22ff      	movs	r2, #255	; 0xff
 800181c:	731a      	strb	r2, [r3, #12]
		for (uint8_t i = 0; i < NUM_TOTALINPUTS; i++)
 800181e:	2135      	movs	r1, #53	; 0x35
 8001820:	187b      	adds	r3, r7, r1
 8001822:	781a      	ldrb	r2, [r3, #0]
 8001824:	187b      	adds	r3, r7, r1
 8001826:	3201      	adds	r2, #1
 8001828:	701a      	strb	r2, [r3, #0]
 800182a:	2335      	movs	r3, #53	; 0x35
 800182c:	18fb      	adds	r3, r7, r3
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b03      	cmp	r3, #3
 8001832:	d9aa      	bls.n	800178a <SYSTEM_Calibrate+0x69a>
 8001834:	213f      	movs	r1, #63	; 0x3f
 8001836:	187b      	adds	r3, r7, r1
 8001838:	187a      	adds	r2, r7, r1
 800183a:	7812      	ldrb	r2, [r2, #0]
 800183c:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		if (numSticks == 1 && (configInt.servoChB != configInt.primaryCh) && (configInt.servoChB != configInt.secondaryCh))
 800183e:	2336      	movs	r3, #54	; 0x36
 8001840:	18fb      	adds	r3, r7, r3
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d118      	bne.n	800187a <SYSTEM_Calibrate+0x78a>
 8001848:	2520      	movs	r5, #32
 800184a:	197b      	adds	r3, r7, r5
 800184c:	7ada      	ldrb	r2, [r3, #11]
 800184e:	197b      	adds	r3, r7, r5
 8001850:	795b      	ldrb	r3, [r3, #5]
 8001852:	000c      	movs	r4, r1
 8001854:	1939      	adds	r1, r7, r4
 8001856:	1938      	adds	r0, r7, r4
 8001858:	7800      	ldrb	r0, [r0, #0]
 800185a:	7008      	strb	r0, [r1, #0]
 800185c:	429a      	cmp	r2, r3
 800185e:	d00c      	beq.n	800187a <SYSTEM_Calibrate+0x78a>
 8001860:	197b      	adds	r3, r7, r5
 8001862:	7ada      	ldrb	r2, [r3, #11]
 8001864:	197b      	adds	r3, r7, r5
 8001866:	79db      	ldrb	r3, [r3, #7]
 8001868:	1939      	adds	r1, r7, r4
 800186a:	1938      	adds	r0, r7, r4
 800186c:	7800      	ldrb	r0, [r0, #0]
 800186e:	7008      	strb	r0, [r1, #0]
 8001870:	429a      	cmp	r2, r3
 8001872:	d002      	beq.n	800187a <SYSTEM_Calibrate+0x78a>
		{
			calibrated = true;
 8001874:	193b      	adds	r3, r7, r4
 8001876:	2201      	movs	r2, #1
 8001878:	701a      	strb	r2, [r3, #0]
	while (!calibrated)
 800187a:	233f      	movs	r3, #63	; 0x3f
 800187c:	18fb      	adds	r3, r7, r3
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2201      	movs	r2, #1
 8001882:	4053      	eors	r3, r2
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	d000      	beq.n	800188c <SYSTEM_Calibrate+0x79c>
 800188a:	e770      	b.n	800176e <SYSTEM_Calibrate+0x67e>
		}
	}

	// WAIT FOR INPUTS TO FALL BACK TO ZERO REFERENCE
	SYSTEM_WaitForResetInputs(inputZero);
 800188c:	2318      	movs	r3, #24
 800188e:	18fb      	adds	r3, r7, r3
 8001890:	0018      	movs	r0, r3
 8001892:	f000 f82f 	bl	80018f4 <SYSTEM_WaitForResetInputs>
	CORE_Delay(100);
 8001896:	2064      	movs	r0, #100	; 0x64
 8001898:	f000 fbbe 	bl	8002018 <CORE_Delay>
	LED_RedOFF();
 800189c:	f7fe fe18 	bl	80004d0 <LED_RedOFF>
	LED_GreenOFF();
 80018a0:	f7fe fe0a 	bl	80004b8 <LED_GreenOFF>

	// 	DELAY BETWEEN TESTS
	CORE_Delay(1000);
 80018a4:	23fa      	movs	r3, #250	; 0xfa
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	0018      	movs	r0, r3
 80018aa:	f000 fbb5 	bl	8002018 <CORE_Delay>

	// WRITE NEW CONFIG TO EEPROM
	config = configInt;
 80018ae:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <SYSTEM_Calibrate+0x800>)
 80018b0:	2220      	movs	r2, #32
 80018b2:	18ba      	adds	r2, r7, r2
 80018b4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80018b6:	c313      	stmia	r3!, {r0, r1, r4}
 80018b8:	ca03      	ldmia	r2!, {r0, r1}
 80018ba:	c303      	stmia	r3!, {r0, r1}
	EEPROM_Write(EEPROM_OFFSET, &config, sizeof(config));
 80018bc:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <SYSTEM_Calibrate+0x800>)
 80018be:	2214      	movs	r2, #20
 80018c0:	0019      	movs	r1, r3
 80018c2:	2000      	movs	r0, #0
 80018c4:	f000 fc44 	bl	8002150 <EEPROM_Write>

	// PULSE LED TO LET USER KNOW SUCCESSFUL
	LED_nPulse (5);
 80018c8:	2005      	movs	r0, #5
 80018ca:	f7fe fe38 	bl	800053e <LED_nPulse>

	// 	DELAY AT END OF TEST
	CORE_Delay(1000);
 80018ce:	23fa      	movs	r3, #250	; 0xfa
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	0018      	movs	r0, r3
 80018d4:	f000 fba0 	bl	8002018 <CORE_Delay>

	MOTOR_Update(MOTOR_OFF, MOTOR_OFF);
 80018d8:	2100      	movs	r1, #0
 80018da:	2000      	movs	r0, #0
 80018dc:	f7fe fede 	bl	800069c <MOTOR_Update>
	SERVO_Init();
 80018e0:	f7ff f9a0 	bl	8000c24 <SERVO_Init>
}
 80018e4:	46c0      	nop			; (mov r8, r8)
 80018e6:	46bd      	mov	sp, r7
 80018e8:	b010      	add	sp, #64	; 0x40
 80018ea:	bdb0      	pop	{r4, r5, r7, pc}
 80018ec:	20000000 	.word	0x20000000
 80018f0:	20000224 	.word	0x20000224

080018f4 <SYSTEM_WaitForResetInputs>:

void SYSTEM_WaitForResetInputs(uint16_t* inputZero)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
	bool centered = false;
 80018fc:	230f      	movs	r3, #15
 80018fe:	18fb      	adds	r3, r7, r3
 8001900:	2200      	movs	r2, #0
 8001902:	701a      	strb	r2, [r3, #0]
	while (!centered)
 8001904:	e04c      	b.n	80019a0 <SYSTEM_WaitForResetInputs+0xac>
	{
		CORE_Delay(CALIBRATE_RADIO_POLL_PERIOD);
 8001906:	23fa      	movs	r3, #250	; 0xfa
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	0018      	movs	r0, r3
 800190c:	f000 fb84 	bl	8002018 <CORE_Delay>
		uint8_t numSticks = 0;
 8001910:	230e      	movs	r3, #14
 8001912:	18fb      	adds	r3, r7, r3
 8001914:	2200      	movs	r2, #0
 8001916:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < NUM_TOTALINPUTS; i++)
 8001918:	230d      	movs	r3, #13
 800191a:	18fb      	adds	r3, r7, r3
 800191c:	2200      	movs	r2, #0
 800191e:	701a      	strb	r2, [r3, #0]
 8001920:	e02c      	b.n	800197c <SYSTEM_WaitForResetInputs+0x88>
		{
			if (input[i] > (inputZero[i] + CALIBRATE_INPUT_THRESHOLD - CALIBRATE_INPUT_HYST) || input[i] < (inputZero[i] - CALIBRATE_INPUT_THRESHOLD + CALIBRATE_INPUT_HYST))
 8001922:	200d      	movs	r0, #13
 8001924:	183b      	adds	r3, r7, r0
 8001926:	781a      	ldrb	r2, [r3, #0]
 8001928:	4b24      	ldr	r3, [pc, #144]	; (80019bc <SYSTEM_WaitForResetInputs+0xc8>)
 800192a:	0052      	lsls	r2, r2, #1
 800192c:	5ad3      	ldrh	r3, [r2, r3]
 800192e:	b29b      	uxth	r3, r3
 8001930:	0019      	movs	r1, r3
 8001932:	183b      	adds	r3, r7, r0
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	18d3      	adds	r3, r2, r3
 800193c:	881b      	ldrh	r3, [r3, #0]
 800193e:	3350      	adds	r3, #80	; 0x50
 8001940:	4299      	cmp	r1, r3
 8001942:	dc0f      	bgt.n	8001964 <SYSTEM_WaitForResetInputs+0x70>
 8001944:	183b      	adds	r3, r7, r0
 8001946:	781a      	ldrb	r2, [r3, #0]
 8001948:	4b1c      	ldr	r3, [pc, #112]	; (80019bc <SYSTEM_WaitForResetInputs+0xc8>)
 800194a:	0052      	lsls	r2, r2, #1
 800194c:	5ad3      	ldrh	r3, [r2, r3]
 800194e:	b29b      	uxth	r3, r3
 8001950:	0019      	movs	r1, r3
 8001952:	183b      	adds	r3, r7, r0
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	18d3      	adds	r3, r2, r3
 800195c:	881b      	ldrh	r3, [r3, #0]
 800195e:	3b50      	subs	r3, #80	; 0x50
 8001960:	4299      	cmp	r1, r3
 8001962:	da05      	bge.n	8001970 <SYSTEM_WaitForResetInputs+0x7c>
			{
				numSticks += 1;
 8001964:	220e      	movs	r2, #14
 8001966:	18bb      	adds	r3, r7, r2
 8001968:	18ba      	adds	r2, r7, r2
 800196a:	7812      	ldrb	r2, [r2, #0]
 800196c:	3201      	adds	r2, #1
 800196e:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < NUM_TOTALINPUTS; i++)
 8001970:	210d      	movs	r1, #13
 8001972:	187b      	adds	r3, r7, r1
 8001974:	781a      	ldrb	r2, [r3, #0]
 8001976:	187b      	adds	r3, r7, r1
 8001978:	3201      	adds	r2, #1
 800197a:	701a      	strb	r2, [r3, #0]
 800197c:	230d      	movs	r3, #13
 800197e:	18fb      	adds	r3, r7, r3
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b03      	cmp	r3, #3
 8001984:	d9cd      	bls.n	8001922 <SYSTEM_WaitForResetInputs+0x2e>
 8001986:	210f      	movs	r1, #15
 8001988:	187b      	adds	r3, r7, r1
 800198a:	187a      	adds	r2, r7, r1
 800198c:	7812      	ldrb	r2, [r2, #0]
 800198e:	701a      	strb	r2, [r3, #0]
			}
		}
		if (numSticks == 0)
 8001990:	230e      	movs	r3, #14
 8001992:	18fb      	adds	r3, r7, r3
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d102      	bne.n	80019a0 <SYSTEM_WaitForResetInputs+0xac>
		{
			centered = true;
 800199a:	187b      	adds	r3, r7, r1
 800199c:	2201      	movs	r2, #1
 800199e:	701a      	strb	r2, [r3, #0]
	while (!centered)
 80019a0:	230f      	movs	r3, #15
 80019a2:	18fb      	adds	r3, r7, r3
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2201      	movs	r2, #1
 80019a8:	4053      	eors	r3, r2
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1aa      	bne.n	8001906 <SYSTEM_WaitForResetInputs+0x12>
		}
	}
}
 80019b0:	46c0      	nop			; (mov r8, r8)
 80019b2:	46c0      	nop			; (mov r8, r8)
 80019b4:	46bd      	mov	sp, r7
 80019b6:	b004      	add	sp, #16
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	46c0      	nop			; (mov r8, r8)
 80019bc:	20000000 	.word	0x20000000

080019c0 <main>:
/*
 * PUBLIC FUNCTIONS
 */

int main (void)
{
 80019c0:	b5b0      	push	{r4, r5, r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
	CORE_Init();
 80019c6:	f000 faeb 	bl	8001fa0 <CORE_Init>
	RADIO_Init();
 80019ca:	f7fe ff81 	bl	80008d0 <RADIO_Init>
	MOTOR_Init();
 80019ce:	f7fe fe11 	bl	80005f4 <MOTOR_Init>
	SERVO_Init();
 80019d2:	f7ff f927 	bl	8000c24 <SERVO_Init>
	SYSTEM_Init();
 80019d6:	f7ff fa53 	bl	8000e80 <SYSTEM_Init>

	uint16_t R1 = 0;
 80019da:	2316      	movs	r3, #22
 80019dc:	18fb      	adds	r3, r7, r3
 80019de:	2200      	movs	r2, #0
 80019e0:	801a      	strh	r2, [r3, #0]
	uint16_t R2 = 0;
 80019e2:	2314      	movs	r3, #20
 80019e4:	18fb      	adds	r3, r7, r3
 80019e6:	2200      	movs	r2, #0
 80019e8:	801a      	strh	r2, [r3, #0]
	uint16_t R3 = 0;
 80019ea:	2312      	movs	r3, #18
 80019ec:	18fb      	adds	r3, r7, r3
 80019ee:	2200      	movs	r2, #0
 80019f0:	801a      	strh	r2, [r3, #0]
	uint16_t R4 = 0;
 80019f2:	2310      	movs	r3, #16
 80019f4:	18fb      	adds	r3, r7, r3
 80019f6:	2200      	movs	r2, #0
 80019f8:	801a      	strh	r2, [r3, #0]
	int32_t M1 = 0;
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]
	int32_t M2 = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	60bb      	str	r3, [r7, #8]
	uint16_t S1 = 0;
 8001a02:	1dbb      	adds	r3, r7, #6
 8001a04:	2200      	movs	r2, #0
 8001a06:	801a      	strh	r2, [r3, #0]
	uint16_t S2 = 0;
 8001a08:	1d3b      	adds	r3, r7, #4
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	801a      	strh	r2, [r3, #0]

	CORE_Delay(INPUT_TIMEOUT); // Have time to check for a valid radio before proceeding
 8001a0e:	2032      	movs	r0, #50	; 0x32
 8001a10:	f000 fb02 	bl	8002018 <CORE_Delay>

	while (1)
	{
		SYSTEM_Update();
 8001a14:	f7ff fa92 	bl	8000f3c <SYSTEM_Update>

		if (status.faultTemp || status.faultInput)
 8001a18:	4b6d      	ldr	r3, [pc, #436]	; (8001bd0 <main+0x210>)
 8001a1a:	789b      	ldrb	r3, [r3, #2]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d103      	bne.n	8001a28 <main+0x68>
 8001a20:	4b6b      	ldr	r3, [pc, #428]	; (8001bd0 <main+0x210>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d016      	beq.n	8001a56 <main+0x96>
		{
			MOTOR_Update(MOTOR_OFF, MOTOR_OFF);
 8001a28:	2100      	movs	r1, #0
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	f7fe fe36 	bl	800069c <MOTOR_Update>
			if (!(status_p.faultTemp || status_p.faultInput))
 8001a30:	4b68      	ldr	r3, [pc, #416]	; (8001bd4 <main+0x214>)
 8001a32:	789b      	ldrb	r3, [r3, #2]
 8001a34:	2201      	movs	r2, #1
 8001a36:	4053      	eors	r3, r2
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d100      	bne.n	8001a40 <main+0x80>
 8001a3e:	e0c2      	b.n	8001bc6 <main+0x206>
 8001a40:	4b64      	ldr	r3, [pc, #400]	; (8001bd4 <main+0x214>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2201      	movs	r2, #1
 8001a46:	4053      	eors	r3, r2
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d100      	bne.n	8001a50 <main+0x90>
 8001a4e:	e0ba      	b.n	8001bc6 <main+0x206>
			{
				SERVO_Deinit();
 8001a50:	f7ff f948 	bl	8000ce4 <SERVO_Deinit>
			if (!(status_p.faultTemp || status_p.faultInput))
 8001a54:	e0b7      	b.n	8001bc6 <main+0x206>
			}
		}
		else
		{
			// REINITIALISE THE SERVO/WEPON OUTPUT
			if (status_p.faultTemp || status_p.faultInput)
 8001a56:	4b5f      	ldr	r3, [pc, #380]	; (8001bd4 <main+0x214>)
 8001a58:	789b      	ldrb	r3, [r3, #2]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d103      	bne.n	8001a66 <main+0xa6>
 8001a5e:	4b5d      	ldr	r3, [pc, #372]	; (8001bd4 <main+0x214>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <main+0xaa>
			{
				SERVO_Init();
 8001a66:	f7ff f8dd 	bl	8000c24 <SERVO_Init>
			}

			// UPDATE THE MOTORS
			R1 = input[config.primaryCh];
 8001a6a:	4b5b      	ldr	r3, [pc, #364]	; (8001bd8 <main+0x218>)
 8001a6c:	795b      	ldrb	r3, [r3, #5]
 8001a6e:	0019      	movs	r1, r3
 8001a70:	2516      	movs	r5, #22
 8001a72:	197b      	adds	r3, r7, r5
 8001a74:	4a59      	ldr	r2, [pc, #356]	; (8001bdc <main+0x21c>)
 8001a76:	0049      	lsls	r1, r1, #1
 8001a78:	5a8a      	ldrh	r2, [r1, r2]
 8001a7a:	801a      	strh	r2, [r3, #0]
			R1 = SYSTEM_RadioTruncate(R1);
 8001a7c:	197c      	adds	r4, r7, r5
 8001a7e:	197b      	adds	r3, r7, r5
 8001a80:	881b      	ldrh	r3, [r3, #0]
 8001a82:	0018      	movs	r0, r3
 8001a84:	f7ff fb12 	bl	80010ac <SYSTEM_RadioTruncate>
 8001a88:	0003      	movs	r3, r0
 8001a8a:	8023      	strh	r3, [r4, #0]
			if (config.primaryRev == CH_RVS) {
 8001a8c:	4b52      	ldr	r3, [pc, #328]	; (8001bd8 <main+0x218>)
 8001a8e:	799b      	ldrb	r3, [r3, #6]
 8001a90:	b25b      	sxtb	r3, r3
 8001a92:	3301      	adds	r3, #1
 8001a94:	d107      	bne.n	8001aa6 <main+0xe6>
				R1 = SYSTEM_ReverseRadio(R1);
 8001a96:	197c      	adds	r4, r7, r5
 8001a98:	197b      	adds	r3, r7, r5
 8001a9a:	881b      	ldrh	r3, [r3, #0]
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	f7ff faf3 	bl	8001088 <SYSTEM_ReverseRadio>
 8001aa2:	0003      	movs	r3, r0
 8001aa4:	8023      	strh	r3, [r4, #0]
			}
			R2 = input[config.secondaryCh];
 8001aa6:	4b4c      	ldr	r3, [pc, #304]	; (8001bd8 <main+0x218>)
 8001aa8:	79db      	ldrb	r3, [r3, #7]
 8001aaa:	0019      	movs	r1, r3
 8001aac:	2514      	movs	r5, #20
 8001aae:	197b      	adds	r3, r7, r5
 8001ab0:	4a4a      	ldr	r2, [pc, #296]	; (8001bdc <main+0x21c>)
 8001ab2:	0049      	lsls	r1, r1, #1
 8001ab4:	5a8a      	ldrh	r2, [r1, r2]
 8001ab6:	801a      	strh	r2, [r3, #0]
			R2 = SYSTEM_RadioTruncate(R2);
 8001ab8:	197c      	adds	r4, r7, r5
 8001aba:	197b      	adds	r3, r7, r5
 8001abc:	881b      	ldrh	r3, [r3, #0]
 8001abe:	0018      	movs	r0, r3
 8001ac0:	f7ff faf4 	bl	80010ac <SYSTEM_RadioTruncate>
 8001ac4:	0003      	movs	r3, r0
 8001ac6:	8023      	strh	r3, [r4, #0]
			if (config.secondaryRev == CH_RVS) {
 8001ac8:	4b43      	ldr	r3, [pc, #268]	; (8001bd8 <main+0x218>)
 8001aca:	7a1b      	ldrb	r3, [r3, #8]
 8001acc:	b25b      	sxtb	r3, r3
 8001ace:	3301      	adds	r3, #1
 8001ad0:	d107      	bne.n	8001ae2 <main+0x122>
				R2 = SYSTEM_ReverseRadio(R2);
 8001ad2:	197c      	adds	r4, r7, r5
 8001ad4:	197b      	adds	r3, r7, r5
 8001ad6:	881b      	ldrh	r3, [r3, #0]
 8001ad8:	0018      	movs	r0, r3
 8001ada:	f7ff fad5 	bl	8001088 <SYSTEM_ReverseRadio>
 8001ade:	0003      	movs	r3, r0
 8001ae0:	8023      	strh	r3, [r4, #0]
			}
			if (config.mode == ARCADE) {
 8001ae2:	4b3d      	ldr	r3, [pc, #244]	; (8001bd8 <main+0x218>)
 8001ae4:	791b      	ldrb	r3, [r3, #4]
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d112      	bne.n	8001b10 <main+0x150>
				M1 = (R1 - (RADIO_CENTER - R2));
 8001aea:	2016      	movs	r0, #22
 8001aec:	183b      	adds	r3, r7, r0
 8001aee:	881a      	ldrh	r2, [r3, #0]
 8001af0:	2414      	movs	r4, #20
 8001af2:	193b      	adds	r3, r7, r4
 8001af4:	881b      	ldrh	r3, [r3, #0]
 8001af6:	493a      	ldr	r1, [pc, #232]	; (8001be0 <main+0x220>)
 8001af8:	1acb      	subs	r3, r1, r3
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	60fb      	str	r3, [r7, #12]
				M2 = (R1 + (RADIO_CENTER - R2));
 8001afe:	183b      	adds	r3, r7, r0
 8001b00:	881a      	ldrh	r2, [r3, #0]
 8001b02:	193b      	adds	r3, r7, r4
 8001b04:	881b      	ldrh	r3, [r3, #0]
 8001b06:	4936      	ldr	r1, [pc, #216]	; (8001be0 <main+0x220>)
 8001b08:	1acb      	subs	r3, r1, r3
 8001b0a:	18d3      	adds	r3, r2, r3
 8001b0c:	60bb      	str	r3, [r7, #8]
 8001b0e:	e007      	b.n	8001b20 <main+0x160>
			} else {
				M1 = R1;
 8001b10:	2316      	movs	r3, #22
 8001b12:	18fb      	adds	r3, r7, r3
 8001b14:	881b      	ldrh	r3, [r3, #0]
 8001b16:	60fb      	str	r3, [r7, #12]
				M2 = R2;
 8001b18:	2314      	movs	r3, #20
 8001b1a:	18fb      	adds	r3, r7, r3
 8001b1c:	881b      	ldrh	r3, [r3, #0]
 8001b1e:	60bb      	str	r3, [r7, #8]
			}
			M1 = SYSTEM_RadioToMotor(M1);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	0018      	movs	r0, r3
 8001b26:	f7ff fa97 	bl	8001058 <SYSTEM_RadioToMotor>
 8001b2a:	0003      	movs	r3, r0
 8001b2c:	60fb      	str	r3, [r7, #12]
			M2 = SYSTEM_RadioToMotor(M2);
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	0018      	movs	r0, r3
 8001b34:	f7ff fa90 	bl	8001058 <SYSTEM_RadioToMotor>
 8001b38:	0003      	movs	r3, r0
 8001b3a:	60bb      	str	r3, [r7, #8]
			MOTOR_Update(M1, M2);
 8001b3c:	68ba      	ldr	r2, [r7, #8]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	0011      	movs	r1, r2
 8001b42:	0018      	movs	r0, r3
 8001b44:	f7fe fdaa 	bl	800069c <MOTOR_Update>

			// UPDATE THE SERVO/WEPON OUTPUTS
			R3 = input[config.servoChA];
 8001b48:	4b23      	ldr	r3, [pc, #140]	; (8001bd8 <main+0x218>)
 8001b4a:	7a5b      	ldrb	r3, [r3, #9]
 8001b4c:	0019      	movs	r1, r3
 8001b4e:	2012      	movs	r0, #18
 8001b50:	183b      	adds	r3, r7, r0
 8001b52:	4a22      	ldr	r2, [pc, #136]	; (8001bdc <main+0x21c>)
 8001b54:	0049      	lsls	r1, r1, #1
 8001b56:	5a8a      	ldrh	r2, [r1, r2]
 8001b58:	801a      	strh	r2, [r3, #0]
			if (config.servoRevA == CH_RVS) {
 8001b5a:	4b1f      	ldr	r3, [pc, #124]	; (8001bd8 <main+0x218>)
 8001b5c:	7a9b      	ldrb	r3, [r3, #10]
 8001b5e:	b25b      	sxtb	r3, r3
 8001b60:	3301      	adds	r3, #1
 8001b62:	d107      	bne.n	8001b74 <main+0x1b4>
				R3 = SYSTEM_ReverseRadio(R3);
 8001b64:	183c      	adds	r4, r7, r0
 8001b66:	183b      	adds	r3, r7, r0
 8001b68:	881b      	ldrh	r3, [r3, #0]
 8001b6a:	0018      	movs	r0, r3
 8001b6c:	f7ff fa8c 	bl	8001088 <SYSTEM_ReverseRadio>
 8001b70:	0003      	movs	r3, r0
 8001b72:	8023      	strh	r3, [r4, #0]
			}
			S1 = R3;
 8001b74:	1dbb      	adds	r3, r7, #6
 8001b76:	2212      	movs	r2, #18
 8001b78:	18ba      	adds	r2, r7, r2
 8001b7a:	8812      	ldrh	r2, [r2, #0]
 8001b7c:	801a      	strh	r2, [r3, #0]
			R4 = input[config.servoChB];
 8001b7e:	4b16      	ldr	r3, [pc, #88]	; (8001bd8 <main+0x218>)
 8001b80:	7adb      	ldrb	r3, [r3, #11]
 8001b82:	0019      	movs	r1, r3
 8001b84:	2010      	movs	r0, #16
 8001b86:	183b      	adds	r3, r7, r0
 8001b88:	4a14      	ldr	r2, [pc, #80]	; (8001bdc <main+0x21c>)
 8001b8a:	0049      	lsls	r1, r1, #1
 8001b8c:	5a8a      	ldrh	r2, [r1, r2]
 8001b8e:	801a      	strh	r2, [r3, #0]
			if (config.servoRevB == CH_RVS) {
 8001b90:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <main+0x218>)
 8001b92:	7b1b      	ldrb	r3, [r3, #12]
 8001b94:	b25b      	sxtb	r3, r3
 8001b96:	3301      	adds	r3, #1
 8001b98:	d107      	bne.n	8001baa <main+0x1ea>
				R4 = SYSTEM_ReverseRadio(R4);
 8001b9a:	183c      	adds	r4, r7, r0
 8001b9c:	183b      	adds	r3, r7, r0
 8001b9e:	881b      	ldrh	r3, [r3, #0]
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	f7ff fa71 	bl	8001088 <SYSTEM_ReverseRadio>
 8001ba6:	0003      	movs	r3, r0
 8001ba8:	8023      	strh	r3, [r4, #0]
			}
			S2 = R4;
 8001baa:	1d3b      	adds	r3, r7, #4
 8001bac:	2210      	movs	r2, #16
 8001bae:	18ba      	adds	r2, r7, r2
 8001bb0:	8812      	ldrh	r2, [r2, #0]
 8001bb2:	801a      	strh	r2, [r3, #0]
			SERVO_Update(S1, S2);
 8001bb4:	1d3b      	adds	r3, r7, #4
 8001bb6:	881a      	ldrh	r2, [r3, #0]
 8001bb8:	1dbb      	adds	r3, r7, #6
 8001bba:	881b      	ldrh	r3, [r3, #0]
 8001bbc:	0011      	movs	r1, r2
 8001bbe:	0018      	movs	r0, r3
 8001bc0:	f7ff f8be 	bl	8000d40 <SERVO_Update>
 8001bc4:	e000      	b.n	8001bc8 <main+0x208>
			if (!(status_p.faultTemp || status_p.faultInput))
 8001bc6:	46c0      	nop			; (mov r8, r8)
		}

		CORE_Idle();
 8001bc8:	f000 fa20 	bl	800200c <CORE_Idle>
		SYSTEM_Update();
 8001bcc:	e722      	b.n	8001a14 <main+0x54>
 8001bce:	46c0      	nop			; (mov r8, r8)
 8001bd0:	20000220 	.word	0x20000220
 8001bd4:	20000218 	.word	0x20000218
 8001bd8:	20000224 	.word	0x20000224
 8001bdc:	20000000 	.word	0x20000000
 8001be0:	000005dc 	.word	0x000005dc

08001be4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001be8:	46c0      	nop			; (mov r8, r8)
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
	...

08001bf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001bf0:	480d      	ldr	r0, [pc, #52]	; (8001c28 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001bf2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bf4:	480d      	ldr	r0, [pc, #52]	; (8001c2c <LoopForever+0x6>)
  ldr r1, =_edata
 8001bf6:	490e      	ldr	r1, [pc, #56]	; (8001c30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bf8:	4a0e      	ldr	r2, [pc, #56]	; (8001c34 <LoopForever+0xe>)
  movs r3, #0
 8001bfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bfc:	e002      	b.n	8001c04 <LoopCopyDataInit>

08001bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c02:	3304      	adds	r3, #4

08001c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c08:	d3f9      	bcc.n	8001bfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c0a:	4a0b      	ldr	r2, [pc, #44]	; (8001c38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c0c:	4c0b      	ldr	r4, [pc, #44]	; (8001c3c <LoopForever+0x16>)
  movs r3, #0
 8001c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c10:	e001      	b.n	8001c16 <LoopFillZerobss>

08001c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c14:	3204      	adds	r2, #4

08001c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c18:	d3fb      	bcc.n	8001c12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001c1a:	f7ff ffe3 	bl	8001be4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c1e:	f001 f8e1 	bl	8002de4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c22:	f7ff fecd 	bl	80019c0 <main>

08001c26 <LoopForever>:

LoopForever:
    b LoopForever
 8001c26:	e7fe      	b.n	8001c26 <LoopForever>
   ldr   r0, =_estack
 8001c28:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001c2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c30:	200001a8 	.word	0x200001a8
  ldr r2, =_sidata
 8001c34:	08002e60 	.word	0x08002e60
  ldr r2, =_sbss
 8001c38:	200001a8 	.word	0x200001a8
  ldr r4, =_ebss
 8001c3c:	20000238 	.word	0x20000238

08001c40 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c40:	e7fe      	b.n	8001c40 <ADC1_COMP_IRQHandler>
	...

08001c44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	0002      	movs	r2, r0
 8001c4c:	1dfb      	adds	r3, r7, #7
 8001c4e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c50:	1dfb      	adds	r3, r7, #7
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2b7f      	cmp	r3, #127	; 0x7f
 8001c56:	d809      	bhi.n	8001c6c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c58:	1dfb      	adds	r3, r7, #7
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	001a      	movs	r2, r3
 8001c5e:	231f      	movs	r3, #31
 8001c60:	401a      	ands	r2, r3
 8001c62:	4b04      	ldr	r3, [pc, #16]	; (8001c74 <__NVIC_EnableIRQ+0x30>)
 8001c64:	2101      	movs	r1, #1
 8001c66:	4091      	lsls	r1, r2
 8001c68:	000a      	movs	r2, r1
 8001c6a:	601a      	str	r2, [r3, #0]
  }
}
 8001c6c:	46c0      	nop			; (mov r8, r8)
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	b002      	add	sp, #8
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	e000e100 	.word	0xe000e100

08001c78 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	0002      	movs	r2, r0
 8001c80:	1dfb      	adds	r3, r7, #7
 8001c82:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c84:	1dfb      	adds	r3, r7, #7
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b7f      	cmp	r3, #127	; 0x7f
 8001c8a:	d810      	bhi.n	8001cae <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c8c:	1dfb      	adds	r3, r7, #7
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	001a      	movs	r2, r3
 8001c92:	231f      	movs	r3, #31
 8001c94:	4013      	ands	r3, r2
 8001c96:	4908      	ldr	r1, [pc, #32]	; (8001cb8 <__NVIC_DisableIRQ+0x40>)
 8001c98:	2201      	movs	r2, #1
 8001c9a:	409a      	lsls	r2, r3
 8001c9c:	0013      	movs	r3, r2
 8001c9e:	2280      	movs	r2, #128	; 0x80
 8001ca0:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001ca2:	f3bf 8f4f 	dsb	sy
}
 8001ca6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8001ca8:	f3bf 8f6f 	isb	sy
}
 8001cac:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8001cae:	46c0      	nop			; (mov r8, r8)
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	b002      	add	sp, #8
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	46c0      	nop			; (mov r8, r8)
 8001cb8:	e000e100 	.word	0xe000e100

08001cbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cbc:	b590      	push	{r4, r7, lr}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	0002      	movs	r2, r0
 8001cc4:	6039      	str	r1, [r7, #0]
 8001cc6:	1dfb      	adds	r3, r7, #7
 8001cc8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001cca:	1dfb      	adds	r3, r7, #7
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	2b7f      	cmp	r3, #127	; 0x7f
 8001cd0:	d828      	bhi.n	8001d24 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cd2:	4a2f      	ldr	r2, [pc, #188]	; (8001d90 <__NVIC_SetPriority+0xd4>)
 8001cd4:	1dfb      	adds	r3, r7, #7
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	b25b      	sxtb	r3, r3
 8001cda:	089b      	lsrs	r3, r3, #2
 8001cdc:	33c0      	adds	r3, #192	; 0xc0
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	589b      	ldr	r3, [r3, r2]
 8001ce2:	1dfa      	adds	r2, r7, #7
 8001ce4:	7812      	ldrb	r2, [r2, #0]
 8001ce6:	0011      	movs	r1, r2
 8001ce8:	2203      	movs	r2, #3
 8001cea:	400a      	ands	r2, r1
 8001cec:	00d2      	lsls	r2, r2, #3
 8001cee:	21ff      	movs	r1, #255	; 0xff
 8001cf0:	4091      	lsls	r1, r2
 8001cf2:	000a      	movs	r2, r1
 8001cf4:	43d2      	mvns	r2, r2
 8001cf6:	401a      	ands	r2, r3
 8001cf8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	019b      	lsls	r3, r3, #6
 8001cfe:	22ff      	movs	r2, #255	; 0xff
 8001d00:	401a      	ands	r2, r3
 8001d02:	1dfb      	adds	r3, r7, #7
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	0018      	movs	r0, r3
 8001d08:	2303      	movs	r3, #3
 8001d0a:	4003      	ands	r3, r0
 8001d0c:	00db      	lsls	r3, r3, #3
 8001d0e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d10:	481f      	ldr	r0, [pc, #124]	; (8001d90 <__NVIC_SetPriority+0xd4>)
 8001d12:	1dfb      	adds	r3, r7, #7
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	b25b      	sxtb	r3, r3
 8001d18:	089b      	lsrs	r3, r3, #2
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	33c0      	adds	r3, #192	; 0xc0
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001d22:	e031      	b.n	8001d88 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d24:	4a1b      	ldr	r2, [pc, #108]	; (8001d94 <__NVIC_SetPriority+0xd8>)
 8001d26:	1dfb      	adds	r3, r7, #7
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	0019      	movs	r1, r3
 8001d2c:	230f      	movs	r3, #15
 8001d2e:	400b      	ands	r3, r1
 8001d30:	3b08      	subs	r3, #8
 8001d32:	089b      	lsrs	r3, r3, #2
 8001d34:	3306      	adds	r3, #6
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	18d3      	adds	r3, r2, r3
 8001d3a:	3304      	adds	r3, #4
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	1dfa      	adds	r2, r7, #7
 8001d40:	7812      	ldrb	r2, [r2, #0]
 8001d42:	0011      	movs	r1, r2
 8001d44:	2203      	movs	r2, #3
 8001d46:	400a      	ands	r2, r1
 8001d48:	00d2      	lsls	r2, r2, #3
 8001d4a:	21ff      	movs	r1, #255	; 0xff
 8001d4c:	4091      	lsls	r1, r2
 8001d4e:	000a      	movs	r2, r1
 8001d50:	43d2      	mvns	r2, r2
 8001d52:	401a      	ands	r2, r3
 8001d54:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	019b      	lsls	r3, r3, #6
 8001d5a:	22ff      	movs	r2, #255	; 0xff
 8001d5c:	401a      	ands	r2, r3
 8001d5e:	1dfb      	adds	r3, r7, #7
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	0018      	movs	r0, r3
 8001d64:	2303      	movs	r3, #3
 8001d66:	4003      	ands	r3, r0
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d6c:	4809      	ldr	r0, [pc, #36]	; (8001d94 <__NVIC_SetPriority+0xd8>)
 8001d6e:	1dfb      	adds	r3, r7, #7
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	001c      	movs	r4, r3
 8001d74:	230f      	movs	r3, #15
 8001d76:	4023      	ands	r3, r4
 8001d78:	3b08      	subs	r3, #8
 8001d7a:	089b      	lsrs	r3, r3, #2
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	3306      	adds	r3, #6
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	18c3      	adds	r3, r0, r3
 8001d84:	3304      	adds	r3, #4
 8001d86:	601a      	str	r2, [r3, #0]
}
 8001d88:	46c0      	nop			; (mov r8, r8)
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	b003      	add	sp, #12
 8001d8e:	bd90      	pop	{r4, r7, pc}
 8001d90:	e000e100 	.word	0xe000e100
 8001d94:	e000ed00 	.word	0xe000ed00

08001d98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	1e5a      	subs	r2, r3, #1
 8001da4:	2380      	movs	r3, #128	; 0x80
 8001da6:	045b      	lsls	r3, r3, #17
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d301      	bcc.n	8001db0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dac:	2301      	movs	r3, #1
 8001dae:	e010      	b.n	8001dd2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001db0:	4b0a      	ldr	r3, [pc, #40]	; (8001ddc <SysTick_Config+0x44>)
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	3a01      	subs	r2, #1
 8001db6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001db8:	2301      	movs	r3, #1
 8001dba:	425b      	negs	r3, r3
 8001dbc:	2103      	movs	r1, #3
 8001dbe:	0018      	movs	r0, r3
 8001dc0:	f7ff ff7c 	bl	8001cbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc4:	4b05      	ldr	r3, [pc, #20]	; (8001ddc <SysTick_Config+0x44>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dca:	4b04      	ldr	r3, [pc, #16]	; (8001ddc <SysTick_Config+0x44>)
 8001dcc:	2207      	movs	r2, #7
 8001dce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	b002      	add	sp, #8
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	46c0      	nop			; (mov r8, r8)
 8001ddc:	e000e010 	.word	0xe000e010

08001de0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60b9      	str	r1, [r7, #8]
 8001de8:	607a      	str	r2, [r7, #4]
 8001dea:	210f      	movs	r1, #15
 8001dec:	187b      	adds	r3, r7, r1
 8001dee:	1c02      	adds	r2, r0, #0
 8001df0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001df2:	68ba      	ldr	r2, [r7, #8]
 8001df4:	187b      	adds	r3, r7, r1
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	b25b      	sxtb	r3, r3
 8001dfa:	0011      	movs	r1, r2
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	f7ff ff5d 	bl	8001cbc <__NVIC_SetPriority>
}
 8001e02:	46c0      	nop			; (mov r8, r8)
 8001e04:	46bd      	mov	sp, r7
 8001e06:	b004      	add	sp, #16
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b082      	sub	sp, #8
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	0002      	movs	r2, r0
 8001e12:	1dfb      	adds	r3, r7, #7
 8001e14:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e16:	1dfb      	adds	r3, r7, #7
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	b25b      	sxtb	r3, r3
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	f7ff ff11 	bl	8001c44 <__NVIC_EnableIRQ>
}
 8001e22:	46c0      	nop			; (mov r8, r8)
 8001e24:	46bd      	mov	sp, r7
 8001e26:	b002      	add	sp, #8
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b082      	sub	sp, #8
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	0002      	movs	r2, r0
 8001e32:	1dfb      	adds	r3, r7, #7
 8001e34:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001e36:	1dfb      	adds	r3, r7, #7
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	b25b      	sxtb	r3, r3
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	f7ff ff1b 	bl	8001c78 <__NVIC_DisableIRQ>
}
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	46bd      	mov	sp, r7
 8001e46:	b002      	add	sp, #8
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	0018      	movs	r0, r3
 8001e56:	f7ff ff9f 	bl	8001d98 <SysTick_Config>
 8001e5a:	0003      	movs	r3, r0
}
 8001e5c:	0018      	movs	r0, r3
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	b002      	add	sp, #8
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <CLK_InitSYSCLK>:
/*
 * PUBLIC FUNCTIONS
 */

void CLK_InitSYSCLK(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
	__HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 8001e68:	4b34      	ldr	r3, [pc, #208]	; (8001f3c <CLK_InitSYSCLK+0xd8>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	4b33      	ldr	r3, [pc, #204]	; (8001f3c <CLK_InitSYSCLK+0xd8>)
 8001e6e:	2101      	movs	r1, #1
 8001e70:	430a      	orrs	r2, r1
 8001e72:	601a      	str	r2, [r3, #0]
#ifdef CLK_USE_HSE
	__HAL_RCC_HSE_CONFIG(RCC_HSE_ON);
	while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U);
#endif
#ifdef CLK_USE_HSI
	__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_HSICALIBRATION_DEFAULT);
 8001e74:	4b32      	ldr	r3, [pc, #200]	; (8001f40 <CLK_InitSYSCLK+0xdc>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	4a32      	ldr	r2, [pc, #200]	; (8001f44 <CLK_InitSYSCLK+0xe0>)
 8001e7a:	401a      	ands	r2, r3
 8001e7c:	4b30      	ldr	r3, [pc, #192]	; (8001f40 <CLK_InitSYSCLK+0xdc>)
 8001e7e:	2180      	movs	r1, #128	; 0x80
 8001e80:	0149      	lsls	r1, r1, #5
 8001e82:	430a      	orrs	r2, r1
 8001e84:	605a      	str	r2, [r3, #4]
	__HAL_RCC_HSI_CONFIG(RCC_HSI_ON);
 8001e86:	4b2e      	ldr	r3, [pc, #184]	; (8001f40 <CLK_InitSYSCLK+0xdc>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2209      	movs	r2, #9
 8001e8c:	4393      	bics	r3, r2
 8001e8e:	001a      	movs	r2, r3
 8001e90:	4b2b      	ldr	r3, [pc, #172]	; (8001f40 <CLK_InitSYSCLK+0xdc>)
 8001e92:	2101      	movs	r1, #1
 8001e94:	430a      	orrs	r2, r1
 8001e96:	601a      	str	r2, [r3, #0]
	while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U);
 8001e98:	46c0      	nop			; (mov r8, r8)
 8001e9a:	4b29      	ldr	r3, [pc, #164]	; (8001f40 <CLK_InitSYSCLK+0xdc>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2204      	movs	r2, #4
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	d0fa      	beq.n	8001e9a <CLK_InitSYSCLK+0x36>
	__HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_MSICALIBRATION_DEFAULT);
#endif

#ifdef CLK_USE_PLL
	// PLL must be disables for configuration.
	__HAL_RCC_PLL_DISABLE();
 8001ea4:	4b26      	ldr	r3, [pc, #152]	; (8001f40 <CLK_InitSYSCLK+0xdc>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	4b25      	ldr	r3, [pc, #148]	; (8001f40 <CLK_InitSYSCLK+0xdc>)
 8001eaa:	4927      	ldr	r1, [pc, #156]	; (8001f48 <CLK_InitSYSCLK+0xe4>)
 8001eac:	400a      	ands	r2, r1
 8001eae:	601a      	str	r2, [r3, #0]
	while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U);
 8001eb0:	46c0      	nop			; (mov r8, r8)
 8001eb2:	4b23      	ldr	r3, [pc, #140]	; (8001f40 <CLK_InitSYSCLK+0xdc>)
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	2380      	movs	r3, #128	; 0x80
 8001eb8:	049b      	lsls	r3, r3, #18
 8001eba:	4013      	ands	r3, r2
 8001ebc:	d1f9      	bne.n	8001eb2 <CLK_InitSYSCLK+0x4e>
	__HAL_RCC_PLL_CONFIG(CLK_PLL_SRC, CLK_PLL_MUL_CFG, CLK_PLL_DIV_CFG);
 8001ebe:	4b20      	ldr	r3, [pc, #128]	; (8001f40 <CLK_InitSYSCLK+0xdc>)
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	4a22      	ldr	r2, [pc, #136]	; (8001f4c <CLK_InitSYSCLK+0xe8>)
 8001ec4:	401a      	ands	r2, r3
 8001ec6:	4b1e      	ldr	r3, [pc, #120]	; (8001f40 <CLK_InitSYSCLK+0xdc>)
 8001ec8:	2188      	movs	r1, #136	; 0x88
 8001eca:	03c9      	lsls	r1, r1, #15
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	60da      	str	r2, [r3, #12]
	__HAL_RCC_PLL_ENABLE();
 8001ed0:	4b1b      	ldr	r3, [pc, #108]	; (8001f40 <CLK_InitSYSCLK+0xdc>)
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	4b1a      	ldr	r3, [pc, #104]	; (8001f40 <CLK_InitSYSCLK+0xdc>)
 8001ed6:	2180      	movs	r1, #128	; 0x80
 8001ed8:	0449      	lsls	r1, r1, #17
 8001eda:	430a      	orrs	r2, r1
 8001edc:	601a      	str	r2, [r3, #0]
	while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U);
 8001ede:	46c0      	nop			; (mov r8, r8)
 8001ee0:	4b17      	ldr	r3, [pc, #92]	; (8001f40 <CLK_InitSYSCLK+0xdc>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	2380      	movs	r3, #128	; 0x80
 8001ee6:	049b      	lsls	r3, r3, #18
 8001ee8:	4013      	ands	r3, r2
 8001eea:	d0f9      	beq.n	8001ee0 <CLK_InitSYSCLK+0x7c>
	 * CONFIGURE CLOCKS
	 * Select the sources and dividers for internal clocks
	 */

	// Configure AHBCLK divider
	MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001eec:	4b14      	ldr	r3, [pc, #80]	; (8001f40 <CLK_InitSYSCLK+0xdc>)
 8001eee:	68da      	ldr	r2, [r3, #12]
 8001ef0:	4b13      	ldr	r3, [pc, #76]	; (8001f40 <CLK_InitSYSCLK+0xdc>)
 8001ef2:	21f0      	movs	r1, #240	; 0xf0
 8001ef4:	438a      	bics	r2, r1
 8001ef6:	60da      	str	r2, [r3, #12]

	// Apply SYSCLK source
	__HAL_RCC_SYSCLK_CONFIG(CLK_SYSCLK_SRC);
 8001ef8:	4b11      	ldr	r3, [pc, #68]	; (8001f40 <CLK_InitSYSCLK+0xdc>)
 8001efa:	68da      	ldr	r2, [r3, #12]
 8001efc:	4b10      	ldr	r3, [pc, #64]	; (8001f40 <CLK_InitSYSCLK+0xdc>)
 8001efe:	2103      	movs	r1, #3
 8001f00:	430a      	orrs	r2, r1
 8001f02:	60da      	str	r2, [r3, #12]
#elif (CLK_SYSCLK_SRC == RCC_SYSCLKSOURCE_STATUS_HSI)
	while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI);
#elif (CLK_SYSCLK_SRC == RCC_SYSCLKSOURCE_STATUS_HSE)
	while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE);
#elif (CLK_SYSCLK_SRC == RCC_SYSCLKSOURCE_PLLCLK)
	while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK);
 8001f04:	46c0      	nop			; (mov r8, r8)
 8001f06:	4b0e      	ldr	r3, [pc, #56]	; (8001f40 <CLK_InitSYSCLK+0xdc>)
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	220c      	movs	r2, #12
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	2b0c      	cmp	r3, #12
 8001f10:	d1f9      	bne.n	8001f06 <CLK_InitSYSCLK+0xa2>
#endif

	// Configure PCLK dividers (peripheral clock)
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV1);
 8001f12:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <CLK_InitSYSCLK+0xdc>)
 8001f14:	68da      	ldr	r2, [r3, #12]
 8001f16:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <CLK_InitSYSCLK+0xdc>)
 8001f18:	490d      	ldr	r1, [pc, #52]	; (8001f50 <CLK_InitSYSCLK+0xec>)
 8001f1a:	400a      	ands	r2, r1
 8001f1c:	60da      	str	r2, [r3, #12]

#ifdef STM32L0
	// STM32L0's have a second PCLK. The shift by 3 is defined like this in the HAL.
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV1 << 3);
 8001f1e:	4b08      	ldr	r3, [pc, #32]	; (8001f40 <CLK_InitSYSCLK+0xdc>)
 8001f20:	68da      	ldr	r2, [r3, #12]
 8001f22:	4b07      	ldr	r3, [pc, #28]	; (8001f40 <CLK_InitSYSCLK+0xdc>)
 8001f24:	490b      	ldr	r1, [pc, #44]	; (8001f54 <CLK_InitSYSCLK+0xf0>)
 8001f26:	400a      	ands	r2, r1
 8001f28:	60da      	str	r2, [r3, #12]

#ifndef CLK_USE_HSI
	__HAL_RCC_HSI_CONFIG(RCC_HSI_OFF);
#endif
#ifndef CLK_USE_MSI
	__HAL_RCC_MSI_DISABLE();
 8001f2a:	4b05      	ldr	r3, [pc, #20]	; (8001f40 <CLK_InitSYSCLK+0xdc>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	4b04      	ldr	r3, [pc, #16]	; (8001f40 <CLK_InitSYSCLK+0xdc>)
 8001f30:	4909      	ldr	r1, [pc, #36]	; (8001f58 <CLK_InitSYSCLK+0xf4>)
 8001f32:	400a      	ands	r2, r1
 8001f34:	601a      	str	r2, [r3, #0]
#endif
}
 8001f36:	46c0      	nop			; (mov r8, r8)
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40022000 	.word	0x40022000
 8001f40:	40021000 	.word	0x40021000
 8001f44:	ffffe0ff 	.word	0xffffe0ff
 8001f48:	feffffff 	.word	0xfeffffff
 8001f4c:	ff02ffff 	.word	0xff02ffff
 8001f50:	fffff8ff 	.word	0xfffff8ff
 8001f54:	ffffc7ff 	.word	0xffffc7ff
 8001f58:	fffffeff 	.word	0xfffffeff

08001f5c <CORE_GetTick>:
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
	return gTicks;
 8001f60:	4b02      	ldr	r3, [pc, #8]	; (8001f6c <CORE_GetTick+0x10>)
 8001f62:	681b      	ldr	r3, [r3, #0]
}
 8001f64:	0018      	movs	r0, r3
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	46c0      	nop			; (mov r8, r8)
 8001f6c:	200001d4 	.word	0x200001d4

08001f70 <GPIO_Deinit>:
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
	GPIO_Init(gpio, pin, GPIO_Mode_Analog);
 8001f7a:	6839      	ldr	r1, [r7, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2203      	movs	r2, #3
 8001f80:	0018      	movs	r0, r3
 8001f82:	f000 f9f7 	bl	8002374 <GPIO_Init>
}
 8001f86:	46c0      	nop			; (mov r8, r8)
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	b002      	add	sp, #8
 8001f8c:	bd80      	pop	{r7, pc}
	...

08001f90 <CLK_GetHCLKFreq>:
/*
 * INLINE FUNCTION DEFINITIONS
 */

static inline uint32_t CLK_GetHCLKFreq(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
	return CLK_SYSCLK_FREQ;
 8001f94:	4b01      	ldr	r3, [pc, #4]	; (8001f9c <CLK_GetHCLKFreq+0xc>)
}
 8001f96:	0018      	movs	r0, r3
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	01e84800 	.word	0x01e84800

08001fa0 <CORE_Init>:
/*
 * PUBLIC FUNCTIONS
 */

void CORE_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
#if defined(STM32L0)
	__HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001fa4:	4b15      	ldr	r3, [pc, #84]	; (8001ffc <CORE_Init+0x5c>)
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	4b14      	ldr	r3, [pc, #80]	; (8001ffc <CORE_Init+0x5c>)
 8001faa:	2140      	movs	r1, #64	; 0x40
 8001fac:	430a      	orrs	r2, r1
 8001fae:	601a      	str	r2, [r3, #0]

#elif defined(STM32F0)
	__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fb0:	4b13      	ldr	r3, [pc, #76]	; (8002000 <CORE_Init+0x60>)
 8001fb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fb4:	4b12      	ldr	r3, [pc, #72]	; (8002000 <CORE_Init+0x60>)
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_RCC_PWR_CLK_ENABLE();
 8001fbc:	4b10      	ldr	r3, [pc, #64]	; (8002000 <CORE_Init+0x60>)
 8001fbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fc0:	4b0f      	ldr	r3, [pc, #60]	; (8002000 <CORE_Init+0x60>)
 8001fc2:	2180      	movs	r1, #128	; 0x80
 8001fc4:	0549      	lsls	r1, r1, #21
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	639a      	str	r2, [r3, #56]	; 0x38
#ifdef STM32L0
#ifndef USB_ENABLE
	// This seems to disrupt USB. Future investigation needed.
	SET_BIT(PWR->CR, PWR_CR_ULP | PWR_CR_FWU); // Enable Ultra low power mode & Fast wakeup
 8001fca:	4b0e      	ldr	r3, [pc, #56]	; (8002004 <CORE_Init+0x64>)
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	4b0d      	ldr	r3, [pc, #52]	; (8002004 <CORE_Init+0x64>)
 8001fd0:	21c0      	movs	r1, #192	; 0xc0
 8001fd2:	00c9      	lsls	r1, r1, #3
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	601a      	str	r2, [r3, #0]
#endif
	__HAL_PWR_VOLTAGESCALING_CONFIG(CORE_VOLTAGE_RANGE);
 8001fd8:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <CORE_Init+0x64>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a0a      	ldr	r2, [pc, #40]	; (8002008 <CORE_Init+0x68>)
 8001fde:	401a      	ands	r2, r3
 8001fe0:	4b08      	ldr	r3, [pc, #32]	; (8002004 <CORE_Init+0x64>)
 8001fe2:	2180      	movs	r1, #128	; 0x80
 8001fe4:	0109      	lsls	r1, r1, #4
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	601a      	str	r2, [r3, #0]
#endif

	CLK_InitSYSCLK();
 8001fea:	f7ff ff3b 	bl	8001e64 <CLK_InitSYSCLK>
	CORE_InitSysTick();
 8001fee:	f000 f82e 	bl	800204e <CORE_InitSysTick>
	CORE_InitGPIO();
 8001ff2:	f000 f845 	bl	8002080 <CORE_InitGPIO>
#ifdef	US_ENABLE
	US_Init();
#endif
}
 8001ff6:	46c0      	nop			; (mov r8, r8)
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40022000 	.word	0x40022000
 8002000:	40021000 	.word	0x40021000
 8002004:	40007000 	.word	0x40007000
 8002008:	ffffe7ff 	.word	0xffffe7ff

0800200c <CORE_Idle>:

void CORE_Idle(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
	// As long as systick is on, this will at least return each millisecond.
	__WFI();
 8002010:	bf30      	wfi
}
 8002012:	46c0      	nop			; (mov r8, r8)
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <CORE_Delay>:
	CLK_InitSYSCLK();
	HAL_ResumeTick();
}

void CORE_Delay(uint32_t ms)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
	ms += MS_PER_SYSTICK; // Add to guarantee a minimum delay
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3301      	adds	r3, #1
 8002024:	607b      	str	r3, [r7, #4]
	uint32_t start = CORE_GetTick();
 8002026:	f7ff ff99 	bl	8001f5c <CORE_GetTick>
 800202a:	0003      	movs	r3, r0
 800202c:	60fb      	str	r3, [r7, #12]
	while (CORE_GetTick() - start < ms)
 800202e:	e001      	b.n	8002034 <CORE_Delay+0x1c>
	{
		CORE_Idle();
 8002030:	f7ff ffec 	bl	800200c <CORE_Idle>
	while (CORE_GetTick() - start < ms)
 8002034:	f7ff ff92 	bl	8001f5c <CORE_GetTick>
 8002038:	0002      	movs	r2, r0
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	429a      	cmp	r2, r3
 8002042:	d8f5      	bhi.n	8002030 <CORE_Delay+0x18>
	}
}
 8002044:	46c0      	nop			; (mov r8, r8)
 8002046:	46c0      	nop			; (mov r8, r8)
 8002048:	46bd      	mov	sp, r7
 800204a:	b004      	add	sp, #16
 800204c:	bd80      	pop	{r7, pc}

0800204e <CORE_InitSysTick>:
/*
 * PRIVATE FUNCTIONS
 */

void CORE_InitSysTick(void)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	af00      	add	r7, sp, #0
	HAL_SYSTICK_Config(CLK_GetHCLKFreq() / CORE_SYSTICK_FREQ);
 8002052:	f7ff ff9d 	bl	8001f90 <CLK_GetHCLKFreq>
 8002056:	0002      	movs	r2, r0
 8002058:	23fa      	movs	r3, #250	; 0xfa
 800205a:	0099      	lsls	r1, r3, #2
 800205c:	0010      	movs	r0, r2
 800205e:	f7fe f853 	bl	8000108 <__udivsi3>
 8002062:	0003      	movs	r3, r0
 8002064:	0018      	movs	r0, r3
 8002066:	f7ff fef0 	bl	8001e4a <HAL_SYSTICK_Config>
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800206a:	2301      	movs	r3, #1
 800206c:	425b      	negs	r3, r3
 800206e:	2200      	movs	r2, #0
 8002070:	2100      	movs	r1, #0
 8002072:	0018      	movs	r0, r3
 8002074:	f7ff feb4 	bl	8001de0 <HAL_NVIC_SetPriority>
}
 8002078:	46c0      	nop			; (mov r8, r8)
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
	...

08002080 <CORE_InitGPIO>:

void CORE_InitGPIO(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002086:	4b26      	ldr	r3, [pc, #152]	; (8002120 <CORE_InitGPIO+0xa0>)
 8002088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800208a:	4b25      	ldr	r3, [pc, #148]	; (8002120 <CORE_InitGPIO+0xa0>)
 800208c:	2101      	movs	r1, #1
 800208e:	430a      	orrs	r2, r1
 8002090:	62da      	str	r2, [r3, #44]	; 0x2c
 8002092:	4b23      	ldr	r3, [pc, #140]	; (8002120 <CORE_InitGPIO+0xa0>)
 8002094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002096:	2201      	movs	r2, #1
 8002098:	4013      	ands	r3, r2
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	68fb      	ldr	r3, [r7, #12]
#ifdef DEBUG
	// SWCLK and SWDIO on PA13, PA14
	GPIO_Deinit(GPIOA, GPIO_PIN_All & ~(GPIO_PIN_13 | GPIO_PIN_14));
 800209e:	4a21      	ldr	r2, [pc, #132]	; (8002124 <CORE_InitGPIO+0xa4>)
 80020a0:	23a0      	movs	r3, #160	; 0xa0
 80020a2:	05db      	lsls	r3, r3, #23
 80020a4:	0011      	movs	r1, r2
 80020a6:	0018      	movs	r0, r3
 80020a8:	f7ff ff62 	bl	8001f70 <GPIO_Deinit>
#else
	GPIO_Deinit(GPIOA, GPIO_PIN_All);
#endif

	__HAL_RCC_GPIOB_CLK_ENABLE();
 80020ac:	4b1c      	ldr	r3, [pc, #112]	; (8002120 <CORE_InitGPIO+0xa0>)
 80020ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020b0:	4b1b      	ldr	r3, [pc, #108]	; (8002120 <CORE_InitGPIO+0xa0>)
 80020b2:	2102      	movs	r1, #2
 80020b4:	430a      	orrs	r2, r1
 80020b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80020b8:	4b19      	ldr	r3, [pc, #100]	; (8002120 <CORE_InitGPIO+0xa0>)
 80020ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020bc:	2202      	movs	r2, #2
 80020be:	4013      	ands	r3, r2
 80020c0:	60bb      	str	r3, [r7, #8]
 80020c2:	68bb      	ldr	r3, [r7, #8]
	GPIO_Deinit(GPIOB, GPIO_PIN_All);
 80020c4:	4a18      	ldr	r2, [pc, #96]	; (8002128 <CORE_InitGPIO+0xa8>)
 80020c6:	4b19      	ldr	r3, [pc, #100]	; (800212c <CORE_InitGPIO+0xac>)
 80020c8:	0011      	movs	r1, r2
 80020ca:	0018      	movs	r0, r3
 80020cc:	f7ff ff50 	bl	8001f70 <GPIO_Deinit>

	__HAL_RCC_GPIOC_CLK_ENABLE();
 80020d0:	4b13      	ldr	r3, [pc, #76]	; (8002120 <CORE_InitGPIO+0xa0>)
 80020d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020d4:	4b12      	ldr	r3, [pc, #72]	; (8002120 <CORE_InitGPIO+0xa0>)
 80020d6:	2104      	movs	r1, #4
 80020d8:	430a      	orrs	r2, r1
 80020da:	62da      	str	r2, [r3, #44]	; 0x2c
 80020dc:	4b10      	ldr	r3, [pc, #64]	; (8002120 <CORE_InitGPIO+0xa0>)
 80020de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e0:	2204      	movs	r2, #4
 80020e2:	4013      	ands	r3, r2
 80020e4:	607b      	str	r3, [r7, #4]
 80020e6:	687b      	ldr	r3, [r7, #4]
	GPIO_Deinit(GPIOC, GPIO_PIN_All);
 80020e8:	4a0f      	ldr	r2, [pc, #60]	; (8002128 <CORE_InitGPIO+0xa8>)
 80020ea:	4b11      	ldr	r3, [pc, #68]	; (8002130 <CORE_InitGPIO+0xb0>)
 80020ec:	0011      	movs	r1, r2
 80020ee:	0018      	movs	r0, r3
 80020f0:	f7ff ff3e 	bl	8001f70 <GPIO_Deinit>

#if defined(GPIOD)
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80020f4:	4b0a      	ldr	r3, [pc, #40]	; (8002120 <CORE_InitGPIO+0xa0>)
 80020f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020f8:	4b09      	ldr	r3, [pc, #36]	; (8002120 <CORE_InitGPIO+0xa0>)
 80020fa:	2108      	movs	r1, #8
 80020fc:	430a      	orrs	r2, r1
 80020fe:	62da      	str	r2, [r3, #44]	; 0x2c
 8002100:	4b07      	ldr	r3, [pc, #28]	; (8002120 <CORE_InitGPIO+0xa0>)
 8002102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002104:	2208      	movs	r2, #8
 8002106:	4013      	ands	r3, r2
 8002108:	603b      	str	r3, [r7, #0]
 800210a:	683b      	ldr	r3, [r7, #0]
	GPIO_Deinit(GPIOD, GPIO_PIN_All);
 800210c:	4a06      	ldr	r2, [pc, #24]	; (8002128 <CORE_InitGPIO+0xa8>)
 800210e:	4b09      	ldr	r3, [pc, #36]	; (8002134 <CORE_InitGPIO+0xb4>)
 8002110:	0011      	movs	r1, r2
 8002112:	0018      	movs	r0, r3
 8002114:	f7ff ff2c 	bl	8001f70 <GPIO_Deinit>
#endif
}
 8002118:	46c0      	nop			; (mov r8, r8)
 800211a:	46bd      	mov	sp, r7
 800211c:	b004      	add	sp, #16
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40021000 	.word	0x40021000
 8002124:	00009fff 	.word	0x00009fff
 8002128:	0000ffff 	.word	0x0000ffff
 800212c:	50000400 	.word	0x50000400
 8002130:	50000800 	.word	0x50000800
 8002134:	50000c00 	.word	0x50000c00

08002138 <SysTick_Handler>:
/*
 * INTERRUPT ROUTINES
 */

void SysTick_Handler(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
	gTicks += MS_PER_SYSTICK;
 800213c:	4b03      	ldr	r3, [pc, #12]	; (800214c <SysTick_Handler+0x14>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	1c5a      	adds	r2, r3, #1
 8002142:	4b02      	ldr	r3, [pc, #8]	; (800214c <SysTick_Handler+0x14>)
 8002144:	601a      	str	r2, [r3, #0]
	if (gTickCallback != NULL)
	{
		gTickCallback();
	}
#endif
}
 8002146:	46c0      	nop			; (mov r8, r8)
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	200001d4 	.word	0x200001d4

08002150 <EEPROM_Write>:
/*
 * PUBLIC FUNCTIONS
 */

void EEPROM_Write(uint32_t offset, const void * data, uint32_t size)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b088      	sub	sp, #32
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
	uint8_t * bytes = (uint8_t *)data;
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	61bb      	str	r3, [r7, #24]
	uint8_t * eeprom = (uint8_t *)(DATA_EEPROM_BASE + offset);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4a15      	ldr	r2, [pc, #84]	; (80021b8 <EEPROM_Write+0x68>)
 8002164:	4694      	mov	ip, r2
 8002166:	4463      	add	r3, ip
 8002168:	617b      	str	r3, [r7, #20]

	EEPROM_Unlock();
 800216a:	f000 f83f 	bl	80021ec <EEPROM_Unlock>
	for (uint32_t i = 0; i < size; i++)
 800216e:	2300      	movs	r3, #0
 8002170:	61fb      	str	r3, [r7, #28]
 8002172:	e016      	b.n	80021a2 <EEPROM_Write+0x52>
	{
		if (bytes[i] != eeprom[i])
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	18d3      	adds	r3, r2, r3
 800217a:	781a      	ldrb	r2, [r3, #0]
 800217c:	6979      	ldr	r1, [r7, #20]
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	18cb      	adds	r3, r1, r3
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	429a      	cmp	r2, r3
 8002186:	d009      	beq.n	800219c <EEPROM_Write+0x4c>
		{
			eeprom[i] = bytes[i]; // This triggers an 8 bit write operation.
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	18d2      	adds	r2, r2, r3
 800218e:	6979      	ldr	r1, [r7, #20]
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	18cb      	adds	r3, r1, r3
 8002194:	7812      	ldrb	r2, [r2, #0]
 8002196:	701a      	strb	r2, [r3, #0]
			EEPROM_WaitForOperation();
 8002198:	f000 f856 	bl	8002248 <EEPROM_WaitForOperation>
	for (uint32_t i = 0; i < size; i++)
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	3301      	adds	r3, #1
 80021a0:	61fb      	str	r3, [r7, #28]
 80021a2:	69fa      	ldr	r2, [r7, #28]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d3e4      	bcc.n	8002174 <EEPROM_Write+0x24>
		}
	}
	EEPROM_Lock();
 80021aa:	f000 f83f 	bl	800222c <EEPROM_Lock>
}
 80021ae:	46c0      	nop			; (mov r8, r8)
 80021b0:	46bd      	mov	sp, r7
 80021b2:	b008      	add	sp, #32
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	46c0      	nop			; (mov r8, r8)
 80021b8:	08080000 	.word	0x08080000

080021bc <EEPROM_Read>:

void EEPROM_Read(uint32_t offset, void * data, uint32_t size)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
	uint8_t * eeprom = (uint8_t *)(DATA_EEPROM_BASE + offset);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	4a07      	ldr	r2, [pc, #28]	; (80021e8 <EEPROM_Read+0x2c>)
 80021cc:	4694      	mov	ip, r2
 80021ce:	4463      	add	r3, ip
 80021d0:	617b      	str	r3, [r7, #20]
	memcpy(data, eeprom, size);
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6979      	ldr	r1, [r7, #20]
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	0018      	movs	r0, r3
 80021da:	f000 fe27 	bl	8002e2c <memcpy>
}
 80021de:	46c0      	nop			; (mov r8, r8)
 80021e0:	46bd      	mov	sp, r7
 80021e2:	b006      	add	sp, #24
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	46c0      	nop			; (mov r8, r8)
 80021e8:	08080000 	.word	0x08080000

080021ec <EEPROM_Unlock>:
/*
 * PRIVATE FUNCTIONS
 */

static void EEPROM_Unlock(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021f2:	f3ef 8310 	mrs	r3, PRIMASK
 80021f6:	607b      	str	r3, [r7, #4]
  return(result);
 80021f8:	687b      	ldr	r3, [r7, #4]
	// This sequence must not be interrupted.
	uint32_t primask_bit = __get_PRIMASK();
 80021fa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80021fc:	b672      	cpsid	i
}
 80021fe:	46c0      	nop			; (mov r8, r8)
	__disable_irq();

	FLASH->PEKEYR = FLASH_PEKEY1;
 8002200:	4b07      	ldr	r3, [pc, #28]	; (8002220 <EEPROM_Unlock+0x34>)
 8002202:	4a08      	ldr	r2, [pc, #32]	; (8002224 <EEPROM_Unlock+0x38>)
 8002204:	60da      	str	r2, [r3, #12]
	FLASH->PEKEYR = FLASH_PEKEY2;
 8002206:	4b06      	ldr	r3, [pc, #24]	; (8002220 <EEPROM_Unlock+0x34>)
 8002208:	4a07      	ldr	r2, [pc, #28]	; (8002228 <EEPROM_Unlock+0x3c>)
 800220a:	60da      	str	r2, [r3, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	f383 8810 	msr	PRIMASK, r3
}
 8002216:	46c0      	nop			; (mov r8, r8)

	__set_PRIMASK(primask_bit);
}
 8002218:	46c0      	nop			; (mov r8, r8)
 800221a:	46bd      	mov	sp, r7
 800221c:	b004      	add	sp, #16
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40022000 	.word	0x40022000
 8002224:	89abcdef 	.word	0x89abcdef
 8002228:	02030405 	.word	0x02030405

0800222c <EEPROM_Lock>:

static inline void EEPROM_Lock(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
	SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8002230:	4b04      	ldr	r3, [pc, #16]	; (8002244 <EEPROM_Lock+0x18>)
 8002232:	685a      	ldr	r2, [r3, #4]
 8002234:	4b03      	ldr	r3, [pc, #12]	; (8002244 <EEPROM_Lock+0x18>)
 8002236:	2101      	movs	r1, #1
 8002238:	430a      	orrs	r2, r1
 800223a:	605a      	str	r2, [r3, #4]
}
 800223c:	46c0      	nop			; (mov r8, r8)
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	46c0      	nop			; (mov r8, r8)
 8002244:	40022000 	.word	0x40022000

08002248 <EEPROM_WaitForOperation>:

static void EEPROM_WaitForOperation(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
	while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY));
 800224c:	46c0      	nop			; (mov r8, r8)
 800224e:	4b09      	ldr	r3, [pc, #36]	; (8002274 <EEPROM_WaitForOperation+0x2c>)
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	2201      	movs	r2, #1
 8002254:	4013      	ands	r3, r2
 8002256:	2b01      	cmp	r3, #1
 8002258:	d0f9      	beq.n	800224e <EEPROM_WaitForOperation+0x6>
	if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800225a:	4b06      	ldr	r3, [pc, #24]	; (8002274 <EEPROM_WaitForOperation+0x2c>)
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	2202      	movs	r2, #2
 8002260:	4013      	ands	r3, r2
 8002262:	2b02      	cmp	r3, #2
 8002264:	d102      	bne.n	800226c <EEPROM_WaitForOperation+0x24>
	{
		__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002266:	4b03      	ldr	r3, [pc, #12]	; (8002274 <EEPROM_WaitForOperation+0x2c>)
 8002268:	2202      	movs	r2, #2
 800226a:	619a      	str	r2, [r3, #24]
	}
}
 800226c:	46c0      	nop			; (mov r8, r8)
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	46c0      	nop			; (mov r8, r8)
 8002274:	40022000 	.word	0x40022000

08002278 <GPIO_Set>:
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
	gpio->BSRR = (uint32_t)pin;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	619a      	str	r2, [r3, #24]
}
 8002288:	46c0      	nop			; (mov r8, r8)
 800228a:	46bd      	mov	sp, r7
 800228c:	b002      	add	sp, #8
 800228e:	bd80      	pop	{r7, pc}

08002290 <GPIO_Reset>:
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
	gpio->BRR = (uint32_t)pin;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80022a0:	46c0      	nop			; (mov r8, r8)
 80022a2:	46bd      	mov	sp, r7
 80022a4:	b002      	add	sp, #8
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <GPIO_Write>:
/*
 * PUBLIC FUNCTIONS
 */

void GPIO_Write(GPIO_t * gpio, uint32_t pin, GPIO_State_t state)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	1dfb      	adds	r3, r7, #7
 80022b4:	701a      	strb	r2, [r3, #0]
	if (state)
 80022b6:	1dfb      	adds	r3, r7, #7
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d006      	beq.n	80022cc <GPIO_Write+0x24>
	{
		GPIO_Set(gpio, pin);
 80022be:	68ba      	ldr	r2, [r7, #8]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	0011      	movs	r1, r2
 80022c4:	0018      	movs	r0, r3
 80022c6:	f7ff ffd7 	bl	8002278 <GPIO_Set>
	}
	else
	{
		GPIO_Reset(gpio, pin);
	}
}
 80022ca:	e005      	b.n	80022d8 <GPIO_Write+0x30>
		GPIO_Reset(gpio, pin);
 80022cc:	68ba      	ldr	r2, [r7, #8]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	0011      	movs	r1, r2
 80022d2:	0018      	movs	r0, r3
 80022d4:	f7ff ffdc 	bl	8002290 <GPIO_Reset>
}
 80022d8:	46c0      	nop			; (mov r8, r8)
 80022da:	46bd      	mov	sp, r7
 80022dc:	b004      	add	sp, #16
 80022de:	bd80      	pop	{r7, pc}

080022e0 <GPIO_EnableAlternate>:

void GPIO_EnableAlternate(GPIO_t * gpio, uint32_t pin, GPIO_Flag_t flags, uint32_t af)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	603b      	str	r3, [r7, #0]
 80022ec:	1dbb      	adds	r3, r7, #6
 80022ee:	801a      	strh	r2, [r3, #0]
	GPIO_ConfigAlternate(gpio, pin, af);
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	68b9      	ldr	r1, [r7, #8]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	0018      	movs	r0, r3
 80022f8:	f000 f8ab 	bl	8002452 <GPIO_ConfigAlternate>
	GPIO_Init(gpio, pin, GPIO_Mode_Alternate | GPIO_Speed_High | flags);
 80022fc:	1dbb      	adds	r3, r7, #6
 80022fe:	881b      	ldrh	r3, [r3, #0]
 8002300:	4a05      	ldr	r2, [pc, #20]	; (8002318 <GPIO_EnableAlternate+0x38>)
 8002302:	4313      	orrs	r3, r2
 8002304:	b29a      	uxth	r2, r3
 8002306:	68b9      	ldr	r1, [r7, #8]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	0018      	movs	r0, r3
 800230c:	f000 f832 	bl	8002374 <GPIO_Init>
}
 8002310:	46c0      	nop			; (mov r8, r8)
 8002312:	46bd      	mov	sp, r7
 8002314:	b004      	add	sp, #16
 8002316:	bd80      	pop	{r7, pc}
 8002318:	00000302 	.word	0x00000302

0800231c <GPIO_OnChange>:

#ifdef GPIO_USE_IRQS
void GPIO_OnChange(GPIO_t * gpio, uint32_t pin, GPIO_IT_Dir_t dir, VoidFunction_t callback)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	603b      	str	r3, [r7, #0]
 8002328:	1dfb      	adds	r3, r7, #7
 800232a:	701a      	strb	r2, [r3, #0]
	int n = 0;
 800232c:	2300      	movs	r3, #0
 800232e:	617b      	str	r3, [r7, #20]
	while ((pin & (1 << n)) == 0) { n++; }
 8002330:	e002      	b.n	8002338 <GPIO_OnChange+0x1c>
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	3301      	adds	r3, #1
 8002336:	617b      	str	r3, [r7, #20]
 8002338:	2201      	movs	r2, #1
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	409a      	lsls	r2, r3
 800233e:	0013      	movs	r3, r2
 8002340:	001a      	movs	r2, r3
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	4013      	ands	r3, r2
 8002346:	d0f4      	beq.n	8002332 <GPIO_OnChange+0x16>

	gCallback[n] = callback;
 8002348:	4b09      	ldr	r3, [pc, #36]	; (8002370 <GPIO_OnChange+0x54>)
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	0092      	lsls	r2, r2, #2
 800234e:	6839      	ldr	r1, [r7, #0]
 8002350:	50d1      	str	r1, [r2, r3]

	GPIO_ConfigInterrupt(gpio, n, dir);
 8002352:	1dfb      	adds	r3, r7, #7
 8002354:	781a      	ldrb	r2, [r3, #0]
 8002356:	6979      	ldr	r1, [r7, #20]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	0018      	movs	r0, r3
 800235c:	f000 f8b2 	bl	80024c4 <GPIO_ConfigInterrupt>

	EXTIx_EnableIRQn(n);
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	0018      	movs	r0, r3
 8002364:	f000 f99e 	bl	80026a4 <EXTIx_EnableIRQn>
}
 8002368:	46c0      	nop			; (mov r8, r8)
 800236a:	46bd      	mov	sp, r7
 800236c:	b006      	add	sp, #24
 800236e:	bd80      	pop	{r7, pc}
 8002370:	200001d8 	.word	0x200001d8

08002374 <GPIO_Init>:
#endif //GPIO_USE_IRQS

void GPIO_Init(GPIO_t * gpio, uint32_t pins, GPIO_Flag_t mode)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b088      	sub	sp, #32
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	1dbb      	adds	r3, r7, #6
 8002380:	801a      	strh	r2, [r3, #0]
	uint32_t pinmask = GPIO_SWARBitDouble(pins);
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	0018      	movs	r0, r3
 8002386:	f000 f933 	bl	80025f0 <GPIO_SWARBitDouble>
 800238a:	0003      	movs	r3, r0
 800238c:	61fb      	str	r3, [r7, #28]

	GPIO_Mode_t dir = mode & GPIO_Mode_MASK;
 800238e:	1dbb      	adds	r3, r7, #6
 8002390:	881b      	ldrh	r3, [r3, #0]
 8002392:	b2da      	uxtb	r2, r3
 8002394:	201b      	movs	r0, #27
 8002396:	183b      	adds	r3, r7, r0
 8002398:	2103      	movs	r1, #3
 800239a:	400a      	ands	r2, r1
 800239c:	701a      	strb	r2, [r3, #0]

	if (dir == GPIO_Mode_Alternate || dir == GPIO_Mode_Output)
 800239e:	183b      	adds	r3, r7, r0
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d003      	beq.n	80023ae <GPIO_Init+0x3a>
 80023a6:	183b      	adds	r3, r7, r0
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d126      	bne.n	80023fc <GPIO_Init+0x88>
	{
		uint32_t speed = (mode & GPIO_Speed_MASK) >> GPIOCFG_SPEED_POS;
 80023ae:	1dbb      	adds	r3, r7, #6
 80023b0:	881b      	ldrh	r3, [r3, #0]
 80023b2:	121b      	asrs	r3, r3, #8
 80023b4:	001a      	movs	r2, r3
 80023b6:	2303      	movs	r3, #3
 80023b8:	4013      	ands	r3, r2
 80023ba:	617b      	str	r3, [r7, #20]
		MODIFY_REG( gpio->OSPEEDR, pinmask * GPIO_OSPEEDER_OSPEED0, pinmask * speed );
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6899      	ldr	r1, [r3, #8]
 80023c0:	69fa      	ldr	r2, [r7, #28]
 80023c2:	0013      	movs	r3, r2
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	189b      	adds	r3, r3, r2
 80023c8:	43db      	mvns	r3, r3
 80023ca:	400b      	ands	r3, r1
 80023cc:	001a      	movs	r2, r3
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	6979      	ldr	r1, [r7, #20]
 80023d2:	434b      	muls	r3, r1
 80023d4:	431a      	orrs	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	609a      	str	r2, [r3, #8]
		MODIFY_REG( gpio->OTYPER, pins, (mode & GPIO_Flag_OpenDrain) ? pins : 0 );
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	43d2      	mvns	r2, r2
 80023e2:	401a      	ands	r2, r3
 80023e4:	1dbb      	adds	r3, r7, #6
 80023e6:	8819      	ldrh	r1, [r3, #0]
 80023e8:	2380      	movs	r3, #128	; 0x80
 80023ea:	015b      	lsls	r3, r3, #5
 80023ec:	400b      	ands	r3, r1
 80023ee:	d001      	beq.n	80023f4 <GPIO_Init+0x80>
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	e000      	b.n	80023f6 <GPIO_Init+0x82>
 80023f4:	2300      	movs	r3, #0
 80023f6:	431a      	orrs	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	605a      	str	r2, [r3, #4]
	}

	MODIFY_REG( gpio->MODER, pinmask * GPIO_MODER_MODE0, pinmask * dir);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6819      	ldr	r1, [r3, #0]
 8002400:	69fa      	ldr	r2, [r7, #28]
 8002402:	0013      	movs	r3, r2
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	189b      	adds	r3, r3, r2
 8002408:	43db      	mvns	r3, r3
 800240a:	400b      	ands	r3, r1
 800240c:	001a      	movs	r2, r3
 800240e:	231b      	movs	r3, #27
 8002410:	18fb      	adds	r3, r7, r3
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	69f9      	ldr	r1, [r7, #28]
 8002416:	434b      	muls	r3, r1
 8002418:	431a      	orrs	r2, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	601a      	str	r2, [r3, #0]
	uint32_t pull = (mode & GPIO_Pull_MASK) >> GPIOCFG_PULL_POS;
 800241e:	1dbb      	adds	r3, r7, #6
 8002420:	881b      	ldrh	r3, [r3, #0]
 8002422:	111b      	asrs	r3, r3, #4
 8002424:	001a      	movs	r2, r3
 8002426:	2303      	movs	r3, #3
 8002428:	4013      	ands	r3, r2
 800242a:	613b      	str	r3, [r7, #16]
	MODIFY_REG( gpio->PUPDR, pinmask * GPIO_PUPDR_PUPD0, pinmask * pull);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	68d9      	ldr	r1, [r3, #12]
 8002430:	69fa      	ldr	r2, [r7, #28]
 8002432:	0013      	movs	r3, r2
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	189b      	adds	r3, r3, r2
 8002438:	43db      	mvns	r3, r3
 800243a:	400b      	ands	r3, r1
 800243c:	001a      	movs	r2, r3
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	6939      	ldr	r1, [r7, #16]
 8002442:	434b      	muls	r3, r1
 8002444:	431a      	orrs	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	60da      	str	r2, [r3, #12]
}
 800244a:	46c0      	nop			; (mov r8, r8)
 800244c:	46bd      	mov	sp, r7
 800244e:	b008      	add	sp, #32
 8002450:	bd80      	pop	{r7, pc}

08002452 <GPIO_ConfigAlternate>:
/*
 * PRIVATE FUNCTIONS
 */

static void GPIO_ConfigAlternate( GPIO_t * gpio, uint32_t pins, uint32_t af)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b086      	sub	sp, #24
 8002456:	af00      	add	r7, sp, #0
 8002458:	60f8      	str	r0, [r7, #12]
 800245a:	60b9      	str	r1, [r7, #8]
 800245c:	607a      	str	r2, [r7, #4]
	uint32_t pos = 0;
 800245e:	2300      	movs	r3, #0
 8002460:	617b      	str	r3, [r7, #20]
	while (pins)
 8002462:	e026      	b.n	80024b2 <GPIO_ConfigAlternate+0x60>
	{
		if (pins & 0x1)
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	2201      	movs	r2, #1
 8002468:	4013      	ands	r3, r2
 800246a:	d01c      	beq.n	80024a6 <GPIO_ConfigAlternate+0x54>
		{
			uint32_t alt_offset = (pos & 0x7) * 4;
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	2207      	movs	r2, #7
 8002470:	4013      	ands	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	613b      	str	r3, [r7, #16]
			MODIFY_REG(gpio->AFR[pos >> 3], (0xF << alt_offset), (af << alt_offset));
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	08da      	lsrs	r2, r3, #3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	3208      	adds	r2, #8
 800247e:	0092      	lsls	r2, r2, #2
 8002480:	58d3      	ldr	r3, [r2, r3]
 8002482:	210f      	movs	r1, #15
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	4091      	lsls	r1, r2
 8002488:	000a      	movs	r2, r1
 800248a:	43d2      	mvns	r2, r2
 800248c:	401a      	ands	r2, r3
 800248e:	0011      	movs	r1, r2
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	409a      	lsls	r2, r3
 8002496:	0013      	movs	r3, r2
 8002498:	697a      	ldr	r2, [r7, #20]
 800249a:	08d2      	lsrs	r2, r2, #3
 800249c:	4319      	orrs	r1, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	3208      	adds	r2, #8
 80024a2:	0092      	lsls	r2, r2, #2
 80024a4:	50d1      	str	r1, [r2, r3]
		}
		pins >>= 1;
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	085b      	lsrs	r3, r3, #1
 80024aa:	60bb      	str	r3, [r7, #8]
		pos++;
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	3301      	adds	r3, #1
 80024b0:	617b      	str	r3, [r7, #20]
	while (pins)
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1d5      	bne.n	8002464 <GPIO_ConfigAlternate+0x12>
	}
}
 80024b8:	46c0      	nop			; (mov r8, r8)
 80024ba:	46c0      	nop			; (mov r8, r8)
 80024bc:	46bd      	mov	sp, r7
 80024be:	b006      	add	sp, #24
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <GPIO_ConfigInterrupt>:

#ifdef GPIO_USE_IRQS
static void GPIO_ConfigInterrupt( GPIO_t * gpio, int n, GPIO_IT_Dir_t dir)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b088      	sub	sp, #32
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	1dfb      	adds	r3, r7, #7
 80024d0:	701a      	strb	r2, [r3, #0]
	uint32_t pin = 1 << n;
 80024d2:	2201      	movs	r2, #1
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	409a      	lsls	r2, r3
 80024d8:	0013      	movs	r3, r2
 80024da:	61fb      	str	r3, [r7, #28]
	if (dir == GPIO_IT_None)
 80024dc:	1dfb      	adds	r3, r7, #7
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d107      	bne.n	80024f4 <GPIO_ConfigInterrupt+0x30>
	{
		// Disable the EXTI channel.
		CLEAR_BIT(EXTI->IMR, pin);
 80024e4:	4b3b      	ldr	r3, [pc, #236]	; (80025d4 <GPIO_ConfigInterrupt+0x110>)
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	43d9      	mvns	r1, r3
 80024ec:	4b39      	ldr	r3, [pc, #228]	; (80025d4 <GPIO_ConfigInterrupt+0x110>)
 80024ee:	400a      	ands	r2, r1
 80024f0:	601a      	str	r2, [r3, #0]
		// Configure the EXTI channel
		SET_BIT(EXTI->IMR, pin);
		MODIFY_REG(EXTI->RTSR, pin, (dir & GPIO_IT_Rising) ? pin : 0);
		MODIFY_REG(EXTI->FTSR, pin, (dir & GPIO_IT_Falling) ? pin : 0);
	}
}
 80024f2:	e06a      	b.n	80025ca <GPIO_ConfigInterrupt+0x106>
		__HAL_RCC_SYSCFG_CLK_ENABLE();
 80024f4:	4b38      	ldr	r3, [pc, #224]	; (80025d8 <GPIO_ConfigInterrupt+0x114>)
 80024f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024f8:	4b37      	ldr	r3, [pc, #220]	; (80025d8 <GPIO_ConfigInterrupt+0x114>)
 80024fa:	2101      	movs	r1, #1
 80024fc:	430a      	orrs	r2, r1
 80024fe:	635a      	str	r2, [r3, #52]	; 0x34
		uint32_t gpio_index = GPIO_GET_INDEX(gpio);
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	23a0      	movs	r3, #160	; 0xa0
 8002504:	05db      	lsls	r3, r3, #23
 8002506:	429a      	cmp	r2, r3
 8002508:	d019      	beq.n	800253e <GPIO_ConfigInterrupt+0x7a>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	4a33      	ldr	r2, [pc, #204]	; (80025dc <GPIO_ConfigInterrupt+0x118>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d013      	beq.n	800253a <GPIO_ConfigInterrupt+0x76>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	4a32      	ldr	r2, [pc, #200]	; (80025e0 <GPIO_ConfigInterrupt+0x11c>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d00d      	beq.n	8002536 <GPIO_ConfigInterrupt+0x72>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	4a31      	ldr	r2, [pc, #196]	; (80025e4 <GPIO_ConfigInterrupt+0x120>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d007      	beq.n	8002532 <GPIO_ConfigInterrupt+0x6e>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	4a30      	ldr	r2, [pc, #192]	; (80025e8 <GPIO_ConfigInterrupt+0x124>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d101      	bne.n	800252e <GPIO_ConfigInterrupt+0x6a>
 800252a:	2305      	movs	r3, #5
 800252c:	e008      	b.n	8002540 <GPIO_ConfigInterrupt+0x7c>
 800252e:	2306      	movs	r3, #6
 8002530:	e006      	b.n	8002540 <GPIO_ConfigInterrupt+0x7c>
 8002532:	2303      	movs	r3, #3
 8002534:	e004      	b.n	8002540 <GPIO_ConfigInterrupt+0x7c>
 8002536:	2302      	movs	r3, #2
 8002538:	e002      	b.n	8002540 <GPIO_ConfigInterrupt+0x7c>
 800253a:	2301      	movs	r3, #1
 800253c:	e000      	b.n	8002540 <GPIO_ConfigInterrupt+0x7c>
 800253e:	2300      	movs	r3, #0
 8002540:	61bb      	str	r3, [r7, #24]
		uint32_t offset = (n & 0x3) * 4;
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	2203      	movs	r2, #3
 8002546:	4013      	ands	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	617b      	str	r3, [r7, #20]
		MODIFY_REG(SYSCFG->EXTICR[n >> 2], 0xF << offset, gpio_index << offset);
 800254c:	4a27      	ldr	r2, [pc, #156]	; (80025ec <GPIO_ConfigInterrupt+0x128>)
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	109b      	asrs	r3, r3, #2
 8002552:	3302      	adds	r3, #2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	589b      	ldr	r3, [r3, r2]
 8002558:	210f      	movs	r1, #15
 800255a:	697a      	ldr	r2, [r7, #20]
 800255c:	4091      	lsls	r1, r2
 800255e:	000a      	movs	r2, r1
 8002560:	43d2      	mvns	r2, r2
 8002562:	401a      	ands	r2, r3
 8002564:	0011      	movs	r1, r2
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	409a      	lsls	r2, r3
 800256c:	481f      	ldr	r0, [pc, #124]	; (80025ec <GPIO_ConfigInterrupt+0x128>)
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	109b      	asrs	r3, r3, #2
 8002572:	430a      	orrs	r2, r1
 8002574:	3302      	adds	r3, #2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	501a      	str	r2, [r3, r0]
		SET_BIT(EXTI->IMR, pin);
 800257a:	4b16      	ldr	r3, [pc, #88]	; (80025d4 <GPIO_ConfigInterrupt+0x110>)
 800257c:	6819      	ldr	r1, [r3, #0]
 800257e:	4b15      	ldr	r3, [pc, #84]	; (80025d4 <GPIO_ConfigInterrupt+0x110>)
 8002580:	69fa      	ldr	r2, [r7, #28]
 8002582:	430a      	orrs	r2, r1
 8002584:	601a      	str	r2, [r3, #0]
		MODIFY_REG(EXTI->RTSR, pin, (dir & GPIO_IT_Rising) ? pin : 0);
 8002586:	4b13      	ldr	r3, [pc, #76]	; (80025d4 <GPIO_ConfigInterrupt+0x110>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	69fa      	ldr	r2, [r7, #28]
 800258c:	43d2      	mvns	r2, r2
 800258e:	401a      	ands	r2, r3
 8002590:	0011      	movs	r1, r2
 8002592:	1dfb      	adds	r3, r7, #7
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	2201      	movs	r2, #1
 8002598:	4013      	ands	r3, r2
 800259a:	d001      	beq.n	80025a0 <GPIO_ConfigInterrupt+0xdc>
 800259c:	69fa      	ldr	r2, [r7, #28]
 800259e:	e000      	b.n	80025a2 <GPIO_ConfigInterrupt+0xde>
 80025a0:	2200      	movs	r2, #0
 80025a2:	4b0c      	ldr	r3, [pc, #48]	; (80025d4 <GPIO_ConfigInterrupt+0x110>)
 80025a4:	430a      	orrs	r2, r1
 80025a6:	609a      	str	r2, [r3, #8]
		MODIFY_REG(EXTI->FTSR, pin, (dir & GPIO_IT_Falling) ? pin : 0);
 80025a8:	4b0a      	ldr	r3, [pc, #40]	; (80025d4 <GPIO_ConfigInterrupt+0x110>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	69fa      	ldr	r2, [r7, #28]
 80025ae:	43d2      	mvns	r2, r2
 80025b0:	401a      	ands	r2, r3
 80025b2:	0011      	movs	r1, r2
 80025b4:	1dfb      	adds	r3, r7, #7
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2202      	movs	r2, #2
 80025ba:	4013      	ands	r3, r2
 80025bc:	d001      	beq.n	80025c2 <GPIO_ConfigInterrupt+0xfe>
 80025be:	69fa      	ldr	r2, [r7, #28]
 80025c0:	e000      	b.n	80025c4 <GPIO_ConfigInterrupt+0x100>
 80025c2:	2200      	movs	r2, #0
 80025c4:	4b03      	ldr	r3, [pc, #12]	; (80025d4 <GPIO_ConfigInterrupt+0x110>)
 80025c6:	430a      	orrs	r2, r1
 80025c8:	60da      	str	r2, [r3, #12]
}
 80025ca:	46c0      	nop			; (mov r8, r8)
 80025cc:	46bd      	mov	sp, r7
 80025ce:	b008      	add	sp, #32
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	46c0      	nop			; (mov r8, r8)
 80025d4:	40010400 	.word	0x40010400
 80025d8:	40021000 	.word	0x40021000
 80025dc:	50000400 	.word	0x50000400
 80025e0:	50000800 	.word	0x50000800
 80025e4:	50000c00 	.word	0x50000c00
 80025e8:	50001c00 	.word	0x50001c00
 80025ec:	40010000 	.word	0x40010000

080025f0 <GPIO_SWARBitDouble>:
#endif

static uint32_t GPIO_SWARBitDouble(uint32_t s)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
	s = (s & ~0xFF00FF00) | ((s & 0xFF00FF00) << 8);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a14      	ldr	r2, [pc, #80]	; (800264c <GPIO_SWARBitDouble+0x5c>)
 80025fc:	401a      	ands	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	0219      	lsls	r1, r3, #8
 8002602:	23ff      	movs	r3, #255	; 0xff
 8002604:	041b      	lsls	r3, r3, #16
 8002606:	400b      	ands	r3, r1
 8002608:	4313      	orrs	r3, r2
 800260a:	607b      	str	r3, [r7, #4]
	s = (s & ~0xF0F0F0F0) | ((s & 0xF0F0F0F0) << 4);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a10      	ldr	r2, [pc, #64]	; (8002650 <GPIO_SWARBitDouble+0x60>)
 8002610:	401a      	ands	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	011b      	lsls	r3, r3, #4
 8002616:	490f      	ldr	r1, [pc, #60]	; (8002654 <GPIO_SWARBitDouble+0x64>)
 8002618:	400b      	ands	r3, r1
 800261a:	4313      	orrs	r3, r2
 800261c:	607b      	str	r3, [r7, #4]
	s = (s & ~0xCCCCCCCC) | ((s & 0xCCCCCCCC) << 2);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a0d      	ldr	r2, [pc, #52]	; (8002658 <GPIO_SWARBitDouble+0x68>)
 8002622:	401a      	ands	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	490c      	ldr	r1, [pc, #48]	; (800265c <GPIO_SWARBitDouble+0x6c>)
 800262a:	400b      	ands	r3, r1
 800262c:	4313      	orrs	r3, r2
 800262e:	607b      	str	r3, [r7, #4]
	s = (s & ~0xAAAAAAAA) | ((s & 0xAAAAAAAA) << 1);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a0b      	ldr	r2, [pc, #44]	; (8002660 <GPIO_SWARBitDouble+0x70>)
 8002634:	401a      	ands	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	490a      	ldr	r1, [pc, #40]	; (8002664 <GPIO_SWARBitDouble+0x74>)
 800263c:	400b      	ands	r3, r1
 800263e:	4313      	orrs	r3, r2
 8002640:	607b      	str	r3, [r7, #4]
	return s;
 8002642:	687b      	ldr	r3, [r7, #4]
}
 8002644:	0018      	movs	r0, r3
 8002646:	46bd      	mov	sp, r7
 8002648:	b002      	add	sp, #8
 800264a:	bd80      	pop	{r7, pc}
 800264c:	00ff00ff 	.word	0x00ff00ff
 8002650:	0f0f0f0f 	.word	0x0f0f0f0f
 8002654:	0f0f0f00 	.word	0x0f0f0f00
 8002658:	33333333 	.word	0x33333333
 800265c:	33333330 	.word	0x33333330
 8002660:	55555555 	.word	0x55555555
 8002664:	55555554 	.word	0x55555554

08002668 <EXTIx_IRQHandler>:


#ifdef GPIO_USE_IRQS
static inline void EXTIx_IRQHandler(int n)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
	if (__HAL_GPIO_EXTI_GET_IT(1 << n) != RESET)
 8002670:	4b0a      	ldr	r3, [pc, #40]	; (800269c <EXTIx_IRQHandler+0x34>)
 8002672:	695b      	ldr	r3, [r3, #20]
 8002674:	2101      	movs	r1, #1
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	4091      	lsls	r1, r2
 800267a:	000a      	movs	r2, r1
 800267c:	4013      	ands	r3, r2
 800267e:	d009      	beq.n	8002694 <EXTIx_IRQHandler+0x2c>
	{
		__HAL_GPIO_EXTI_CLEAR_IT(1 << n);
 8002680:	2201      	movs	r2, #1
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	409a      	lsls	r2, r3
 8002686:	4b05      	ldr	r3, [pc, #20]	; (800269c <EXTIx_IRQHandler+0x34>)
 8002688:	615a      	str	r2, [r3, #20]
		gCallback[n]();
 800268a:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <EXTIx_IRQHandler+0x38>)
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	0092      	lsls	r2, r2, #2
 8002690:	58d3      	ldr	r3, [r2, r3]
 8002692:	4798      	blx	r3
	}
}
 8002694:	46c0      	nop			; (mov r8, r8)
 8002696:	46bd      	mov	sp, r7
 8002698:	b002      	add	sp, #8
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40010400 	.word	0x40010400
 80026a0:	200001d8 	.word	0x200001d8

080026a4 <EXTIx_EnableIRQn>:

static void EXTIx_EnableIRQn(int n)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
	if (n <= 1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	dc03      	bgt.n	80026ba <EXTIx_EnableIRQn+0x16>
	{
		HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80026b2:	2005      	movs	r0, #5
 80026b4:	f7ff fba9 	bl	8001e0a <HAL_NVIC_EnableIRQ>
	}
	else
	{
		HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
	}
}
 80026b8:	e009      	b.n	80026ce <EXTIx_EnableIRQn+0x2a>
	else if (n <= 3)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b03      	cmp	r3, #3
 80026be:	dc03      	bgt.n	80026c8 <EXTIx_EnableIRQn+0x24>
		HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80026c0:	2006      	movs	r0, #6
 80026c2:	f7ff fba2 	bl	8001e0a <HAL_NVIC_EnableIRQ>
}
 80026c6:	e002      	b.n	80026ce <EXTIx_EnableIRQn+0x2a>
		HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80026c8:	2007      	movs	r0, #7
 80026ca:	f7ff fb9e 	bl	8001e0a <HAL_NVIC_EnableIRQ>
}
 80026ce:	46c0      	nop			; (mov r8, r8)
 80026d0:	46bd      	mov	sp, r7
 80026d2:	b002      	add	sp, #8
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <EXTI4_15_IRQHandler>:
#if    defined(GPIO_IRQ4_ENABLE) || defined(GPIO_IRQ5_ENABLE) || defined(GPIO_IRQ6_ENABLE)   \
    || defined(GPIO_IRQ7_ENABLE) || defined(GPIO_IRQ8_ENABLE) || defined(GPIO_IRQ9_ENABLE)   \
	|| defined(GPIO_IRQ10_ENABLE) || defined(GPIO_IRQ11_ENABLE) || defined(GPIO_IRQ12_ENABLE)\
	|| defined(GPIO_IRQ13_ENABLE) || defined(GPIO_IRQ14_ENABLE) || defined(GPIO_IRQ15_ENABLE)
void EXTI4_15_IRQHandler(void)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	af00      	add	r7, sp, #0
#endif
#ifdef GPIO_IRQ7_ENABLE
	EXTIx_IRQHandler(7);
#endif
#ifdef GPIO_IRQ8_ENABLE
	EXTIx_IRQHandler(8);
 80026da:	2008      	movs	r0, #8
 80026dc:	f7ff ffc4 	bl	8002668 <EXTIx_IRQHandler>
#endif
#ifdef GPIO_IRQ9_ENABLE
	EXTIx_IRQHandler(9);
 80026e0:	2009      	movs	r0, #9
 80026e2:	f7ff ffc1 	bl	8002668 <EXTIx_IRQHandler>
#endif
#ifdef GPIO_IRQ10_ENABLE
	EXTIx_IRQHandler(10);
 80026e6:	200a      	movs	r0, #10
 80026e8:	f7ff ffbe 	bl	8002668 <EXTIx_IRQHandler>
#endif
#ifdef GPIO_IRQ14_ENABLE
	EXTIx_IRQHandler(14);
#endif
#ifdef GPIO_IRQ15_ENABLE
	EXTIx_IRQHandler(15);
 80026ec:	200f      	movs	r0, #15
 80026ee:	f7ff ffbb 	bl	8002668 <EXTIx_IRQHandler>
#endif
}
 80026f2:	46c0      	nop			; (mov r8, r8)
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <CLK_GetPCLKFreq>:

static inline uint32_t CLK_GetPCLKFreq(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
	return CLK_SYSCLK_FREQ;
 80026fc:	4b01      	ldr	r3, [pc, #4]	; (8002704 <CLK_GetPCLKFreq+0xc>)
}
 80026fe:	0018      	movs	r0, r3
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	01e84800 	.word	0x01e84800

08002708 <TIM_Init>:
/*
 * PUBLIC FUNCTIONS
 */

void TIM_Init(TIM_t * tim, uint32_t freq, uint32_t reload)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
	TIMx_Init(tim);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	0018      	movs	r0, r3
 8002718:	f000 f9c6 	bl	8002aa8 <TIMx_Init>

	uint32_t cr1 = tim->Instance->CR1;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	617b      	str	r3, [r7, #20]
	cr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS | TIM_CR1_CKD | TIM_CR1_ARPE);
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	4a0d      	ldr	r2, [pc, #52]	; (800275c <TIM_Init+0x54>)
 8002728:	4013      	ands	r3, r2
 800272a:	617b      	str	r3, [r7, #20]
	cr1 |= TIM_AUTORELOAD_PRELOAD_ENABLE | TIM_CLOCKDIVISION_DIV1 | TIM_COUNTERMODE_UP;
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	2280      	movs	r2, #128	; 0x80
 8002730:	4313      	orrs	r3, r2
 8002732:	617b      	str	r3, [r7, #20]
	tim->Instance->CR1 = cr1;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	697a      	ldr	r2, [r7, #20]
 800273a:	601a      	str	r2, [r3, #0]

	TIM_SetFreq(tim, freq);
 800273c:	68ba      	ldr	r2, [r7, #8]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	0011      	movs	r1, r2
 8002742:	0018      	movs	r0, r3
 8002744:	f000 f80c 	bl	8002760 <TIM_SetFreq>
	TIM_SetReload(tim, reload);
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	0011      	movs	r1, r2
 800274e:	0018      	movs	r0, r3
 8002750:	f000 f81d 	bl	800278e <TIM_SetReload>
}
 8002754:	46c0      	nop			; (mov r8, r8)
 8002756:	46bd      	mov	sp, r7
 8002758:	b006      	add	sp, #24
 800275a:	bd80      	pop	{r7, pc}
 800275c:	fffffc0f 	.word	0xfffffc0f

08002760 <TIM_SetFreq>:

void TIM_SetFreq(TIM_t * tim, uint32_t freq)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
	uint32_t clk = CLK_GetPCLKFreq();
 800276a:	f7ff ffc5 	bl	80026f8 <CLK_GetPCLKFreq>
 800276e:	0003      	movs	r3, r0
 8002770:	60fb      	str	r3, [r7, #12]
	tim->Instance->PSC = (clk / freq) - 1;
 8002772:	6839      	ldr	r1, [r7, #0]
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f7fd fcc7 	bl	8000108 <__udivsi3>
 800277a:	0003      	movs	r3, r0
 800277c:	001a      	movs	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	3a01      	subs	r2, #1
 8002784:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002786:	46c0      	nop			; (mov r8, r8)
 8002788:	46bd      	mov	sp, r7
 800278a:	b004      	add	sp, #16
 800278c:	bd80      	pop	{r7, pc}

0800278e <TIM_SetReload>:

void TIM_SetReload(TIM_t * tim, uint32_t reload)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b082      	sub	sp, #8
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
 8002796:	6039      	str	r1, [r7, #0]
	tim->Instance->ARR = reload;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80027a0:	46c0      	nop			; (mov r8, r8)
 80027a2:	46bd      	mov	sp, r7
 80027a4:	b002      	add	sp, #8
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <TIM_OnReload>:

#ifdef TIM_USE_IRQS
void TIM_OnReload(TIM_t * tim, VoidFunction_t callback)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
	__HAL_TIM_ENABLE_IT(tim, TIM_IT_UPDATE);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68da      	ldr	r2, [r3, #12]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2101      	movs	r1, #1
 80027be:	430a      	orrs	r2, r1
 80027c0:	60da      	str	r2, [r3, #12]
	tim->ReloadCallback = callback;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	605a      	str	r2, [r3, #4]
}
 80027c8:	46c0      	nop			; (mov r8, r8)
 80027ca:	46bd      	mov	sp, r7
 80027cc:	b002      	add	sp, #8
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <TIM_OnPulse>:

void TIM_OnPulse(TIM_t * tim, TIM_Channel_t ch, VoidFunction_t callback)
{
 80027d0:	b590      	push	{r4, r7, lr}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	607a      	str	r2, [r7, #4]
 80027da:	240b      	movs	r4, #11
 80027dc:	193b      	adds	r3, r7, r4
 80027de:	1c0a      	adds	r2, r1, #0
 80027e0:	701a      	strb	r2, [r3, #0]
	// WARN: This will fail horribly if ch is greater than 4.
	TIM_EnableOCx(tim, ch, TIM_OCMODE_ACTIVE);
 80027e2:	193b      	adds	r3, r7, r4
 80027e4:	7819      	ldrb	r1, [r3, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2210      	movs	r2, #16
 80027ea:	0018      	movs	r0, r3
 80027ec:	f000 f8b0 	bl	8002950 <TIM_EnableOCx>
	// Note that the channels IT's are 1 << 1 through 1 << 4
	__HAL_TIM_ENABLE_IT(tim, TIM_IT_CC1 << ch);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68d9      	ldr	r1, [r3, #12]
 80027f6:	0020      	movs	r0, r4
 80027f8:	183b      	adds	r3, r7, r0
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	2202      	movs	r2, #2
 80027fe:	409a      	lsls	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	430a      	orrs	r2, r1
 8002806:	60da      	str	r2, [r3, #12]
	tim->PulseCallback[ch] = callback;
 8002808:	183b      	adds	r3, r7, r0
 800280a:	781a      	ldrb	r2, [r3, #0]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	3202      	adds	r2, #2
 8002810:	0092      	lsls	r2, r2, #2
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	50d1      	str	r1, [r2, r3]
}
 8002816:	46c0      	nop			; (mov r8, r8)
 8002818:	46bd      	mov	sp, r7
 800281a:	b005      	add	sp, #20
 800281c:	bd90      	pop	{r4, r7, pc}

0800281e <TIM_EnablePwm>:
#endif //TIM_USE_IRQS

void TIM_EnablePwm(TIM_t * tim, TIM_Channel_t ch, GPIO_t * gpio, uint32_t pin, uint32_t af)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b084      	sub	sp, #16
 8002822:	af00      	add	r7, sp, #0
 8002824:	60f8      	str	r0, [r7, #12]
 8002826:	607a      	str	r2, [r7, #4]
 8002828:	603b      	str	r3, [r7, #0]
 800282a:	200b      	movs	r0, #11
 800282c:	183b      	adds	r3, r7, r0
 800282e:	1c0a      	adds	r2, r1, #0
 8002830:	701a      	strb	r2, [r3, #0]
	// TIM_CCMR1_OC1PE is the output compare preload
	TIM_EnableOCx(tim, ch, TIM_OCMODE_PWM1 | TIM_CCMR1_OC1PE | TIM_OCFAST_ENABLE);
 8002832:	183b      	adds	r3, r7, r0
 8002834:	7819      	ldrb	r1, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	226c      	movs	r2, #108	; 0x6c
 800283a:	0018      	movs	r0, r3
 800283c:	f000 f888 	bl	8002950 <TIM_EnableOCx>
	GPIO_EnableAlternate(gpio, pin, 0, af);
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	6839      	ldr	r1, [r7, #0]
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	f7ff fd4a 	bl	80022e0 <GPIO_EnableAlternate>
}
 800284c:	46c0      	nop			; (mov r8, r8)
 800284e:	46bd      	mov	sp, r7
 8002850:	b004      	add	sp, #16
 8002852:	bd80      	pop	{r7, pc}

08002854 <TIM_SetPulse>:


void TIM_SetPulse(TIM_t * tim, TIM_Channel_t ch, uint32_t pulse)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	607a      	str	r2, [r7, #4]
 800285e:	200b      	movs	r0, #11
 8002860:	183b      	adds	r3, r7, r0
 8002862:	1c0a      	adds	r2, r1, #0
 8002864:	701a      	strb	r2, [r3, #0]
	switch (ch)
 8002866:	183b      	adds	r3, r7, r0
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	2b03      	cmp	r3, #3
 800286c:	d017      	beq.n	800289e <TIM_SetPulse+0x4a>
 800286e:	dc1b      	bgt.n	80028a8 <TIM_SetPulse+0x54>
 8002870:	2b02      	cmp	r3, #2
 8002872:	d00f      	beq.n	8002894 <TIM_SetPulse+0x40>
 8002874:	dc18      	bgt.n	80028a8 <TIM_SetPulse+0x54>
 8002876:	2b00      	cmp	r3, #0
 8002878:	d002      	beq.n	8002880 <TIM_SetPulse+0x2c>
 800287a:	2b01      	cmp	r3, #1
 800287c:	d005      	beq.n	800288a <TIM_SetPulse+0x36>
	case TIM_CH4:
		tim->Instance->CCR4 = pulse;
		break;
	}

}
 800287e:	e013      	b.n	80028a8 <TIM_SetPulse+0x54>
		tim->Instance->CCR1 = pulse;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8002888:	e00e      	b.n	80028a8 <TIM_SetPulse+0x54>
		tim->Instance->CCR2 = pulse;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8002892:	e009      	b.n	80028a8 <TIM_SetPulse+0x54>
		tim->Instance->CCR3 = pulse;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 800289c:	e004      	b.n	80028a8 <TIM_SetPulse+0x54>
		tim->Instance->CCR4 = pulse;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 80028a6:	46c0      	nop			; (mov r8, r8)
}
 80028a8:	46c0      	nop			; (mov r8, r8)
 80028aa:	46bd      	mov	sp, r7
 80028ac:	b004      	add	sp, #16
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <TIM_Start>:

void TIM_Start(TIM_t * tim)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
	TIM_Reload(tim);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	0018      	movs	r0, r3
 80028bc:	f000 f8d6 	bl	8002a6c <TIM_Reload>
	__HAL_TIM_ENABLE(tim);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2101      	movs	r1, #1
 80028cc:	430a      	orrs	r2, r1
 80028ce:	601a      	str	r2, [r3, #0]
}
 80028d0:	46c0      	nop			; (mov r8, r8)
 80028d2:	46bd      	mov	sp, r7
 80028d4:	b002      	add	sp, #8
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <TIM_Stop>:

void TIM_Stop(TIM_t * tim)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
	__HAL_TIM_DISABLE(tim);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	4a07      	ldr	r2, [pc, #28]	; (8002904 <TIM_Stop+0x2c>)
 80028e8:	4013      	ands	r3, r2
 80028ea:	d107      	bne.n	80028fc <TIM_Stop+0x24>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2101      	movs	r1, #1
 80028f8:	438a      	bics	r2, r1
 80028fa:	601a      	str	r2, [r3, #0]
}
 80028fc:	46c0      	nop			; (mov r8, r8)
 80028fe:	46bd      	mov	sp, r7
 8002900:	b002      	add	sp, #8
 8002902:	bd80      	pop	{r7, pc}
 8002904:	00001111 	.word	0x00001111

08002908 <TIM_Deinit>:

void TIM_Deinit(TIM_t * tim)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_DISABLE(tim);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	4a0d      	ldr	r2, [pc, #52]	; (800294c <TIM_Deinit+0x44>)
 8002918:	4013      	ands	r3, r2
 800291a:	d107      	bne.n	800292c <TIM_Deinit+0x24>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2101      	movs	r1, #1
 8002928:	438a      	bics	r2, r1
 800292a:	601a      	str	r2, [r3, #0]
	__HAL_TIM_DISABLE_IT(tim, TIM_IT_UPDATE | TIM_IT_CC1 | TIM_IT_CC2 | TIM_IT_CC3 | TIM_IT_CC4);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68da      	ldr	r2, [r3, #12]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	211f      	movs	r1, #31
 8002938:	438a      	bics	r2, r1
 800293a:	60da      	str	r2, [r3, #12]
	TIMx_Deinit(tim);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	0018      	movs	r0, r3
 8002940:	f000 f8fc 	bl	8002b3c <TIMx_Deinit>
}
 8002944:	46c0      	nop			; (mov r8, r8)
 8002946:	46bd      	mov	sp, r7
 8002948:	b002      	add	sp, #8
 800294a:	bd80      	pop	{r7, pc}
 800294c:	00001111 	.word	0x00001111

08002950 <TIM_EnableOCx>:
/*
 * PRIVATE FUNCTIONS
 */

static void TIM_EnableOCx(TIM_t * tim, uint32_t oc, uint32_t mode)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
	// Disable the channel during the update.
	TIM_DISABLE_CCx(tim, oc);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6a1a      	ldr	r2, [r3, #32]
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	2101      	movs	r1, #1
 8002968:	4099      	lsls	r1, r3
 800296a:	000b      	movs	r3, r1
 800296c:	43d9      	mvns	r1, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	400a      	ands	r2, r1
 8002974:	621a      	str	r2, [r3, #32]
	switch (oc)
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	2b03      	cmp	r3, #3
 800297a:	d04c      	beq.n	8002a16 <TIM_EnableOCx+0xc6>
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	2b03      	cmp	r3, #3
 8002980:	d85e      	bhi.n	8002a40 <TIM_EnableOCx+0xf0>
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	2b02      	cmp	r3, #2
 8002986:	d032      	beq.n	80029ee <TIM_EnableOCx+0x9e>
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	2b02      	cmp	r3, #2
 800298c:	d858      	bhi.n	8002a40 <TIM_EnableOCx+0xf0>
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d003      	beq.n	800299c <TIM_EnableOCx+0x4c>
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d014      	beq.n	80029c4 <TIM_EnableOCx+0x74>
 800299a:	e051      	b.n	8002a40 <TIM_EnableOCx+0xf0>
	{
	case 0:
		MODIFY_REG(tim->Instance->CCMR1, TIM_CCMRx_MSK, mode);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	227f      	movs	r2, #127	; 0x7f
 80029a4:	4393      	bics	r3, r2
 80029a6:	0019      	movs	r1, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	430a      	orrs	r2, r1
 80029b0:	619a      	str	r2, [r3, #24]
		MODIFY_REG(tim->Instance->CCER, TIM_CCER_CC1P, TIM_OCPOLARITY_HIGH);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	6a1a      	ldr	r2, [r3, #32]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2102      	movs	r1, #2
 80029be:	438a      	bics	r2, r1
 80029c0:	621a      	str	r2, [r3, #32]
		break;
 80029c2:	e03d      	b.n	8002a40 <TIM_EnableOCx+0xf0>
	case 1:
		MODIFY_REG(tim->Instance->CCMR1, TIM_CCMRx_MSK << 8, mode << 8);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	4a25      	ldr	r2, [pc, #148]	; (8002a60 <TIM_EnableOCx+0x110>)
 80029cc:	4013      	ands	r3, r2
 80029ce:	0019      	movs	r1, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	021a      	lsls	r2, r3, #8
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	430a      	orrs	r2, r1
 80029da:	619a      	str	r2, [r3, #24]
		MODIFY_REG(tim->Instance->CCER, TIM_CCER_CC2P, TIM_OCPOLARITY_HIGH << 4);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6a1a      	ldr	r2, [r3, #32]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2120      	movs	r1, #32
 80029e8:	438a      	bics	r2, r1
 80029ea:	621a      	str	r2, [r3, #32]
		break;
 80029ec:	e028      	b.n	8002a40 <TIM_EnableOCx+0xf0>
	case 2:
		MODIFY_REG(tim->Instance->CCMR2, TIM_CCMRx_MSK, mode);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	69db      	ldr	r3, [r3, #28]
 80029f4:	227f      	movs	r2, #127	; 0x7f
 80029f6:	4393      	bics	r3, r2
 80029f8:	0019      	movs	r1, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	430a      	orrs	r2, r1
 8002a02:	61da      	str	r2, [r3, #28]
		MODIFY_REG(tim->Instance->CCER, TIM_CCER_CC3P, TIM_OCPOLARITY_HIGH << 8);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6a1a      	ldr	r2, [r3, #32]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4915      	ldr	r1, [pc, #84]	; (8002a64 <TIM_EnableOCx+0x114>)
 8002a10:	400a      	ands	r2, r1
 8002a12:	621a      	str	r2, [r3, #32]
		break;
 8002a14:	e014      	b.n	8002a40 <TIM_EnableOCx+0xf0>
	case 3:
		MODIFY_REG(tim->Instance->CCMR2, TIM_CCMRx_MSK << 8, mode << 8);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	69db      	ldr	r3, [r3, #28]
 8002a1c:	4a10      	ldr	r2, [pc, #64]	; (8002a60 <TIM_EnableOCx+0x110>)
 8002a1e:	4013      	ands	r3, r2
 8002a20:	0019      	movs	r1, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	021a      	lsls	r2, r3, #8
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	61da      	str	r2, [r3, #28]
		MODIFY_REG(tim->Instance->CCER, TIM_CCER_CC4P, TIM_OCPOLARITY_HIGH << 12);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6a1a      	ldr	r2, [r3, #32]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	490b      	ldr	r1, [pc, #44]	; (8002a68 <TIM_EnableOCx+0x118>)
 8002a3a:	400a      	ands	r2, r1
 8002a3c:	621a      	str	r2, [r3, #32]
		break;
 8002a3e:	46c0      	nop			; (mov r8, r8)
	}
	TIM_ENABLE_CCx(tim, oc);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6a19      	ldr	r1, [r3, #32]
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	409a      	lsls	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	621a      	str	r2, [r3, #32]
	//	MODIFY_REG(tmpcr2, TIM_CR2_OIS1 | TIM_CR2_OIS1N, TIM_OCIDLESTATE_SET | TIM_OCNIDLESTATE_SET);
	//	TIMx->CR2 = tmpcr2;
	//}


}
 8002a56:	46c0      	nop			; (mov r8, r8)
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	b004      	add	sp, #16
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	46c0      	nop			; (mov r8, r8)
 8002a60:	ffff80ff 	.word	0xffff80ff
 8002a64:	fffffdff 	.word	0xfffffdff
 8002a68:	ffffdfff 	.word	0xffffdfff

08002a6c <TIM_Reload>:

static void TIM_Reload(TIM_t * tim)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
	// Disable all timer event sources.
	uint32_t itSources = tim->Instance->DIER;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	60fb      	str	r3, [r7, #12]
	tim->Instance->DIER = 0;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2200      	movs	r2, #0
 8002a82:	60da      	str	r2, [r3, #12]

	// Update the prescalar
	tim->Instance->EGR = TIM_EGR_UG;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	615a      	str	r2, [r3, #20]

	// Clear the event before it occurrs.
	__HAL_TIM_CLEAR_IT(tim, TIM_IT_UPDATE);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2202      	movs	r2, #2
 8002a92:	4252      	negs	r2, r2
 8002a94:	611a      	str	r2, [r3, #16]
	tim->Instance->DIER = itSources;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	60da      	str	r2, [r3, #12]
}
 8002a9e:	46c0      	nop			; (mov r8, r8)
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	b004      	add	sp, #16
 8002aa4:	bd80      	pop	{r7, pc}
	...

08002aa8 <TIMx_Init>:

static void TIMx_Init(TIM_t * tim)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
		__HAL_RCC_TIM1_CLK_ENABLE();
	}

#endif
#ifdef TIM2_ENABLE
	if (tim == TIM_2)
 8002ab0:	4b1d      	ldr	r3, [pc, #116]	; (8002b28 <TIMx_Init+0x80>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d108      	bne.n	8002acc <TIMx_Init+0x24>
	{
		HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002aba:	200f      	movs	r0, #15
 8002abc:	f7ff f9a5 	bl	8001e0a <HAL_NVIC_EnableIRQ>
		__HAL_RCC_TIM2_CLK_ENABLE();
 8002ac0:	4b1a      	ldr	r3, [pc, #104]	; (8002b2c <TIMx_Init+0x84>)
 8002ac2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ac4:	4b19      	ldr	r3, [pc, #100]	; (8002b2c <TIMx_Init+0x84>)
 8002ac6:	2101      	movs	r1, #1
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
		__HAL_RCC_TIM3_CLK_ENABLE();
	}
#endif
#ifdef TIM6_ENABLE
	if (tim == TIM_6)
 8002acc:	4b18      	ldr	r3, [pc, #96]	; (8002b30 <TIMx_Init+0x88>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d108      	bne.n	8002ae8 <TIMx_Init+0x40>
	{
		HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8002ad6:	2011      	movs	r0, #17
 8002ad8:	f7ff f997 	bl	8001e0a <HAL_NVIC_EnableIRQ>
		__HAL_RCC_TIM6_CLK_ENABLE();
 8002adc:	4b13      	ldr	r3, [pc, #76]	; (8002b2c <TIMx_Init+0x84>)
 8002ade:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ae0:	4b12      	ldr	r3, [pc, #72]	; (8002b2c <TIMx_Init+0x84>)
 8002ae2:	2110      	movs	r1, #16
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_NVIC_EnableIRQ(TIM17_IRQn);
		__HAL_RCC_TIM17_CLK_ENABLE();
	}
#endif
#ifdef TIM21_ENABLE
	if (tim == TIM_21)
 8002ae8:	4b12      	ldr	r3, [pc, #72]	; (8002b34 <TIMx_Init+0x8c>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d108      	bne.n	8002b04 <TIMx_Init+0x5c>
	{
		HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8002af2:	2014      	movs	r0, #20
 8002af4:	f7ff f989 	bl	8001e0a <HAL_NVIC_EnableIRQ>
		__HAL_RCC_TIM21_CLK_ENABLE();
 8002af8:	4b0c      	ldr	r3, [pc, #48]	; (8002b2c <TIMx_Init+0x84>)
 8002afa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002afc:	4b0b      	ldr	r3, [pc, #44]	; (8002b2c <TIMx_Init+0x84>)
 8002afe:	2104      	movs	r1, #4
 8002b00:	430a      	orrs	r2, r1
 8002b02:	635a      	str	r2, [r3, #52]	; 0x34
	}
#endif
#ifdef TIM22_ENABLE
	if (tim == TIM_22)
 8002b04:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <TIMx_Init+0x90>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d108      	bne.n	8002b20 <TIMx_Init+0x78>
	{
		HAL_NVIC_EnableIRQ(TIM22_IRQn);
 8002b0e:	2016      	movs	r0, #22
 8002b10:	f7ff f97b 	bl	8001e0a <HAL_NVIC_EnableIRQ>
		__HAL_RCC_TIM22_CLK_ENABLE();
 8002b14:	4b05      	ldr	r3, [pc, #20]	; (8002b2c <TIMx_Init+0x84>)
 8002b16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b18:	4b04      	ldr	r3, [pc, #16]	; (8002b2c <TIMx_Init+0x84>)
 8002b1a:	2120      	movs	r1, #32
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	635a      	str	r2, [r3, #52]	; 0x34
	}
#endif
}
 8002b20:	46c0      	nop			; (mov r8, r8)
 8002b22:	46bd      	mov	sp, r7
 8002b24:	b002      	add	sp, #8
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	20000038 	.word	0x20000038
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	20000054 	.word	0x20000054
 8002b34:	20000070 	.word	0x20000070
 8002b38:	2000008c 	.word	0x2000008c

08002b3c <TIMx_Deinit>:


static void TIMx_Deinit(TIM_t * tim)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
		__HAL_RCC_TIM1_CLK_DISABLE();
	}

#endif
#ifdef TIM2_ENABLE
	if (tim == TIM_2)
 8002b44:	4b1d      	ldr	r3, [pc, #116]	; (8002bbc <TIMx_Deinit+0x80>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d108      	bne.n	8002b60 <TIMx_Deinit+0x24>
	{
		HAL_NVIC_DisableIRQ(TIM2_IRQn);
 8002b4e:	200f      	movs	r0, #15
 8002b50:	f7ff f96b 	bl	8001e2a <HAL_NVIC_DisableIRQ>
		__HAL_RCC_TIM2_CLK_DISABLE();
 8002b54:	4b1a      	ldr	r3, [pc, #104]	; (8002bc0 <TIMx_Deinit+0x84>)
 8002b56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b58:	4b19      	ldr	r3, [pc, #100]	; (8002bc0 <TIMx_Deinit+0x84>)
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	438a      	bics	r2, r1
 8002b5e:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_NVIC_DisableIRQ(TIM3_IRQn);
		__HAL_RCC_TIM3_CLK_DISABLE();
	}
#endif
#ifdef TIM6_ENABLE
	if (tim == TIM_6)
 8002b60:	4b18      	ldr	r3, [pc, #96]	; (8002bc4 <TIMx_Deinit+0x88>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d108      	bne.n	8002b7c <TIMx_Deinit+0x40>
	{
		HAL_NVIC_DisableIRQ(TIM6_IRQn);
 8002b6a:	2011      	movs	r0, #17
 8002b6c:	f7ff f95d 	bl	8001e2a <HAL_NVIC_DisableIRQ>
		__HAL_RCC_TIM6_CLK_DISABLE();
 8002b70:	4b13      	ldr	r3, [pc, #76]	; (8002bc0 <TIMx_Deinit+0x84>)
 8002b72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b74:	4b12      	ldr	r3, [pc, #72]	; (8002bc0 <TIMx_Deinit+0x84>)
 8002b76:	2110      	movs	r1, #16
 8002b78:	438a      	bics	r2, r1
 8002b7a:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_NVIC_DisableIRQ(TIM17_IRQn);
		__HAL_RCC_TIM17_CLK_DISABLE();
	}
#endif
#ifdef TIM21_ENABLE
	if (tim == TIM_21)
 8002b7c:	4b12      	ldr	r3, [pc, #72]	; (8002bc8 <TIMx_Deinit+0x8c>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d108      	bne.n	8002b98 <TIMx_Deinit+0x5c>
	{
		HAL_NVIC_DisableIRQ(TIM21_IRQn);
 8002b86:	2014      	movs	r0, #20
 8002b88:	f7ff f94f 	bl	8001e2a <HAL_NVIC_DisableIRQ>
		__HAL_RCC_TIM21_CLK_DISABLE();
 8002b8c:	4b0c      	ldr	r3, [pc, #48]	; (8002bc0 <TIMx_Deinit+0x84>)
 8002b8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b90:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <TIMx_Deinit+0x84>)
 8002b92:	2104      	movs	r1, #4
 8002b94:	438a      	bics	r2, r1
 8002b96:	635a      	str	r2, [r3, #52]	; 0x34
	}
#endif
#ifdef TIM22_ENABLE
	if (tim == TIM_22)
 8002b98:	4b0c      	ldr	r3, [pc, #48]	; (8002bcc <TIMx_Deinit+0x90>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d108      	bne.n	8002bb4 <TIMx_Deinit+0x78>
	{
		HAL_NVIC_DisableIRQ(TIM22_IRQn);
 8002ba2:	2016      	movs	r0, #22
 8002ba4:	f7ff f941 	bl	8001e2a <HAL_NVIC_DisableIRQ>
		__HAL_RCC_TIM22_CLK_DISABLE();
 8002ba8:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <TIMx_Deinit+0x84>)
 8002baa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bac:	4b04      	ldr	r3, [pc, #16]	; (8002bc0 <TIMx_Deinit+0x84>)
 8002bae:	2120      	movs	r1, #32
 8002bb0:	438a      	bics	r2, r1
 8002bb2:	635a      	str	r2, [r3, #52]	; 0x34
	}
#endif
}
 8002bb4:	46c0      	nop			; (mov r8, r8)
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	b002      	add	sp, #8
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	20000038 	.word	0x20000038
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	20000054 	.word	0x20000054
 8002bc8:	20000070 	.word	0x20000070
 8002bcc:	2000008c 	.word	0x2000008c

08002bd0 <TIM_IRQHandler>:
 */

#ifdef TIM_USE_IRQS

static void TIM_IRQHandler(TIM_t * tim)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
	uint32_t irqs = TIM_GET_IRQ_SOURCES(tim);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	691a      	ldr	r2, [r3, #16]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	4013      	ands	r3, r2
 8002be6:	60fb      	str	r3, [r7, #12]
	if(irqs & TIM_FLAG_CC1)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2202      	movs	r2, #2
 8002bec:	4013      	ands	r3, r2
 8002bee:	d007      	beq.n	8002c00 <TIM_IRQHandler+0x30>
	{
		__HAL_TIM_CLEAR_IT(tim, TIM_IT_CC1);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2203      	movs	r2, #3
 8002bf6:	4252      	negs	r2, r2
 8002bf8:	611a      	str	r2, [r3, #16]
		tim->PulseCallback[0]();
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	4798      	blx	r3
	}
	if(irqs & TIM_FLAG_CC2)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2204      	movs	r2, #4
 8002c04:	4013      	ands	r3, r2
 8002c06:	d007      	beq.n	8002c18 <TIM_IRQHandler+0x48>
	{
		__HAL_TIM_CLEAR_IT(tim, TIM_IT_CC2);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2205      	movs	r2, #5
 8002c0e:	4252      	negs	r2, r2
 8002c10:	611a      	str	r2, [r3, #16]
		tim->PulseCallback[1]();
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	4798      	blx	r3
	}
	if(irqs & TIM_FLAG_CC3)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2208      	movs	r2, #8
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	d007      	beq.n	8002c30 <TIM_IRQHandler+0x60>
	{
		__HAL_TIM_CLEAR_IT(tim, TIM_IT_CC3);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2209      	movs	r2, #9
 8002c26:	4252      	negs	r2, r2
 8002c28:	611a      	str	r2, [r3, #16]
		tim->PulseCallback[2]();
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	4798      	blx	r3
	}
	if(irqs & TIM_FLAG_CC4)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2210      	movs	r2, #16
 8002c34:	4013      	ands	r3, r2
 8002c36:	d007      	beq.n	8002c48 <TIM_IRQHandler+0x78>
	{
		__HAL_TIM_CLEAR_IT(tim, TIM_IT_CC4);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2211      	movs	r2, #17
 8002c3e:	4252      	negs	r2, r2
 8002c40:	611a      	str	r2, [r3, #16]
		tim->PulseCallback[3]();
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	4798      	blx	r3
	}
	if(irqs & TIM_FLAG_UPDATE)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	d007      	beq.n	8002c60 <TIM_IRQHandler+0x90>
	{
		__HAL_TIM_CLEAR_IT(tim, TIM_IT_UPDATE);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2202      	movs	r2, #2
 8002c56:	4252      	negs	r2, r2
 8002c58:	611a      	str	r2, [r3, #16]
		tim->ReloadCallback();
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	4798      	blx	r3
	}
}
 8002c60:	46c0      	nop			; (mov r8, r8)
 8002c62:	46bd      	mov	sp, r7
 8002c64:	b004      	add	sp, #16
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <TIM2_IRQHandler>:
	TIM_IRQHandler(TIM_1);
}
#endif
#ifdef TIM2_ENABLE
void TIM2_IRQHandler(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
	TIM_IRQHandler(TIM_2);
 8002c6c:	4b03      	ldr	r3, [pc, #12]	; (8002c7c <TIM2_IRQHandler+0x14>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	0018      	movs	r0, r3
 8002c72:	f7ff ffad 	bl	8002bd0 <TIM_IRQHandler>
}
 8002c76:	46c0      	nop			; (mov r8, r8)
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	20000038 	.word	0x20000038

08002c80 <TIM6_IRQHandler>:
	TIM_IRQHandler(TIM_3);
}
#endif
#ifdef TIM6_ENABLE
void TIM6_IRQHandler(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
	TIM_IRQHandler(TIM_6);
 8002c84:	4b03      	ldr	r3, [pc, #12]	; (8002c94 <TIM6_IRQHandler+0x14>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	0018      	movs	r0, r3
 8002c8a:	f7ff ffa1 	bl	8002bd0 <TIM_IRQHandler>
}
 8002c8e:	46c0      	nop			; (mov r8, r8)
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	20000054 	.word	0x20000054

08002c98 <TIM21_IRQHandler>:
	TIM_IRQHandler(TIM_17);
}
#endif
#ifdef TIM21_ENABLE
void TIM21_IRQHandler(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
	TIM_IRQHandler(TIM_21);
 8002c9c:	4b03      	ldr	r3, [pc, #12]	; (8002cac <TIM21_IRQHandler+0x14>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	f7ff ff95 	bl	8002bd0 <TIM_IRQHandler>
}
 8002ca6:	46c0      	nop			; (mov r8, r8)
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	20000070 	.word	0x20000070

08002cb0 <TIM22_IRQHandler>:
#endif
#ifdef TIM22_ENABLE
void TIM22_IRQHandler(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
	TIM_IRQHandler(TIM_22);
 8002cb4:	4b03      	ldr	r3, [pc, #12]	; (8002cc4 <TIM22_IRQHandler+0x14>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	0018      	movs	r0, r3
 8002cba:	f7ff ff89 	bl	8002bd0 <TIM_IRQHandler>
}
 8002cbe:	46c0      	nop			; (mov r8, r8)
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	2000008c 	.word	0x2000008c

08002cc8 <UART_IRQHandler>:
 * INTERRUPT ROUTINES
 */


void UART_IRQHandler(UART_t *uart)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
	uint32_t flags = uart->Instance->ISR;
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	2388      	movs	r3, #136	; 0x88
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	58d3      	ldr	r3, [r2, r3]
 8002cd8:	69db      	ldr	r3, [r3, #28]
 8002cda:	60fb      	str	r3, [r7, #12]

	if (flags & USART_ISR_RXNE)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2220      	movs	r2, #32
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	d031      	beq.n	8002d48 <UART_IRQHandler+0x80>
	{
		// New RX data. Put it in the RX buffer.
		uart->rx.buffer[uart->rx.head] = uart->Instance->RDR;
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	2388      	movs	r3, #136	; 0x88
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	58d3      	ldr	r3, [r2, r3]
 8002cec:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	2384      	movs	r3, #132	; 0x84
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	58d3      	ldr	r3, [r2, r3]
 8002cf6:	b2c8      	uxtb	r0, r1
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	2188      	movs	r1, #136	; 0x88
 8002cfc:	18d3      	adds	r3, r2, r3
 8002cfe:	185b      	adds	r3, r3, r1
 8002d00:	1c02      	adds	r2, r0, #0
 8002d02:	701a      	strb	r2, [r3, #0]
		uart->rx.head = UART_BFR_WRAP(uart->rx.head + 1);
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	2384      	movs	r3, #132	; 0x84
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	58d3      	ldr	r3, [r2, r3]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	227f      	movs	r2, #127	; 0x7f
 8002d10:	4013      	ands	r3, r2
 8002d12:	0019      	movs	r1, r3
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	2384      	movs	r3, #132	; 0x84
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	50d1      	str	r1, [r2, r3]
		if (uart->rx.head == uart->rx.tail) {
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	2384      	movs	r3, #132	; 0x84
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	58d2      	ldr	r2, [r2, r3]
 8002d24:	6879      	ldr	r1, [r7, #4]
 8002d26:	2386      	movs	r3, #134	; 0x86
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	58cb      	ldr	r3, [r1, r3]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d10b      	bne.n	8002d48 <UART_IRQHandler+0x80>
			// The head just caught up with the tail. Uh oh. Increment the tail.
			// Note, this causes flaming huge issues.
			uart->rx.tail = UART_BFR_WRAP(uart->rx.tail + 1);
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	2386      	movs	r3, #134	; 0x86
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	58d3      	ldr	r3, [r2, r3]
 8002d38:	3301      	adds	r3, #1
 8002d3a:	227f      	movs	r2, #127	; 0x7f
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	0019      	movs	r1, r3
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	2386      	movs	r3, #134	; 0x86
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	50d1      	str	r1, [r2, r3]
		}
	}

	if (flags & USART_ISR_TXE)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2280      	movs	r2, #128	; 0x80
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	d028      	beq.n	8002da2 <UART_IRQHandler+0xda>
	{
		// No byte being transmitted..
		if (uart->tx.head != uart->tx.tail)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2280      	movs	r2, #128	; 0x80
 8002d54:	589a      	ldr	r2, [r3, r2]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2184      	movs	r1, #132	; 0x84
 8002d5a:	585b      	ldr	r3, [r3, r1]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d014      	beq.n	8002d8a <UART_IRQHandler+0xc2>
		{
			// Send a byte out.
			uart->Instance->TDR = uart->tx.buffer[uart->tx.tail];
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2284      	movs	r2, #132	; 0x84
 8002d64:	589b      	ldr	r3, [r3, r2]
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	5cd1      	ldrb	r1, [r2, r3]
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	2388      	movs	r3, #136	; 0x88
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	58d3      	ldr	r3, [r2, r3]
 8002d72:	000a      	movs	r2, r1
 8002d74:	629a      	str	r2, [r3, #40]	; 0x28
			uart->tx.tail = UART_BFR_WRAP(uart->tx.tail + 1);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2284      	movs	r2, #132	; 0x84
 8002d7a:	589b      	ldr	r3, [r3, r2]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	227f      	movs	r2, #127	; 0x7f
 8002d80:	401a      	ands	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2184      	movs	r1, #132	; 0x84
 8002d86:	505a      	str	r2, [r3, r1]
 8002d88:	e00b      	b.n	8002da2 <UART_IRQHandler+0xda>
		}
		else
		{
			// Tail caught up with head: no bytes remain.
			// Disable the TX IRQ.
			__UART_TX_DISABLE(uart);
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	2388      	movs	r3, #136	; 0x88
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	58d3      	ldr	r3, [r2, r3]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	6879      	ldr	r1, [r7, #4]
 8002d96:	2388      	movs	r3, #136	; 0x88
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	58cb      	ldr	r3, [r1, r3]
 8002d9c:	2180      	movs	r1, #128	; 0x80
 8002d9e:	438a      	bics	r2, r1
 8002da0:	601a      	str	r2, [r3, #0]
		}
	}

	if (flags & (USART_ISR_ORE | USART_ISR_PE | USART_ISR_NE | USART_ISR_FE))
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	220f      	movs	r2, #15
 8002da6:	4013      	ands	r3, r2
 8002da8:	d00b      	beq.n	8002dc2 <UART_IRQHandler+0xfa>
	{
		__UART_CLEAR_FLAGS(uart, (UART_CLEAR_PEF | UART_CLEAR_FEF | UART_CLEAR_NEF | UART_CLEAR_OREF));
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	2388      	movs	r3, #136	; 0x88
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	58d3      	ldr	r3, [r2, r3]
 8002db2:	6a1a      	ldr	r2, [r3, #32]
 8002db4:	6879      	ldr	r1, [r7, #4]
 8002db6:	2388      	movs	r3, #136	; 0x88
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	58cb      	ldr	r3, [r1, r3]
 8002dbc:	210f      	movs	r1, #15
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	621a      	str	r2, [r3, #32]
	}
}
 8002dc2:	46c0      	nop			; (mov r8, r8)
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	b004      	add	sp, #16
 8002dc8:	bd80      	pop	{r7, pc}
	...

08002dcc <USART1_IRQHandler>:
	UART_IRQHandler(UART_LP);
}
#endif
#ifdef UART1_GPIO
void USART1_IRQHandler(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
	UART_IRQHandler(UART_1);
 8002dd0:	4b03      	ldr	r3, [pc, #12]	; (8002de0 <USART1_IRQHandler+0x14>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	f7ff ff77 	bl	8002cc8 <UART_IRQHandler>
}
 8002dda:	46c0      	nop			; (mov r8, r8)
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	200001a4 	.word	0x200001a4

08002de4 <__libc_init_array>:
 8002de4:	b570      	push	{r4, r5, r6, lr}
 8002de6:	2600      	movs	r6, #0
 8002de8:	4d0c      	ldr	r5, [pc, #48]	; (8002e1c <__libc_init_array+0x38>)
 8002dea:	4c0d      	ldr	r4, [pc, #52]	; (8002e20 <__libc_init_array+0x3c>)
 8002dec:	1b64      	subs	r4, r4, r5
 8002dee:	10a4      	asrs	r4, r4, #2
 8002df0:	42a6      	cmp	r6, r4
 8002df2:	d109      	bne.n	8002e08 <__libc_init_array+0x24>
 8002df4:	2600      	movs	r6, #0
 8002df6:	f000 f823 	bl	8002e40 <_init>
 8002dfa:	4d0a      	ldr	r5, [pc, #40]	; (8002e24 <__libc_init_array+0x40>)
 8002dfc:	4c0a      	ldr	r4, [pc, #40]	; (8002e28 <__libc_init_array+0x44>)
 8002dfe:	1b64      	subs	r4, r4, r5
 8002e00:	10a4      	asrs	r4, r4, #2
 8002e02:	42a6      	cmp	r6, r4
 8002e04:	d105      	bne.n	8002e12 <__libc_init_array+0x2e>
 8002e06:	bd70      	pop	{r4, r5, r6, pc}
 8002e08:	00b3      	lsls	r3, r6, #2
 8002e0a:	58eb      	ldr	r3, [r5, r3]
 8002e0c:	4798      	blx	r3
 8002e0e:	3601      	adds	r6, #1
 8002e10:	e7ee      	b.n	8002df0 <__libc_init_array+0xc>
 8002e12:	00b3      	lsls	r3, r6, #2
 8002e14:	58eb      	ldr	r3, [r5, r3]
 8002e16:	4798      	blx	r3
 8002e18:	3601      	adds	r6, #1
 8002e1a:	e7f2      	b.n	8002e02 <__libc_init_array+0x1e>
 8002e1c:	08002e58 	.word	0x08002e58
 8002e20:	08002e58 	.word	0x08002e58
 8002e24:	08002e58 	.word	0x08002e58
 8002e28:	08002e5c 	.word	0x08002e5c

08002e2c <memcpy>:
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	b510      	push	{r4, lr}
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d100      	bne.n	8002e36 <memcpy+0xa>
 8002e34:	bd10      	pop	{r4, pc}
 8002e36:	5ccc      	ldrb	r4, [r1, r3]
 8002e38:	54c4      	strb	r4, [r0, r3]
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	e7f8      	b.n	8002e30 <memcpy+0x4>
	...

08002e40 <_init>:
 8002e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e42:	46c0      	nop			; (mov r8, r8)
 8002e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e46:	bc08      	pop	{r3}
 8002e48:	469e      	mov	lr, r3
 8002e4a:	4770      	bx	lr

08002e4c <_fini>:
 8002e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e4e:	46c0      	nop			; (mov r8, r8)
 8002e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e52:	bc08      	pop	{r3}
 8002e54:	469e      	mov	lr, r3
 8002e56:	4770      	bx	lr
