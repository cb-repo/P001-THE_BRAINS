
THE_BRAINS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050e8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080051a8  080051a8  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080051a8  080051a8  00020190  2**0
                  CONTENTS
  4 .ARM          00000008  080051a8  080051a8  000151a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051b0  080051b0  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051b0  080051b0  000151b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051b4  080051b4  000151b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  080051b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  20000190  08005348  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000410  08005348  00020410  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000806d  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029ad  00000000  00000000  00028225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000910  00000000  00000000  0002abd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000828  00000000  00000000  0002b4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016508  00000000  00000000  0002bd10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ea8b  00000000  00000000  00042218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f5a5  00000000  00000000  00050ca3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d0248  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d04  00000000  00000000  000d0298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000190 	.word	0x20000190
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005190 	.word	0x08005190

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000194 	.word	0x20000194
 8000104:	08005190 	.word	0x08005190

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	0008      	movs	r0, r1
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	; (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f806 	bl	8000434 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__udivmoddi4>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	4657      	mov	r7, sl
 8000438:	464e      	mov	r6, r9
 800043a:	4645      	mov	r5, r8
 800043c:	46de      	mov	lr, fp
 800043e:	b5e0      	push	{r5, r6, r7, lr}
 8000440:	0004      	movs	r4, r0
 8000442:	000d      	movs	r5, r1
 8000444:	4692      	mov	sl, r2
 8000446:	4699      	mov	r9, r3
 8000448:	b083      	sub	sp, #12
 800044a:	428b      	cmp	r3, r1
 800044c:	d830      	bhi.n	80004b0 <__udivmoddi4+0x7c>
 800044e:	d02d      	beq.n	80004ac <__udivmoddi4+0x78>
 8000450:	4649      	mov	r1, r9
 8000452:	4650      	mov	r0, sl
 8000454:	f000 f8ba 	bl	80005cc <__clzdi2>
 8000458:	0029      	movs	r1, r5
 800045a:	0006      	movs	r6, r0
 800045c:	0020      	movs	r0, r4
 800045e:	f000 f8b5 	bl	80005cc <__clzdi2>
 8000462:	1a33      	subs	r3, r6, r0
 8000464:	4698      	mov	r8, r3
 8000466:	3b20      	subs	r3, #32
 8000468:	469b      	mov	fp, r3
 800046a:	d433      	bmi.n	80004d4 <__udivmoddi4+0xa0>
 800046c:	465a      	mov	r2, fp
 800046e:	4653      	mov	r3, sl
 8000470:	4093      	lsls	r3, r2
 8000472:	4642      	mov	r2, r8
 8000474:	001f      	movs	r7, r3
 8000476:	4653      	mov	r3, sl
 8000478:	4093      	lsls	r3, r2
 800047a:	001e      	movs	r6, r3
 800047c:	42af      	cmp	r7, r5
 800047e:	d83a      	bhi.n	80004f6 <__udivmoddi4+0xc2>
 8000480:	42af      	cmp	r7, r5
 8000482:	d100      	bne.n	8000486 <__udivmoddi4+0x52>
 8000484:	e078      	b.n	8000578 <__udivmoddi4+0x144>
 8000486:	465b      	mov	r3, fp
 8000488:	1ba4      	subs	r4, r4, r6
 800048a:	41bd      	sbcs	r5, r7
 800048c:	2b00      	cmp	r3, #0
 800048e:	da00      	bge.n	8000492 <__udivmoddi4+0x5e>
 8000490:	e075      	b.n	800057e <__udivmoddi4+0x14a>
 8000492:	2200      	movs	r2, #0
 8000494:	2300      	movs	r3, #0
 8000496:	9200      	str	r2, [sp, #0]
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	465a      	mov	r2, fp
 800049e:	4093      	lsls	r3, r2
 80004a0:	9301      	str	r3, [sp, #4]
 80004a2:	2301      	movs	r3, #1
 80004a4:	4642      	mov	r2, r8
 80004a6:	4093      	lsls	r3, r2
 80004a8:	9300      	str	r3, [sp, #0]
 80004aa:	e028      	b.n	80004fe <__udivmoddi4+0xca>
 80004ac:	4282      	cmp	r2, r0
 80004ae:	d9cf      	bls.n	8000450 <__udivmoddi4+0x1c>
 80004b0:	2200      	movs	r2, #0
 80004b2:	2300      	movs	r3, #0
 80004b4:	9200      	str	r2, [sp, #0]
 80004b6:	9301      	str	r3, [sp, #4]
 80004b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <__udivmoddi4+0x8e>
 80004be:	601c      	str	r4, [r3, #0]
 80004c0:	605d      	str	r5, [r3, #4]
 80004c2:	9800      	ldr	r0, [sp, #0]
 80004c4:	9901      	ldr	r1, [sp, #4]
 80004c6:	b003      	add	sp, #12
 80004c8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ca:	46bb      	mov	fp, r7
 80004cc:	46b2      	mov	sl, r6
 80004ce:	46a9      	mov	r9, r5
 80004d0:	46a0      	mov	r8, r4
 80004d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d4:	4642      	mov	r2, r8
 80004d6:	2320      	movs	r3, #32
 80004d8:	1a9b      	subs	r3, r3, r2
 80004da:	4652      	mov	r2, sl
 80004dc:	40da      	lsrs	r2, r3
 80004de:	4641      	mov	r1, r8
 80004e0:	0013      	movs	r3, r2
 80004e2:	464a      	mov	r2, r9
 80004e4:	408a      	lsls	r2, r1
 80004e6:	0017      	movs	r7, r2
 80004e8:	4642      	mov	r2, r8
 80004ea:	431f      	orrs	r7, r3
 80004ec:	4653      	mov	r3, sl
 80004ee:	4093      	lsls	r3, r2
 80004f0:	001e      	movs	r6, r3
 80004f2:	42af      	cmp	r7, r5
 80004f4:	d9c4      	bls.n	8000480 <__udivmoddi4+0x4c>
 80004f6:	2200      	movs	r2, #0
 80004f8:	2300      	movs	r3, #0
 80004fa:	9200      	str	r2, [sp, #0]
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	4643      	mov	r3, r8
 8000500:	2b00      	cmp	r3, #0
 8000502:	d0d9      	beq.n	80004b8 <__udivmoddi4+0x84>
 8000504:	07fb      	lsls	r3, r7, #31
 8000506:	0872      	lsrs	r2, r6, #1
 8000508:	431a      	orrs	r2, r3
 800050a:	4646      	mov	r6, r8
 800050c:	087b      	lsrs	r3, r7, #1
 800050e:	e00e      	b.n	800052e <__udivmoddi4+0xfa>
 8000510:	42ab      	cmp	r3, r5
 8000512:	d101      	bne.n	8000518 <__udivmoddi4+0xe4>
 8000514:	42a2      	cmp	r2, r4
 8000516:	d80c      	bhi.n	8000532 <__udivmoddi4+0xfe>
 8000518:	1aa4      	subs	r4, r4, r2
 800051a:	419d      	sbcs	r5, r3
 800051c:	2001      	movs	r0, #1
 800051e:	1924      	adds	r4, r4, r4
 8000520:	416d      	adcs	r5, r5
 8000522:	2100      	movs	r1, #0
 8000524:	3e01      	subs	r6, #1
 8000526:	1824      	adds	r4, r4, r0
 8000528:	414d      	adcs	r5, r1
 800052a:	2e00      	cmp	r6, #0
 800052c:	d006      	beq.n	800053c <__udivmoddi4+0x108>
 800052e:	42ab      	cmp	r3, r5
 8000530:	d9ee      	bls.n	8000510 <__udivmoddi4+0xdc>
 8000532:	3e01      	subs	r6, #1
 8000534:	1924      	adds	r4, r4, r4
 8000536:	416d      	adcs	r5, r5
 8000538:	2e00      	cmp	r6, #0
 800053a:	d1f8      	bne.n	800052e <__udivmoddi4+0xfa>
 800053c:	9800      	ldr	r0, [sp, #0]
 800053e:	9901      	ldr	r1, [sp, #4]
 8000540:	465b      	mov	r3, fp
 8000542:	1900      	adds	r0, r0, r4
 8000544:	4169      	adcs	r1, r5
 8000546:	2b00      	cmp	r3, #0
 8000548:	db24      	blt.n	8000594 <__udivmoddi4+0x160>
 800054a:	002b      	movs	r3, r5
 800054c:	465a      	mov	r2, fp
 800054e:	4644      	mov	r4, r8
 8000550:	40d3      	lsrs	r3, r2
 8000552:	002a      	movs	r2, r5
 8000554:	40e2      	lsrs	r2, r4
 8000556:	001c      	movs	r4, r3
 8000558:	465b      	mov	r3, fp
 800055a:	0015      	movs	r5, r2
 800055c:	2b00      	cmp	r3, #0
 800055e:	db2a      	blt.n	80005b6 <__udivmoddi4+0x182>
 8000560:	0026      	movs	r6, r4
 8000562:	409e      	lsls	r6, r3
 8000564:	0033      	movs	r3, r6
 8000566:	0026      	movs	r6, r4
 8000568:	4647      	mov	r7, r8
 800056a:	40be      	lsls	r6, r7
 800056c:	0032      	movs	r2, r6
 800056e:	1a80      	subs	r0, r0, r2
 8000570:	4199      	sbcs	r1, r3
 8000572:	9000      	str	r0, [sp, #0]
 8000574:	9101      	str	r1, [sp, #4]
 8000576:	e79f      	b.n	80004b8 <__udivmoddi4+0x84>
 8000578:	42a3      	cmp	r3, r4
 800057a:	d8bc      	bhi.n	80004f6 <__udivmoddi4+0xc2>
 800057c:	e783      	b.n	8000486 <__udivmoddi4+0x52>
 800057e:	4642      	mov	r2, r8
 8000580:	2320      	movs	r3, #32
 8000582:	2100      	movs	r1, #0
 8000584:	1a9b      	subs	r3, r3, r2
 8000586:	2200      	movs	r2, #0
 8000588:	9100      	str	r1, [sp, #0]
 800058a:	9201      	str	r2, [sp, #4]
 800058c:	2201      	movs	r2, #1
 800058e:	40da      	lsrs	r2, r3
 8000590:	9201      	str	r2, [sp, #4]
 8000592:	e786      	b.n	80004a2 <__udivmoddi4+0x6e>
 8000594:	4642      	mov	r2, r8
 8000596:	2320      	movs	r3, #32
 8000598:	1a9b      	subs	r3, r3, r2
 800059a:	002a      	movs	r2, r5
 800059c:	4646      	mov	r6, r8
 800059e:	409a      	lsls	r2, r3
 80005a0:	0023      	movs	r3, r4
 80005a2:	40f3      	lsrs	r3, r6
 80005a4:	4644      	mov	r4, r8
 80005a6:	4313      	orrs	r3, r2
 80005a8:	002a      	movs	r2, r5
 80005aa:	40e2      	lsrs	r2, r4
 80005ac:	001c      	movs	r4, r3
 80005ae:	465b      	mov	r3, fp
 80005b0:	0015      	movs	r5, r2
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	dad4      	bge.n	8000560 <__udivmoddi4+0x12c>
 80005b6:	4642      	mov	r2, r8
 80005b8:	002f      	movs	r7, r5
 80005ba:	2320      	movs	r3, #32
 80005bc:	0026      	movs	r6, r4
 80005be:	4097      	lsls	r7, r2
 80005c0:	1a9b      	subs	r3, r3, r2
 80005c2:	40de      	lsrs	r6, r3
 80005c4:	003b      	movs	r3, r7
 80005c6:	4333      	orrs	r3, r6
 80005c8:	e7cd      	b.n	8000566 <__udivmoddi4+0x132>
 80005ca:	46c0      	nop			; (mov r8, r8)

080005cc <__clzdi2>:
 80005cc:	b510      	push	{r4, lr}
 80005ce:	2900      	cmp	r1, #0
 80005d0:	d103      	bne.n	80005da <__clzdi2+0xe>
 80005d2:	f000 f807 	bl	80005e4 <__clzsi2>
 80005d6:	3020      	adds	r0, #32
 80005d8:	e002      	b.n	80005e0 <__clzdi2+0x14>
 80005da:	0008      	movs	r0, r1
 80005dc:	f000 f802 	bl	80005e4 <__clzsi2>
 80005e0:	bd10      	pop	{r4, pc}
 80005e2:	46c0      	nop			; (mov r8, r8)

080005e4 <__clzsi2>:
 80005e4:	211c      	movs	r1, #28
 80005e6:	2301      	movs	r3, #1
 80005e8:	041b      	lsls	r3, r3, #16
 80005ea:	4298      	cmp	r0, r3
 80005ec:	d301      	bcc.n	80005f2 <__clzsi2+0xe>
 80005ee:	0c00      	lsrs	r0, r0, #16
 80005f0:	3910      	subs	r1, #16
 80005f2:	0a1b      	lsrs	r3, r3, #8
 80005f4:	4298      	cmp	r0, r3
 80005f6:	d301      	bcc.n	80005fc <__clzsi2+0x18>
 80005f8:	0a00      	lsrs	r0, r0, #8
 80005fa:	3908      	subs	r1, #8
 80005fc:	091b      	lsrs	r3, r3, #4
 80005fe:	4298      	cmp	r0, r3
 8000600:	d301      	bcc.n	8000606 <__clzsi2+0x22>
 8000602:	0900      	lsrs	r0, r0, #4
 8000604:	3904      	subs	r1, #4
 8000606:	a202      	add	r2, pc, #8	; (adr r2, 8000610 <__clzsi2+0x2c>)
 8000608:	5c10      	ldrb	r0, [r2, r0]
 800060a:	1840      	adds	r0, r0, r1
 800060c:	4770      	bx	lr
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	02020304 	.word	0x02020304
 8000614:	01010101 	.word	0x01010101
	...

08000620 <GPIO_EnableOutput>:
{
	GPIO_Init(gpio, pin, GPIO_Mode_Analog);
}

static inline void GPIO_EnableOutput(GPIO_t * gpio, uint32_t pin, GPIO_State_t state)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	60f8      	str	r0, [r7, #12]
 8000628:	60b9      	str	r1, [r7, #8]
 800062a:	1dfb      	adds	r3, r7, #7
 800062c:	701a      	strb	r2, [r3, #0]
	GPIO_Write(gpio, pin, state);
 800062e:	1dfb      	adds	r3, r7, #7
 8000630:	781a      	ldrb	r2, [r3, #0]
 8000632:	68b9      	ldr	r1, [r7, #8]
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	0018      	movs	r0, r3
 8000638:	f003 fdc4 	bl	80041c4 <GPIO_Write>
	GPIO_Init(gpio, pin, GPIO_Mode_Output);
 800063c:	68b9      	ldr	r1, [r7, #8]
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	2201      	movs	r2, #1
 8000642:	0018      	movs	r0, r3
 8000644:	f003 fe24 	bl	8004290 <GPIO_Init>
}
 8000648:	46c0      	nop			; (mov r8, r8)
 800064a:	46bd      	mov	sp, r7
 800064c:	b004      	add	sp, #16
 800064e:	bd80      	pop	{r7, pc}

08000650 <GPIO_Read>:
{
	gpio->BRR = (uint32_t)pin;
}

static inline GPIO_State_t GPIO_Read(GPIO_t * gpio, uint32_t pin)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	6039      	str	r1, [r7, #0]
	return ((gpio->IDR & pin) > 0);
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	691b      	ldr	r3, [r3, #16]
 800065e:	683a      	ldr	r2, [r7, #0]
 8000660:	4013      	ands	r3, r2
 8000662:	1e5a      	subs	r2, r3, #1
 8000664:	4193      	sbcs	r3, r2
 8000666:	b2db      	uxtb	r3, r3
}
 8000668:	0018      	movs	r0, r3
 800066a:	46bd      	mov	sp, r7
 800066c:	b002      	add	sp, #8
 800066e:	bd80      	pop	{r7, pc}

08000670 <CORE_GetTick>:
/*
 * INLINE FUNCTION DEFINITIONS
 */

static inline uint32_t CORE_GetTick(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
	return gTicks;
 8000674:	4b02      	ldr	r3, [pc, #8]	; (8000680 <CORE_GetTick+0x10>)
 8000676:	681b      	ldr	r3, [r3, #0]
}
 8000678:	0018      	movs	r0, r3
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	200003cc 	.word	0x200003cc

08000684 <LED_Init>:
 * PUBLIC FUNCTIONS
 */


void LED_Init (void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	GPIO_EnableOutput(LED_STATUS_GPIO, LED_STATUS_PIN, false);
 8000688:	4b07      	ldr	r3, [pc, #28]	; (80006a8 <LED_Init+0x24>)
 800068a:	2200      	movs	r2, #0
 800068c:	2102      	movs	r1, #2
 800068e:	0018      	movs	r0, r3
 8000690:	f7ff ffc6 	bl	8000620 <GPIO_EnableOutput>
	GPIO_EnableOutput(LED_FAULT_GPIO, LED_FAULT_PIN, false);
 8000694:	4b04      	ldr	r3, [pc, #16]	; (80006a8 <LED_Init+0x24>)
 8000696:	2200      	movs	r2, #0
 8000698:	2101      	movs	r1, #1
 800069a:	0018      	movs	r0, r3
 800069c:	f7ff ffc0 	bl	8000620 <GPIO_EnableOutput>
}
 80006a0:	46c0      	nop			; (mov r8, r8)
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	50000400 	.word	0x50000400

080006ac <LED_GreenState>:

bool LED_GreenState (void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
	return GPIO_Read(LED_STATUS_GPIO, LED_STATUS_PIN);
 80006b0:	4b04      	ldr	r3, [pc, #16]	; (80006c4 <LED_GreenState+0x18>)
 80006b2:	2102      	movs	r1, #2
 80006b4:	0018      	movs	r0, r3
 80006b6:	f7ff ffcb 	bl	8000650 <GPIO_Read>
 80006ba:	0003      	movs	r3, r0
}
 80006bc:	0018      	movs	r0, r3
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	50000400 	.word	0x50000400

080006c8 <LED_GreenON>:
{
	return GPIO_Read(LED_FAULT_GPIO, LED_FAULT_PIN);
}

void LED_GreenON (void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
	GPIO_Write(LED_STATUS_GPIO, LED_STATUS_PIN, true);
 80006cc:	4b04      	ldr	r3, [pc, #16]	; (80006e0 <LED_GreenON+0x18>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	2102      	movs	r1, #2
 80006d2:	0018      	movs	r0, r3
 80006d4:	f003 fd76 	bl	80041c4 <GPIO_Write>
}
 80006d8:	46c0      	nop			; (mov r8, r8)
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	50000400 	.word	0x50000400

080006e4 <LED_RedON>:

void LED_RedON (void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
	GPIO_Write(LED_FAULT_GPIO, LED_FAULT_PIN, true);
 80006e8:	4b04      	ldr	r3, [pc, #16]	; (80006fc <LED_RedON+0x18>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	2101      	movs	r1, #1
 80006ee:	0018      	movs	r0, r3
 80006f0:	f003 fd68 	bl	80041c4 <GPIO_Write>
}
 80006f4:	46c0      	nop			; (mov r8, r8)
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	50000400 	.word	0x50000400

08000700 <LED_GreenOFF>:

void LED_GreenOFF (void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
	GPIO_Write(LED_STATUS_GPIO, LED_STATUS_PIN, false);
 8000704:	4b04      	ldr	r3, [pc, #16]	; (8000718 <LED_GreenOFF+0x18>)
 8000706:	2200      	movs	r2, #0
 8000708:	2102      	movs	r1, #2
 800070a:	0018      	movs	r0, r3
 800070c:	f003 fd5a 	bl	80041c4 <GPIO_Write>
}
 8000710:	46c0      	nop			; (mov r8, r8)
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	50000400 	.word	0x50000400

0800071c <LED_RedOFF>:

void LED_RedOFF (void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
	GPIO_Write(LED_FAULT_GPIO, LED_FAULT_PIN, false);
 8000720:	4b04      	ldr	r3, [pc, #16]	; (8000734 <LED_RedOFF+0x18>)
 8000722:	2200      	movs	r2, #0
 8000724:	2101      	movs	r1, #1
 8000726:	0018      	movs	r0, r3
 8000728:	f003 fd4c 	bl	80041c4 <GPIO_Write>
}
 800072c:	46c0      	nop			; (mov r8, r8)
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	50000400 	.word	0x50000400

08000738 <LED_GreenToggle>:

void LED_GreenToggle (void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	if (LED_GreenState()) {
 800073c:	f7ff ffb6 	bl	80006ac <LED_GreenState>
 8000740:	1e03      	subs	r3, r0, #0
 8000742:	d002      	beq.n	800074a <LED_GreenToggle+0x12>
		LED_GreenOFF();
 8000744:	f7ff ffdc 	bl	8000700 <LED_GreenOFF>
	} else {
		LED_GreenON();
	}
}
 8000748:	e001      	b.n	800074e <LED_GreenToggle+0x16>
		LED_GreenON();
 800074a:	f7ff ffbd 	bl	80006c8 <LED_GreenON>
}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <LED_Pulse>:
	}
}


void LED_Pulse (void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
	uint32_t tick = CORE_GetTick();
 800075a:	f7ff ff89 	bl	8000670 <CORE_GetTick>
 800075e:	0003      	movs	r3, r0
 8000760:	607b      	str	r3, [r7, #4]
	LED_RedON();
 8000762:	f7ff ffbf 	bl	80006e4 <LED_RedON>
	LED_GreenON();
 8000766:	f7ff ffaf 	bl	80006c8 <LED_GreenON>
	while (PULSEON > (CORE_GetTick() - tick)) { CORE_Idle(); }
 800076a:	e001      	b.n	8000770 <LED_Pulse+0x1c>
 800076c:	f003 fbdc 	bl	8003f28 <CORE_Idle>
 8000770:	f7ff ff7e 	bl	8000670 <CORE_GetTick>
 8000774:	0002      	movs	r2, r0
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	1ad3      	subs	r3, r2, r3
 800077a:	2bc7      	cmp	r3, #199	; 0xc7
 800077c:	d9f6      	bls.n	800076c <LED_Pulse+0x18>
	LED_RedOFF();
 800077e:	f7ff ffcd 	bl	800071c <LED_RedOFF>
	LED_GreenOFF();
 8000782:	f7ff ffbd 	bl	8000700 <LED_GreenOFF>
}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	46bd      	mov	sp, r7
 800078a:	b002      	add	sp, #8
 800078c:	bd80      	pop	{r7, pc}

0800078e <LED_nPulse>:
{
	LED_nPulse(3);
}

void LED_nPulse (uint8_t n)
{
 800078e:	b580      	push	{r7, lr}
 8000790:	b084      	sub	sp, #16
 8000792:	af00      	add	r7, sp, #0
 8000794:	0002      	movs	r2, r0
 8000796:	1dfb      	adds	r3, r7, #7
 8000798:	701a      	strb	r2, [r3, #0]
	uint32_t tick = CORE_GetTick();
 800079a:	f7ff ff69 	bl	8000670 <CORE_GetTick>
 800079e:	0003      	movs	r3, r0
 80007a0:	60bb      	str	r3, [r7, #8]
	LED_GreenOFF();
 80007a2:	f7ff ffad 	bl	8000700 <LED_GreenOFF>
	LED_RedOFF();
 80007a6:	f7ff ffb9 	bl	800071c <LED_RedOFF>
	while (PULSEOFF > (CORE_GetTick() - tick)) { CORE_Idle(); }
 80007aa:	e001      	b.n	80007b0 <LED_nPulse+0x22>
 80007ac:	f003 fbbc 	bl	8003f28 <CORE_Idle>
 80007b0:	f7ff ff5e 	bl	8000670 <CORE_GetTick>
 80007b4:	0002      	movs	r2, r0
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	1ad2      	subs	r2, r2, r3
 80007ba:	2396      	movs	r3, #150	; 0x96
 80007bc:	005b      	lsls	r3, r3, #1
 80007be:	429a      	cmp	r2, r3
 80007c0:	d3f4      	bcc.n	80007ac <LED_nPulse+0x1e>

	for (uint8_t i = 0; i < n; i++)
 80007c2:	230f      	movs	r3, #15
 80007c4:	18fb      	adds	r3, r7, r3
 80007c6:	2200      	movs	r2, #0
 80007c8:	701a      	strb	r2, [r3, #0]
 80007ca:	e017      	b.n	80007fc <LED_nPulse+0x6e>
	{
		LED_Pulse();
 80007cc:	f7ff ffc2 	bl	8000754 <LED_Pulse>
		tick = CORE_GetTick();
 80007d0:	f7ff ff4e 	bl	8000670 <CORE_GetTick>
 80007d4:	0003      	movs	r3, r0
 80007d6:	60bb      	str	r3, [r7, #8]
		while (PULSEOFF > (CORE_GetTick() - tick)) { CORE_Idle(); }
 80007d8:	e001      	b.n	80007de <LED_nPulse+0x50>
 80007da:	f003 fba5 	bl	8003f28 <CORE_Idle>
 80007de:	f7ff ff47 	bl	8000670 <CORE_GetTick>
 80007e2:	0002      	movs	r2, r0
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	1ad2      	subs	r2, r2, r3
 80007e8:	2396      	movs	r3, #150	; 0x96
 80007ea:	005b      	lsls	r3, r3, #1
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d3f4      	bcc.n	80007da <LED_nPulse+0x4c>
	for (uint8_t i = 0; i < n; i++)
 80007f0:	210f      	movs	r1, #15
 80007f2:	187b      	adds	r3, r7, r1
 80007f4:	781a      	ldrb	r2, [r3, #0]
 80007f6:	187b      	adds	r3, r7, r1
 80007f8:	3201      	adds	r2, #1
 80007fa:	701a      	strb	r2, [r3, #0]
 80007fc:	230f      	movs	r3, #15
 80007fe:	18fa      	adds	r2, r7, r3
 8000800:	1dfb      	adds	r3, r7, #7
 8000802:	7812      	ldrb	r2, [r2, #0]
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	429a      	cmp	r2, r3
 8000808:	d3e0      	bcc.n	80007cc <LED_nPulse+0x3e>
	}
}
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	46c0      	nop			; (mov r8, r8)
 800080e:	46bd      	mov	sp, r7
 8000810:	b004      	add	sp, #16
 8000812:	bd80      	pop	{r7, pc}

08000814 <GPIO_EnableOutput>:
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	60f8      	str	r0, [r7, #12]
 800081c:	60b9      	str	r1, [r7, #8]
 800081e:	1dfb      	adds	r3, r7, #7
 8000820:	701a      	strb	r2, [r3, #0]
	GPIO_Write(gpio, pin, state);
 8000822:	1dfb      	adds	r3, r7, #7
 8000824:	781a      	ldrb	r2, [r3, #0]
 8000826:	68b9      	ldr	r1, [r7, #8]
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	0018      	movs	r0, r3
 800082c:	f003 fcca 	bl	80041c4 <GPIO_Write>
	GPIO_Init(gpio, pin, GPIO_Mode_Output);
 8000830:	68b9      	ldr	r1, [r7, #8]
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	2201      	movs	r2, #1
 8000836:	0018      	movs	r0, r3
 8000838:	f003 fd2a 	bl	8004290 <GPIO_Init>
}
 800083c:	46c0      	nop			; (mov r8, r8)
 800083e:	46bd      	mov	sp, r7
 8000840:	b004      	add	sp, #16
 8000842:	bd80      	pop	{r7, pc}

08000844 <MOTOR_Init>:
/*
 * PUBLIC FUNCTIONS
 */

void MOTOR_Init (void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af02      	add	r7, sp, #8
	TIM_Init(TIM_MOTOR, TIM_MOTOR_FREQ, TIM_MOTOR_RELOAD);
 800084a:	4b24      	ldr	r3, [pc, #144]	; (80008dc <MOTOR_Init+0x98>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4924      	ldr	r1, [pc, #144]	; (80008e0 <MOTOR_Init+0x9c>)
 8000850:	22ff      	movs	r2, #255	; 0xff
 8000852:	0018      	movs	r0, r3
 8000854:	f003 feee 	bl	8004634 <TIM_Init>

#if defined(USE_DRV8212)
	GPIO_EnableOutput(MOTOR_LMODE_GPIO, MOTOR_LMODE_PIN, MODE_PWM);
 8000858:	2380      	movs	r3, #128	; 0x80
 800085a:	021b      	lsls	r3, r3, #8
 800085c:	4821      	ldr	r0, [pc, #132]	; (80008e4 <MOTOR_Init+0xa0>)
 800085e:	2200      	movs	r2, #0
 8000860:	0019      	movs	r1, r3
 8000862:	f7ff ffd7 	bl	8000814 <GPIO_EnableOutput>
	GPIO_EnableOutput(MOTOR_RMODE_GPIO, MOTOR_RMODE_PIN, MODE_PWM);
 8000866:	23a0      	movs	r3, #160	; 0xa0
 8000868:	05db      	lsls	r3, r3, #23
 800086a:	2200      	movs	r2, #0
 800086c:	2110      	movs	r1, #16
 800086e:	0018      	movs	r0, r3
 8000870:	f7ff ffd0 	bl	8000814 <GPIO_EnableOutput>
#endif

	TIM_EnablePwm(TIM_MOTOR, MOTOR_LPWM1_CH, MOTOR_LPWM1_GPIO, MOTOR_LPWM1_PIN, TIM_MOTOR_AF2);
 8000874:	4b19      	ldr	r3, [pc, #100]	; (80008dc <MOTOR_Init+0x98>)
 8000876:	6818      	ldr	r0, [r3, #0]
 8000878:	23a0      	movs	r3, #160	; 0xa0
 800087a:	05da      	lsls	r2, r3, #23
 800087c:	2302      	movs	r3, #2
 800087e:	9300      	str	r3, [sp, #0]
 8000880:	2301      	movs	r3, #1
 8000882:	2100      	movs	r1, #0
 8000884:	f003 ff61 	bl	800474a <TIM_EnablePwm>
	TIM_EnablePwm(TIM_MOTOR, MOTOR_LPWM2_CH, MOTOR_LPWM2_GPIO, MOTOR_LPWM2_PIN, TIM_MOTOR_AF2);
 8000888:	4b14      	ldr	r3, [pc, #80]	; (80008dc <MOTOR_Init+0x98>)
 800088a:	6818      	ldr	r0, [r3, #0]
 800088c:	23a0      	movs	r3, #160	; 0xa0
 800088e:	05da      	lsls	r2, r3, #23
 8000890:	2302      	movs	r3, #2
 8000892:	9300      	str	r3, [sp, #0]
 8000894:	2302      	movs	r3, #2
 8000896:	2101      	movs	r1, #1
 8000898:	f003 ff57 	bl	800474a <TIM_EnablePwm>
	TIM_EnablePwm(TIM_MOTOR, MOTOR_RPWM1_CH, MOTOR_RPWM1_GPIO, MOTOR_RPWM1_PIN, TIM_MOTOR_AF2);
 800089c:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <MOTOR_Init+0x98>)
 800089e:	6818      	ldr	r0, [r3, #0]
 80008a0:	23a0      	movs	r3, #160	; 0xa0
 80008a2:	05da      	lsls	r2, r3, #23
 80008a4:	2302      	movs	r3, #2
 80008a6:	9300      	str	r3, [sp, #0]
 80008a8:	2304      	movs	r3, #4
 80008aa:	2102      	movs	r1, #2
 80008ac:	f003 ff4d 	bl	800474a <TIM_EnablePwm>
	TIM_EnablePwm(TIM_MOTOR, MOTOR_RPWM2_CH, MOTOR_RPWM2_GPIO, MOTOR_RPWM2_PIN, TIM_MOTOR_AF2);
 80008b0:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <MOTOR_Init+0x98>)
 80008b2:	6818      	ldr	r0, [r3, #0]
 80008b4:	23a0      	movs	r3, #160	; 0xa0
 80008b6:	05da      	lsls	r2, r3, #23
 80008b8:	2302      	movs	r3, #2
 80008ba:	9300      	str	r3, [sp, #0]
 80008bc:	2308      	movs	r3, #8
 80008be:	2103      	movs	r1, #3
 80008c0:	f003 ff43 	bl	800474a <TIM_EnablePwm>

	MOTOR_Update(MOTOR_OFF, MOTOR_OFF);
 80008c4:	2100      	movs	r1, #0
 80008c6:	2000      	movs	r0, #0
 80008c8:	f000 f80e 	bl	80008e8 <MOTOR_Update>
	TIM_Start(TIM_MOTOR);
 80008cc:	4b03      	ldr	r3, [pc, #12]	; (80008dc <MOTOR_Init+0x98>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	0018      	movs	r0, r3
 80008d2:	f003 ff83 	bl	80047dc <TIM_Start>
}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	20000020 	.word	0x20000020
 80008e0:	004e2000 	.word	0x004e2000
 80008e4:	50000800 	.word	0x50000800

080008e8 <MOTOR_Update>:


void MOTOR_Update (int32_t M1, int32_t M2)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	6039      	str	r1, [r7, #0]
	MOTOR_M1_Update(M1);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	0018      	movs	r0, r3
 80008f6:	f000 f847 	bl	8000988 <MOTOR_M1_Update>
	MOTOR_M2_Update(M2);
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	0018      	movs	r0, r3
 80008fe:	f000 f88b 	bl	8000a18 <MOTOR_M2_Update>
}
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	46bd      	mov	sp, r7
 8000906:	b002      	add	sp, #8
 8000908:	bd80      	pop	{r7, pc}
	...

0800090c <MOTOR_M1_Brake>:
/*
 * PRIVATE FUNCTIONS
 */

void MOTOR_M1_Brake (void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
	GPIO_Write(MOTOR_LMODE_GPIO, MOTOR_LMODE_PIN, MODE_BRAKE);
 8000910:	2380      	movs	r3, #128	; 0x80
 8000912:	021b      	lsls	r3, r3, #8
 8000914:	480b      	ldr	r0, [pc, #44]	; (8000944 <MOTOR_M1_Brake+0x38>)
 8000916:	2200      	movs	r2, #0
 8000918:	0019      	movs	r1, r3
 800091a:	f003 fc53 	bl	80041c4 <GPIO_Write>
	TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM1_CH, PWM_BRAKE);
 800091e:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <MOTOR_M1_Brake+0x3c>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	2280      	movs	r2, #128	; 0x80
 8000924:	0052      	lsls	r2, r2, #1
 8000926:	2100      	movs	r1, #0
 8000928:	0018      	movs	r0, r3
 800092a:	f003 ff29 	bl	8004780 <TIM_SetPulse>
	TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM2_CH, PWM_BRAKE);
 800092e:	4b06      	ldr	r3, [pc, #24]	; (8000948 <MOTOR_M1_Brake+0x3c>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	2280      	movs	r2, #128	; 0x80
 8000934:	0052      	lsls	r2, r2, #1
 8000936:	2101      	movs	r1, #1
 8000938:	0018      	movs	r0, r3
 800093a:	f003 ff21 	bl	8004780 <TIM_SetPulse>
}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	50000800 	.word	0x50000800
 8000948:	20000020 	.word	0x20000020

0800094c <MOTOR_M2_Brake>:

void MOTOR_M2_Brake (void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
	GPIO_Write(MOTOR_RMODE_GPIO, MOTOR_RMODE_PIN, MODE_BRAKE);
 8000950:	23a0      	movs	r3, #160	; 0xa0
 8000952:	05db      	lsls	r3, r3, #23
 8000954:	2200      	movs	r2, #0
 8000956:	2110      	movs	r1, #16
 8000958:	0018      	movs	r0, r3
 800095a:	f003 fc33 	bl	80041c4 <GPIO_Write>
	TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM1_CH, PWM_BRAKE);
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <MOTOR_M2_Brake+0x38>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	2280      	movs	r2, #128	; 0x80
 8000964:	0052      	lsls	r2, r2, #1
 8000966:	2102      	movs	r1, #2
 8000968:	0018      	movs	r0, r3
 800096a:	f003 ff09 	bl	8004780 <TIM_SetPulse>
	TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM2_CH, PWM_BRAKE);
 800096e:	4b05      	ldr	r3, [pc, #20]	; (8000984 <MOTOR_M2_Brake+0x38>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	2280      	movs	r2, #128	; 0x80
 8000974:	0052      	lsls	r2, r2, #1
 8000976:	2103      	movs	r1, #3
 8000978:	0018      	movs	r0, r3
 800097a:	f003 ff01 	bl	8004780 <TIM_SetPulse>
}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20000020 	.word	0x20000020

08000988 <MOTOR_M1_Update>:
	TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM1_CH, PWM_COAST);
	TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM2_CH, PWM_COAST);
}

void MOTOR_M1_Update (int32_t throttle)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
	bool reverse = false;
 8000990:	210f      	movs	r1, #15
 8000992:	187b      	adds	r3, r7, r1
 8000994:	2200      	movs	r2, #0
 8000996:	701a      	strb	r2, [r3, #0]

	// Check if reversing
	if (throttle < MOTOR_OFF) {
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2b00      	cmp	r3, #0
 800099c:	da05      	bge.n	80009aa <MOTOR_M1_Update+0x22>
		reverse = true;
 800099e:	187b      	adds	r3, r7, r1
 80009a0:	2201      	movs	r2, #1
 80009a2:	701a      	strb	r2, [r3, #0]
		throttle = -throttle;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	425b      	negs	r3, r3
 80009a8:	607b      	str	r3, [r7, #4]
	}

	// Clamp maximum speed
	if (throttle > MOTOR_MAX) {
 80009aa:	687a      	ldr	r2, [r7, #4]
 80009ac:	2380      	movs	r3, #128	; 0x80
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	429a      	cmp	r2, r3
 80009b2:	dd02      	ble.n	80009ba <MOTOR_M1_Update+0x32>
		throttle = MOTOR_MAX;
 80009b4:	2380      	movs	r3, #128	; 0x80
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	607b      	str	r3, [r7, #4]
	}

	if (throttle <= MOTOR_OFF + MOTOR_STALL) {
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2b32      	cmp	r3, #50	; 0x32
 80009be:	dc02      	bgt.n	80009c6 <MOTOR_M1_Update+0x3e>
		if (MOTOR_BRAKE) {
			MOTOR_M1_Brake();
 80009c0:	f7ff ffa4 	bl	800090c <MOTOR_M1_Brake>
		TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM2_CH, throttle);
	} else {
		TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM1_CH, throttle);
		TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM2_CH, 0);
	}
}
 80009c4:	e021      	b.n	8000a0a <MOTOR_M1_Update+0x82>
	} else if (reverse) {
 80009c6:	230f      	movs	r3, #15
 80009c8:	18fb      	adds	r3, r7, r3
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d00e      	beq.n	80009ee <MOTOR_M1_Update+0x66>
		TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM1_CH, 0);
 80009d0:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <MOTOR_M1_Update+0x8c>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2200      	movs	r2, #0
 80009d6:	2100      	movs	r1, #0
 80009d8:	0018      	movs	r0, r3
 80009da:	f003 fed1 	bl	8004780 <TIM_SetPulse>
		TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM2_CH, throttle);
 80009de:	4b0d      	ldr	r3, [pc, #52]	; (8000a14 <MOTOR_M1_Update+0x8c>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	2101      	movs	r1, #1
 80009e6:	0018      	movs	r0, r3
 80009e8:	f003 feca 	bl	8004780 <TIM_SetPulse>
}
 80009ec:	e00d      	b.n	8000a0a <MOTOR_M1_Update+0x82>
		TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM1_CH, throttle);
 80009ee:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <MOTOR_M1_Update+0x8c>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	687a      	ldr	r2, [r7, #4]
 80009f4:	2100      	movs	r1, #0
 80009f6:	0018      	movs	r0, r3
 80009f8:	f003 fec2 	bl	8004780 <TIM_SetPulse>
		TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM2_CH, 0);
 80009fc:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <MOTOR_M1_Update+0x8c>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2200      	movs	r2, #0
 8000a02:	2101      	movs	r1, #1
 8000a04:	0018      	movs	r0, r3
 8000a06:	f003 febb 	bl	8004780 <TIM_SetPulse>
}
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	b004      	add	sp, #16
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	20000020 	.word	0x20000020

08000a18 <MOTOR_M2_Update>:

void MOTOR_M2_Update (int32_t throttle)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	bool reverse = false;
 8000a20:	210f      	movs	r1, #15
 8000a22:	187b      	adds	r3, r7, r1
 8000a24:	2200      	movs	r2, #0
 8000a26:	701a      	strb	r2, [r3, #0]

	// Check if reversing
	if (throttle < 0) {
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	da05      	bge.n	8000a3a <MOTOR_M2_Update+0x22>
		reverse = true;
 8000a2e:	187b      	adds	r3, r7, r1
 8000a30:	2201      	movs	r2, #1
 8000a32:	701a      	strb	r2, [r3, #0]
		throttle = -throttle;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	425b      	negs	r3, r3
 8000a38:	607b      	str	r3, [r7, #4]
	}

	// Clamp maximum speed
	if (throttle > MOTOR_MAX) {
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	2380      	movs	r3, #128	; 0x80
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	429a      	cmp	r2, r3
 8000a42:	dd02      	ble.n	8000a4a <MOTOR_M2_Update+0x32>
		throttle = MOTOR_MAX;
 8000a44:	2380      	movs	r3, #128	; 0x80
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	607b      	str	r3, [r7, #4]
	}

	if (throttle <= MOTOR_OFF + MOTOR_STALL) {
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2b32      	cmp	r3, #50	; 0x32
 8000a4e:	dc02      	bgt.n	8000a56 <MOTOR_M2_Update+0x3e>
		if (MOTOR_BRAKE) {
			MOTOR_M2_Brake();
 8000a50:	f7ff ff7c 	bl	800094c <MOTOR_M2_Brake>
		TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM2_CH, throttle);
	} else {
		TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM1_CH, throttle);
		TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM2_CH, 0);
	}
}
 8000a54:	e021      	b.n	8000a9a <MOTOR_M2_Update+0x82>
	} else if (reverse) {
 8000a56:	230f      	movs	r3, #15
 8000a58:	18fb      	adds	r3, r7, r3
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d00e      	beq.n	8000a7e <MOTOR_M2_Update+0x66>
		TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM1_CH, 0);
 8000a60:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <MOTOR_M2_Update+0x8c>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2200      	movs	r2, #0
 8000a66:	2102      	movs	r1, #2
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f003 fe89 	bl	8004780 <TIM_SetPulse>
		TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM2_CH, throttle);
 8000a6e:	4b0d      	ldr	r3, [pc, #52]	; (8000aa4 <MOTOR_M2_Update+0x8c>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	687a      	ldr	r2, [r7, #4]
 8000a74:	2103      	movs	r1, #3
 8000a76:	0018      	movs	r0, r3
 8000a78:	f003 fe82 	bl	8004780 <TIM_SetPulse>
}
 8000a7c:	e00d      	b.n	8000a9a <MOTOR_M2_Update+0x82>
		TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM1_CH, throttle);
 8000a7e:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <MOTOR_M2_Update+0x8c>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	2102      	movs	r1, #2
 8000a86:	0018      	movs	r0, r3
 8000a88:	f003 fe7a 	bl	8004780 <TIM_SetPulse>
		TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM2_CH, 0);
 8000a8c:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <MOTOR_M2_Update+0x8c>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2200      	movs	r2, #0
 8000a92:	2103      	movs	r1, #3
 8000a94:	0018      	movs	r0, r3
 8000a96:	f003 fe73 	bl	8004780 <TIM_SetPulse>
}
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	b004      	add	sp, #16
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	20000020 	.word	0x20000020

08000aa8 <GPIO_EnableOutput>:
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	1dfb      	adds	r3, r7, #7
 8000ab4:	701a      	strb	r2, [r3, #0]
	GPIO_Write(gpio, pin, state);
 8000ab6:	1dfb      	adds	r3, r7, #7
 8000ab8:	781a      	ldrb	r2, [r3, #0]
 8000aba:	68b9      	ldr	r1, [r7, #8]
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	0018      	movs	r0, r3
 8000ac0:	f003 fb80 	bl	80041c4 <GPIO_Write>
	GPIO_Init(gpio, pin, GPIO_Mode_Output);
 8000ac4:	68b9      	ldr	r1, [r7, #8]
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	2201      	movs	r2, #1
 8000aca:	0018      	movs	r0, r3
 8000acc:	f003 fbe0 	bl	8004290 <GPIO_Init>
}
 8000ad0:	46c0      	nop			; (mov r8, r8)
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	b004      	add	sp, #16
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <GPIO_Set>:
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	6039      	str	r1, [r7, #0]
	gpio->BSRR = (uint32_t)pin;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	683a      	ldr	r2, [r7, #0]
 8000ae6:	619a      	str	r2, [r3, #24]
}
 8000ae8:	46c0      	nop			; (mov r8, r8)
 8000aea:	46bd      	mov	sp, r7
 8000aec:	b002      	add	sp, #8
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <GPIO_Reset>:
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
	gpio->BRR = (uint32_t)pin;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	683a      	ldr	r2, [r7, #0]
 8000afe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b00:	46c0      	nop			; (mov r8, r8)
 8000b02:	46bd      	mov	sp, r7
 8000b04:	b002      	add	sp, #8
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <SERVO_Init>:
/*
 * PUBLIC FUNCTIONS
 */

void SERVO_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
	GPIO_EnableOutput(SERVO1_GPIO, SERVO1_PIN, GPIO_PIN_RESET);
 8000b0c:	2380      	movs	r3, #128	; 0x80
 8000b0e:	015b      	lsls	r3, r3, #5
 8000b10:	4824      	ldr	r0, [pc, #144]	; (8000ba4 <SERVO_Init+0x9c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	0019      	movs	r1, r3
 8000b16:	f7ff ffc7 	bl	8000aa8 <GPIO_EnableOutput>
	TIM_Init(TIM_SERVO1, TIM_SERVO1_FREQ, TIM_SERVO1_RELOAD);
 8000b1a:	4b23      	ldr	r3, [pc, #140]	; (8000ba8 <SERVO_Init+0xa0>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a23      	ldr	r2, [pc, #140]	; (8000bac <SERVO_Init+0xa4>)
 8000b20:	4923      	ldr	r1, [pc, #140]	; (8000bb0 <SERVO_Init+0xa8>)
 8000b22:	0018      	movs	r0, r3
 8000b24:	f003 fd86 	bl	8004634 <TIM_Init>
	TIM_OnReload(TIM_SERVO1, SERVO1_TimerReloadISR);
 8000b28:	4b1f      	ldr	r3, [pc, #124]	; (8000ba8 <SERVO_Init+0xa0>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a21      	ldr	r2, [pc, #132]	; (8000bb4 <SERVO_Init+0xac>)
 8000b2e:	0011      	movs	r1, r2
 8000b30:	0018      	movs	r0, r3
 8000b32:	f003 fdcf 	bl	80046d4 <TIM_OnReload>
	TIM_OnPulse(TIM_SERVO1, 0, SERVO1_TimerPulseISR);
 8000b36:	4b1c      	ldr	r3, [pc, #112]	; (8000ba8 <SERVO_Init+0xa0>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a1f      	ldr	r2, [pc, #124]	; (8000bb8 <SERVO_Init+0xb0>)
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f003 fddc 	bl	80046fc <TIM_OnPulse>
	SERVO_S1_Update(0);
 8000b44:	2000      	movs	r0, #0
 8000b46:	f000 f86d 	bl	8000c24 <SERVO_S1_Update>
	TIM_Start(TIM_SERVO1);
 8000b4a:	4b17      	ldr	r3, [pc, #92]	; (8000ba8 <SERVO_Init+0xa0>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f003 fe44 	bl	80047dc <TIM_Start>

	GPIO_EnableOutput(SERVO2_GPIO, SERVO2_PIN, GPIO_PIN_RESET);
 8000b54:	2380      	movs	r3, #128	; 0x80
 8000b56:	0219      	lsls	r1, r3, #8
 8000b58:	23a0      	movs	r3, #160	; 0xa0
 8000b5a:	05db      	lsls	r3, r3, #23
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f7ff ffa2 	bl	8000aa8 <GPIO_EnableOutput>
	TIM_Init(TIM_SERVO2, TIM_SERVO2_FREQ, TIM_SERVO2_RELOAD);
 8000b64:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <SERVO_Init+0xb4>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a10      	ldr	r2, [pc, #64]	; (8000bac <SERVO_Init+0xa4>)
 8000b6a:	4911      	ldr	r1, [pc, #68]	; (8000bb0 <SERVO_Init+0xa8>)
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	f003 fd61 	bl	8004634 <TIM_Init>
	TIM_OnReload(TIM_SERVO2, SERVO2_TimerReloadISR);
 8000b72:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <SERVO_Init+0xb4>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a12      	ldr	r2, [pc, #72]	; (8000bc0 <SERVO_Init+0xb8>)
 8000b78:	0011      	movs	r1, r2
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f003 fdaa 	bl	80046d4 <TIM_OnReload>
	TIM_OnPulse(TIM_SERVO2, 0, SERVO2_TimerPulseISR);
 8000b80:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <SERVO_Init+0xb4>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a0f      	ldr	r2, [pc, #60]	; (8000bc4 <SERVO_Init+0xbc>)
 8000b86:	2100      	movs	r1, #0
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f003 fdb7 	bl	80046fc <TIM_OnPulse>
	SERVO_S2_Update(0);
 8000b8e:	2000      	movs	r0, #0
 8000b90:	f000 f85c 	bl	8000c4c <SERVO_S2_Update>
	TIM_Start(TIM_SERVO2);
 8000b94:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <SERVO_Init+0xb4>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f003 fe1f 	bl	80047dc <TIM_Start>
}
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	50000400 	.word	0x50000400
 8000ba8:	20000058 	.word	0x20000058
 8000bac:	00002710 	.word	0x00002710
 8000bb0:	000f4240 	.word	0x000f4240
 8000bb4:	08000c75 	.word	0x08000c75
 8000bb8:	08000c91 	.word	0x08000c91
 8000bbc:	20000074 	.word	0x20000074
 8000bc0:	08000cad 	.word	0x08000cad
 8000bc4:	08000cc7 	.word	0x08000cc7

08000bc8 <SERVO_Deinit>:

void SERVO_Deinit(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
	TIM_Stop(TIM_SERVO1);
 8000bcc:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <SERVO_Deinit+0x50>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	f003 fe17 	bl	8004804 <TIM_Stop>
	TIM_Deinit(TIM_SERVO1);
 8000bd6:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <SERVO_Deinit+0x50>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	0018      	movs	r0, r3
 8000bdc:	f003 fe2a 	bl	8004834 <TIM_Deinit>
	GPIO_Write(SERVO1_GPIO, SERVO1_PIN, GPIO_PIN_RESET);
 8000be0:	2380      	movs	r3, #128	; 0x80
 8000be2:	015b      	lsls	r3, r3, #5
 8000be4:	480d      	ldr	r0, [pc, #52]	; (8000c1c <SERVO_Deinit+0x54>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	0019      	movs	r1, r3
 8000bea:	f003 faeb 	bl	80041c4 <GPIO_Write>

	TIM_Stop(TIM_SERVO2);
 8000bee:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <SERVO_Deinit+0x58>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f003 fe06 	bl	8004804 <TIM_Stop>
	TIM_Deinit(TIM_SERVO2);
 8000bf8:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <SERVO_Deinit+0x58>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	f003 fe19 	bl	8004834 <TIM_Deinit>
	GPIO_Write(SERVO2_GPIO, SERVO2_PIN, GPIO_PIN_RESET);
 8000c02:	2380      	movs	r3, #128	; 0x80
 8000c04:	0219      	lsls	r1, r3, #8
 8000c06:	23a0      	movs	r3, #160	; 0xa0
 8000c08:	05db      	lsls	r3, r3, #23
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f003 fad9 	bl	80041c4 <GPIO_Write>
}
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000058 	.word	0x20000058
 8000c1c:	50000400 	.word	0x50000400
 8000c20:	20000074 	.word	0x20000074

08000c24 <SERVO_S1_Update>:
/*
 * PRIVATE FUNCTIONS
 */

void SERVO_S1_Update(uint16_t pulse)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	0002      	movs	r2, r0
 8000c2c:	1dbb      	adds	r3, r7, #6
 8000c2e:	801a      	strh	r2, [r3, #0]
	TIM_SetPulse(TIM_SERVO1, 0, pulse);
 8000c30:	4b05      	ldr	r3, [pc, #20]	; (8000c48 <SERVO_S1_Update+0x24>)
 8000c32:	6818      	ldr	r0, [r3, #0]
 8000c34:	1dbb      	adds	r3, r7, #6
 8000c36:	881b      	ldrh	r3, [r3, #0]
 8000c38:	001a      	movs	r2, r3
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	f003 fda0 	bl	8004780 <TIM_SetPulse>
}
 8000c40:	46c0      	nop			; (mov r8, r8)
 8000c42:	46bd      	mov	sp, r7
 8000c44:	b002      	add	sp, #8
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20000058 	.word	0x20000058

08000c4c <SERVO_S2_Update>:

void SERVO_S2_Update(uint16_t pulse)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	0002      	movs	r2, r0
 8000c54:	1dbb      	adds	r3, r7, #6
 8000c56:	801a      	strh	r2, [r3, #0]
	TIM_SetPulse(TIM_SERVO2, 0, pulse);
 8000c58:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <SERVO_S2_Update+0x24>)
 8000c5a:	6818      	ldr	r0, [r3, #0]
 8000c5c:	1dbb      	adds	r3, r7, #6
 8000c5e:	881b      	ldrh	r3, [r3, #0]
 8000c60:	001a      	movs	r2, r3
 8000c62:	2100      	movs	r1, #0
 8000c64:	f003 fd8c 	bl	8004780 <TIM_SetPulse>
}
 8000c68:	46c0      	nop			; (mov r8, r8)
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	b002      	add	sp, #8
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20000074 	.word	0x20000074

08000c74 <SERVO1_TimerReloadISR>:
/*
 * INTERRUPT ROUTINES
 */

static void SERVO1_TimerReloadISR(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
	GPIO_Set(SERVO1_GPIO, SERVO1_PIN);
 8000c78:	2380      	movs	r3, #128	; 0x80
 8000c7a:	015b      	lsls	r3, r3, #5
 8000c7c:	4a03      	ldr	r2, [pc, #12]	; (8000c8c <SERVO1_TimerReloadISR+0x18>)
 8000c7e:	0019      	movs	r1, r3
 8000c80:	0010      	movs	r0, r2
 8000c82:	f7ff ff29 	bl	8000ad8 <GPIO_Set>
}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	50000400 	.word	0x50000400

08000c90 <SERVO1_TimerPulseISR>:

static void SERVO1_TimerPulseISR(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
	GPIO_Reset(SERVO1_GPIO, SERVO1_PIN);
 8000c94:	2380      	movs	r3, #128	; 0x80
 8000c96:	015b      	lsls	r3, r3, #5
 8000c98:	4a03      	ldr	r2, [pc, #12]	; (8000ca8 <SERVO1_TimerPulseISR+0x18>)
 8000c9a:	0019      	movs	r1, r3
 8000c9c:	0010      	movs	r0, r2
 8000c9e:	f7ff ff27 	bl	8000af0 <GPIO_Reset>
}
 8000ca2:	46c0      	nop			; (mov r8, r8)
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	50000400 	.word	0x50000400

08000cac <SERVO2_TimerReloadISR>:

static void SERVO2_TimerReloadISR(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
	GPIO_Set(SERVO2_GPIO, SERVO2_PIN);
 8000cb0:	2380      	movs	r3, #128	; 0x80
 8000cb2:	021a      	lsls	r2, r3, #8
 8000cb4:	23a0      	movs	r3, #160	; 0xa0
 8000cb6:	05db      	lsls	r3, r3, #23
 8000cb8:	0011      	movs	r1, r2
 8000cba:	0018      	movs	r0, r3
 8000cbc:	f7ff ff0c 	bl	8000ad8 <GPIO_Set>
}
 8000cc0:	46c0      	nop			; (mov r8, r8)
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <SERVO2_TimerPulseISR>:

static void SERVO2_TimerPulseISR(void)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	af00      	add	r7, sp, #0
	GPIO_Reset(SERVO2_GPIO, SERVO2_PIN);
 8000cca:	2380      	movs	r3, #128	; 0x80
 8000ccc:	021a      	lsls	r2, r3, #8
 8000cce:	23a0      	movs	r3, #160	; 0xa0
 8000cd0:	05db      	lsls	r3, r3, #23
 8000cd2:	0011      	movs	r1, r2
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	f7ff ff0b 	bl	8000af0 <GPIO_Reset>
}
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <CORE_GetTick>:
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
	return gTicks;
 8000ce4:	4b02      	ldr	r3, [pc, #8]	; (8000cf0 <CORE_GetTick+0x10>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
}
 8000ce8:	0018      	movs	r0, r3
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	200003cc 	.word	0x200003cc

08000cf4 <GPIO_EnableInput>:
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	1dfb      	adds	r3, r7, #7
 8000d00:	701a      	strb	r2, [r3, #0]
	GPIO_Init(gpio, pin, GPIO_Mode_Input | pull);
 8000d02:	1dfb      	adds	r3, r7, #7
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	b29a      	uxth	r2, r3
 8000d08:	68b9      	ldr	r1, [r7, #8]
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	f003 fabf 	bl	8004290 <GPIO_Init>
}
 8000d12:	46c0      	nop			; (mov r8, r8)
 8000d14:	46bd      	mov	sp, r7
 8000d16:	b004      	add	sp, #16
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <GPIO_Read>:
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
 8000d22:	6039      	str	r1, [r7, #0]
	return ((gpio->IDR & pin) > 0);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	691b      	ldr	r3, [r3, #16]
 8000d28:	683a      	ldr	r2, [r7, #0]
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	1e5a      	subs	r2, r3, #1
 8000d2e:	4193      	sbcs	r3, r2
 8000d30:	b2db      	uxtb	r3, r3
}
 8000d32:	0018      	movs	r0, r3
 8000d34:	46bd      	mov	sp, r7
 8000d36:	b002      	add	sp, #8
 8000d38:	bd80      	pop	{r7, pc}
	...

08000d3c <SYSTEM_Init>:
/*
 * PUBLIC FUNCTIONS
 */

void SYSTEM_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
	//
	ADC_Init();
 8000d40:	f002 fefc 	bl	8003b3c <ADC_Init>
	GPIO_Init(BATTERY_GPIO, BATTERY_PIN, GPIO_Mode_Analog);
 8000d44:	23a0      	movs	r3, #160	; 0xa0
 8000d46:	05db      	lsls	r3, r3, #23
 8000d48:	2203      	movs	r2, #3
 8000d4a:	2180      	movs	r1, #128	; 0x80
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f003 fa9f 	bl	8004290 <GPIO_Init>
	if (SYSTEM_GetBatteryVoltage() >= BATT_2S_LOW) {
 8000d52:	f000 fa1f 	bl	8001194 <SYSTEM_GetBatteryVoltage>
 8000d56:	0003      	movs	r3, r0
 8000d58:	4a11      	ldr	r2, [pc, #68]	; (8000da0 <SYSTEM_Init+0x64>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d903      	bls.n	8000d66 <SYSTEM_Init+0x2a>
		fault.faultVoltage = BATT_2S_LOW;
 8000d5e:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <SYSTEM_Init+0x68>)
 8000d60:	4a11      	ldr	r2, [pc, #68]	; (8000da8 <SYSTEM_Init+0x6c>)
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	e003      	b.n	8000d6e <SYSTEM_Init+0x32>
	} else {
		fault.faultVoltage = BATT_1S_LOW;
 8000d66:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <SYSTEM_Init+0x68>)
 8000d68:	22c8      	movs	r2, #200	; 0xc8
 8000d6a:	0112      	lsls	r2, r2, #4
 8000d6c:	605a      	str	r2, [r3, #4]
	}
	// INIT THE CALIBRATION INPUT
	GPIO_EnableInput(CALIBRATE_GPIO, CALIBRATE_PIN, GPIO_Pull_Up);
 8000d6e:	2380      	movs	r3, #128	; 0x80
 8000d70:	00db      	lsls	r3, r3, #3
 8000d72:	480e      	ldr	r0, [pc, #56]	; (8000dac <SYSTEM_Init+0x70>)
 8000d74:	2210      	movs	r2, #16
 8000d76:	0019      	movs	r1, r3
 8000d78:	f7ff ffbc 	bl	8000cf4 <GPIO_EnableInput>

	// INIT LEDs
	LED_Init();
 8000d7c:	f7ff fc82 	bl	8000684 <LED_Init>

	// READ CONFIGURATION FROM EEPROM
	EEPROM_Read(EEPROM_OFFSET, &config, sizeof(config));
 8000d80:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <SYSTEM_Init+0x74>)
 8000d82:	2228      	movs	r2, #40	; 0x28
 8000d84:	0019      	movs	r1, r3
 8000d86:	2000      	movs	r0, #0
 8000d88:	f003 f9a6 	bl	80040d8 <EEPROM_Read>

	// CHECK FOR VALID CONFIG
	SYSTEM_VerifyConfig();
 8000d8c:	f000 f9be 	bl	800110c <SYSTEM_VerifyConfig>

	//
	RADIO_Init(&config.radio);
 8000d90:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <SYSTEM_Init+0x78>)
 8000d92:	0018      	movs	r0, r3
 8000d94:	f002 f83e 	bl	8002e14 <RADIO_Init>
}
 8000d98:	46c0      	nop			; (mov r8, r8)
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	46c0      	nop			; (mov r8, r8)
 8000da0:	00001837 	.word	0x00001837
 8000da4:	200001ac 	.word	0x200001ac
 8000da8:	00001838 	.word	0x00001838
 8000dac:	50000400 	.word	0x50000400
 8000db0:	200001b4 	.word	0x200001b4
 8000db4:	200001d0 	.word	0x200001d0

08000db8 <SYSTEM_Update>:

void SYSTEM_Update (void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
	// Update Inputs
	RADIO_Update();
 8000dbc:	f002 f87a 	bl	8002eb4 <RADIO_Update>

	// Check For Fault Conditions
	SYSTEM_HandleFaultStatus();
 8000dc0:	f000 f80a 	bl	8000dd8 <SYSTEM_HandleFaultStatus>

	// Update LED's Based on Current Fault Status
	SYSTEM_HandleLEDs();
 8000dc4:	f000 f896 	bl	8000ef4 <SYSTEM_HandleLEDs>

	// Handle System Calibration
	SYSTEM_HandleCalibration();
 8000dc8:	f000 f854 	bl	8000e74 <SYSTEM_HandleCalibration>

	//
	SYSTEM_HandleOutputs();
 8000dcc:	f000 f8cc 	bl	8000f68 <SYSTEM_HandleOutputs>
}
 8000dd0:	46c0      	nop			; (mov r8, r8)
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
	...

08000dd8 <SYSTEM_HandleFaultStatus>:
/*
 * PRIVATE FUNCTIONS
 */

void SYSTEM_HandleFaultStatus (void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
	uint32_t SystemVolt = SYSTEM_GetBatteryVoltage();
 8000dde:	f000 f9d9 	bl	8001194 <SYSTEM_GetBatteryVoltage>
 8000de2:	0003      	movs	r3, r0
 8000de4:	60fb      	str	r3, [r7, #12]
	int32_t SystemTemp = ADC_ReadDieTemp();
 8000de6:	f002 ff57 	bl	8003c98 <ADC_ReadDieTemp>
 8000dea:	0003      	movs	r3, r0
 8000dec:	60bb      	str	r3, [r7, #8]

	//
	if (!fault.inputVoltage) {
 8000dee:	4b20      	ldr	r3, [pc, #128]	; (8000e70 <SYSTEM_HandleFaultStatus+0x98>)
 8000df0:	785b      	ldrb	r3, [r3, #1]
 8000df2:	2201      	movs	r2, #1
 8000df4:	4053      	eors	r3, r2
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d008      	beq.n	8000e0e <SYSTEM_HandleFaultStatus+0x36>
		if (SystemVolt <= fault.faultVoltage) { fault.inputVoltage = true; }
 8000dfc:	4b1c      	ldr	r3, [pc, #112]	; (8000e70 <SYSTEM_HandleFaultStatus+0x98>)
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	68fa      	ldr	r2, [r7, #12]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d80c      	bhi.n	8000e20 <SYSTEM_HandleFaultStatus+0x48>
 8000e06:	4b1a      	ldr	r3, [pc, #104]	; (8000e70 <SYSTEM_HandleFaultStatus+0x98>)
 8000e08:	2201      	movs	r2, #1
 8000e0a:	705a      	strb	r2, [r3, #1]
 8000e0c:	e008      	b.n	8000e20 <SYSTEM_HandleFaultStatus+0x48>
	} else {
		if (SystemVolt >= (fault.faultVoltage + BATT_HYST)) { fault.inputVoltage = false; }
 8000e0e:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <SYSTEM_HandleFaultStatus+0x98>)
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	3364      	adds	r3, #100	; 0x64
 8000e14:	68fa      	ldr	r2, [r7, #12]
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d302      	bcc.n	8000e20 <SYSTEM_HandleFaultStatus+0x48>
 8000e1a:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <SYSTEM_HandleFaultStatus+0x98>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	705a      	strb	r2, [r3, #1]
	}

	//
	if (!fault.overTemperature) {
 8000e20:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <SYSTEM_HandleFaultStatus+0x98>)
 8000e22:	789b      	ldrb	r3, [r3, #2]
 8000e24:	2201      	movs	r2, #1
 8000e26:	4053      	eors	r3, r2
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d006      	beq.n	8000e3c <SYSTEM_HandleFaultStatus+0x64>
		if (SystemTemp >= TEMP_HIGH) { fault.overTemperature = true; }
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	2b63      	cmp	r3, #99	; 0x63
 8000e32:	dd09      	ble.n	8000e48 <SYSTEM_HandleFaultStatus+0x70>
 8000e34:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <SYSTEM_HandleFaultStatus+0x98>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	709a      	strb	r2, [r3, #2]
 8000e3a:	e005      	b.n	8000e48 <SYSTEM_HandleFaultStatus+0x70>
	} else {
		if (SystemTemp <= (TEMP_HIGH - TEMP_HYST)) { fault.overTemperature = false; }
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	2b5a      	cmp	r3, #90	; 0x5a
 8000e40:	dc02      	bgt.n	8000e48 <SYSTEM_HandleFaultStatus+0x70>
 8000e42:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <SYSTEM_HandleFaultStatus+0x98>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	709a      	strb	r2, [r3, #2]
	}

	//
	RADIO_Data* ptrDataRadio = RADIO_GetDataPtr();
 8000e48:	f002 f898 	bl	8002f7c <RADIO_GetDataPtr>
 8000e4c:	0003      	movs	r3, r0
 8000e4e:	607b      	str	r3, [r7, #4]
	if (ptrDataRadio->inputLost) {
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d003      	beq.n	8000e60 <SYSTEM_HandleFaultStatus+0x88>
		fault.signalLost = true;
 8000e58:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <SYSTEM_HandleFaultStatus+0x98>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	701a      	strb	r2, [r3, #0]
	} else {
		fault.signalLost = false;
	}
}
 8000e5e:	e002      	b.n	8000e66 <SYSTEM_HandleFaultStatus+0x8e>
		fault.signalLost = false;
 8000e60:	4b03      	ldr	r3, [pc, #12]	; (8000e70 <SYSTEM_HandleFaultStatus+0x98>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	701a      	strb	r2, [r3, #0]
}
 8000e66:	46c0      	nop			; (mov r8, r8)
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	b004      	add	sp, #16
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	200001ac 	.word	0x200001ac

08000e74 <SYSTEM_HandleCalibration>:


void SYSTEM_HandleCalibration (void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
	// Initialize Loop Variables
	uint32_t now = CORE_GetTick();
 8000e7a:	f7ff ff31 	bl	8000ce0 <CORE_GetTick>
 8000e7e:	0003      	movs	r3, r0
 8000e80:	607b      	str	r3, [r7, #4]
	static bool calibrateWindow = true;

	//
	if (calibrateWindow && !fault.signalLost) {
 8000e82:	4b17      	ldr	r3, [pc, #92]	; (8000ee0 <SYSTEM_HandleCalibration+0x6c>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d025      	beq.n	8000ed6 <SYSTEM_HandleCalibration+0x62>
 8000e8a:	4b16      	ldr	r3, [pc, #88]	; (8000ee4 <SYSTEM_HandleCalibration+0x70>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	2201      	movs	r2, #1
 8000e90:	4053      	eors	r3, r2
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d01e      	beq.n	8000ed6 <SYSTEM_HandleCalibration+0x62>
		if (now > CALIBRATE_TIMEOUT) {
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4a13      	ldr	r2, [pc, #76]	; (8000ee8 <SYSTEM_HandleCalibration+0x74>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d903      	bls.n	8000ea8 <SYSTEM_HandleCalibration+0x34>
			calibrateWindow = false;
 8000ea0:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <SYSTEM_HandleCalibration+0x6c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	701a      	strb	r2, [r3, #0]
		} else if (now < CALIBRATE_TIMEOUT && !GPIO_Read(CALIBRATE_GPIO, CALIBRATE_PIN)) {
			SYSTEM_UpdateCalibration();
			calibrateWindow = false;
		}
	}
}
 8000ea6:	e016      	b.n	8000ed6 <SYSTEM_HandleCalibration+0x62>
		} else if (now < CALIBRATE_TIMEOUT && !GPIO_Read(CALIBRATE_GPIO, CALIBRATE_PIN)) {
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	4a10      	ldr	r2, [pc, #64]	; (8000eec <SYSTEM_HandleCalibration+0x78>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d812      	bhi.n	8000ed6 <SYSTEM_HandleCalibration+0x62>
 8000eb0:	2380      	movs	r3, #128	; 0x80
 8000eb2:	00db      	lsls	r3, r3, #3
 8000eb4:	4a0e      	ldr	r2, [pc, #56]	; (8000ef0 <SYSTEM_HandleCalibration+0x7c>)
 8000eb6:	0019      	movs	r1, r3
 8000eb8:	0010      	movs	r0, r2
 8000eba:	f7ff ff2e 	bl	8000d1a <GPIO_Read>
 8000ebe:	0003      	movs	r3, r0
 8000ec0:	001a      	movs	r2, r3
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	4053      	eors	r3, r2
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d004      	beq.n	8000ed6 <SYSTEM_HandleCalibration+0x62>
			SYSTEM_UpdateCalibration();
 8000ecc:	f000 f9ba 	bl	8001244 <SYSTEM_UpdateCalibration>
			calibrateWindow = false;
 8000ed0:	4b03      	ldr	r3, [pc, #12]	; (8000ee0 <SYSTEM_HandleCalibration+0x6c>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	701a      	strb	r2, [r3, #0]
}
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	b002      	add	sp, #8
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	46c0      	nop			; (mov r8, r8)
 8000ee0:	20000000 	.word	0x20000000
 8000ee4:	200001ac 	.word	0x200001ac
 8000ee8:	00001388 	.word	0x00001388
 8000eec:	00001387 	.word	0x00001387
 8000ef0:	50000400 	.word	0x50000400

08000ef4 <SYSTEM_HandleLEDs>:

void SYSTEM_HandleLEDs (void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
	// Initialize Loop Variables
	uint32_t now = CORE_GetTick();
 8000efa:	f7ff fef1 	bl	8000ce0 <CORE_GetTick>
 8000efe:	0003      	movs	r3, r0
 8000f00:	607b      	str	r3, [r7, #4]
	static uint32_t tick = 0;

	//
	if (fault.overTemperature)
 8000f02:	4b17      	ldr	r3, [pc, #92]	; (8000f60 <SYSTEM_HandleLEDs+0x6c>)
 8000f04:	789b      	ldrb	r3, [r3, #2]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d004      	beq.n	8000f14 <SYSTEM_HandleLEDs+0x20>
	{
		LED_RedON();
 8000f0a:	f7ff fbeb 	bl	80006e4 <LED_RedON>
		LED_GreenOFF();
 8000f0e:	f7ff fbf7 	bl	8000700 <LED_GreenOFF>
	else
	{
		LED_RedOFF();
		LED_GreenON();
	}
}
 8000f12:	e020      	b.n	8000f56 <SYSTEM_HandleLEDs+0x62>
	else if (fault.inputVoltage)
 8000f14:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <SYSTEM_HandleLEDs+0x6c>)
 8000f16:	785b      	ldrb	r3, [r3, #1]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d004      	beq.n	8000f26 <SYSTEM_HandleLEDs+0x32>
		LED_RedON();
 8000f1c:	f7ff fbe2 	bl	80006e4 <LED_RedON>
		LED_GreenON();
 8000f20:	f7ff fbd2 	bl	80006c8 <LED_GreenON>
}
 8000f24:	e017      	b.n	8000f56 <SYSTEM_HandleLEDs+0x62>
	else if (fault.signalLost)
 8000f26:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <SYSTEM_HandleLEDs+0x6c>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d00f      	beq.n	8000f4e <SYSTEM_HandleLEDs+0x5a>
		LED_RedOFF();
 8000f2e:	f7ff fbf5 	bl	800071c <LED_RedOFF>
		if (LED_FAULTFLASH <= (now - tick))
 8000f32:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <SYSTEM_HandleLEDs+0x70>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	1ad2      	subs	r2, r2, r3
 8000f3a:	23fa      	movs	r3, #250	; 0xfa
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d309      	bcc.n	8000f56 <SYSTEM_HandleLEDs+0x62>
			LED_GreenToggle();
 8000f42:	f7ff fbf9 	bl	8000738 <LED_GreenToggle>
			tick = now;
 8000f46:	4b07      	ldr	r3, [pc, #28]	; (8000f64 <SYSTEM_HandleLEDs+0x70>)
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	601a      	str	r2, [r3, #0]
}
 8000f4c:	e003      	b.n	8000f56 <SYSTEM_HandleLEDs+0x62>
		LED_RedOFF();
 8000f4e:	f7ff fbe5 	bl	800071c <LED_RedOFF>
		LED_GreenON();
 8000f52:	f7ff fbb9 	bl	80006c8 <LED_GreenON>
}
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	b002      	add	sp, #8
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	200001ac 	.word	0x200001ac
 8000f64:	200001fc 	.word	0x200001fc

08000f68 <SYSTEM_HandleOutputs>:

void SYSTEM_HandleOutputs (void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
	// Initialize Loop Variables
	static SYSTEM_FaultStatus fault_p;

	bool f = (fault.overTemperature || fault.inputVoltage || fault.signalLost);
 8000f6e:	4b25      	ldr	r3, [pc, #148]	; (8001004 <SYSTEM_HandleOutputs+0x9c>)
 8000f70:	789b      	ldrb	r3, [r3, #2]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d107      	bne.n	8000f86 <SYSTEM_HandleOutputs+0x1e>
 8000f76:	4b23      	ldr	r3, [pc, #140]	; (8001004 <SYSTEM_HandleOutputs+0x9c>)
 8000f78:	785b      	ldrb	r3, [r3, #1]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d103      	bne.n	8000f86 <SYSTEM_HandleOutputs+0x1e>
 8000f7e:	4b21      	ldr	r3, [pc, #132]	; (8001004 <SYSTEM_HandleOutputs+0x9c>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <SYSTEM_HandleOutputs+0x22>
 8000f86:	2201      	movs	r2, #1
 8000f88:	e000      	b.n	8000f8c <SYSTEM_HandleOutputs+0x24>
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	1dfb      	adds	r3, r7, #7
 8000f8e:	701a      	strb	r2, [r3, #0]
 8000f90:	781a      	ldrb	r2, [r3, #0]
 8000f92:	2101      	movs	r1, #1
 8000f94:	400a      	ands	r2, r1
 8000f96:	701a      	strb	r2, [r3, #0]
	bool f_p = (fault_p.overTemperature || fault_p.inputVoltage || fault_p.signalLost);
 8000f98:	4b1b      	ldr	r3, [pc, #108]	; (8001008 <SYSTEM_HandleOutputs+0xa0>)
 8000f9a:	789b      	ldrb	r3, [r3, #2]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d107      	bne.n	8000fb0 <SYSTEM_HandleOutputs+0x48>
 8000fa0:	4b19      	ldr	r3, [pc, #100]	; (8001008 <SYSTEM_HandleOutputs+0xa0>)
 8000fa2:	785b      	ldrb	r3, [r3, #1]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d103      	bne.n	8000fb0 <SYSTEM_HandleOutputs+0x48>
 8000fa8:	4b17      	ldr	r3, [pc, #92]	; (8001008 <SYSTEM_HandleOutputs+0xa0>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <SYSTEM_HandleOutputs+0x4c>
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	e000      	b.n	8000fb6 <SYSTEM_HandleOutputs+0x4e>
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	1dbb      	adds	r3, r7, #6
 8000fb8:	701a      	strb	r2, [r3, #0]
 8000fba:	781a      	ldrb	r2, [r3, #0]
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	400a      	ands	r2, r1
 8000fc0:	701a      	strb	r2, [r3, #0]

	// FAULT CONDITION - RISING EDGE
	if (f && !f_p)
 8000fc2:	1dfb      	adds	r3, r7, #7
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d00a      	beq.n	8000fe0 <SYSTEM_HandleOutputs+0x78>
 8000fca:	1dbb      	adds	r3, r7, #6
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2201      	movs	r2, #1
 8000fd0:	4053      	eors	r3, r2
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d003      	beq.n	8000fe0 <SYSTEM_HandleOutputs+0x78>
	{
		MOTOR_Update(MOTOR_OFF, MOTOR_OFF);
 8000fd8:	2100      	movs	r1, #0
 8000fda:	2000      	movs	r0, #0
 8000fdc:	f7ff fc84 	bl	80008e8 <MOTOR_Update>
	{
//		SERVO_Init();
	}

	// NO FAULT
	if (!f)
 8000fe0:	1dfb      	adds	r3, r7, #7
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	4053      	eors	r3, r2
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <SYSTEM_HandleOutputs+0x8a>
	{
//		SYSTEM_UpdateServo();
		SYSTEM_UpdateMotors();
 8000fee:	f000 f80d 	bl	800100c <SYSTEM_UpdateMotors>
	}

	fault_p = fault;
 8000ff2:	4b05      	ldr	r3, [pc, #20]	; (8001008 <SYSTEM_HandleOutputs+0xa0>)
 8000ff4:	4a03      	ldr	r2, [pc, #12]	; (8001004 <SYSTEM_HandleOutputs+0x9c>)
 8000ff6:	ca03      	ldmia	r2!, {r0, r1}
 8000ff8:	c303      	stmia	r3!, {r0, r1}
//	memcpy(&fault_p, fault, sizeof(fault_p));
}
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	b002      	add	sp, #8
 8001000:	bd80      	pop	{r7, pc}
 8001002:	46c0      	nop			; (mov r8, r8)
 8001004:	200001ac 	.word	0x200001ac
 8001008:	20000200 	.word	0x20000200

0800100c <SYSTEM_UpdateMotors>:
	// Update Servos
	SERVO_Update(servoA, servoB);
}

void SYSTEM_UpdateMotors (void)
{
 800100c:	b590      	push	{r4, r7, lr}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
	// Extract appropriate data for motors
	RADIO_Data* ptrDataRadio = RADIO_GetDataPtr();
 8001012:	f001 ffb3 	bl	8002f7c <RADIO_GetDataPtr>
 8001016:	0003      	movs	r3, r0
 8001018:	60fb      	str	r3, [r7, #12]
	uint16_t driveA = ptrDataRadio->ch[config.chDriveA];
 800101a:	4b39      	ldr	r3, [pc, #228]	; (8001100 <SYSTEM_UpdateMotors+0xf4>)
 800101c:	795b      	ldrb	r3, [r3, #5]
 800101e:	68fa      	ldr	r2, [r7, #12]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	18d3      	adds	r3, r2, r3
 8001024:	3302      	adds	r3, #2
 8001026:	2200      	movs	r2, #0
 8001028:	5e9b      	ldrsh	r3, [r3, r2]
 800102a:	b29a      	uxth	r2, r3
 800102c:	1dbb      	adds	r3, r7, #6
 800102e:	801a      	strh	r2, [r3, #0]
	uint16_t driveB = ptrDataRadio->ch[config.chDriveB];
 8001030:	4b33      	ldr	r3, [pc, #204]	; (8001100 <SYSTEM_UpdateMotors+0xf4>)
 8001032:	799b      	ldrb	r3, [r3, #6]
 8001034:	68fa      	ldr	r2, [r7, #12]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	18d3      	adds	r3, r2, r3
 800103a:	3302      	adds	r3, #2
 800103c:	2200      	movs	r2, #0
 800103e:	5e9b      	ldrsh	r3, [r3, r2]
 8001040:	b29a      	uxth	r2, r3
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	801a      	strh	r2, [r3, #0]

	// Check for channel reverse
	if (config.chRevMask[config.chDriveA]) { SYSTEM_ReverseRadio(&driveA); }
 8001046:	4b2e      	ldr	r3, [pc, #184]	; (8001100 <SYSTEM_UpdateMotors+0xf4>)
 8001048:	795b      	ldrb	r3, [r3, #5]
 800104a:	001a      	movs	r2, r3
 800104c:	4b2c      	ldr	r3, [pc, #176]	; (8001100 <SYSTEM_UpdateMotors+0xf4>)
 800104e:	189b      	adds	r3, r3, r2
 8001050:	7a5b      	ldrb	r3, [r3, #9]
 8001052:	b25b      	sxtb	r3, r3
 8001054:	2b00      	cmp	r3, #0
 8001056:	d003      	beq.n	8001060 <SYSTEM_UpdateMotors+0x54>
 8001058:	1dbb      	adds	r3, r7, #6
 800105a:	0018      	movs	r0, r3
 800105c:	f000 f8dc 	bl	8001218 <SYSTEM_ReverseRadio>
	if (config.chRevMask[config.chDriveB]) { SYSTEM_ReverseRadio(&driveB); }
 8001060:	4b27      	ldr	r3, [pc, #156]	; (8001100 <SYSTEM_UpdateMotors+0xf4>)
 8001062:	799b      	ldrb	r3, [r3, #6]
 8001064:	001a      	movs	r2, r3
 8001066:	4b26      	ldr	r3, [pc, #152]	; (8001100 <SYSTEM_UpdateMotors+0xf4>)
 8001068:	189b      	adds	r3, r3, r2
 800106a:	7a5b      	ldrb	r3, [r3, #9]
 800106c:	b25b      	sxtb	r3, r3
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <SYSTEM_UpdateMotors+0x6e>
 8001072:	1d3b      	adds	r3, r7, #4
 8001074:	0018      	movs	r0, r3
 8001076:	f000 f8cf 	bl	8001218 <SYSTEM_ReverseRadio>

	// Mix channels for Arcade drive mode
	if (config.mode == ARCADE)
 800107a:	4b21      	ldr	r3, [pc, #132]	; (8001100 <SYSTEM_UpdateMotors+0xf4>)
 800107c:	791b      	ldrb	r3, [r3, #4]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d129      	bne.n	80010d6 <SYSTEM_UpdateMotors+0xca>
	{
		uint16_t a = SYSTEM_RadioToMotor(driveA - (RADIO_CENTER - driveB));
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	881a      	ldrh	r2, [r3, #0]
 8001086:	1dbb      	adds	r3, r7, #6
 8001088:	881b      	ldrh	r3, [r3, #0]
 800108a:	18d3      	adds	r3, r2, r3
 800108c:	b29b      	uxth	r3, r3
 800108e:	4a1d      	ldr	r2, [pc, #116]	; (8001104 <SYSTEM_UpdateMotors+0xf8>)
 8001090:	4694      	mov	ip, r2
 8001092:	4463      	add	r3, ip
 8001094:	b29b      	uxth	r3, r3
 8001096:	0018      	movs	r0, r3
 8001098:	f000 f890 	bl	80011bc <SYSTEM_RadioToMotor>
 800109c:	0002      	movs	r2, r0
 800109e:	240a      	movs	r4, #10
 80010a0:	193b      	adds	r3, r7, r4
 80010a2:	801a      	strh	r2, [r3, #0]
		uint16_t b = SYSTEM_RadioToMotor(driveA + (RADIO_CENTER - driveB));
 80010a4:	1dbb      	adds	r3, r7, #6
 80010a6:	881a      	ldrh	r2, [r3, #0]
 80010a8:	1d3b      	adds	r3, r7, #4
 80010aa:	881b      	ldrh	r3, [r3, #0]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	4a15      	ldr	r2, [pc, #84]	; (8001108 <SYSTEM_UpdateMotors+0xfc>)
 80010b2:	4694      	mov	ip, r2
 80010b4:	4463      	add	r3, ip
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	0018      	movs	r0, r3
 80010ba:	f000 f87f 	bl	80011bc <SYSTEM_RadioToMotor>
 80010be:	0002      	movs	r2, r0
 80010c0:	2108      	movs	r1, #8
 80010c2:	187b      	adds	r3, r7, r1
 80010c4:	801a      	strh	r2, [r3, #0]
		driveA = a;
 80010c6:	1dbb      	adds	r3, r7, #6
 80010c8:	193a      	adds	r2, r7, r4
 80010ca:	8812      	ldrh	r2, [r2, #0]
 80010cc:	801a      	strh	r2, [r3, #0]
		driveB = b;
 80010ce:	1d3b      	adds	r3, r7, #4
 80010d0:	187a      	adds	r2, r7, r1
 80010d2:	8812      	ldrh	r2, [r2, #0]
 80010d4:	801a      	strh	r2, [r3, #0]
	}

	MOTOR_Update( SYSTEM_RadioToMotor(driveA), SYSTEM_RadioToMotor(driveB) );
 80010d6:	1dbb      	adds	r3, r7, #6
 80010d8:	881b      	ldrh	r3, [r3, #0]
 80010da:	0018      	movs	r0, r3
 80010dc:	f000 f86e 	bl	80011bc <SYSTEM_RadioToMotor>
 80010e0:	0004      	movs	r4, r0
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	881b      	ldrh	r3, [r3, #0]
 80010e6:	0018      	movs	r0, r3
 80010e8:	f000 f868 	bl	80011bc <SYSTEM_RadioToMotor>
 80010ec:	0003      	movs	r3, r0
 80010ee:	0019      	movs	r1, r3
 80010f0:	0020      	movs	r0, r4
 80010f2:	f7ff fbf9 	bl	80008e8 <MOTOR_Update>
}
 80010f6:	46c0      	nop			; (mov r8, r8)
 80010f8:	46bd      	mov	sp, r7
 80010fa:	b005      	add	sp, #20
 80010fc:	bd90      	pop	{r4, r7, pc}
 80010fe:	46c0      	nop			; (mov r8, r8)
 8001100:	200001b4 	.word	0x200001b4
 8001104:	fffffa24 	.word	0xfffffa24
 8001108:	000005dc 	.word	0x000005dc

0800110c <SYSTEM_VerifyConfig>:

void SYSTEM_VerifyConfig (void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
	if ((config.hashA != CONFIG_HASH_A) || (config.hashB != CONFIG_HASH_B))
 8001110:	4b1b      	ldr	r3, [pc, #108]	; (8001180 <SYSTEM_VerifyConfig+0x74>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a1b      	ldr	r2, [pc, #108]	; (8001184 <SYSTEM_VerifyConfig+0x78>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d104      	bne.n	8001124 <SYSTEM_VerifyConfig+0x18>
 800111a:	4b19      	ldr	r3, [pc, #100]	; (8001180 <SYSTEM_VerifyConfig+0x74>)
 800111c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111e:	4a1a      	ldr	r2, [pc, #104]	; (8001188 <SYSTEM_VerifyConfig+0x7c>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d02a      	beq.n	800117a <SYSTEM_VerifyConfig+0x6e>
	{
		config.hashA = 				CONFIG_HASH_A;
 8001124:	4b16      	ldr	r3, [pc, #88]	; (8001180 <SYSTEM_VerifyConfig+0x74>)
 8001126:	4a17      	ldr	r2, [pc, #92]	; (8001184 <SYSTEM_VerifyConfig+0x78>)
 8001128:	601a      	str	r2, [r3, #0]
		config.mode = 				TANK;
 800112a:	4b15      	ldr	r3, [pc, #84]	; (8001180 <SYSTEM_VerifyConfig+0x74>)
 800112c:	2200      	movs	r2, #0
 800112e:	711a      	strb	r2, [r3, #4]
		config.chDriveA = 			IP1;
 8001130:	4b13      	ldr	r3, [pc, #76]	; (8001180 <SYSTEM_VerifyConfig+0x74>)
 8001132:	2200      	movs	r2, #0
 8001134:	715a      	strb	r2, [r3, #5]
		config.chDriveB = 			IP2;
 8001136:	4b12      	ldr	r3, [pc, #72]	; (8001180 <SYSTEM_VerifyConfig+0x74>)
 8001138:	2201      	movs	r2, #1
 800113a:	719a      	strb	r2, [r3, #6]
		config.chServoA = 			IP3;
 800113c:	4b10      	ldr	r3, [pc, #64]	; (8001180 <SYSTEM_VerifyConfig+0x74>)
 800113e:	2202      	movs	r2, #2
 8001140:	71da      	strb	r2, [r3, #7]
		config.chServoB = 			IP4;
 8001142:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <SYSTEM_VerifyConfig+0x74>)
 8001144:	2203      	movs	r2, #3
 8001146:	721a      	strb	r2, [r3, #8]
		memset(config.chRevMask, 0, sizeof(config.chRevMask));
 8001148:	4b10      	ldr	r3, [pc, #64]	; (800118c <SYSTEM_VerifyConfig+0x80>)
 800114a:	2210      	movs	r2, #16
 800114c:	2100      	movs	r1, #0
 800114e:	0018      	movs	r0, r3
 8001150:	f004 f815 	bl	800517e <memset>
		config.radio.Baud_SBUS = 	SBUS_BAUD;
 8001154:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <SYSTEM_VerifyConfig+0x74>)
 8001156:	4a0e      	ldr	r2, [pc, #56]	; (8001190 <SYSTEM_VerifyConfig+0x84>)
 8001158:	61da      	str	r2, [r3, #28]
		config.radio.Protocol =		PWM;
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <SYSTEM_VerifyConfig+0x74>)
 800115c:	2220      	movs	r2, #32
 800115e:	2103      	movs	r1, #3
 8001160:	5499      	strb	r1, [r3, r2]
		config.hashB = 				CONFIG_HASH_B;
 8001162:	4b07      	ldr	r3, [pc, #28]	; (8001180 <SYSTEM_VerifyConfig+0x74>)
 8001164:	4a08      	ldr	r2, [pc, #32]	; (8001188 <SYSTEM_VerifyConfig+0x7c>)
 8001166:	625a      	str	r2, [r3, #36]	; 0x24

		EEPROM_Write(EEPROM_OFFSET, &config, sizeof(config));
 8001168:	4b05      	ldr	r3, [pc, #20]	; (8001180 <SYSTEM_VerifyConfig+0x74>)
 800116a:	2228      	movs	r2, #40	; 0x28
 800116c:	0019      	movs	r1, r3
 800116e:	2000      	movs	r0, #0
 8001170:	f002 ff7c 	bl	800406c <EEPROM_Write>
		LED_nPulse(2);
 8001174:	2002      	movs	r0, #2
 8001176:	f7ff fb0a 	bl	800078e <LED_nPulse>
	}
}
 800117a:	46c0      	nop			; (mov r8, r8)
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	200001b4 	.word	0x200001b4
 8001184:	7ae12336 	.word	0x7ae12336
 8001188:	8771c50d 	.word	0x8771c50d
 800118c:	200001bd 	.word	0x200001bd
 8001190:	000186a0 	.word	0x000186a0

08001194 <SYSTEM_GetBatteryVoltage>:

uint32_t SYSTEM_GetBatteryVoltage (void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
	uint32_t ain = ADC_Read(BATTERY_CHANNEL);
 800119a:	2080      	movs	r0, #128	; 0x80
 800119c:	f002 fd2a 	bl	8003bf4 <ADC_Read>
 80011a0:	0003      	movs	r3, r0
 80011a2:	607b      	str	r3, [r7, #4]
	return AIN_AinToDivider(ain, BATTERY_DET_RLOW, BATTERY_DET_RHIGH);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2264      	movs	r2, #100	; 0x64
 80011a8:	2112      	movs	r1, #18
 80011aa:	0018      	movs	r0, r3
 80011ac:	f002 fd48 	bl	8003c40 <AIN_AinToDivider>
 80011b0:	0003      	movs	r3, r0
}
 80011b2:	0018      	movs	r0, r3
 80011b4:	46bd      	mov	sp, r7
 80011b6:	b002      	add	sp, #8
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <SYSTEM_RadioToMotor>:

int32_t SYSTEM_RadioToMotor (uint16_t radio)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	0002      	movs	r2, r0
 80011c4:	1dbb      	adds	r3, r7, #6
 80011c6:	801a      	strh	r2, [r3, #0]
	if (radio > RADIO_MAX)
 80011c8:	1dbb      	adds	r3, r7, #6
 80011ca:	881a      	ldrh	r2, [r3, #0]
 80011cc:	23fa      	movs	r3, #250	; 0xfa
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d904      	bls.n	80011de <SYSTEM_RadioToMotor+0x22>
	{
		radio = RADIO_MAX;
 80011d4:	1dbb      	adds	r3, r7, #6
 80011d6:	22fa      	movs	r2, #250	; 0xfa
 80011d8:	00d2      	lsls	r2, r2, #3
 80011da:	801a      	strh	r2, [r3, #0]
 80011dc:	e009      	b.n	80011f2 <SYSTEM_RadioToMotor+0x36>
	}
	else if (radio < RADIO_MIN)
 80011de:	1dbb      	adds	r3, r7, #6
 80011e0:	881a      	ldrh	r2, [r3, #0]
 80011e2:	23fa      	movs	r3, #250	; 0xfa
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d203      	bcs.n	80011f2 <SYSTEM_RadioToMotor+0x36>
	{
		radio = RADIO_MIN;
 80011ea:	1dbb      	adds	r3, r7, #6
 80011ec:	22fa      	movs	r2, #250	; 0xfa
 80011ee:	0092      	lsls	r2, r2, #2
 80011f0:	801a      	strh	r2, [r3, #0]
	}

	return (((int32_t)radio - RADIO_CENTER) * MOTOR_MAX) / RADIO_HALFSCALE;
 80011f2:	1dbb      	adds	r3, r7, #6
 80011f4:	881b      	ldrh	r3, [r3, #0]
 80011f6:	4a07      	ldr	r2, [pc, #28]	; (8001214 <SYSTEM_RadioToMotor+0x58>)
 80011f8:	4694      	mov	ip, r2
 80011fa:	4463      	add	r3, ip
 80011fc:	021b      	lsls	r3, r3, #8
 80011fe:	22fa      	movs	r2, #250	; 0xfa
 8001200:	0051      	lsls	r1, r2, #1
 8001202:	0018      	movs	r0, r3
 8001204:	f7ff f80a 	bl	800021c <__divsi3>
 8001208:	0003      	movs	r3, r0
}
 800120a:	0018      	movs	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	b002      	add	sp, #8
 8001210:	bd80      	pop	{r7, pc}
 8001212:	46c0      	nop			; (mov r8, r8)
 8001214:	fffffa24 	.word	0xfffffa24

08001218 <SYSTEM_ReverseRadio>:

void SYSTEM_ReverseRadio (uint16_t* radio)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
	uint16_t r = *radio;
 8001220:	210e      	movs	r1, #14
 8001222:	187b      	adds	r3, r7, r1
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	8812      	ldrh	r2, [r2, #0]
 8001228:	801a      	strh	r2, [r3, #0]
	*radio = ((2 * RADIO_CENTER) - r);
 800122a:	187b      	adds	r3, r7, r1
 800122c:	881b      	ldrh	r3, [r3, #0]
 800122e:	4a04      	ldr	r2, [pc, #16]	; (8001240 <SYSTEM_ReverseRadio+0x28>)
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	b29a      	uxth	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	801a      	strh	r2, [r3, #0]
}
 8001238:	46c0      	nop			; (mov r8, r8)
 800123a:	46bd      	mov	sp, r7
 800123c:	b004      	add	sp, #16
 800123e:	bd80      	pop	{r7, pc}
 8001240:	00000bb8 	.word	0x00000bb8

08001244 <SYSTEM_UpdateCalibration>:


//////////////////////////////////////////////////////////////////////////////////////////////////////////////

void SYSTEM_UpdateCalibration (void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08a      	sub	sp, #40	; 0x28
 8001248:	af00      	add	r7, sp, #0
	// DISABLE ALL OUTPUTS
	MOTOR_Update(MOTOR_OFF, MOTOR_OFF);
 800124a:	2100      	movs	r1, #0
 800124c:	2000      	movs	r0, #0
 800124e:	f7ff fb4b 	bl	80008e8 <MOTOR_Update>
	SERVO_Deinit();
 8001252:	f7ff fcb9 	bl	8000bc8 <SERVO_Deinit>

	// CREATE LOCAL VARIABLE TO ASSIST IN CALIBRATION
	SYSTEM_Config c;

	//
	RADIO_Detect(&config.radio);
 8001256:	4b47      	ldr	r3, [pc, #284]	; (8001374 <SYSTEM_UpdateCalibration+0x130>)
 8001258:	0018      	movs	r0, r3
 800125a:	f001 fd7f 	bl	8002d5c <RADIO_Detect>
	RADIO_Init(&config.radio);
 800125e:	4b45      	ldr	r3, [pc, #276]	; (8001374 <SYSTEM_UpdateCalibration+0x130>)
 8001260:	0018      	movs	r0, r3
 8001262:	f001 fdd7 	bl	8002e14 <RADIO_Init>

	//
	SYSTEM_CalibrateSampleChannelZero();
 8001266:	f000 f889 	bl	800137c <SYSTEM_CalibrateSampleChannelZero>

	// TURN ON LEDS TO TELL OPERATOR CALIBRATION IS STARTING
	LED_nPulse(5);
 800126a:	2005      	movs	r0, #5
 800126c:	f7ff fa8f 	bl	800078e <LED_nPulse>
	LED_GreenON();
 8001270:	f7ff fa2a 	bl	80006c8 <LED_GreenON>
	LED_RedON();
 8001274:	f7ff fa36 	bl	80006e4 <LED_RedON>
	SYSTEM_CalibrateMotorSameDirection(&c);
 8001278:	003b      	movs	r3, r7
 800127a:	0018      	movs	r0, r3
 800127c:	f000 f8ac 	bl	80013d8 <SYSTEM_CalibrateMotorSameDirection>
	LED_RedOFF();
 8001280:	f7ff fa4c 	bl	800071c <LED_RedOFF>
	LED_GreenOFF();
 8001284:	f7ff fa3c 	bl	8000700 <LED_GreenOFF>

	//
	SYSTEM_WaitForResetInputs();
 8001288:	f000 fbfe 	bl	8001a88 <SYSTEM_WaitForResetInputs>
	CORE_Delay(CALIBRATION_TEST_DELAY);
 800128c:	23fa      	movs	r3, #250	; 0xfa
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	0018      	movs	r0, r3
 8001292:	f002 fe4f 	bl	8003f34 <CORE_Delay>

	//
	LED_GreenON();
 8001296:	f7ff fa17 	bl	80006c8 <LED_GreenON>
	LED_RedON();
 800129a:	f7ff fa23 	bl	80006e4 <LED_RedON>
	SYSTEM_CalibrateMotorOppositeDirection(&c);
 800129e:	003b      	movs	r3, r7
 80012a0:	0018      	movs	r0, r3
 80012a2:	f000 f98b 	bl	80015bc <SYSTEM_CalibrateMotorOppositeDirection>
	LED_RedOFF();
 80012a6:	f7ff fa39 	bl	800071c <LED_RedOFF>
	LED_GreenOFF();
 80012aa:	f7ff fa29 	bl	8000700 <LED_GreenOFF>

	//
	SYSTEM_WaitForResetInputs();
 80012ae:	f000 fbeb 	bl	8001a88 <SYSTEM_WaitForResetInputs>
	CORE_Delay(CALIBRATION_TEST_DELAY);
 80012b2:	23fa      	movs	r3, #250	; 0xfa
 80012b4:	00db      	lsls	r3, r3, #3
 80012b6:	0018      	movs	r0, r3
 80012b8:	f002 fe3c 	bl	8003f34 <CORE_Delay>

	// TURN ON LEDS TO TELL OPERATOR CALIBRATION IS STARTING
	LED_GreenON();
 80012bc:	f7ff fa04 	bl	80006c8 <LED_GreenON>
	LED_RedON();
 80012c0:	f7ff fa10 	bl	80006e4 <LED_RedON>
	SYSTEM_CalibrateServoA(&c);
 80012c4:	003b      	movs	r3, r7
 80012c6:	0018      	movs	r0, r3
 80012c8:	f000 fada 	bl	8001880 <SYSTEM_CalibrateServoA>
	LED_RedOFF();
 80012cc:	f7ff fa26 	bl	800071c <LED_RedOFF>
	LED_GreenOFF();
 80012d0:	f7ff fa16 	bl	8000700 <LED_GreenOFF>

	// WAIT FOR INPUTS TO FALL BACK TO ZERO REFERENCE
	SYSTEM_WaitForResetInputs();
 80012d4:	f000 fbd8 	bl	8001a88 <SYSTEM_WaitForResetInputs>
	CORE_Delay(CALIBRATION_TEST_DELAY);
 80012d8:	23fa      	movs	r3, #250	; 0xfa
 80012da:	00db      	lsls	r3, r3, #3
 80012dc:	0018      	movs	r0, r3
 80012de:	f002 fe29 	bl	8003f34 <CORE_Delay>

	// TURN ON LEDS TO TELL OPERATOR CALIBRATION IS STARTING
	LED_GreenON();
 80012e2:	f7ff f9f1 	bl	80006c8 <LED_GreenON>
	LED_RedON();
 80012e6:	f7ff f9fd 	bl	80006e4 <LED_RedON>
	SYSTEM_CalibrateServoB(&c);
 80012ea:	003b      	movs	r3, r7
 80012ec:	0018      	movs	r0, r3
 80012ee:	f000 fb49 	bl	8001984 <SYSTEM_CalibrateServoB>
	LED_RedOFF();
 80012f2:	f7ff fa13 	bl	800071c <LED_RedOFF>
	LED_GreenOFF();
 80012f6:	f7ff fa03 	bl	8000700 <LED_GreenOFF>

	// WAIT FOR INPUTS TO FALL BACK TO ZERO REFERENCE
	SYSTEM_WaitForResetInputs();
 80012fa:	f000 fbc5 	bl	8001a88 <SYSTEM_WaitForResetInputs>
	CORE_Delay(CALIBRATION_TEST_DELAY);
 80012fe:	23fa      	movs	r3, #250	; 0xfa
 8001300:	00db      	lsls	r3, r3, #3
 8001302:	0018      	movs	r0, r3
 8001304:	f002 fe16 	bl	8003f34 <CORE_Delay>

	// WRITE NEW CONFIG TO EEPROM
	config.mode = c.mode;
 8001308:	003b      	movs	r3, r7
 800130a:	791a      	ldrb	r2, [r3, #4]
 800130c:	4b1a      	ldr	r3, [pc, #104]	; (8001378 <SYSTEM_UpdateCalibration+0x134>)
 800130e:	711a      	strb	r2, [r3, #4]
	config.chDriveA = c.chDriveA;
 8001310:	003b      	movs	r3, r7
 8001312:	795a      	ldrb	r2, [r3, #5]
 8001314:	4b18      	ldr	r3, [pc, #96]	; (8001378 <SYSTEM_UpdateCalibration+0x134>)
 8001316:	715a      	strb	r2, [r3, #5]
	config.chDriveB = c.chDriveB;
 8001318:	003b      	movs	r3, r7
 800131a:	799a      	ldrb	r2, [r3, #6]
 800131c:	4b16      	ldr	r3, [pc, #88]	; (8001378 <SYSTEM_UpdateCalibration+0x134>)
 800131e:	719a      	strb	r2, [r3, #6]
	config.chServoA = c.chServoA;
 8001320:	003b      	movs	r3, r7
 8001322:	79da      	ldrb	r2, [r3, #7]
 8001324:	4b14      	ldr	r3, [pc, #80]	; (8001378 <SYSTEM_UpdateCalibration+0x134>)
 8001326:	71da      	strb	r2, [r3, #7]
	config.chServoB = c.chServoB;
 8001328:	003b      	movs	r3, r7
 800132a:	7a1a      	ldrb	r2, [r3, #8]
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <SYSTEM_UpdateCalibration+0x134>)
 800132e:	721a      	strb	r2, [r3, #8]
	memcpy(config.chRevMask, c.chRevMask, sizeof(config.chRevMask));
 8001330:	4a11      	ldr	r2, [pc, #68]	; (8001378 <SYSTEM_UpdateCalibration+0x134>)
 8001332:	2009      	movs	r0, #9
 8001334:	003b      	movs	r3, r7
 8001336:	2109      	movs	r1, #9
 8001338:	1810      	adds	r0, r2, r0
 800133a:	185b      	adds	r3, r3, r1
 800133c:	2210      	movs	r2, #16
 800133e:	0019      	movs	r1, r3
 8001340:	f003 ff14 	bl	800516c <memcpy>
	EEPROM_Write(EEPROM_OFFSET, &config, sizeof(config));
 8001344:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <SYSTEM_UpdateCalibration+0x134>)
 8001346:	2228      	movs	r2, #40	; 0x28
 8001348:	0019      	movs	r1, r3
 800134a:	2000      	movs	r0, #0
 800134c:	f002 fe8e 	bl	800406c <EEPROM_Write>

	// PULSE LED TO LET USER KNOW SUCCESSFUL
	LED_nPulse (5);
 8001350:	2005      	movs	r0, #5
 8001352:	f7ff fa1c 	bl	800078e <LED_nPulse>
	LED_RedOFF();
 8001356:	f7ff f9e1 	bl	800071c <LED_RedOFF>
	LED_GreenOFF();
 800135a:	f7ff f9d1 	bl	8000700 <LED_GreenOFF>

	// Reinitialize Outputs
	MOTOR_Update(MOTOR_OFF, MOTOR_OFF);
 800135e:	2100      	movs	r1, #0
 8001360:	2000      	movs	r0, #0
 8001362:	f7ff fac1 	bl	80008e8 <MOTOR_Update>
	SERVO_Init();
 8001366:	f7ff fbcf 	bl	8000b08 <SERVO_Init>
}
 800136a:	46c0      	nop			; (mov r8, r8)
 800136c:	46bd      	mov	sp, r7
 800136e:	b00a      	add	sp, #40	; 0x28
 8001370:	bd80      	pop	{r7, pc}
 8001372:	46c0      	nop			; (mov r8, r8)
 8001374:	200001d0 	.word	0x200001d0
 8001378:	200001b4 	.word	0x200001b4

0800137c <SYSTEM_CalibrateSampleChannelZero>:

void SYSTEM_CalibrateSampleChannelZero (void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
	// Initialize Function Variables
	RADIO_Data * ptrDataRadio = RADIO_GetDataPtr();
 8001382:	f001 fdfb 	bl	8002f7c <RADIO_GetDataPtr>
 8001386:	0003      	movs	r3, r0
 8001388:	603b      	str	r3, [r7, #0]

	// Update Radio Inputs
	RADIO_Update();
 800138a:	f001 fd93 	bl	8002eb4 <RADIO_Update>

	// Sample All Radio Inputs
	for (uint8_t i = 0; i < ptrDataRadio->ch_num; i++)
 800138e:	1dfb      	adds	r3, r7, #7
 8001390:	2200      	movs	r2, #0
 8001392:	701a      	strb	r2, [r3, #0]
 8001394:	e012      	b.n	80013bc <SYSTEM_CalibrateSampleChannelZero+0x40>
	{
		channelZero[i] = ptrDataRadio->ch[i];
 8001396:	1dfb      	adds	r3, r7, #7
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	683a      	ldr	r2, [r7, #0]
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	18d3      	adds	r3, r2, r3
 80013a0:	3302      	adds	r3, #2
 80013a2:	2100      	movs	r1, #0
 80013a4:	5e59      	ldrsh	r1, [r3, r1]
 80013a6:	1dfb      	adds	r3, r7, #7
 80013a8:	781a      	ldrb	r2, [r3, #0]
 80013aa:	b289      	uxth	r1, r1
 80013ac:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <SYSTEM_CalibrateSampleChannelZero+0x58>)
 80013ae:	0052      	lsls	r2, r2, #1
 80013b0:	52d1      	strh	r1, [r2, r3]
	for (uint8_t i = 0; i < ptrDataRadio->ch_num; i++)
 80013b2:	1dfb      	adds	r3, r7, #7
 80013b4:	781a      	ldrb	r2, [r3, #0]
 80013b6:	1dfb      	adds	r3, r7, #7
 80013b8:	3201      	adds	r2, #1
 80013ba:	701a      	strb	r2, [r3, #0]
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	785b      	ldrb	r3, [r3, #1]
 80013c0:	1dfa      	adds	r2, r7, #7
 80013c2:	7812      	ldrb	r2, [r2, #0]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d3e6      	bcc.n	8001396 <SYSTEM_CalibrateSampleChannelZero+0x1a>
	}
}
 80013c8:	46c0      	nop			; (mov r8, r8)
 80013ca:	46c0      	nop			; (mov r8, r8)
 80013cc:	46bd      	mov	sp, r7
 80013ce:	b002      	add	sp, #8
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	46c0      	nop			; (mov r8, r8)
 80013d4:	200001dc 	.word	0x200001dc

080013d8 <SYSTEM_CalibrateMotorSameDirection>:

void SYSTEM_CalibrateMotorSameDirection (SYSTEM_Config* c)
{
 80013d8:	b590      	push	{r4, r7, lr}
 80013da:	b087      	sub	sp, #28
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
	// Initialize Function Variables
	RADIO_Data * ptrDataRadio = RADIO_GetDataPtr();
 80013e0:	f001 fdcc 	bl	8002f7c <RADIO_GetDataPtr>
 80013e4:	0003      	movs	r3, r0
 80013e6:	613b      	str	r3, [r7, #16]

	// JERK THE MOTORS
	MOTOR_Update(MOTOR_MAX, MOTOR_MAX);
 80013e8:	2380      	movs	r3, #128	; 0x80
 80013ea:	005a      	lsls	r2, r3, #1
 80013ec:	2380      	movs	r3, #128	; 0x80
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	0011      	movs	r1, r2
 80013f2:	0018      	movs	r0, r3
 80013f4:	f7ff fa78 	bl	80008e8 <MOTOR_Update>
	CORE_Delay(CALIBRATE_MOTORJERK_PERIOD);
 80013f8:	23fa      	movs	r3, #250	; 0xfa
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	0018      	movs	r0, r3
 80013fe:	f002 fd99 	bl	8003f34 <CORE_Delay>
	MOTOR_Update(MOTOR_OFF, MOTOR_OFF);
 8001402:	2100      	movs	r1, #0
 8001404:	2000      	movs	r0, #0
 8001406:	f7ff fa6f 	bl	80008e8 <MOTOR_Update>

	// CHECK FOR OPERATOR INPUT
	while (1)
	{
		// Initialize Loop Variables
		uint8_t numSticks = 0;
 800140a:	2317      	movs	r3, #23
 800140c:	18fb      	adds	r3, r7, r3
 800140e:	2200      	movs	r2, #0
 8001410:	701a      	strb	r2, [r3, #0]
		uint32_t tick = CORE_GetTick();
 8001412:	f7ff fc65 	bl	8000ce0 <CORE_GetTick>
 8001416:	0003      	movs	r3, r0
 8001418:	60fb      	str	r3, [r7, #12]

		// Update Radio Inputs
		RADIO_Update();
 800141a:	f001 fd4b 	bl	8002eb4 <RADIO_Update>

		// Check All Inputs
		for (uint8_t i = 0; i < ptrDataRadio->ch_num; i++)
 800141e:	2316      	movs	r3, #22
 8001420:	18fb      	adds	r3, r7, r3
 8001422:	2200      	movs	r2, #0
 8001424:	701a      	strb	r2, [r3, #0]
 8001426:	e09c      	b.n	8001562 <SYSTEM_CalibrateMotorSameDirection+0x18a>
		{
			// Detect Drive Channel A
			if (numSticks == 0)
 8001428:	2417      	movs	r4, #23
 800142a:	193b      	adds	r3, r7, r4
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d140      	bne.n	80014b4 <SYSTEM_CalibrateMotorSameDirection+0xdc>
			{
				if (ptrDataRadio->ch[i] > (channelZero[i] + CALIBRATE_INPUT_THRESHOLD))
 8001432:	2016      	movs	r0, #22
 8001434:	183b      	adds	r3, r7, r0
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	18d3      	adds	r3, r2, r3
 800143e:	3302      	adds	r3, #2
 8001440:	2200      	movs	r2, #0
 8001442:	5e9b      	ldrsh	r3, [r3, r2]
 8001444:	0019      	movs	r1, r3
 8001446:	183b      	adds	r3, r7, r0
 8001448:	781a      	ldrb	r2, [r3, #0]
 800144a:	4b5b      	ldr	r3, [pc, #364]	; (80015b8 <SYSTEM_CalibrateMotorSameDirection+0x1e0>)
 800144c:	0052      	lsls	r2, r2, #1
 800144e:	5ad3      	ldrh	r3, [r2, r3]
 8001450:	33c8      	adds	r3, #200	; 0xc8
 8001452:	4299      	cmp	r1, r3
 8001454:	dd0d      	ble.n	8001472 <SYSTEM_CalibrateMotorSameDirection+0x9a>
				{
					c->chDriveA = i;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	183a      	adds	r2, r7, r0
 800145a:	7812      	ldrb	r2, [r2, #0]
 800145c:	715a      	strb	r2, [r3, #5]
					c->chRevMask[i] = false;
 800145e:	183b      	adds	r3, r7, r0
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	18d3      	adds	r3, r2, r3
 8001466:	2200      	movs	r2, #0
 8001468:	725a      	strb	r2, [r3, #9]
					numSticks = 1;
 800146a:	193b      	adds	r3, r7, r4
 800146c:	2201      	movs	r2, #1
 800146e:	701a      	strb	r2, [r3, #0]
 8001470:	e071      	b.n	8001556 <SYSTEM_CalibrateMotorSameDirection+0x17e>
				}
				else if (ptrDataRadio->ch[i] < (channelZero[i] - CALIBRATE_INPUT_THRESHOLD))
 8001472:	2016      	movs	r0, #22
 8001474:	183b      	adds	r3, r7, r0
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	18d3      	adds	r3, r2, r3
 800147e:	3302      	adds	r3, #2
 8001480:	2200      	movs	r2, #0
 8001482:	5e9b      	ldrsh	r3, [r3, r2]
 8001484:	0019      	movs	r1, r3
 8001486:	183b      	adds	r3, r7, r0
 8001488:	781a      	ldrb	r2, [r3, #0]
 800148a:	4b4b      	ldr	r3, [pc, #300]	; (80015b8 <SYSTEM_CalibrateMotorSameDirection+0x1e0>)
 800148c:	0052      	lsls	r2, r2, #1
 800148e:	5ad3      	ldrh	r3, [r2, r3]
 8001490:	3bc8      	subs	r3, #200	; 0xc8
 8001492:	4299      	cmp	r1, r3
 8001494:	da5f      	bge.n	8001556 <SYSTEM_CalibrateMotorSameDirection+0x17e>
				{
					c->chDriveA = i;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	183a      	adds	r2, r7, r0
 800149a:	7812      	ldrb	r2, [r2, #0]
 800149c:	715a      	strb	r2, [r3, #5]
					c->chRevMask[i] = true;
 800149e:	183b      	adds	r3, r7, r0
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	18d3      	adds	r3, r2, r3
 80014a6:	2201      	movs	r2, #1
 80014a8:	725a      	strb	r2, [r3, #9]
					numSticks = 1;
 80014aa:	2317      	movs	r3, #23
 80014ac:	18fb      	adds	r3, r7, r3
 80014ae:	2201      	movs	r2, #1
 80014b0:	701a      	strb	r2, [r3, #0]
 80014b2:	e050      	b.n	8001556 <SYSTEM_CalibrateMotorSameDirection+0x17e>
				}
			}
			// Detect Drive Channel B
			else // if (numSticks >= 1)
			{
				if (ptrDataRadio->ch[i] > (channelZero[i] + CALIBRATE_INPUT_THRESHOLD))
 80014b4:	2016      	movs	r0, #22
 80014b6:	183b      	adds	r3, r7, r0
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	18d3      	adds	r3, r2, r3
 80014c0:	3302      	adds	r3, #2
 80014c2:	2200      	movs	r2, #0
 80014c4:	5e9b      	ldrsh	r3, [r3, r2]
 80014c6:	0019      	movs	r1, r3
 80014c8:	183b      	adds	r3, r7, r0
 80014ca:	781a      	ldrb	r2, [r3, #0]
 80014cc:	4b3a      	ldr	r3, [pc, #232]	; (80015b8 <SYSTEM_CalibrateMotorSameDirection+0x1e0>)
 80014ce:	0052      	lsls	r2, r2, #1
 80014d0:	5ad3      	ldrh	r3, [r2, r3]
 80014d2:	33c8      	adds	r3, #200	; 0xc8
 80014d4:	4299      	cmp	r1, r3
 80014d6:	dd16      	ble.n	8001506 <SYSTEM_CalibrateMotorSameDirection+0x12e>
				{
					if (i != c->chDriveA) {
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	795b      	ldrb	r3, [r3, #5]
 80014dc:	183a      	adds	r2, r7, r0
 80014de:	7812      	ldrb	r2, [r2, #0]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d038      	beq.n	8001556 <SYSTEM_CalibrateMotorSameDirection+0x17e>
						c->chDriveB = i;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	183a      	adds	r2, r7, r0
 80014e8:	7812      	ldrb	r2, [r2, #0]
 80014ea:	719a      	strb	r2, [r3, #6]
						c->chRevMask[i] = false;
 80014ec:	183b      	adds	r3, r7, r0
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	18d3      	adds	r3, r2, r3
 80014f4:	2200      	movs	r2, #0
 80014f6:	725a      	strb	r2, [r3, #9]
						numSticks += 1;
 80014f8:	2217      	movs	r2, #23
 80014fa:	18bb      	adds	r3, r7, r2
 80014fc:	18ba      	adds	r2, r7, r2
 80014fe:	7812      	ldrb	r2, [r2, #0]
 8001500:	3201      	adds	r2, #1
 8001502:	701a      	strb	r2, [r3, #0]
 8001504:	e027      	b.n	8001556 <SYSTEM_CalibrateMotorSameDirection+0x17e>
					}

				}
				else if (ptrDataRadio->ch[i] < (channelZero[i] - CALIBRATE_INPUT_THRESHOLD))
 8001506:	2016      	movs	r0, #22
 8001508:	183b      	adds	r3, r7, r0
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	18d3      	adds	r3, r2, r3
 8001512:	3302      	adds	r3, #2
 8001514:	2200      	movs	r2, #0
 8001516:	5e9b      	ldrsh	r3, [r3, r2]
 8001518:	0019      	movs	r1, r3
 800151a:	183b      	adds	r3, r7, r0
 800151c:	781a      	ldrb	r2, [r3, #0]
 800151e:	4b26      	ldr	r3, [pc, #152]	; (80015b8 <SYSTEM_CalibrateMotorSameDirection+0x1e0>)
 8001520:	0052      	lsls	r2, r2, #1
 8001522:	5ad3      	ldrh	r3, [r2, r3]
 8001524:	3bc8      	subs	r3, #200	; 0xc8
 8001526:	4299      	cmp	r1, r3
 8001528:	da15      	bge.n	8001556 <SYSTEM_CalibrateMotorSameDirection+0x17e>
				{
					if (i != c->chDriveA) {
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	795b      	ldrb	r3, [r3, #5]
 800152e:	183a      	adds	r2, r7, r0
 8001530:	7812      	ldrb	r2, [r2, #0]
 8001532:	429a      	cmp	r2, r3
 8001534:	d00f      	beq.n	8001556 <SYSTEM_CalibrateMotorSameDirection+0x17e>
						c->chDriveB = i;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	183a      	adds	r2, r7, r0
 800153a:	7812      	ldrb	r2, [r2, #0]
 800153c:	719a      	strb	r2, [r3, #6]
						c->chRevMask[i] = true;
 800153e:	183b      	adds	r3, r7, r0
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	18d3      	adds	r3, r2, r3
 8001546:	2201      	movs	r2, #1
 8001548:	725a      	strb	r2, [r3, #9]
						numSticks += 1;
 800154a:	2217      	movs	r2, #23
 800154c:	18bb      	adds	r3, r7, r2
 800154e:	18ba      	adds	r2, r7, r2
 8001550:	7812      	ldrb	r2, [r2, #0]
 8001552:	3201      	adds	r2, #1
 8001554:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < ptrDataRadio->ch_num; i++)
 8001556:	2116      	movs	r1, #22
 8001558:	187b      	adds	r3, r7, r1
 800155a:	781a      	ldrb	r2, [r3, #0]
 800155c:	187b      	adds	r3, r7, r1
 800155e:	3201      	adds	r2, #1
 8001560:	701a      	strb	r2, [r3, #0]
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	785b      	ldrb	r3, [r3, #1]
 8001566:	2216      	movs	r2, #22
 8001568:	18ba      	adds	r2, r7, r2
 800156a:	7812      	ldrb	r2, [r2, #0]
 800156c:	429a      	cmp	r2, r3
 800156e:	d200      	bcs.n	8001572 <SYSTEM_CalibrateMotorSameDirection+0x19a>
 8001570:	e75a      	b.n	8001428 <SYSTEM_CalibrateMotorSameDirection+0x50>
				}
			}
		}

		// Check For Break Condition
		if (numSticks == 1) {
 8001572:	2317      	movs	r3, #23
 8001574:	18fb      	adds	r3, r7, r3
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d103      	bne.n	8001584 <SYSTEM_CalibrateMotorSameDirection+0x1ac>
			c->mode = ARCADE;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2201      	movs	r2, #1
 8001580:	711a      	strb	r2, [r3, #4]
			break;
 8001582:	e014      	b.n	80015ae <SYSTEM_CalibrateMotorSameDirection+0x1d6>
		} else if (numSticks == 2) 	{
 8001584:	2317      	movs	r3, #23
 8001586:	18fb      	adds	r3, r7, r3
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	2b02      	cmp	r3, #2
 800158c:	d107      	bne.n	800159e <SYSTEM_CalibrateMotorSameDirection+0x1c6>
			c->mode = TANK;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	711a      	strb	r2, [r3, #4]
			break;
 8001594:	e00b      	b.n	80015ae <SYSTEM_CalibrateMotorSameDirection+0x1d6>
		}

		while (CALIBRATE_DRIVEINPUT_PERIOD >= CORE_GetTick() - tick)
		{
			RADIO_Update();
 8001596:	f001 fc8d 	bl	8002eb4 <RADIO_Update>
			CORE_Idle();
 800159a:	f002 fcc5 	bl	8003f28 <CORE_Idle>
		while (CALIBRATE_DRIVEINPUT_PERIOD >= CORE_GetTick() - tick)
 800159e:	f7ff fb9f 	bl	8000ce0 <CORE_GetTick>
 80015a2:	0002      	movs	r2, r0
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b64      	cmp	r3, #100	; 0x64
 80015aa:	d9f4      	bls.n	8001596 <SYSTEM_CalibrateMotorSameDirection+0x1be>
	{
 80015ac:	e72d      	b.n	800140a <SYSTEM_CalibrateMotorSameDirection+0x32>
		}
	}
}
 80015ae:	46c0      	nop			; (mov r8, r8)
 80015b0:	46bd      	mov	sp, r7
 80015b2:	b007      	add	sp, #28
 80015b4:	bd90      	pop	{r4, r7, pc}
 80015b6:	46c0      	nop			; (mov r8, r8)
 80015b8:	200001dc 	.word	0x200001dc

080015bc <SYSTEM_CalibrateMotorOppositeDirection>:


void SYSTEM_CalibrateMotorOppositeDirection (SYSTEM_Config* c)
{
 80015bc:	b590      	push	{r4, r7, lr}
 80015be:	b091      	sub	sp, #68	; 0x44
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
	// Initialize Function Variables
	RADIO_Data * ptrDataRadio = RADIO_GetDataPtr();
 80015c4:	f001 fcda 	bl	8002f7c <RADIO_GetDataPtr>
 80015c8:	0003      	movs	r3, r0
 80015ca:	637b      	str	r3, [r7, #52]	; 0x34

	// JERK THE MOTORS
	MOTOR_Update(-MOTOR_MAX, MOTOR_MAX);
 80015cc:	2380      	movs	r3, #128	; 0x80
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	4aa9      	ldr	r2, [pc, #676]	; (8001878 <SYSTEM_CalibrateMotorOppositeDirection+0x2bc>)
 80015d2:	0019      	movs	r1, r3
 80015d4:	0010      	movs	r0, r2
 80015d6:	f7ff f987 	bl	80008e8 <MOTOR_Update>
	CORE_Delay(CALIBRATE_MOTORJERK_PERIOD);
 80015da:	23fa      	movs	r3, #250	; 0xfa
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	0018      	movs	r0, r3
 80015e0:	f002 fca8 	bl	8003f34 <CORE_Delay>
	MOTOR_Update(MOTOR_OFF, MOTOR_OFF);
 80015e4:	2100      	movs	r1, #0
 80015e6:	2000      	movs	r0, #0
 80015e8:	f7ff f97e 	bl	80008e8 <MOTOR_Update>

	// CHECK FOR OPERATOR INPUT
	while (1)
	{
		// Initialize Loop Variables
		uint8_t numSticks = 0;
 80015ec:	233f      	movs	r3, #63	; 0x3f
 80015ee:	18fb      	adds	r3, r7, r3
 80015f0:	2200      	movs	r2, #0
 80015f2:	701a      	strb	r2, [r3, #0]
		uint32_t tick = CORE_GetTick();
 80015f4:	f7ff fb74 	bl	8000ce0 <CORE_GetTick>
 80015f8:	0003      	movs	r3, r0
 80015fa:	633b      	str	r3, [r7, #48]	; 0x30

		// Update Radio Inputs
		RADIO_Update();
 80015fc:	f001 fc5a 	bl	8002eb4 <RADIO_Update>

		// Check All Inputs

		switch (c->mode) {
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	791b      	ldrb	r3, [r3, #4]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <SYSTEM_CalibrateMotorOppositeDirection+0x54>
 8001608:	2b01      	cmp	r3, #1
 800160a:	d100      	bne.n	800160e <SYSTEM_CalibrateMotorOppositeDirection+0x52>
 800160c:	e0ba      	b.n	8001784 <SYSTEM_CalibrateMotorOppositeDirection+0x1c8>
 800160e:	e11c      	b.n	800184a <SYSTEM_CalibrateMotorOppositeDirection+0x28e>
		case TANK:;
			bool driveA = false;
 8001610:	203e      	movs	r0, #62	; 0x3e
 8001612:	183b      	adds	r3, r7, r0
 8001614:	2200      	movs	r2, #0
 8001616:	701a      	strb	r2, [r3, #0]
			bool driveRevA = false;
 8001618:	233d      	movs	r3, #61	; 0x3d
 800161a:	18fb      	adds	r3, r7, r3
 800161c:	2200      	movs	r2, #0
 800161e:	701a      	strb	r2, [r3, #0]
			if (ptrDataRadio->ch[c->chDriveA] > (channelZero[c->chDriveA] + CALIBRATE_INPUT_THRESHOLD)) {
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	795b      	ldrb	r3, [r3, #5]
 8001624:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	18d3      	adds	r3, r2, r3
 800162a:	3302      	adds	r3, #2
 800162c:	2200      	movs	r2, #0
 800162e:	5e9b      	ldrsh	r3, [r3, r2]
 8001630:	0019      	movs	r1, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	795b      	ldrb	r3, [r3, #5]
 8001636:	001a      	movs	r2, r3
 8001638:	4b90      	ldr	r3, [pc, #576]	; (800187c <SYSTEM_CalibrateMotorOppositeDirection+0x2c0>)
 800163a:	0052      	lsls	r2, r2, #1
 800163c:	5ad3      	ldrh	r3, [r2, r3]
 800163e:	33c8      	adds	r3, #200	; 0xc8
 8001640:	4299      	cmp	r1, r3
 8001642:	dd03      	ble.n	800164c <SYSTEM_CalibrateMotorOppositeDirection+0x90>
				driveA = true;
 8001644:	183b      	adds	r3, r7, r0
 8001646:	2201      	movs	r2, #1
 8001648:	701a      	strb	r2, [r3, #0]
 800164a:	e019      	b.n	8001680 <SYSTEM_CalibrateMotorOppositeDirection+0xc4>
			} else if (ptrDataRadio->ch[c->chDriveA] < (channelZero[c->chDriveA] - CALIBRATE_INPUT_THRESHOLD)) {
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	795b      	ldrb	r3, [r3, #5]
 8001650:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	18d3      	adds	r3, r2, r3
 8001656:	3302      	adds	r3, #2
 8001658:	2200      	movs	r2, #0
 800165a:	5e9b      	ldrsh	r3, [r3, r2]
 800165c:	0019      	movs	r1, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	795b      	ldrb	r3, [r3, #5]
 8001662:	001a      	movs	r2, r3
 8001664:	4b85      	ldr	r3, [pc, #532]	; (800187c <SYSTEM_CalibrateMotorOppositeDirection+0x2c0>)
 8001666:	0052      	lsls	r2, r2, #1
 8001668:	5ad3      	ldrh	r3, [r2, r3]
 800166a:	3bc8      	subs	r3, #200	; 0xc8
 800166c:	4299      	cmp	r1, r3
 800166e:	da07      	bge.n	8001680 <SYSTEM_CalibrateMotorOppositeDirection+0xc4>
				driveA = true;
 8001670:	233e      	movs	r3, #62	; 0x3e
 8001672:	18fb      	adds	r3, r7, r3
 8001674:	2201      	movs	r2, #1
 8001676:	701a      	strb	r2, [r3, #0]
				driveRevA = true;
 8001678:	233d      	movs	r3, #61	; 0x3d
 800167a:	18fb      	adds	r3, r7, r3
 800167c:	2201      	movs	r2, #1
 800167e:	701a      	strb	r2, [r3, #0]
			}

			bool driveB = false;
 8001680:	203c      	movs	r0, #60	; 0x3c
 8001682:	183b      	adds	r3, r7, r0
 8001684:	2200      	movs	r2, #0
 8001686:	701a      	strb	r2, [r3, #0]
			bool driveRevB = false;
 8001688:	233b      	movs	r3, #59	; 0x3b
 800168a:	18fb      	adds	r3, r7, r3
 800168c:	2200      	movs	r2, #0
 800168e:	701a      	strb	r2, [r3, #0]
			if (ptrDataRadio->ch[c->chDriveB] > (channelZero[c->chDriveB] + CALIBRATE_INPUT_THRESHOLD)) {
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	799b      	ldrb	r3, [r3, #6]
 8001694:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	18d3      	adds	r3, r2, r3
 800169a:	3302      	adds	r3, #2
 800169c:	2200      	movs	r2, #0
 800169e:	5e9b      	ldrsh	r3, [r3, r2]
 80016a0:	0019      	movs	r1, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	799b      	ldrb	r3, [r3, #6]
 80016a6:	001a      	movs	r2, r3
 80016a8:	4b74      	ldr	r3, [pc, #464]	; (800187c <SYSTEM_CalibrateMotorOppositeDirection+0x2c0>)
 80016aa:	0052      	lsls	r2, r2, #1
 80016ac:	5ad3      	ldrh	r3, [r2, r3]
 80016ae:	33c8      	adds	r3, #200	; 0xc8
 80016b0:	4299      	cmp	r1, r3
 80016b2:	dd03      	ble.n	80016bc <SYSTEM_CalibrateMotorOppositeDirection+0x100>
				driveB = true;
 80016b4:	183b      	adds	r3, r7, r0
 80016b6:	2201      	movs	r2, #1
 80016b8:	701a      	strb	r2, [r3, #0]
 80016ba:	e019      	b.n	80016f0 <SYSTEM_CalibrateMotorOppositeDirection+0x134>
			} else if (ptrDataRadio->ch[c->chDriveB] < (channelZero[c->chDriveB] - CALIBRATE_INPUT_THRESHOLD)) {
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	799b      	ldrb	r3, [r3, #6]
 80016c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	18d3      	adds	r3, r2, r3
 80016c6:	3302      	adds	r3, #2
 80016c8:	2200      	movs	r2, #0
 80016ca:	5e9b      	ldrsh	r3, [r3, r2]
 80016cc:	0019      	movs	r1, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	799b      	ldrb	r3, [r3, #6]
 80016d2:	001a      	movs	r2, r3
 80016d4:	4b69      	ldr	r3, [pc, #420]	; (800187c <SYSTEM_CalibrateMotorOppositeDirection+0x2c0>)
 80016d6:	0052      	lsls	r2, r2, #1
 80016d8:	5ad3      	ldrh	r3, [r2, r3]
 80016da:	3bc8      	subs	r3, #200	; 0xc8
 80016dc:	4299      	cmp	r1, r3
 80016de:	da07      	bge.n	80016f0 <SYSTEM_CalibrateMotorOppositeDirection+0x134>
				driveB = true;
 80016e0:	233c      	movs	r3, #60	; 0x3c
 80016e2:	18fb      	adds	r3, r7, r3
 80016e4:	2201      	movs	r2, #1
 80016e6:	701a      	strb	r2, [r3, #0]
				driveRevB = true;
 80016e8:	233b      	movs	r3, #59	; 0x3b
 80016ea:	18fb      	adds	r3, r7, r3
 80016ec:	2201      	movs	r2, #1
 80016ee:	701a      	strb	r2, [r3, #0]
			}
			// Check if both sticks are pressed and one channel has been reversed
			if (  driveA &&
 80016f0:	233e      	movs	r3, #62	; 0x3e
 80016f2:	18fb      	adds	r3, r7, r3
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d100      	bne.n	80016fc <SYSTEM_CalibrateMotorOppositeDirection+0x140>
 80016fa:	e0a5      	b.n	8001848 <SYSTEM_CalibrateMotorOppositeDirection+0x28c>
 80016fc:	233c      	movs	r3, #60	; 0x3c
 80016fe:	18fb      	adds	r3, r7, r3
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d100      	bne.n	8001708 <SYSTEM_CalibrateMotorOppositeDirection+0x14c>
 8001706:	e09f      	b.n	8001848 <SYSTEM_CalibrateMotorOppositeDirection+0x28c>
				  driveB &&
				((driveRevA == c->chRevMask[c->chDriveA]) != (driveRevB == c->chRevMask[c->chDriveB])) )
 8001708:	233d      	movs	r3, #61	; 0x3d
 800170a:	18fb      	adds	r3, r7, r3
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	7952      	ldrb	r2, [r2, #5]
 8001712:	0011      	movs	r1, r2
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	1852      	adds	r2, r2, r1
 8001718:	7a52      	ldrb	r2, [r2, #9]
 800171a:	b252      	sxtb	r2, r2
 800171c:	1a9b      	subs	r3, r3, r2
 800171e:	425a      	negs	r2, r3
 8001720:	4153      	adcs	r3, r2
 8001722:	b2da      	uxtb	r2, r3
 8001724:	243b      	movs	r4, #59	; 0x3b
 8001726:	193b      	adds	r3, r7, r4
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	6879      	ldr	r1, [r7, #4]
 800172c:	7989      	ldrb	r1, [r1, #6]
 800172e:	0008      	movs	r0, r1
 8001730:	6879      	ldr	r1, [r7, #4]
 8001732:	1809      	adds	r1, r1, r0
 8001734:	7a49      	ldrb	r1, [r1, #9]
 8001736:	b249      	sxtb	r1, r1
 8001738:	1a5b      	subs	r3, r3, r1
 800173a:	4259      	negs	r1, r3
 800173c:	414b      	adcs	r3, r1
 800173e:	b2db      	uxtb	r3, r3
 8001740:	4053      	eors	r3, r2
 8001742:	b2db      	uxtb	r3, r3
				  driveB &&
 8001744:	2b00      	cmp	r3, #0
 8001746:	d100      	bne.n	800174a <SYSTEM_CalibrateMotorOppositeDirection+0x18e>
 8001748:	e07e      	b.n	8001848 <SYSTEM_CalibrateMotorOppositeDirection+0x28c>
			{
				// if driveB has been reversed then channels A and B need to be swapped
				if (driveRevB != c->chRevMask[c->chDriveB]) {
 800174a:	193b      	adds	r3, r7, r4
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	7992      	ldrb	r2, [r2, #6]
 8001752:	0011      	movs	r1, r2
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	1852      	adds	r2, r2, r1
 8001758:	7a52      	ldrb	r2, [r2, #9]
 800175a:	b252      	sxtb	r2, r2
 800175c:	4293      	cmp	r3, r2
 800175e:	d00c      	beq.n	800177a <SYSTEM_CalibrateMotorOppositeDirection+0x1be>
					SYSTEM_Config cInt;
					cInt.chDriveA = c->chDriveA;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	795a      	ldrb	r2, [r3, #5]
 8001764:	2108      	movs	r1, #8
 8001766:	187b      	adds	r3, r7, r1
 8001768:	715a      	strb	r2, [r3, #5]
					c->chDriveA = c->chDriveB;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	799a      	ldrb	r2, [r3, #6]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	715a      	strb	r2, [r3, #5]
					c->chDriveB = cInt.chDriveA;
 8001772:	187b      	adds	r3, r7, r1
 8001774:	795a      	ldrb	r2, [r3, #5]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	719a      	strb	r2, [r3, #6]
				}
				numSticks = 1;
 800177a:	233f      	movs	r3, #63	; 0x3f
 800177c:	18fb      	adds	r3, r7, r3
 800177e:	2201      	movs	r2, #1
 8001780:	701a      	strb	r2, [r3, #0]
			}
			break; //break from case
 8001782:	e061      	b.n	8001848 <SYSTEM_CalibrateMotorOppositeDirection+0x28c>

		case ARCADE:;
			for (uint8_t i = 0; i < ptrDataRadio->ch_num; i++)
 8001784:	233a      	movs	r3, #58	; 0x3a
 8001786:	18fb      	adds	r3, r7, r3
 8001788:	2200      	movs	r2, #0
 800178a:	701a      	strb	r2, [r3, #0]
 800178c:	e054      	b.n	8001838 <SYSTEM_CalibrateMotorOppositeDirection+0x27c>
			{
				if (numSticks == 0 && i != c->chDriveA)
 800178e:	243f      	movs	r4, #63	; 0x3f
 8001790:	193b      	adds	r3, r7, r4
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d149      	bne.n	800182c <SYSTEM_CalibrateMotorOppositeDirection+0x270>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	795b      	ldrb	r3, [r3, #5]
 800179c:	203a      	movs	r0, #58	; 0x3a
 800179e:	183a      	adds	r2, r7, r0
 80017a0:	7812      	ldrb	r2, [r2, #0]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d042      	beq.n	800182c <SYSTEM_CalibrateMotorOppositeDirection+0x270>
				{
					if (ptrDataRadio->ch[i] > (channelZero[i] + CALIBRATE_INPUT_THRESHOLD))
 80017a6:	183b      	adds	r3, r7, r0
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	18d3      	adds	r3, r2, r3
 80017b0:	3302      	adds	r3, #2
 80017b2:	2200      	movs	r2, #0
 80017b4:	5e9b      	ldrsh	r3, [r3, r2]
 80017b6:	0019      	movs	r1, r3
 80017b8:	183b      	adds	r3, r7, r0
 80017ba:	781a      	ldrb	r2, [r3, #0]
 80017bc:	4b2f      	ldr	r3, [pc, #188]	; (800187c <SYSTEM_CalibrateMotorOppositeDirection+0x2c0>)
 80017be:	0052      	lsls	r2, r2, #1
 80017c0:	5ad3      	ldrh	r3, [r2, r3]
 80017c2:	33c8      	adds	r3, #200	; 0xc8
 80017c4:	4299      	cmp	r1, r3
 80017c6:	dd0f      	ble.n	80017e8 <SYSTEM_CalibrateMotorOppositeDirection+0x22c>
					{
						c->chDriveB = i;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	183a      	adds	r2, r7, r0
 80017cc:	7812      	ldrb	r2, [r2, #0]
 80017ce:	719a      	strb	r2, [r3, #6]
						c->chRevMask[i] = true;
 80017d0:	183b      	adds	r3, r7, r0
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	18d3      	adds	r3, r2, r3
 80017d8:	2201      	movs	r2, #1
 80017da:	725a      	strb	r2, [r3, #9]
						numSticks += 1;
 80017dc:	193b      	adds	r3, r7, r4
 80017de:	193a      	adds	r2, r7, r4
 80017e0:	7812      	ldrb	r2, [r2, #0]
 80017e2:	3201      	adds	r2, #1
 80017e4:	701a      	strb	r2, [r3, #0]
 80017e6:	e021      	b.n	800182c <SYSTEM_CalibrateMotorOppositeDirection+0x270>
					}
					else if (ptrDataRadio->ch[i] < (channelZero[i] - CALIBRATE_INPUT_THRESHOLD))
 80017e8:	203a      	movs	r0, #58	; 0x3a
 80017ea:	183b      	adds	r3, r7, r0
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	18d3      	adds	r3, r2, r3
 80017f4:	3302      	adds	r3, #2
 80017f6:	2200      	movs	r2, #0
 80017f8:	5e9b      	ldrsh	r3, [r3, r2]
 80017fa:	0019      	movs	r1, r3
 80017fc:	183b      	adds	r3, r7, r0
 80017fe:	781a      	ldrb	r2, [r3, #0]
 8001800:	4b1e      	ldr	r3, [pc, #120]	; (800187c <SYSTEM_CalibrateMotorOppositeDirection+0x2c0>)
 8001802:	0052      	lsls	r2, r2, #1
 8001804:	5ad3      	ldrh	r3, [r2, r3]
 8001806:	3bc8      	subs	r3, #200	; 0xc8
 8001808:	4299      	cmp	r1, r3
 800180a:	da0f      	bge.n	800182c <SYSTEM_CalibrateMotorOppositeDirection+0x270>
					{
						c->chDriveB = i;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	183a      	adds	r2, r7, r0
 8001810:	7812      	ldrb	r2, [r2, #0]
 8001812:	719a      	strb	r2, [r3, #6]
						c->chRevMask[i] = false;
 8001814:	183b      	adds	r3, r7, r0
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	18d3      	adds	r3, r2, r3
 800181c:	2200      	movs	r2, #0
 800181e:	725a      	strb	r2, [r3, #9]
						numSticks += 1;
 8001820:	223f      	movs	r2, #63	; 0x3f
 8001822:	18bb      	adds	r3, r7, r2
 8001824:	18ba      	adds	r2, r7, r2
 8001826:	7812      	ldrb	r2, [r2, #0]
 8001828:	3201      	adds	r2, #1
 800182a:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < ptrDataRadio->ch_num; i++)
 800182c:	213a      	movs	r1, #58	; 0x3a
 800182e:	187b      	adds	r3, r7, r1
 8001830:	781a      	ldrb	r2, [r3, #0]
 8001832:	187b      	adds	r3, r7, r1
 8001834:	3201      	adds	r2, #1
 8001836:	701a      	strb	r2, [r3, #0]
 8001838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800183a:	785b      	ldrb	r3, [r3, #1]
 800183c:	223a      	movs	r2, #58	; 0x3a
 800183e:	18ba      	adds	r2, r7, r2
 8001840:	7812      	ldrb	r2, [r2, #0]
 8001842:	429a      	cmp	r2, r3
 8001844:	d3a3      	bcc.n	800178e <SYSTEM_CalibrateMotorOppositeDirection+0x1d2>
					}

				}
			}
			break; //break from case
 8001846:	e000      	b.n	800184a <SYSTEM_CalibrateMotorOppositeDirection+0x28e>
			break; //break from case
 8001848:	46c0      	nop			; (mov r8, r8)
		}

		// Check For Break Condition
		if (numSticks == 1) {
 800184a:	233f      	movs	r3, #63	; 0x3f
 800184c:	18fb      	adds	r3, r7, r3
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d00c      	beq.n	800186e <SYSTEM_CalibrateMotorOppositeDirection+0x2b2>
			break;
		}

		// Loop Pacing
		while (CALIBRATE_DRIVEINPUT_PERIOD >= CORE_GetTick() - tick)
 8001854:	e003      	b.n	800185e <SYSTEM_CalibrateMotorOppositeDirection+0x2a2>
		{
			RADIO_Update();
 8001856:	f001 fb2d 	bl	8002eb4 <RADIO_Update>
			CORE_Idle();
 800185a:	f002 fb65 	bl	8003f28 <CORE_Idle>
		while (CALIBRATE_DRIVEINPUT_PERIOD >= CORE_GetTick() - tick)
 800185e:	f7ff fa3f 	bl	8000ce0 <CORE_GetTick>
 8001862:	0002      	movs	r2, r0
 8001864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b64      	cmp	r3, #100	; 0x64
 800186a:	d9f4      	bls.n	8001856 <SYSTEM_CalibrateMotorOppositeDirection+0x29a>
	{
 800186c:	e6be      	b.n	80015ec <SYSTEM_CalibrateMotorOppositeDirection+0x30>
			break;
 800186e:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 8001870:	46c0      	nop			; (mov r8, r8)
 8001872:	46bd      	mov	sp, r7
 8001874:	b011      	add	sp, #68	; 0x44
 8001876:	bd90      	pop	{r4, r7, pc}
 8001878:	ffffff00 	.word	0xffffff00
 800187c:	200001dc 	.word	0x200001dc

08001880 <SYSTEM_CalibrateServoA>:


void SYSTEM_CalibrateServoA (SYSTEM_Config* c)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
	// Initialize Function Variables
	RADIO_Data * ptrDataRadio = RADIO_GetDataPtr();
 8001888:	f001 fb78 	bl	8002f7c <RADIO_GetDataPtr>
 800188c:	0003      	movs	r3, r0
 800188e:	60bb      	str	r3, [r7, #8]

	//
	while (1)
	{
		// Initialize Loop Variables
		uint8_t numSticks = 0;
 8001890:	230f      	movs	r3, #15
 8001892:	18fb      	adds	r3, r7, r3
 8001894:	2200      	movs	r2, #0
 8001896:	701a      	strb	r2, [r3, #0]

		// Update Radio Inputs
		RADIO_Update();
 8001898:	f001 fb0c 	bl	8002eb4 <RADIO_Update>

		// Check All Inputs
		for (uint8_t i = 0; i < ptrDataRadio->ch_num; i++)
 800189c:	230e      	movs	r3, #14
 800189e:	18fb      	adds	r3, r7, r3
 80018a0:	2200      	movs	r2, #0
 80018a2:	701a      	strb	r2, [r3, #0]
 80018a4:	e056      	b.n	8001954 <SYSTEM_CalibrateServoA+0xd4>
		{
			if ( (i != config.chDriveA) && (i != config.chDriveB) )
 80018a6:	4b35      	ldr	r3, [pc, #212]	; (800197c <SYSTEM_CalibrateServoA+0xfc>)
 80018a8:	795b      	ldrb	r3, [r3, #5]
 80018aa:	200e      	movs	r0, #14
 80018ac:	183a      	adds	r2, r7, r0
 80018ae:	7812      	ldrb	r2, [r2, #0]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d049      	beq.n	8001948 <SYSTEM_CalibrateServoA+0xc8>
 80018b4:	4b31      	ldr	r3, [pc, #196]	; (800197c <SYSTEM_CalibrateServoA+0xfc>)
 80018b6:	799b      	ldrb	r3, [r3, #6]
 80018b8:	183a      	adds	r2, r7, r0
 80018ba:	7812      	ldrb	r2, [r2, #0]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d043      	beq.n	8001948 <SYSTEM_CalibrateServoA+0xc8>
			{
				if (ptrDataRadio->ch[i] > (channelZero[i] + CALIBRATE_ZERO_THRESHOLD))
 80018c0:	183b      	adds	r3, r7, r0
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	68ba      	ldr	r2, [r7, #8]
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	18d3      	adds	r3, r2, r3
 80018ca:	3302      	adds	r3, #2
 80018cc:	2200      	movs	r2, #0
 80018ce:	5e9b      	ldrsh	r3, [r3, r2]
 80018d0:	0019      	movs	r1, r3
 80018d2:	183b      	adds	r3, r7, r0
 80018d4:	781a      	ldrb	r2, [r3, #0]
 80018d6:	4b2a      	ldr	r3, [pc, #168]	; (8001980 <SYSTEM_CalibrateServoA+0x100>)
 80018d8:	0052      	lsls	r2, r2, #1
 80018da:	5ad3      	ldrh	r3, [r2, r3]
 80018dc:	3332      	adds	r3, #50	; 0x32
 80018de:	4299      	cmp	r1, r3
 80018e0:	dd10      	ble.n	8001904 <SYSTEM_CalibrateServoA+0x84>
				{
					config.chServoA = i;
 80018e2:	4b26      	ldr	r3, [pc, #152]	; (800197c <SYSTEM_CalibrateServoA+0xfc>)
 80018e4:	183a      	adds	r2, r7, r0
 80018e6:	7812      	ldrb	r2, [r2, #0]
 80018e8:	71da      	strb	r2, [r3, #7]
					config.chRevMask[i] = false;
 80018ea:	183b      	adds	r3, r7, r0
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	4a23      	ldr	r2, [pc, #140]	; (800197c <SYSTEM_CalibrateServoA+0xfc>)
 80018f0:	18d3      	adds	r3, r2, r3
 80018f2:	2200      	movs	r2, #0
 80018f4:	725a      	strb	r2, [r3, #9]
					numSticks += 1;
 80018f6:	220f      	movs	r2, #15
 80018f8:	18bb      	adds	r3, r7, r2
 80018fa:	18ba      	adds	r2, r7, r2
 80018fc:	7812      	ldrb	r2, [r2, #0]
 80018fe:	3201      	adds	r2, #1
 8001900:	701a      	strb	r2, [r3, #0]
 8001902:	e021      	b.n	8001948 <SYSTEM_CalibrateServoA+0xc8>
				} else if (ptrDataRadio->ch[i] < (channelZero[i] - CALIBRATE_ZERO_THRESHOLD)) {
 8001904:	200e      	movs	r0, #14
 8001906:	183b      	adds	r3, r7, r0
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	68ba      	ldr	r2, [r7, #8]
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	18d3      	adds	r3, r2, r3
 8001910:	3302      	adds	r3, #2
 8001912:	2200      	movs	r2, #0
 8001914:	5e9b      	ldrsh	r3, [r3, r2]
 8001916:	0019      	movs	r1, r3
 8001918:	183b      	adds	r3, r7, r0
 800191a:	781a      	ldrb	r2, [r3, #0]
 800191c:	4b18      	ldr	r3, [pc, #96]	; (8001980 <SYSTEM_CalibrateServoA+0x100>)
 800191e:	0052      	lsls	r2, r2, #1
 8001920:	5ad3      	ldrh	r3, [r2, r3]
 8001922:	3b32      	subs	r3, #50	; 0x32
 8001924:	4299      	cmp	r1, r3
 8001926:	da0f      	bge.n	8001948 <SYSTEM_CalibrateServoA+0xc8>
					config.chServoA = i;
 8001928:	4b14      	ldr	r3, [pc, #80]	; (800197c <SYSTEM_CalibrateServoA+0xfc>)
 800192a:	183a      	adds	r2, r7, r0
 800192c:	7812      	ldrb	r2, [r2, #0]
 800192e:	71da      	strb	r2, [r3, #7]
					config.chRevMask[i] = true;
 8001930:	183b      	adds	r3, r7, r0
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	4a11      	ldr	r2, [pc, #68]	; (800197c <SYSTEM_CalibrateServoA+0xfc>)
 8001936:	18d3      	adds	r3, r2, r3
 8001938:	2201      	movs	r2, #1
 800193a:	725a      	strb	r2, [r3, #9]
					numSticks += 1;
 800193c:	220f      	movs	r2, #15
 800193e:	18bb      	adds	r3, r7, r2
 8001940:	18ba      	adds	r2, r7, r2
 8001942:	7812      	ldrb	r2, [r2, #0]
 8001944:	3201      	adds	r2, #1
 8001946:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < ptrDataRadio->ch_num; i++)
 8001948:	210e      	movs	r1, #14
 800194a:	187b      	adds	r3, r7, r1
 800194c:	781a      	ldrb	r2, [r3, #0]
 800194e:	187b      	adds	r3, r7, r1
 8001950:	3201      	adds	r2, #1
 8001952:	701a      	strb	r2, [r3, #0]
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	785b      	ldrb	r3, [r3, #1]
 8001958:	220e      	movs	r2, #14
 800195a:	18ba      	adds	r2, r7, r2
 800195c:	7812      	ldrb	r2, [r2, #0]
 800195e:	429a      	cmp	r2, r3
 8001960:	d3a1      	bcc.n	80018a6 <SYSTEM_CalibrateServoA+0x26>
				}
			}
		}

		// Check For Break Condition
		if (numSticks == 1) { break; }
 8001962:	230f      	movs	r3, #15
 8001964:	18fb      	adds	r3, r7, r3
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d002      	beq.n	8001972 <SYSTEM_CalibrateServoA+0xf2>

		// Loop Pacing
		CORE_Idle();
 800196c:	f002 fadc 	bl	8003f28 <CORE_Idle>
	{
 8001970:	e78e      	b.n	8001890 <SYSTEM_CalibrateServoA+0x10>
		if (numSticks == 1) { break; }
 8001972:	46c0      	nop			; (mov r8, r8)
	}
}
 8001974:	46c0      	nop			; (mov r8, r8)
 8001976:	46bd      	mov	sp, r7
 8001978:	b004      	add	sp, #16
 800197a:	bd80      	pop	{r7, pc}
 800197c:	200001b4 	.word	0x200001b4
 8001980:	200001dc 	.word	0x200001dc

08001984 <SYSTEM_CalibrateServoB>:


void SYSTEM_CalibrateServoB (SYSTEM_Config* c)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
	// Initialize Function Variables
	RADIO_Data * ptrDataRadio = RADIO_GetDataPtr();
 800198c:	f001 faf6 	bl	8002f7c <RADIO_GetDataPtr>
 8001990:	0003      	movs	r3, r0
 8001992:	60bb      	str	r3, [r7, #8]

	//
	while (1)
	{
		// Initialize Loop Variables
		uint8_t numSticks = 0;
 8001994:	230f      	movs	r3, #15
 8001996:	18fb      	adds	r3, r7, r3
 8001998:	2200      	movs	r2, #0
 800199a:	701a      	strb	r2, [r3, #0]

		// Update Radio Inputs
		RADIO_Update();
 800199c:	f001 fa8a 	bl	8002eb4 <RADIO_Update>

		// Check All Inputs
		for (uint8_t i = 0; i < ptrDataRadio->ch_num; i++)
 80019a0:	230e      	movs	r3, #14
 80019a2:	18fb      	adds	r3, r7, r3
 80019a4:	2200      	movs	r2, #0
 80019a6:	701a      	strb	r2, [r3, #0]
 80019a8:	e056      	b.n	8001a58 <SYSTEM_CalibrateServoB+0xd4>
		{
			if ( (i != config.chDriveA) && (i != config.chDriveB) )
 80019aa:	4b35      	ldr	r3, [pc, #212]	; (8001a80 <SYSTEM_CalibrateServoB+0xfc>)
 80019ac:	795b      	ldrb	r3, [r3, #5]
 80019ae:	200e      	movs	r0, #14
 80019b0:	183a      	adds	r2, r7, r0
 80019b2:	7812      	ldrb	r2, [r2, #0]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d049      	beq.n	8001a4c <SYSTEM_CalibrateServoB+0xc8>
 80019b8:	4b31      	ldr	r3, [pc, #196]	; (8001a80 <SYSTEM_CalibrateServoB+0xfc>)
 80019ba:	799b      	ldrb	r3, [r3, #6]
 80019bc:	183a      	adds	r2, r7, r0
 80019be:	7812      	ldrb	r2, [r2, #0]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d043      	beq.n	8001a4c <SYSTEM_CalibrateServoB+0xc8>
			{
				if (ptrDataRadio->ch[i] > (channelZero[i] + CALIBRATE_ZERO_THRESHOLD))
 80019c4:	183b      	adds	r3, r7, r0
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	68ba      	ldr	r2, [r7, #8]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	18d3      	adds	r3, r2, r3
 80019ce:	3302      	adds	r3, #2
 80019d0:	2200      	movs	r2, #0
 80019d2:	5e9b      	ldrsh	r3, [r3, r2]
 80019d4:	0019      	movs	r1, r3
 80019d6:	183b      	adds	r3, r7, r0
 80019d8:	781a      	ldrb	r2, [r3, #0]
 80019da:	4b2a      	ldr	r3, [pc, #168]	; (8001a84 <SYSTEM_CalibrateServoB+0x100>)
 80019dc:	0052      	lsls	r2, r2, #1
 80019de:	5ad3      	ldrh	r3, [r2, r3]
 80019e0:	3332      	adds	r3, #50	; 0x32
 80019e2:	4299      	cmp	r1, r3
 80019e4:	dd10      	ble.n	8001a08 <SYSTEM_CalibrateServoB+0x84>
				{
					config.chServoB = i;
 80019e6:	4b26      	ldr	r3, [pc, #152]	; (8001a80 <SYSTEM_CalibrateServoB+0xfc>)
 80019e8:	183a      	adds	r2, r7, r0
 80019ea:	7812      	ldrb	r2, [r2, #0]
 80019ec:	721a      	strb	r2, [r3, #8]
					config.chRevMask[i] = false;
 80019ee:	183b      	adds	r3, r7, r0
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	4a23      	ldr	r2, [pc, #140]	; (8001a80 <SYSTEM_CalibrateServoB+0xfc>)
 80019f4:	18d3      	adds	r3, r2, r3
 80019f6:	2200      	movs	r2, #0
 80019f8:	725a      	strb	r2, [r3, #9]
					numSticks += 1;
 80019fa:	220f      	movs	r2, #15
 80019fc:	18bb      	adds	r3, r7, r2
 80019fe:	18ba      	adds	r2, r7, r2
 8001a00:	7812      	ldrb	r2, [r2, #0]
 8001a02:	3201      	adds	r2, #1
 8001a04:	701a      	strb	r2, [r3, #0]
 8001a06:	e021      	b.n	8001a4c <SYSTEM_CalibrateServoB+0xc8>
				} else if (ptrDataRadio->ch[i] < (channelZero[i] - CALIBRATE_ZERO_THRESHOLD)) {
 8001a08:	200e      	movs	r0, #14
 8001a0a:	183b      	adds	r3, r7, r0
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	68ba      	ldr	r2, [r7, #8]
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	18d3      	adds	r3, r2, r3
 8001a14:	3302      	adds	r3, #2
 8001a16:	2200      	movs	r2, #0
 8001a18:	5e9b      	ldrsh	r3, [r3, r2]
 8001a1a:	0019      	movs	r1, r3
 8001a1c:	183b      	adds	r3, r7, r0
 8001a1e:	781a      	ldrb	r2, [r3, #0]
 8001a20:	4b18      	ldr	r3, [pc, #96]	; (8001a84 <SYSTEM_CalibrateServoB+0x100>)
 8001a22:	0052      	lsls	r2, r2, #1
 8001a24:	5ad3      	ldrh	r3, [r2, r3]
 8001a26:	3b32      	subs	r3, #50	; 0x32
 8001a28:	4299      	cmp	r1, r3
 8001a2a:	da0f      	bge.n	8001a4c <SYSTEM_CalibrateServoB+0xc8>
					config.chServoB = i;
 8001a2c:	4b14      	ldr	r3, [pc, #80]	; (8001a80 <SYSTEM_CalibrateServoB+0xfc>)
 8001a2e:	183a      	adds	r2, r7, r0
 8001a30:	7812      	ldrb	r2, [r2, #0]
 8001a32:	721a      	strb	r2, [r3, #8]
					config.chRevMask[i] = true;
 8001a34:	183b      	adds	r3, r7, r0
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	4a11      	ldr	r2, [pc, #68]	; (8001a80 <SYSTEM_CalibrateServoB+0xfc>)
 8001a3a:	18d3      	adds	r3, r2, r3
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	725a      	strb	r2, [r3, #9]
					numSticks += 1;
 8001a40:	220f      	movs	r2, #15
 8001a42:	18bb      	adds	r3, r7, r2
 8001a44:	18ba      	adds	r2, r7, r2
 8001a46:	7812      	ldrb	r2, [r2, #0]
 8001a48:	3201      	adds	r2, #1
 8001a4a:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < ptrDataRadio->ch_num; i++)
 8001a4c:	210e      	movs	r1, #14
 8001a4e:	187b      	adds	r3, r7, r1
 8001a50:	781a      	ldrb	r2, [r3, #0]
 8001a52:	187b      	adds	r3, r7, r1
 8001a54:	3201      	adds	r2, #1
 8001a56:	701a      	strb	r2, [r3, #0]
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	785b      	ldrb	r3, [r3, #1]
 8001a5c:	220e      	movs	r2, #14
 8001a5e:	18ba      	adds	r2, r7, r2
 8001a60:	7812      	ldrb	r2, [r2, #0]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d3a1      	bcc.n	80019aa <SYSTEM_CalibrateServoB+0x26>
				}
			}
		}

		// Check For Break Condition
		if (numSticks == 1) { break; }
 8001a66:	230f      	movs	r3, #15
 8001a68:	18fb      	adds	r3, r7, r3
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d002      	beq.n	8001a76 <SYSTEM_CalibrateServoB+0xf2>

		// Loop Pacing
		CORE_Idle();
 8001a70:	f002 fa5a 	bl	8003f28 <CORE_Idle>
	{
 8001a74:	e78e      	b.n	8001994 <SYSTEM_CalibrateServoB+0x10>
		if (numSticks == 1) { break; }
 8001a76:	46c0      	nop			; (mov r8, r8)
	}
}
 8001a78:	46c0      	nop			; (mov r8, r8)
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	b004      	add	sp, #16
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	200001b4 	.word	0x200001b4
 8001a84:	200001dc 	.word	0x200001dc

08001a88 <SYSTEM_WaitForResetInputs>:


void SYSTEM_WaitForResetInputs (void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
	// Initialize Function Variables
	RADIO_Data * ptrDataRadio = RADIO_GetDataPtr();
 8001a8e:	f001 fa75 	bl	8002f7c <RADIO_GetDataPtr>
 8001a92:	0003      	movs	r3, r0
 8001a94:	603b      	str	r3, [r7, #0]

	//
	while (1)
	{
		// Initialize Loop Variables
		uint8_t numSticks = 0;
 8001a96:	1dfb      	adds	r3, r7, #7
 8001a98:	2200      	movs	r2, #0
 8001a9a:	701a      	strb	r2, [r3, #0]

		// Update Radio Inputs
		RADIO_Update();
 8001a9c:	f001 fa0a 	bl	8002eb4 <RADIO_Update>

		// Check All Inputs
		for (uint8_t i = 0; i < ptrDataRadio->ch_num; i++)
 8001aa0:	1dbb      	adds	r3, r7, #6
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	701a      	strb	r2, [r3, #0]
 8001aa6:	e02b      	b.n	8001b00 <SYSTEM_WaitForResetInputs+0x78>
		{
			if ((ptrDataRadio->ch[i] > (channelZero[i] + CALIBRATE_ZERO_THRESHOLD)) || (ptrDataRadio->ch[i] < (channelZero[i] - CALIBRATE_ZERO_THRESHOLD)))
 8001aa8:	1dbb      	adds	r3, r7, #6
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	18d3      	adds	r3, r2, r3
 8001ab2:	3302      	adds	r3, #2
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	5e9b      	ldrsh	r3, [r3, r2]
 8001ab8:	0019      	movs	r1, r3
 8001aba:	1dbb      	adds	r3, r7, #6
 8001abc:	781a      	ldrb	r2, [r3, #0]
 8001abe:	4b19      	ldr	r3, [pc, #100]	; (8001b24 <SYSTEM_WaitForResetInputs+0x9c>)
 8001ac0:	0052      	lsls	r2, r2, #1
 8001ac2:	5ad3      	ldrh	r3, [r2, r3]
 8001ac4:	3332      	adds	r3, #50	; 0x32
 8001ac6:	4299      	cmp	r1, r3
 8001ac8:	dc10      	bgt.n	8001aec <SYSTEM_WaitForResetInputs+0x64>
 8001aca:	1dbb      	adds	r3, r7, #6
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	18d3      	adds	r3, r2, r3
 8001ad4:	3302      	adds	r3, #2
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	5e9b      	ldrsh	r3, [r3, r2]
 8001ada:	0019      	movs	r1, r3
 8001adc:	1dbb      	adds	r3, r7, #6
 8001ade:	781a      	ldrb	r2, [r3, #0]
 8001ae0:	4b10      	ldr	r3, [pc, #64]	; (8001b24 <SYSTEM_WaitForResetInputs+0x9c>)
 8001ae2:	0052      	lsls	r2, r2, #1
 8001ae4:	5ad3      	ldrh	r3, [r2, r3]
 8001ae6:	3b32      	subs	r3, #50	; 0x32
 8001ae8:	4299      	cmp	r1, r3
 8001aea:	da04      	bge.n	8001af6 <SYSTEM_WaitForResetInputs+0x6e>
			{
				numSticks += 1;
 8001aec:	1dfb      	adds	r3, r7, #7
 8001aee:	1dfa      	adds	r2, r7, #7
 8001af0:	7812      	ldrb	r2, [r2, #0]
 8001af2:	3201      	adds	r2, #1
 8001af4:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < ptrDataRadio->ch_num; i++)
 8001af6:	1dbb      	adds	r3, r7, #6
 8001af8:	781a      	ldrb	r2, [r3, #0]
 8001afa:	1dbb      	adds	r3, r7, #6
 8001afc:	3201      	adds	r2, #1
 8001afe:	701a      	strb	r2, [r3, #0]
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	785b      	ldrb	r3, [r3, #1]
 8001b04:	1dba      	adds	r2, r7, #6
 8001b06:	7812      	ldrb	r2, [r2, #0]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d3cd      	bcc.n	8001aa8 <SYSTEM_WaitForResetInputs+0x20>
			}
		}

		// Check For Break Condition
		if (numSticks == 0) { break; }
 8001b0c:	1dfb      	adds	r3, r7, #7
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d002      	beq.n	8001b1a <SYSTEM_WaitForResetInputs+0x92>

		// Loop Pacing
		CORE_Idle();
 8001b14:	f002 fa08 	bl	8003f28 <CORE_Idle>
	{
 8001b18:	e7bd      	b.n	8001a96 <SYSTEM_WaitForResetInputs+0xe>
		if (numSticks == 0) { break; }
 8001b1a:	46c0      	nop			; (mov r8, r8)
	}
}
 8001b1c:	46c0      	nop			; (mov r8, r8)
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	b002      	add	sp, #8
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	200001dc 	.word	0x200001dc

08001b28 <main>:
/*
 * PUBLIC FUNCTIONS
 */

int main (void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
	CORE_Init();
 8001b2c:	f002 f9c6 	bl	8003ebc <CORE_Init>
	SYSTEM_Init();
 8001b30:	f7ff f904 	bl	8000d3c <SYSTEM_Init>
	MOTOR_Init();
 8001b34:	f7fe fe86 	bl	8000844 <MOTOR_Init>

	CORE_Delay(100); // Have time to check for a valid radio before proceeding
 8001b38:	2064      	movs	r0, #100	; 0x64
 8001b3a:	f002 f9fb 	bl	8003f34 <CORE_Delay>
	while (1)
	{
		SYSTEM_Update();
 8001b3e:	f7ff f93b 	bl	8000db8 <SYSTEM_Update>

//		US_Delay(1000);
		CORE_Idle();
 8001b42:	f002 f9f1 	bl	8003f28 <CORE_Idle>
		SYSTEM_Update();
 8001b46:	e7fa      	b.n	8001b3e <main+0x16>

08001b48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b4c:	46c0      	nop			; (mov r8, r8)
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
	...

08001b54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001b54:	480d      	ldr	r0, [pc, #52]	; (8001b8c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001b56:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b58:	480d      	ldr	r0, [pc, #52]	; (8001b90 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b5a:	490e      	ldr	r1, [pc, #56]	; (8001b94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b5c:	4a0e      	ldr	r2, [pc, #56]	; (8001b98 <LoopForever+0xe>)
  movs r3, #0
 8001b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b60:	e002      	b.n	8001b68 <LoopCopyDataInit>

08001b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b66:	3304      	adds	r3, #4

08001b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b6c:	d3f9      	bcc.n	8001b62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b6e:	4a0b      	ldr	r2, [pc, #44]	; (8001b9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b70:	4c0b      	ldr	r4, [pc, #44]	; (8001ba0 <LoopForever+0x16>)
  movs r3, #0
 8001b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b74:	e001      	b.n	8001b7a <LoopFillZerobss>

08001b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b78:	3204      	adds	r2, #4

08001b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b7c:	d3fb      	bcc.n	8001b76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001b7e:	f7ff ffe3 	bl	8001b48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b82:	f003 facf 	bl	8005124 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b86:	f7ff ffcf 	bl	8001b28 <main>

08001b8a <LoopForever>:

LoopForever:
    b LoopForever
 8001b8a:	e7fe      	b.n	8001b8a <LoopForever>
   ldr   r0, =_estack
 8001b8c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b94:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8001b98:	080051b8 	.word	0x080051b8
  ldr r2, =_sbss
 8001b9c:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8001ba0:	20000410 	.word	0x20000410

08001ba4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ba4:	e7fe      	b.n	8001ba4 <ADC1_COMP_IRQHandler>
	...

08001ba8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	0002      	movs	r2, r0
 8001bb0:	1dfb      	adds	r3, r7, #7
 8001bb2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001bb4:	1dfb      	adds	r3, r7, #7
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	2b7f      	cmp	r3, #127	; 0x7f
 8001bba:	d809      	bhi.n	8001bd0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bbc:	1dfb      	adds	r3, r7, #7
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	001a      	movs	r2, r3
 8001bc2:	231f      	movs	r3, #31
 8001bc4:	401a      	ands	r2, r3
 8001bc6:	4b04      	ldr	r3, [pc, #16]	; (8001bd8 <__NVIC_EnableIRQ+0x30>)
 8001bc8:	2101      	movs	r1, #1
 8001bca:	4091      	lsls	r1, r2
 8001bcc:	000a      	movs	r2, r1
 8001bce:	601a      	str	r2, [r3, #0]
  }
}
 8001bd0:	46c0      	nop			; (mov r8, r8)
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	b002      	add	sp, #8
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	e000e100 	.word	0xe000e100

08001bdc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	0002      	movs	r2, r0
 8001be4:	1dfb      	adds	r3, r7, #7
 8001be6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001be8:	1dfb      	adds	r3, r7, #7
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	2b7f      	cmp	r3, #127	; 0x7f
 8001bee:	d810      	bhi.n	8001c12 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bf0:	1dfb      	adds	r3, r7, #7
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	001a      	movs	r2, r3
 8001bf6:	231f      	movs	r3, #31
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	4908      	ldr	r1, [pc, #32]	; (8001c1c <__NVIC_DisableIRQ+0x40>)
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	409a      	lsls	r2, r3
 8001c00:	0013      	movs	r3, r2
 8001c02:	2280      	movs	r2, #128	; 0x80
 8001c04:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001c06:	f3bf 8f4f 	dsb	sy
}
 8001c0a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8001c0c:	f3bf 8f6f 	isb	sy
}
 8001c10:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	46bd      	mov	sp, r7
 8001c16:	b002      	add	sp, #8
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	46c0      	nop			; (mov r8, r8)
 8001c1c:	e000e100 	.word	0xe000e100

08001c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c20:	b590      	push	{r4, r7, lr}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	0002      	movs	r2, r0
 8001c28:	6039      	str	r1, [r7, #0]
 8001c2a:	1dfb      	adds	r3, r7, #7
 8001c2c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c2e:	1dfb      	adds	r3, r7, #7
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b7f      	cmp	r3, #127	; 0x7f
 8001c34:	d828      	bhi.n	8001c88 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c36:	4a2f      	ldr	r2, [pc, #188]	; (8001cf4 <__NVIC_SetPriority+0xd4>)
 8001c38:	1dfb      	adds	r3, r7, #7
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	b25b      	sxtb	r3, r3
 8001c3e:	089b      	lsrs	r3, r3, #2
 8001c40:	33c0      	adds	r3, #192	; 0xc0
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	589b      	ldr	r3, [r3, r2]
 8001c46:	1dfa      	adds	r2, r7, #7
 8001c48:	7812      	ldrb	r2, [r2, #0]
 8001c4a:	0011      	movs	r1, r2
 8001c4c:	2203      	movs	r2, #3
 8001c4e:	400a      	ands	r2, r1
 8001c50:	00d2      	lsls	r2, r2, #3
 8001c52:	21ff      	movs	r1, #255	; 0xff
 8001c54:	4091      	lsls	r1, r2
 8001c56:	000a      	movs	r2, r1
 8001c58:	43d2      	mvns	r2, r2
 8001c5a:	401a      	ands	r2, r3
 8001c5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	019b      	lsls	r3, r3, #6
 8001c62:	22ff      	movs	r2, #255	; 0xff
 8001c64:	401a      	ands	r2, r3
 8001c66:	1dfb      	adds	r3, r7, #7
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	4003      	ands	r3, r0
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c74:	481f      	ldr	r0, [pc, #124]	; (8001cf4 <__NVIC_SetPriority+0xd4>)
 8001c76:	1dfb      	adds	r3, r7, #7
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	b25b      	sxtb	r3, r3
 8001c7c:	089b      	lsrs	r3, r3, #2
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	33c0      	adds	r3, #192	; 0xc0
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001c86:	e031      	b.n	8001cec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c88:	4a1b      	ldr	r2, [pc, #108]	; (8001cf8 <__NVIC_SetPriority+0xd8>)
 8001c8a:	1dfb      	adds	r3, r7, #7
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	0019      	movs	r1, r3
 8001c90:	230f      	movs	r3, #15
 8001c92:	400b      	ands	r3, r1
 8001c94:	3b08      	subs	r3, #8
 8001c96:	089b      	lsrs	r3, r3, #2
 8001c98:	3306      	adds	r3, #6
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	18d3      	adds	r3, r2, r3
 8001c9e:	3304      	adds	r3, #4
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	1dfa      	adds	r2, r7, #7
 8001ca4:	7812      	ldrb	r2, [r2, #0]
 8001ca6:	0011      	movs	r1, r2
 8001ca8:	2203      	movs	r2, #3
 8001caa:	400a      	ands	r2, r1
 8001cac:	00d2      	lsls	r2, r2, #3
 8001cae:	21ff      	movs	r1, #255	; 0xff
 8001cb0:	4091      	lsls	r1, r2
 8001cb2:	000a      	movs	r2, r1
 8001cb4:	43d2      	mvns	r2, r2
 8001cb6:	401a      	ands	r2, r3
 8001cb8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	019b      	lsls	r3, r3, #6
 8001cbe:	22ff      	movs	r2, #255	; 0xff
 8001cc0:	401a      	ands	r2, r3
 8001cc2:	1dfb      	adds	r3, r7, #7
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	2303      	movs	r3, #3
 8001cca:	4003      	ands	r3, r0
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cd0:	4809      	ldr	r0, [pc, #36]	; (8001cf8 <__NVIC_SetPriority+0xd8>)
 8001cd2:	1dfb      	adds	r3, r7, #7
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	001c      	movs	r4, r3
 8001cd8:	230f      	movs	r3, #15
 8001cda:	4023      	ands	r3, r4
 8001cdc:	3b08      	subs	r3, #8
 8001cde:	089b      	lsrs	r3, r3, #2
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	3306      	adds	r3, #6
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	18c3      	adds	r3, r0, r3
 8001ce8:	3304      	adds	r3, #4
 8001cea:	601a      	str	r2, [r3, #0]
}
 8001cec:	46c0      	nop			; (mov r8, r8)
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	b003      	add	sp, #12
 8001cf2:	bd90      	pop	{r4, r7, pc}
 8001cf4:	e000e100 	.word	0xe000e100
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	1e5a      	subs	r2, r3, #1
 8001d08:	2380      	movs	r3, #128	; 0x80
 8001d0a:	045b      	lsls	r3, r3, #17
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d301      	bcc.n	8001d14 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d10:	2301      	movs	r3, #1
 8001d12:	e010      	b.n	8001d36 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d14:	4b0a      	ldr	r3, [pc, #40]	; (8001d40 <SysTick_Config+0x44>)
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	3a01      	subs	r2, #1
 8001d1a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	425b      	negs	r3, r3
 8001d20:	2103      	movs	r1, #3
 8001d22:	0018      	movs	r0, r3
 8001d24:	f7ff ff7c 	bl	8001c20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d28:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <SysTick_Config+0x44>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d2e:	4b04      	ldr	r3, [pc, #16]	; (8001d40 <SysTick_Config+0x44>)
 8001d30:	2207      	movs	r2, #7
 8001d32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	0018      	movs	r0, r3
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	b002      	add	sp, #8
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	46c0      	nop			; (mov r8, r8)
 8001d40:	e000e010 	.word	0xe000e010

08001d44 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60b9      	str	r1, [r7, #8]
 8001d4c:	607a      	str	r2, [r7, #4]
 8001d4e:	210f      	movs	r1, #15
 8001d50:	187b      	adds	r3, r7, r1
 8001d52:	1c02      	adds	r2, r0, #0
 8001d54:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001d56:	68ba      	ldr	r2, [r7, #8]
 8001d58:	187b      	adds	r3, r7, r1
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	b25b      	sxtb	r3, r3
 8001d5e:	0011      	movs	r1, r2
 8001d60:	0018      	movs	r0, r3
 8001d62:	f7ff ff5d 	bl	8001c20 <__NVIC_SetPriority>
}
 8001d66:	46c0      	nop			; (mov r8, r8)
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	b004      	add	sp, #16
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b082      	sub	sp, #8
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	0002      	movs	r2, r0
 8001d76:	1dfb      	adds	r3, r7, #7
 8001d78:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d7a:	1dfb      	adds	r3, r7, #7
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	b25b      	sxtb	r3, r3
 8001d80:	0018      	movs	r0, r3
 8001d82:	f7ff ff11 	bl	8001ba8 <__NVIC_EnableIRQ>
}
 8001d86:	46c0      	nop			; (mov r8, r8)
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	b002      	add	sp, #8
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b082      	sub	sp, #8
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	0002      	movs	r2, r0
 8001d96:	1dfb      	adds	r3, r7, #7
 8001d98:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001d9a:	1dfb      	adds	r3, r7, #7
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	b25b      	sxtb	r3, r3
 8001da0:	0018      	movs	r0, r3
 8001da2:	f7ff ff1b 	bl	8001bdc <__NVIC_DisableIRQ>
}
 8001da6:	46c0      	nop			; (mov r8, r8)
 8001da8:	46bd      	mov	sp, r7
 8001daa:	b002      	add	sp, #8
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b082      	sub	sp, #8
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	0018      	movs	r0, r3
 8001dba:	f7ff ff9f 	bl	8001cfc <SysTick_Config>
 8001dbe:	0003      	movs	r3, r0
}
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	b002      	add	sp, #8
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <CORE_GetTick>:
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
	return gTicks;
 8001dcc:	4b02      	ldr	r3, [pc, #8]	; (8001dd8 <CORE_GetTick+0x10>)
 8001dce:	681b      	ldr	r3, [r3, #0]
}
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	46c0      	nop			; (mov r8, r8)
 8001dd8:	200003cc 	.word	0x200003cc

08001ddc <IBUS_Detect>:
/*
 * PUBLIC FUNCTIONS
 */

bool IBUS_Detect(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
	IBUS_Init();
 8001de2:	f000 f81b 	bl	8001e1c <IBUS_Init>

	uint32_t tick = CORE_GetTick();
 8001de6:	f7ff ffef 	bl	8001dc8 <CORE_GetTick>
 8001dea:	0003      	movs	r3, r0
 8001dec:	607b      	str	r3, [r7, #4]
	while ((IBUS_TIMEOUT * 2) > CORE_GetTick() - tick)
 8001dee:	e003      	b.n	8001df8 <IBUS_Detect+0x1c>
	{
		IBUS_HandleUART();
 8001df0:	f000 f984 	bl	80020fc <IBUS_HandleUART>
		CORE_Idle();
 8001df4:	f002 f898 	bl	8003f28 <CORE_Idle>
	while ((IBUS_TIMEOUT * 2) > CORE_GetTick() - tick)
 8001df8:	f7ff ffe6 	bl	8001dc8 <CORE_GetTick>
 8001dfc:	0002      	movs	r2, r0
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b29      	cmp	r3, #41	; 0x29
 8001e04:	d9f4      	bls.n	8001df0 <IBUS_Detect+0x14>
	}

	IBUS_Deinit();
 8001e06:	f000 f821 	bl	8001e4c <IBUS_Deinit>

	return rxHeartbeatIBUS;
 8001e0a:	4b03      	ldr	r3, [pc, #12]	; (8001e18 <IBUS_Detect+0x3c>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
}
 8001e0e:	0018      	movs	r0, r3
 8001e10:	46bd      	mov	sp, r7
 8001e12:	b002      	add	sp, #8
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	46c0      	nop			; (mov r8, r8)
 8001e18:	20000268 	.word	0x20000268

08001e1c <IBUS_Init>:

void IBUS_Init (void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
	memset(rxIBUS, 0, sizeof(rxIBUS));
 8001e20:	4b08      	ldr	r3, [pc, #32]	; (8001e44 <IBUS_Init+0x28>)
 8001e22:	2260      	movs	r2, #96	; 0x60
 8001e24:	2100      	movs	r1, #0
 8001e26:	0018      	movs	r0, r3
 8001e28:	f003 f9a9 	bl	800517e <memset>

	UART_Init(IBUS_UART, IBUS_BAUD, UART_Mode_Default);
 8001e2c:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <IBUS_Init+0x2c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	22e1      	movs	r2, #225	; 0xe1
 8001e32:	0251      	lsls	r1, r2, #9
 8001e34:	2200      	movs	r2, #0
 8001e36:	0018      	movs	r0, r3
 8001e38:	f002 fef4 	bl	8004c24 <UART_Init>
}
 8001e3c:	46c0      	nop			; (mov r8, r8)
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	20000208 	.word	0x20000208
 8001e48:	2000018c 	.word	0x2000018c

08001e4c <IBUS_Deinit>:

void IBUS_Deinit (void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
	UART_Deinit(IBUS_UART);
 8001e50:	4b03      	ldr	r3, [pc, #12]	; (8001e60 <IBUS_Deinit+0x14>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	0018      	movs	r0, r3
 8001e56:	f002 ffc9 	bl	8004dec <UART_Deinit>
}
 8001e5a:	46c0      	nop			; (mov r8, r8)
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	2000018c 	.word	0x2000018c

08001e64 <IBUS_Update>:

void IBUS_Update (void)
{
 8001e64:	b590      	push	{r4, r7, lr}
 8001e66:	b087      	sub	sp, #28
 8001e68:	af00      	add	r7, sp, #0
	// Update Rx Data
	IBUS_HandleUART();
 8001e6a:	f000 f947 	bl	80020fc <IBUS_HandleUART>

	// Update Loop Variables
	uint32_t now = CORE_GetTick();
 8001e6e:	f7ff ffab 	bl	8001dc8 <CORE_GetTick>
 8001e72:	0003      	movs	r3, r0
 8001e74:	60bb      	str	r3, [r7, #8]
	static uint32_t prev = 0;

	// Check for New Input Data
	if (rxHeartbeatIBUS)
 8001e76:	4b45      	ldr	r3, [pc, #276]	; (8001f8c <IBUS_Update+0x128>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d06f      	beq.n	8001f5e <IBUS_Update+0xfa>
	{
		// Average and Assign Input to data Struct
		for (uint8_t j = IBUS_DATA_INDEX; j < (IBUS_PAYLOAD_LEN - IBUS_CHECKSUM_LEN); j += 2)
 8001e7e:	2317      	movs	r3, #23
 8001e80:	18fb      	adds	r3, r7, r3
 8001e82:	2202      	movs	r2, #2
 8001e84:	701a      	strb	r2, [r3, #0]
 8001e86:	e05f      	b.n	8001f48 <IBUS_Update+0xe4>
		{
			uint8_t avg = 0;
 8001e88:	2316      	movs	r3, #22
 8001e8a:	18fb      	adds	r3, r7, r3
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	701a      	strb	r2, [r3, #0]
			uint32_t ch = 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	613b      	str	r3, [r7, #16]
			for (uint8_t i = 0; i < IBUS_JITTER_ARRAY; i++)
 8001e94:	230f      	movs	r3, #15
 8001e96:	18fb      	adds	r3, r7, r3
 8001e98:	2200      	movs	r2, #0
 8001e9a:	701a      	strb	r2, [r3, #0]
 8001e9c:	e036      	b.n	8001f0c <IBUS_Update+0xa8>
			{
				uint16_t trunc = (int16_t)(rxIBUS[i][j] | rxIBUS[i][j+1] << 8);
 8001e9e:	200f      	movs	r0, #15
 8001ea0:	183b      	adds	r3, r7, r0
 8001ea2:	781a      	ldrb	r2, [r3, #0]
 8001ea4:	2417      	movs	r4, #23
 8001ea6:	193b      	adds	r3, r7, r4
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	4939      	ldr	r1, [pc, #228]	; (8001f90 <IBUS_Update+0x12c>)
 8001eac:	0152      	lsls	r2, r2, #5
 8001eae:	188a      	adds	r2, r1, r2
 8001eb0:	5cd3      	ldrb	r3, [r2, r3]
 8001eb2:	b21a      	sxth	r2, r3
 8001eb4:	183b      	adds	r3, r7, r0
 8001eb6:	7819      	ldrb	r1, [r3, #0]
 8001eb8:	193b      	adds	r3, r7, r4
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	4834      	ldr	r0, [pc, #208]	; (8001f90 <IBUS_Update+0x12c>)
 8001ec0:	0149      	lsls	r1, r1, #5
 8001ec2:	1841      	adds	r1, r0, r1
 8001ec4:	5ccb      	ldrb	r3, [r1, r3]
 8001ec6:	021b      	lsls	r3, r3, #8
 8001ec8:	b21b      	sxth	r3, r3
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	b21a      	sxth	r2, r3
 8001ece:	1dbb      	adds	r3, r7, #6
 8001ed0:	801a      	strh	r2, [r3, #0]
				trunc = IBUS_Truncate(trunc);
 8001ed2:	1dbc      	adds	r4, r7, #6
 8001ed4:	1dbb      	adds	r3, r7, #6
 8001ed6:	881b      	ldrh	r3, [r3, #0]
 8001ed8:	0018      	movs	r0, r3
 8001eda:	f000 f867 	bl	8001fac <IBUS_Truncate>
 8001ede:	0003      	movs	r3, r0
 8001ee0:	8023      	strh	r3, [r4, #0]
				if (trunc != 0)
 8001ee2:	1dbb      	adds	r3, r7, #6
 8001ee4:	881b      	ldrh	r3, [r3, #0]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00a      	beq.n	8001f00 <IBUS_Update+0x9c>
				{
					ch += trunc;
 8001eea:	1dbb      	adds	r3, r7, #6
 8001eec:	881b      	ldrh	r3, [r3, #0]
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	18d3      	adds	r3, r2, r3
 8001ef2:	613b      	str	r3, [r7, #16]
					avg += 1;
 8001ef4:	2216      	movs	r2, #22
 8001ef6:	18bb      	adds	r3, r7, r2
 8001ef8:	18ba      	adds	r2, r7, r2
 8001efa:	7812      	ldrb	r2, [r2, #0]
 8001efc:	3201      	adds	r2, #1
 8001efe:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < IBUS_JITTER_ARRAY; i++)
 8001f00:	210f      	movs	r1, #15
 8001f02:	187b      	adds	r3, r7, r1
 8001f04:	781a      	ldrb	r2, [r3, #0]
 8001f06:	187b      	adds	r3, r7, r1
 8001f08:	3201      	adds	r2, #1
 8001f0a:	701a      	strb	r2, [r3, #0]
 8001f0c:	230f      	movs	r3, #15
 8001f0e:	18fb      	adds	r3, r7, r3
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d9c3      	bls.n	8001e9e <IBUS_Update+0x3a>
				}
			}
			ch /= avg;
 8001f16:	2316      	movs	r3, #22
 8001f18:	18fb      	adds	r3, r7, r3
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	0019      	movs	r1, r3
 8001f1e:	6938      	ldr	r0, [r7, #16]
 8001f20:	f7fe f8f2 	bl	8000108 <__udivsi3>
 8001f24:	0003      	movs	r3, r0
 8001f26:	613b      	str	r3, [r7, #16]
			dataIBUS.ch[j] = ch;
 8001f28:	2017      	movs	r0, #23
 8001f2a:	183b      	adds	r3, r7, r0
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	b211      	sxth	r1, r2
 8001f32:	4a18      	ldr	r2, [pc, #96]	; (8001f94 <IBUS_Update+0x130>)
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	18d3      	adds	r3, r2, r3
 8001f38:	3302      	adds	r3, #2
 8001f3a:	1c0a      	adds	r2, r1, #0
 8001f3c:	801a      	strh	r2, [r3, #0]
		for (uint8_t j = IBUS_DATA_INDEX; j < (IBUS_PAYLOAD_LEN - IBUS_CHECKSUM_LEN); j += 2)
 8001f3e:	183b      	adds	r3, r7, r0
 8001f40:	183a      	adds	r2, r7, r0
 8001f42:	7812      	ldrb	r2, [r2, #0]
 8001f44:	3202      	adds	r2, #2
 8001f46:	701a      	strb	r2, [r3, #0]
 8001f48:	2317      	movs	r3, #23
 8001f4a:	18fb      	adds	r3, r7, r3
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b1d      	cmp	r3, #29
 8001f50:	d99a      	bls.n	8001e88 <IBUS_Update+0x24>
		}
		rxHeartbeatIBUS = false;
 8001f52:	4b0e      	ldr	r3, [pc, #56]	; (8001f8c <IBUS_Update+0x128>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	701a      	strb	r2, [r3, #0]
		prev = now;
 8001f58:	4b0f      	ldr	r3, [pc, #60]	; (8001f98 <IBUS_Update+0x134>)
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	601a      	str	r2, [r3, #0]
	}

	// Check for Input Failsafe
	if (IBUS_TIMEOUT <= (now - prev)) {
 8001f5e:	4b0e      	ldr	r3, [pc, #56]	; (8001f98 <IBUS_Update+0x134>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68ba      	ldr	r2, [r7, #8]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b14      	cmp	r3, #20
 8001f68:	d909      	bls.n	8001f7e <IBUS_Update+0x11a>
		dataIBUS.inputLost = true;
 8001f6a:	4b0a      	ldr	r3, [pc, #40]	; (8001f94 <IBUS_Update+0x130>)
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	701a      	strb	r2, [r3, #0]
		memset(rxIBUS, 0, sizeof(rxIBUS));
 8001f70:	4b07      	ldr	r3, [pc, #28]	; (8001f90 <IBUS_Update+0x12c>)
 8001f72:	2260      	movs	r2, #96	; 0x60
 8001f74:	2100      	movs	r1, #0
 8001f76:	0018      	movs	r0, r3
 8001f78:	f003 f901 	bl	800517e <memset>
	} else {
		dataIBUS.inputLost = false;
	}
}
 8001f7c:	e002      	b.n	8001f84 <IBUS_Update+0x120>
		dataIBUS.inputLost = false;
 8001f7e:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <IBUS_Update+0x130>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	701a      	strb	r2, [r3, #0]
}
 8001f84:	46c0      	nop			; (mov r8, r8)
 8001f86:	46bd      	mov	sp, r7
 8001f88:	b007      	add	sp, #28
 8001f8a:	bd90      	pop	{r4, r7, pc}
 8001f8c:	20000268 	.word	0x20000268
 8001f90:	20000208 	.word	0x20000208
 8001f94:	2000026c 	.word	0x2000026c
 8001f98:	2000028c 	.word	0x2000028c

08001f9c <IBUS_GetDataPtr>:

IBUS_Data* IBUS_GetDataPtr (void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
	return &dataIBUS;
 8001fa0:	4b01      	ldr	r3, [pc, #4]	; (8001fa8 <IBUS_GetDataPtr+0xc>)
}
 8001fa2:	0018      	movs	r0, r3
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	2000026c 	.word	0x2000026c

08001fac <IBUS_Truncate>:
/*
 * PRIVATE FUNCTIONS
 */

uint16_t IBUS_Truncate (uint16_t r)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	0002      	movs	r2, r0
 8001fb4:	1dbb      	adds	r3, r7, #6
 8001fb6:	801a      	strh	r2, [r3, #0]
	uint16_t retVal = 0;
 8001fb8:	210e      	movs	r1, #14
 8001fba:	187b      	adds	r3, r7, r1
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	801a      	strh	r2, [r3, #0]

	if (r == 0) {
 8001fc0:	1dbb      	adds	r3, r7, #6
 8001fc2:	881b      	ldrh	r3, [r3, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d103      	bne.n	8001fd0 <IBUS_Truncate+0x24>
		retVal = 0;
 8001fc8:	187b      	adds	r3, r7, r1
 8001fca:	2200      	movs	r2, #0
 8001fcc:	801a      	strh	r2, [r3, #0]
 8001fce:	e031      	b.n	8002034 <IBUS_Truncate+0x88>
	} else if (r < (IBUS_MIN - IBUS_THRESHOLD)) {
 8001fd0:	1dbb      	adds	r3, r7, #6
 8001fd2:	881a      	ldrh	r2, [r3, #0]
 8001fd4:	23fa      	movs	r3, #250	; 0xfa
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d204      	bcs.n	8001fe6 <IBUS_Truncate+0x3a>
		retVal = 0;
 8001fdc:	230e      	movs	r3, #14
 8001fde:	18fb      	adds	r3, r7, r3
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	801a      	strh	r2, [r3, #0]
 8001fe4:	e026      	b.n	8002034 <IBUS_Truncate+0x88>
	} else if (r < IBUS_MIN) {
 8001fe6:	1dbb      	adds	r3, r7, #6
 8001fe8:	881a      	ldrh	r2, [r3, #0]
 8001fea:	23fa      	movs	r3, #250	; 0xfa
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d205      	bcs.n	8001ffe <IBUS_Truncate+0x52>
		retVal = IBUS_MIN;
 8001ff2:	230e      	movs	r3, #14
 8001ff4:	18fb      	adds	r3, r7, r3
 8001ff6:	22fa      	movs	r2, #250	; 0xfa
 8001ff8:	0092      	lsls	r2, r2, #2
 8001ffa:	801a      	strh	r2, [r3, #0]
 8001ffc:	e01a      	b.n	8002034 <IBUS_Truncate+0x88>
	} else if (r <= IBUS_MAX) {
 8001ffe:	1dbb      	adds	r3, r7, #6
 8002000:	881a      	ldrh	r2, [r3, #0]
 8002002:	23fa      	movs	r3, #250	; 0xfa
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	429a      	cmp	r2, r3
 8002008:	d805      	bhi.n	8002016 <IBUS_Truncate+0x6a>
		retVal = r;
 800200a:	230e      	movs	r3, #14
 800200c:	18fb      	adds	r3, r7, r3
 800200e:	1dba      	adds	r2, r7, #6
 8002010:	8812      	ldrh	r2, [r2, #0]
 8002012:	801a      	strh	r2, [r3, #0]
 8002014:	e00e      	b.n	8002034 <IBUS_Truncate+0x88>
	} else if (r < (IBUS_MAX + IBUS_THRESHOLD))	{
 8002016:	1dbb      	adds	r3, r7, #6
 8002018:	881b      	ldrh	r3, [r3, #0]
 800201a:	4a0a      	ldr	r2, [pc, #40]	; (8002044 <IBUS_Truncate+0x98>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d805      	bhi.n	800202c <IBUS_Truncate+0x80>
		retVal = IBUS_MAX;
 8002020:	230e      	movs	r3, #14
 8002022:	18fb      	adds	r3, r7, r3
 8002024:	22fa      	movs	r2, #250	; 0xfa
 8002026:	00d2      	lsls	r2, r2, #3
 8002028:	801a      	strh	r2, [r3, #0]
 800202a:	e003      	b.n	8002034 <IBUS_Truncate+0x88>
	} else {
		retVal = 0;
 800202c:	230e      	movs	r3, #14
 800202e:	18fb      	adds	r3, r7, r3
 8002030:	2200      	movs	r2, #0
 8002032:	801a      	strh	r2, [r3, #0]
	}

	return retVal;
 8002034:	230e      	movs	r3, #14
 8002036:	18fb      	adds	r3, r7, r3
 8002038:	881b      	ldrh	r3, [r3, #0]
}
 800203a:	0018      	movs	r0, r3
 800203c:	46bd      	mov	sp, r7
 800203e:	b004      	add	sp, #16
 8002040:	bd80      	pop	{r7, pc}
 8002042:	46c0      	nop			; (mov r8, r8)
 8002044:	000009c3 	.word	0x000009c3

08002048 <IBUS_Checksum>:

bool IBUS_Checksum(uint8_t jitter)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	0002      	movs	r2, r0
 8002050:	1dfb      	adds	r3, r7, #7
 8002052:	701a      	strb	r2, [r3, #0]
	bool retVal = false;
 8002054:	230f      	movs	r3, #15
 8002056:	18fb      	adds	r3, r7, r3
 8002058:	2200      	movs	r2, #0
 800205a:	701a      	strb	r2, [r3, #0]

	uint16_t cs = (int16_t)(rxIBUS[jitter][IBUS_CHECKSUM_INDEX] | rxIBUS[jitter][IBUS_CHECKSUM_INDEX + 1] << 8);
 800205c:	1dfb      	adds	r3, r7, #7
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	4a25      	ldr	r2, [pc, #148]	; (80020f8 <IBUS_Checksum+0xb0>)
 8002062:	015b      	lsls	r3, r3, #5
 8002064:	18d3      	adds	r3, r2, r3
 8002066:	331e      	adds	r3, #30
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	b21a      	sxth	r2, r3
 800206c:	1dfb      	adds	r3, r7, #7
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	4921      	ldr	r1, [pc, #132]	; (80020f8 <IBUS_Checksum+0xb0>)
 8002072:	015b      	lsls	r3, r3, #5
 8002074:	18cb      	adds	r3, r1, r3
 8002076:	331f      	adds	r3, #31
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	021b      	lsls	r3, r3, #8
 800207c:	b21b      	sxth	r3, r3
 800207e:	4313      	orrs	r3, r2
 8002080:	b21a      	sxth	r2, r3
 8002082:	2308      	movs	r3, #8
 8002084:	18fb      	adds	r3, r7, r3
 8002086:	801a      	strh	r2, [r3, #0]
	uint16_t check = IBUS_CHECKSUM_START;
 8002088:	230c      	movs	r3, #12
 800208a:	18fb      	adds	r3, r7, r3
 800208c:	2201      	movs	r2, #1
 800208e:	4252      	negs	r2, r2
 8002090:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0 ; i < (IBUS_PAYLOAD_LEN - IBUS_CHECKSUM_LEN); i++)
 8002092:	230b      	movs	r3, #11
 8002094:	18fb      	adds	r3, r7, r3
 8002096:	2200      	movs	r2, #0
 8002098:	701a      	strb	r2, [r3, #0]
 800209a:	e014      	b.n	80020c6 <IBUS_Checksum+0x7e>
	{
		check -= rxIBUS[jitter][i];
 800209c:	1dfb      	adds	r3, r7, #7
 800209e:	781a      	ldrb	r2, [r3, #0]
 80020a0:	200b      	movs	r0, #11
 80020a2:	183b      	adds	r3, r7, r0
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	4914      	ldr	r1, [pc, #80]	; (80020f8 <IBUS_Checksum+0xb0>)
 80020a8:	0152      	lsls	r2, r2, #5
 80020aa:	188a      	adds	r2, r1, r2
 80020ac:	5cd3      	ldrb	r3, [r2, r3]
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	210c      	movs	r1, #12
 80020b2:	187b      	adds	r3, r7, r1
 80020b4:	1879      	adds	r1, r7, r1
 80020b6:	8809      	ldrh	r1, [r1, #0]
 80020b8:	1a8a      	subs	r2, r1, r2
 80020ba:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0 ; i < (IBUS_PAYLOAD_LEN - IBUS_CHECKSUM_LEN); i++)
 80020bc:	183b      	adds	r3, r7, r0
 80020be:	781a      	ldrb	r2, [r3, #0]
 80020c0:	183b      	adds	r3, r7, r0
 80020c2:	3201      	adds	r2, #1
 80020c4:	701a      	strb	r2, [r3, #0]
 80020c6:	230b      	movs	r3, #11
 80020c8:	18fb      	adds	r3, r7, r3
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b1d      	cmp	r3, #29
 80020ce:	d9e5      	bls.n	800209c <IBUS_Checksum+0x54>
	}

	if (cs == check) { retVal = true; }
 80020d0:	2308      	movs	r3, #8
 80020d2:	18fa      	adds	r2, r7, r3
 80020d4:	230c      	movs	r3, #12
 80020d6:	18fb      	adds	r3, r7, r3
 80020d8:	8812      	ldrh	r2, [r2, #0]
 80020da:	881b      	ldrh	r3, [r3, #0]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d103      	bne.n	80020e8 <IBUS_Checksum+0xa0>
 80020e0:	230f      	movs	r3, #15
 80020e2:	18fb      	adds	r3, r7, r3
 80020e4:	2201      	movs	r2, #1
 80020e6:	701a      	strb	r2, [r3, #0]

	return retVal;
 80020e8:	230f      	movs	r3, #15
 80020ea:	18fb      	adds	r3, r7, r3
 80020ec:	781b      	ldrb	r3, [r3, #0]
}
 80020ee:	0018      	movs	r0, r3
 80020f0:	46bd      	mov	sp, r7
 80020f2:	b004      	add	sp, #16
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	46c0      	nop			; (mov r8, r8)
 80020f8:	20000208 	.word	0x20000208

080020fc <IBUS_HandleUART>:

void IBUS_HandleUART (void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
	static uint8_t jitter = 0;			// Jitter-Smoothing Array Index

	while (UART_ReadCount(IBUS_UART) >= IBUS_PAYLOAD_LEN)
 8002100:	e04a      	b.n	8002198 <IBUS_HandleUART+0x9c>
	{
		UART_Read(IBUS_UART, &rxIBUS[jitter][IBUS_HEADER1_INDEX], IBUS_HEADER1_LEN);
 8002102:	4b2b      	ldr	r3, [pc, #172]	; (80021b0 <IBUS_HandleUART+0xb4>)
 8002104:	6818      	ldr	r0, [r3, #0]
 8002106:	4b2b      	ldr	r3, [pc, #172]	; (80021b4 <IBUS_HandleUART+0xb8>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	015a      	lsls	r2, r3, #5
 800210c:	4b2a      	ldr	r3, [pc, #168]	; (80021b8 <IBUS_HandleUART+0xbc>)
 800210e:	18d3      	adds	r3, r2, r3
 8002110:	2201      	movs	r2, #1
 8002112:	0019      	movs	r1, r3
 8002114:	f002 fed9 	bl	8004eca <UART_Read>
		if (rxIBUS[jitter][IBUS_HEADER1_INDEX] == IBUS_HEADER1)
 8002118:	4b26      	ldr	r3, [pc, #152]	; (80021b4 <IBUS_HandleUART+0xb8>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	001a      	movs	r2, r3
 800211e:	4b26      	ldr	r3, [pc, #152]	; (80021b8 <IBUS_HandleUART+0xbc>)
 8002120:	0152      	lsls	r2, r2, #5
 8002122:	5cd3      	ldrb	r3, [r2, r3]
 8002124:	2b20      	cmp	r3, #32
 8002126:	d137      	bne.n	8002198 <IBUS_HandleUART+0x9c>
		{
			UART_Read(IBUS_UART, &rxIBUS[jitter][IBUS_HEADER2_INDEX], IBUS_HEADER2_LEN);
 8002128:	4b21      	ldr	r3, [pc, #132]	; (80021b0 <IBUS_HandleUART+0xb4>)
 800212a:	6818      	ldr	r0, [r3, #0]
 800212c:	4b21      	ldr	r3, [pc, #132]	; (80021b4 <IBUS_HandleUART+0xb8>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	015b      	lsls	r3, r3, #5
 8002132:	1c5a      	adds	r2, r3, #1
 8002134:	4b20      	ldr	r3, [pc, #128]	; (80021b8 <IBUS_HandleUART+0xbc>)
 8002136:	18d3      	adds	r3, r2, r3
 8002138:	2201      	movs	r2, #1
 800213a:	0019      	movs	r1, r3
 800213c:	f002 fec5 	bl	8004eca <UART_Read>
			if (rxIBUS[jitter][IBUS_HEADER2_INDEX] == IBUS_HEADER2)
 8002140:	4b1c      	ldr	r3, [pc, #112]	; (80021b4 <IBUS_HandleUART+0xb8>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	4a1c      	ldr	r2, [pc, #112]	; (80021b8 <IBUS_HandleUART+0xbc>)
 8002146:	015b      	lsls	r3, r3, #5
 8002148:	18d3      	adds	r3, r2, r3
 800214a:	3301      	adds	r3, #1
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	2b40      	cmp	r3, #64	; 0x40
 8002150:	d122      	bne.n	8002198 <IBUS_HandleUART+0x9c>
			{
				// Read Channel Data
				UART_Read(IBUS_UART, &rxIBUS[jitter][IBUS_DATA_INDEX], (IBUS_PAYLOAD_LEN - IBUS_HEADER1_LEN - IBUS_HEADER2_LEN));
 8002152:	4b17      	ldr	r3, [pc, #92]	; (80021b0 <IBUS_HandleUART+0xb4>)
 8002154:	6818      	ldr	r0, [r3, #0]
 8002156:	4b17      	ldr	r3, [pc, #92]	; (80021b4 <IBUS_HandleUART+0xb8>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	015b      	lsls	r3, r3, #5
 800215c:	1c9a      	adds	r2, r3, #2
 800215e:	4b16      	ldr	r3, [pc, #88]	; (80021b8 <IBUS_HandleUART+0xbc>)
 8002160:	18d3      	adds	r3, r2, r3
 8002162:	221e      	movs	r2, #30
 8002164:	0019      	movs	r1, r3
 8002166:	f002 feb0 	bl	8004eca <UART_Read>
				// Verify the Checksum
				if (IBUS_Checksum(jitter)) {
 800216a:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <IBUS_HandleUART+0xb8>)
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	0018      	movs	r0, r3
 8002170:	f7ff ff6a 	bl	8002048 <IBUS_Checksum>
 8002174:	1e03      	subs	r3, r0, #0
 8002176:	d00f      	beq.n	8002198 <IBUS_HandleUART+0x9c>
					// Kick Heartbeat
					rxHeartbeatIBUS = true;
 8002178:	4b10      	ldr	r3, [pc, #64]	; (80021bc <IBUS_HandleUART+0xc0>)
 800217a:	2201      	movs	r2, #1
 800217c:	701a      	strb	r2, [r3, #0]
					//Increment Jitter Array Index
					jitter += 1;
 800217e:	4b0d      	ldr	r3, [pc, #52]	; (80021b4 <IBUS_HandleUART+0xb8>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	3301      	adds	r3, #1
 8002184:	b2da      	uxtb	r2, r3
 8002186:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <IBUS_HandleUART+0xb8>)
 8002188:	701a      	strb	r2, [r3, #0]
					if (jitter >= IBUS_JITTER_ARRAY) { jitter = 0; }
 800218a:	4b0a      	ldr	r3, [pc, #40]	; (80021b4 <IBUS_HandleUART+0xb8>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	2b02      	cmp	r3, #2
 8002190:	d902      	bls.n	8002198 <IBUS_HandleUART+0x9c>
 8002192:	4b08      	ldr	r3, [pc, #32]	; (80021b4 <IBUS_HandleUART+0xb8>)
 8002194:	2200      	movs	r2, #0
 8002196:	701a      	strb	r2, [r3, #0]
	while (UART_ReadCount(IBUS_UART) >= IBUS_PAYLOAD_LEN)
 8002198:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <IBUS_HandleUART+0xb4>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	0018      	movs	r0, r3
 800219e:	f002 fe67 	bl	8004e70 <UART_ReadCount>
 80021a2:	0003      	movs	r3, r0
 80021a4:	2b1f      	cmp	r3, #31
 80021a6:	d8ac      	bhi.n	8002102 <IBUS_HandleUART+0x6>
				}
			}
		}
	}
}
 80021a8:	46c0      	nop			; (mov r8, r8)
 80021aa:	46c0      	nop			; (mov r8, r8)
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	2000018c 	.word	0x2000018c
 80021b4:	20000290 	.word	0x20000290
 80021b8:	20000208 	.word	0x20000208
 80021bc:	20000268 	.word	0x20000268

080021c0 <CORE_GetTick>:
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
	return gTicks;
 80021c4:	4b02      	ldr	r3, [pc, #8]	; (80021d0 <CORE_GetTick+0x10>)
 80021c6:	681b      	ldr	r3, [r3, #0]
}
 80021c8:	0018      	movs	r0, r3
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	46c0      	nop			; (mov r8, r8)
 80021d0:	200003cc 	.word	0x200003cc

080021d4 <GPIO_EnableInput>:
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	1dfb      	adds	r3, r7, #7
 80021e0:	701a      	strb	r2, [r3, #0]
	GPIO_Init(gpio, pin, GPIO_Mode_Input | pull);
 80021e2:	1dfb      	adds	r3, r7, #7
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	68b9      	ldr	r1, [r7, #8]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	0018      	movs	r0, r3
 80021ee:	f002 f84f 	bl	8004290 <GPIO_Init>
}
 80021f2:	46c0      	nop			; (mov r8, r8)
 80021f4:	46bd      	mov	sp, r7
 80021f6:	b004      	add	sp, #16
 80021f8:	bd80      	pop	{r7, pc}

080021fa <GPIO_Deinit>:
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b082      	sub	sp, #8
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
 8002202:	6039      	str	r1, [r7, #0]
	GPIO_Init(gpio, pin, GPIO_Mode_Analog);
 8002204:	6839      	ldr	r1, [r7, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2203      	movs	r2, #3
 800220a:	0018      	movs	r0, r3
 800220c:	f002 f840 	bl	8004290 <GPIO_Init>
}
 8002210:	46c0      	nop			; (mov r8, r8)
 8002212:	46bd      	mov	sp, r7
 8002214:	b002      	add	sp, #8
 8002216:	bd80      	pop	{r7, pc}

08002218 <TIM_Read>:
/*
 * INLINE FUNCTION DEFINITIONS
 */

static inline uint32_t TIM_Read(TIM_t * tim)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
	return tim->Instance->CNT;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002226:	0018      	movs	r0, r3
 8002228:	46bd      	mov	sp, r7
 800222a:	b002      	add	sp, #8
 800222c:	bd80      	pop	{r7, pc}
	...

08002230 <PPM_Detect>:
/*
 * PUBLIC FUNCTIONS
 */

bool PPM_Detect (void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
	PPM_Init();
 8002236:	f000 f819 	bl	800226c <PPM_Init>

	uint32_t tick = CORE_GetTick();
 800223a:	f7ff ffc1 	bl	80021c0 <CORE_GetTick>
 800223e:	0003      	movs	r3, r0
 8002240:	607b      	str	r3, [r7, #4]
	while ((PPM_TIMEOUT * 2) > CORE_GetTick() - tick)
 8002242:	e001      	b.n	8002248 <PPM_Detect+0x18>
	{
		CORE_Idle();
 8002244:	f001 fe70 	bl	8003f28 <CORE_Idle>
	while ((PPM_TIMEOUT * 2) > CORE_GetTick() - tick)
 8002248:	f7ff ffba 	bl	80021c0 <CORE_GetTick>
 800224c:	0002      	movs	r2, r0
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b77      	cmp	r3, #119	; 0x77
 8002254:	d9f6      	bls.n	8002244 <PPM_Detect+0x14>
	}

	PPM_Deinit();
 8002256:	f000 f835 	bl	80022c4 <PPM_Deinit>

	return rxHeartbeatPPM;
 800225a:	4b03      	ldr	r3, [pc, #12]	; (8002268 <PPM_Detect+0x38>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	b2db      	uxtb	r3, r3
}
 8002260:	0018      	movs	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	b002      	add	sp, #8
 8002266:	bd80      	pop	{r7, pc}
 8002268:	200002c4 	.word	0x200002c4

0800226c <PPM_Init>:

void PPM_Init (void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
	PPM_memset();
 8002270:	f000 f922 	bl	80024b8 <PPM_memset>

	TIM_Init(PPM_TIM, PPM_TIM_FREQ, PPM_TIM_RELOAD);
 8002274:	4b0e      	ldr	r3, [pc, #56]	; (80022b0 <PPM_Init+0x44>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a0e      	ldr	r2, [pc, #56]	; (80022b4 <PPM_Init+0x48>)
 800227a:	490f      	ldr	r1, [pc, #60]	; (80022b8 <PPM_Init+0x4c>)
 800227c:	0018      	movs	r0, r3
 800227e:	f002 f9d9 	bl	8004634 <TIM_Init>
	TIM_Start(PPM_TIM);
 8002282:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <PPM_Init+0x44>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	0018      	movs	r0, r3
 8002288:	f002 faa8 	bl	80047dc <TIM_Start>

	GPIO_EnableInput(PPM_GPIO, PPM_PIN, GPIO_Pull_Down);
 800228c:	2380      	movs	r3, #128	; 0x80
 800228e:	011b      	lsls	r3, r3, #4
 8002290:	480a      	ldr	r0, [pc, #40]	; (80022bc <PPM_Init+0x50>)
 8002292:	2220      	movs	r2, #32
 8002294:	0019      	movs	r1, r3
 8002296:	f7ff ff9d 	bl	80021d4 <GPIO_EnableInput>
	GPIO_OnChange(PPM_GPIO, PPM_PIN, GPIO_IT_Rising, PPM_IRQ);
 800229a:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <PPM_Init+0x54>)
 800229c:	2280      	movs	r2, #128	; 0x80
 800229e:	0111      	lsls	r1, r2, #4
 80022a0:	4806      	ldr	r0, [pc, #24]	; (80022bc <PPM_Init+0x50>)
 80022a2:	2201      	movs	r2, #1
 80022a4:	f001 ffc8 	bl	8004238 <GPIO_OnChange>
}
 80022a8:	46c0      	nop			; (mov r8, r8)
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	46c0      	nop			; (mov r8, r8)
 80022b0:	2000003c 	.word	0x2000003c
 80022b4:	000f4240 	.word	0x000f4240
 80022b8:	0000ffff 	.word	0x0000ffff
 80022bc:	50000400 	.word	0x50000400
 80022c0:	08002515 	.word	0x08002515

080022c4 <PPM_Deinit>:

void PPM_Deinit (void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
	TIM_Deinit(PPM_TIM);
 80022c8:	4b0a      	ldr	r3, [pc, #40]	; (80022f4 <PPM_Deinit+0x30>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	0018      	movs	r0, r3
 80022ce:	f002 fab1 	bl	8004834 <TIM_Deinit>

	GPIO_OnChange(PPM_GPIO, PPM_PIN, GPIO_IT_None, NULL);
 80022d2:	2380      	movs	r3, #128	; 0x80
 80022d4:	0119      	lsls	r1, r3, #4
 80022d6:	4808      	ldr	r0, [pc, #32]	; (80022f8 <PPM_Deinit+0x34>)
 80022d8:	2300      	movs	r3, #0
 80022da:	2200      	movs	r2, #0
 80022dc:	f001 ffac 	bl	8004238 <GPIO_OnChange>
	GPIO_Deinit(PPM_GPIO, PPM_PIN);
 80022e0:	2380      	movs	r3, #128	; 0x80
 80022e2:	011b      	lsls	r3, r3, #4
 80022e4:	4a04      	ldr	r2, [pc, #16]	; (80022f8 <PPM_Deinit+0x34>)
 80022e6:	0019      	movs	r1, r3
 80022e8:	0010      	movs	r0, r2
 80022ea:	f7ff ff86 	bl	80021fa <GPIO_Deinit>
}
 80022ee:	46c0      	nop			; (mov r8, r8)
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	2000003c 	.word	0x2000003c
 80022f8:	50000400 	.word	0x50000400

080022fc <PPM_Update>:

void PPM_Update (void)
{
 80022fc:	b590      	push	{r4, r7, lr}
 80022fe:	b087      	sub	sp, #28
 8002300:	af00      	add	r7, sp, #0
	uint32_t now = CORE_GetTick();
 8002302:	f7ff ff5d 	bl	80021c0 <CORE_GetTick>
 8002306:	0003      	movs	r3, r0
 8002308:	60bb      	str	r3, [r7, #8]
	static uint32_t prev = 0;

	// Check for New Input Data
	if (rxHeartbeatPPM)
 800230a:	4b3c      	ldr	r3, [pc, #240]	; (80023fc <PPM_Update+0x100>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b00      	cmp	r3, #0
 8002312:	d05f      	beq.n	80023d4 <PPM_Update+0xd8>
	{
		// Average and Assign Input to data Struct
		for (uint8_t j = 0; j < PPM_NUM_CHANNELS; j++)
 8002314:	2317      	movs	r3, #23
 8002316:	18fb      	adds	r3, r7, r3
 8002318:	2200      	movs	r2, #0
 800231a:	701a      	strb	r2, [r3, #0]
 800231c:	e04f      	b.n	80023be <PPM_Update+0xc2>
		{
			uint8_t avg = 0;
 800231e:	2316      	movs	r3, #22
 8002320:	18fb      	adds	r3, r7, r3
 8002322:	2200      	movs	r2, #0
 8002324:	701a      	strb	r2, [r3, #0]
			uint32_t ch = 0;
 8002326:	2300      	movs	r3, #0
 8002328:	613b      	str	r3, [r7, #16]
			for (uint8_t i = 0; i < PPM_JITTER_ARRAY; i++)
 800232a:	230f      	movs	r3, #15
 800232c:	18fb      	adds	r3, r7, r3
 800232e:	2200      	movs	r2, #0
 8002330:	701a      	strb	r2, [r3, #0]
 8002332:	e026      	b.n	8002382 <PPM_Update+0x86>
			{
				uint16_t trunc = PPM_Truncate(rxPPM[i][j]);
 8002334:	230f      	movs	r3, #15
 8002336:	18fb      	adds	r3, r7, r3
 8002338:	7819      	ldrb	r1, [r3, #0]
 800233a:	2317      	movs	r3, #23
 800233c:	18fb      	adds	r3, r7, r3
 800233e:	781a      	ldrb	r2, [r3, #0]
 8002340:	4b2f      	ldr	r3, [pc, #188]	; (8002400 <PPM_Update+0x104>)
 8002342:	00c9      	lsls	r1, r1, #3
 8002344:	188a      	adds	r2, r1, r2
 8002346:	0052      	lsls	r2, r2, #1
 8002348:	5ad3      	ldrh	r3, [r2, r3]
 800234a:	b29b      	uxth	r3, r3
 800234c:	1dbc      	adds	r4, r7, #6
 800234e:	0018      	movs	r0, r3
 8002350:	f000 f864 	bl	800241c <PPM_Truncate>
 8002354:	0003      	movs	r3, r0
 8002356:	8023      	strh	r3, [r4, #0]
				if (trunc != 0)
 8002358:	1dbb      	adds	r3, r7, #6
 800235a:	881b      	ldrh	r3, [r3, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00a      	beq.n	8002376 <PPM_Update+0x7a>
				{
					ch += trunc;
 8002360:	1dbb      	adds	r3, r7, #6
 8002362:	881b      	ldrh	r3, [r3, #0]
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	18d3      	adds	r3, r2, r3
 8002368:	613b      	str	r3, [r7, #16]
					avg += 1;
 800236a:	2216      	movs	r2, #22
 800236c:	18bb      	adds	r3, r7, r2
 800236e:	18ba      	adds	r2, r7, r2
 8002370:	7812      	ldrb	r2, [r2, #0]
 8002372:	3201      	adds	r2, #1
 8002374:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < PPM_JITTER_ARRAY; i++)
 8002376:	210f      	movs	r1, #15
 8002378:	187b      	adds	r3, r7, r1
 800237a:	781a      	ldrb	r2, [r3, #0]
 800237c:	187b      	adds	r3, r7, r1
 800237e:	3201      	adds	r2, #1
 8002380:	701a      	strb	r2, [r3, #0]
 8002382:	230f      	movs	r3, #15
 8002384:	18fb      	adds	r3, r7, r3
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	2b02      	cmp	r3, #2
 800238a:	d9d3      	bls.n	8002334 <PPM_Update+0x38>
				}
			}
			ch /= avg;
 800238c:	2316      	movs	r3, #22
 800238e:	18fb      	adds	r3, r7, r3
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	0019      	movs	r1, r3
 8002394:	6938      	ldr	r0, [r7, #16]
 8002396:	f7fd feb7 	bl	8000108 <__udivsi3>
 800239a:	0003      	movs	r3, r0
 800239c:	613b      	str	r3, [r7, #16]
			dataPPM.ch[j] = ch;
 800239e:	2017      	movs	r0, #23
 80023a0:	183b      	adds	r3, r7, r0
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	b211      	sxth	r1, r2
 80023a8:	4a16      	ldr	r2, [pc, #88]	; (8002404 <PPM_Update+0x108>)
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	18d3      	adds	r3, r2, r3
 80023ae:	3302      	adds	r3, #2
 80023b0:	1c0a      	adds	r2, r1, #0
 80023b2:	801a      	strh	r2, [r3, #0]
		for (uint8_t j = 0; j < PPM_NUM_CHANNELS; j++)
 80023b4:	183b      	adds	r3, r7, r0
 80023b6:	781a      	ldrb	r2, [r3, #0]
 80023b8:	183b      	adds	r3, r7, r0
 80023ba:	3201      	adds	r2, #1
 80023bc:	701a      	strb	r2, [r3, #0]
 80023be:	2317      	movs	r3, #23
 80023c0:	18fb      	adds	r3, r7, r3
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2b07      	cmp	r3, #7
 80023c6:	d9aa      	bls.n	800231e <PPM_Update+0x22>
		}
		rxHeartbeatPPM = false;
 80023c8:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <PPM_Update+0x100>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	701a      	strb	r2, [r3, #0]
		prev = now;
 80023ce:	4b0e      	ldr	r3, [pc, #56]	; (8002408 <PPM_Update+0x10c>)
 80023d0:	68ba      	ldr	r2, [r7, #8]
 80023d2:	601a      	str	r2, [r3, #0]
	}

	// Check for Input Failsafe
	if (PPM_TIMEOUT <= (now - prev)) {
 80023d4:	4b0c      	ldr	r3, [pc, #48]	; (8002408 <PPM_Update+0x10c>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68ba      	ldr	r2, [r7, #8]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b3b      	cmp	r3, #59	; 0x3b
 80023de:	d905      	bls.n	80023ec <PPM_Update+0xf0>
		dataPPM.inputLost = true;
 80023e0:	4b08      	ldr	r3, [pc, #32]	; (8002404 <PPM_Update+0x108>)
 80023e2:	2201      	movs	r2, #1
 80023e4:	701a      	strb	r2, [r3, #0]
		PPM_memset();
 80023e6:	f000 f867 	bl	80024b8 <PPM_memset>
	} else {
		dataPPM.inputLost = false;
	}
}
 80023ea:	e002      	b.n	80023f2 <PPM_Update+0xf6>
		dataPPM.inputLost = false;
 80023ec:	4b05      	ldr	r3, [pc, #20]	; (8002404 <PPM_Update+0x108>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	701a      	strb	r2, [r3, #0]
}
 80023f2:	46c0      	nop			; (mov r8, r8)
 80023f4:	46bd      	mov	sp, r7
 80023f6:	b007      	add	sp, #28
 80023f8:	bd90      	pop	{r4, r7, pc}
 80023fa:	46c0      	nop			; (mov r8, r8)
 80023fc:	200002c4 	.word	0x200002c4
 8002400:	20000294 	.word	0x20000294
 8002404:	200002c8 	.word	0x200002c8
 8002408:	200002dc 	.word	0x200002dc

0800240c <PPM_GetDataPtr>:

PPM_Data* PPM_GetDataPtr (void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
	return &dataPPM;
 8002410:	4b01      	ldr	r3, [pc, #4]	; (8002418 <PPM_GetDataPtr+0xc>)
}
 8002412:	0018      	movs	r0, r3
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	200002c8 	.word	0x200002c8

0800241c <PPM_Truncate>:
/*
 * PRIVATE FUNCTIONS
 */

uint16_t PPM_Truncate (uint16_t r)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	0002      	movs	r2, r0
 8002424:	1dbb      	adds	r3, r7, #6
 8002426:	801a      	strh	r2, [r3, #0]
	uint16_t retVal = 0;
 8002428:	210e      	movs	r1, #14
 800242a:	187b      	adds	r3, r7, r1
 800242c:	2200      	movs	r2, #0
 800242e:	801a      	strh	r2, [r3, #0]

	if (r == 0) {
 8002430:	1dbb      	adds	r3, r7, #6
 8002432:	881b      	ldrh	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d103      	bne.n	8002440 <PPM_Truncate+0x24>
		retVal = 0;
 8002438:	187b      	adds	r3, r7, r1
 800243a:	2200      	movs	r2, #0
 800243c:	801a      	strh	r2, [r3, #0]
 800243e:	e031      	b.n	80024a4 <PPM_Truncate+0x88>
	} else if (r < (PPM_MIN - PPM_THRESHOLD)) {
 8002440:	1dbb      	adds	r3, r7, #6
 8002442:	881a      	ldrh	r2, [r3, #0]
 8002444:	23fa      	movs	r3, #250	; 0xfa
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	429a      	cmp	r2, r3
 800244a:	d204      	bcs.n	8002456 <PPM_Truncate+0x3a>
		retVal = 0;
 800244c:	230e      	movs	r3, #14
 800244e:	18fb      	adds	r3, r7, r3
 8002450:	2200      	movs	r2, #0
 8002452:	801a      	strh	r2, [r3, #0]
 8002454:	e026      	b.n	80024a4 <PPM_Truncate+0x88>
	} else if (r < PPM_MIN) {
 8002456:	1dbb      	adds	r3, r7, #6
 8002458:	881a      	ldrh	r2, [r3, #0]
 800245a:	23fa      	movs	r3, #250	; 0xfa
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	429a      	cmp	r2, r3
 8002460:	d205      	bcs.n	800246e <PPM_Truncate+0x52>
		retVal = PPM_MIN;
 8002462:	230e      	movs	r3, #14
 8002464:	18fb      	adds	r3, r7, r3
 8002466:	22fa      	movs	r2, #250	; 0xfa
 8002468:	0092      	lsls	r2, r2, #2
 800246a:	801a      	strh	r2, [r3, #0]
 800246c:	e01a      	b.n	80024a4 <PPM_Truncate+0x88>
	} else if (r <= PPM_MAX) {
 800246e:	1dbb      	adds	r3, r7, #6
 8002470:	881a      	ldrh	r2, [r3, #0]
 8002472:	23fa      	movs	r3, #250	; 0xfa
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	429a      	cmp	r2, r3
 8002478:	d805      	bhi.n	8002486 <PPM_Truncate+0x6a>
		retVal = r;
 800247a:	230e      	movs	r3, #14
 800247c:	18fb      	adds	r3, r7, r3
 800247e:	1dba      	adds	r2, r7, #6
 8002480:	8812      	ldrh	r2, [r2, #0]
 8002482:	801a      	strh	r2, [r3, #0]
 8002484:	e00e      	b.n	80024a4 <PPM_Truncate+0x88>
	} else if (r < (PPM_MAX + PPM_THRESHOLD))	{
 8002486:	1dbb      	adds	r3, r7, #6
 8002488:	881b      	ldrh	r3, [r3, #0]
 800248a:	4a0a      	ldr	r2, [pc, #40]	; (80024b4 <PPM_Truncate+0x98>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d805      	bhi.n	800249c <PPM_Truncate+0x80>
		retVal = PPM_MAX;
 8002490:	230e      	movs	r3, #14
 8002492:	18fb      	adds	r3, r7, r3
 8002494:	22fa      	movs	r2, #250	; 0xfa
 8002496:	00d2      	lsls	r2, r2, #3
 8002498:	801a      	strh	r2, [r3, #0]
 800249a:	e003      	b.n	80024a4 <PPM_Truncate+0x88>
	} else {
		retVal = 0;
 800249c:	230e      	movs	r3, #14
 800249e:	18fb      	adds	r3, r7, r3
 80024a0:	2200      	movs	r2, #0
 80024a2:	801a      	strh	r2, [r3, #0]
	}

	return retVal;
 80024a4:	230e      	movs	r3, #14
 80024a6:	18fb      	adds	r3, r7, r3
 80024a8:	881b      	ldrh	r3, [r3, #0]
}
 80024aa:	0018      	movs	r0, r3
 80024ac:	46bd      	mov	sp, r7
 80024ae:	b004      	add	sp, #16
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	46c0      	nop			; (mov r8, r8)
 80024b4:	000009c3 	.word	0x000009c3

080024b8 <PPM_memset>:

void PPM_memset (void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
	for (uint8_t j = 0; j < PPM_NUM_CHANNELS; j++)
 80024be:	1dfb      	adds	r3, r7, #7
 80024c0:	2200      	movs	r2, #0
 80024c2:	701a      	strb	r2, [r3, #0]
 80024c4:	e01b      	b.n	80024fe <PPM_memset+0x46>
	{
		for (uint8_t i = 0; i < PPM_JITTER_ARRAY; i++)
 80024c6:	1dbb      	adds	r3, r7, #6
 80024c8:	2200      	movs	r2, #0
 80024ca:	701a      	strb	r2, [r3, #0]
 80024cc:	e00e      	b.n	80024ec <PPM_memset+0x34>
		{
			rxPPM[i][j] = 0;
 80024ce:	1dbb      	adds	r3, r7, #6
 80024d0:	7819      	ldrb	r1, [r3, #0]
 80024d2:	1dfb      	adds	r3, r7, #7
 80024d4:	781a      	ldrb	r2, [r3, #0]
 80024d6:	4b0e      	ldr	r3, [pc, #56]	; (8002510 <PPM_memset+0x58>)
 80024d8:	00c9      	lsls	r1, r1, #3
 80024da:	188a      	adds	r2, r1, r2
 80024dc:	0052      	lsls	r2, r2, #1
 80024de:	2100      	movs	r1, #0
 80024e0:	52d1      	strh	r1, [r2, r3]
		for (uint8_t i = 0; i < PPM_JITTER_ARRAY; i++)
 80024e2:	1dbb      	adds	r3, r7, #6
 80024e4:	781a      	ldrb	r2, [r3, #0]
 80024e6:	1dbb      	adds	r3, r7, #6
 80024e8:	3201      	adds	r2, #1
 80024ea:	701a      	strb	r2, [r3, #0]
 80024ec:	1dbb      	adds	r3, r7, #6
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d9ec      	bls.n	80024ce <PPM_memset+0x16>
	for (uint8_t j = 0; j < PPM_NUM_CHANNELS; j++)
 80024f4:	1dfb      	adds	r3, r7, #7
 80024f6:	781a      	ldrb	r2, [r3, #0]
 80024f8:	1dfb      	adds	r3, r7, #7
 80024fa:	3201      	adds	r2, #1
 80024fc:	701a      	strb	r2, [r3, #0]
 80024fe:	1dfb      	adds	r3, r7, #7
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2b07      	cmp	r3, #7
 8002504:	d9df      	bls.n	80024c6 <PPM_memset+0xe>
		}
	}
}
 8002506:	46c0      	nop			; (mov r8, r8)
 8002508:	46c0      	nop			; (mov r8, r8)
 800250a:	46bd      	mov	sp, r7
 800250c:	b002      	add	sp, #8
 800250e:	bd80      	pop	{r7, pc}
 8002510:	20000294 	.word	0x20000294

08002514 <PPM_IRQ>:
/*
 * INTERRUPT ROUTINES
 */

void PPM_IRQ (void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
	uint16_t now = TIM_Read(PPM_TIM);	// Current IRQ Loop Time
 800251a:	4b27      	ldr	r3, [pc, #156]	; (80025b8 <PPM_IRQ+0xa4>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	0018      	movs	r0, r3
 8002520:	f7ff fe7a 	bl	8002218 <TIM_Read>
 8002524:	0002      	movs	r2, r0
 8002526:	1dbb      	adds	r3, r7, #6
 8002528:	801a      	strh	r2, [r3, #0]
	static uint16_t prev = 0;			// Previous IRQ Loop Time
	uint16_t pulse = 0;					// Pulse Width
 800252a:	1d3b      	adds	r3, r7, #4
 800252c:	2200      	movs	r2, #0
 800252e:	801a      	strh	r2, [r3, #0]
	static uint8_t ch = 0;				// Channel Index
	static uint8_t jitter = 0;			// Jitter-Smoothing Array Index

	// Calculate the Pulse Width
	pulse = now - prev;
 8002530:	4b22      	ldr	r3, [pc, #136]	; (80025bc <PPM_IRQ+0xa8>)
 8002532:	881a      	ldrh	r2, [r3, #0]
 8002534:	1d3b      	adds	r3, r7, #4
 8002536:	1db9      	adds	r1, r7, #6
 8002538:	8809      	ldrh	r1, [r1, #0]
 800253a:	1a8a      	subs	r2, r1, r2
 800253c:	801a      	strh	r2, [r3, #0]

	// Check for Channel 1 Synchronization
	if (pulse > PPM_EOF_TIME)
 800253e:	1d3b      	adds	r3, r7, #4
 8002540:	881a      	ldrh	r2, [r3, #0]
 8002542:	23fa      	movs	r3, #250	; 0xfa
 8002544:	011b      	lsls	r3, r3, #4
 8002546:	429a      	cmp	r2, r3
 8002548:	d902      	bls.n	8002550 <PPM_IRQ+0x3c>
	{
		ch = 0;
 800254a:	4b1d      	ldr	r3, [pc, #116]	; (80025c0 <PPM_IRQ+0xac>)
 800254c:	2200      	movs	r2, #0
 800254e:	701a      	strb	r2, [r3, #0]
	}

	// Check for any Additional (Unsupported) Channels
	if (ch < PPM_NUM_CHANNELS)
 8002550:	4b1b      	ldr	r3, [pc, #108]	; (80025c0 <PPM_IRQ+0xac>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	2b07      	cmp	r3, #7
 8002556:	d82a      	bhi.n	80025ae <PPM_IRQ+0x9a>
	{
		// Assign Pulse to Correct Channel
		rxPPM[jitter][ch] = pulse;
 8002558:	4b1a      	ldr	r3, [pc, #104]	; (80025c4 <PPM_IRQ+0xb0>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	001a      	movs	r2, r3
 800255e:	4b18      	ldr	r3, [pc, #96]	; (80025c0 <PPM_IRQ+0xac>)
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	0019      	movs	r1, r3
 8002564:	4b18      	ldr	r3, [pc, #96]	; (80025c8 <PPM_IRQ+0xb4>)
 8002566:	00d2      	lsls	r2, r2, #3
 8002568:	1852      	adds	r2, r2, r1
 800256a:	0052      	lsls	r2, r2, #1
 800256c:	1d39      	adds	r1, r7, #4
 800256e:	8809      	ldrh	r1, [r1, #0]
 8002570:	52d1      	strh	r1, [r2, r3]
		// Prep Variables for Next Loop
		prev = now;
 8002572:	4b12      	ldr	r3, [pc, #72]	; (80025bc <PPM_IRQ+0xa8>)
 8002574:	1dba      	adds	r2, r7, #6
 8002576:	8812      	ldrh	r2, [r2, #0]
 8002578:	801a      	strh	r2, [r3, #0]
		ch += 1;
 800257a:	4b11      	ldr	r3, [pc, #68]	; (80025c0 <PPM_IRQ+0xac>)
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	3301      	adds	r3, #1
 8002580:	b2da      	uxtb	r2, r3
 8002582:	4b0f      	ldr	r3, [pc, #60]	; (80025c0 <PPM_IRQ+0xac>)
 8002584:	701a      	strb	r2, [r3, #0]
		// Evaluate on last loop
		if (ch == (PPM_NUM_CHANNELS - 1))
 8002586:	4b0e      	ldr	r3, [pc, #56]	; (80025c0 <PPM_IRQ+0xac>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	2b07      	cmp	r3, #7
 800258c:	d10f      	bne.n	80025ae <PPM_IRQ+0x9a>
		{
			// Kick Heartbeat
			rxHeartbeatPPM = true;
 800258e:	4b0f      	ldr	r3, [pc, #60]	; (80025cc <PPM_IRQ+0xb8>)
 8002590:	2201      	movs	r2, #1
 8002592:	701a      	strb	r2, [r3, #0]
			//Increment Jitter Array Index
			jitter += 1;
 8002594:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <PPM_IRQ+0xb0>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	3301      	adds	r3, #1
 800259a:	b2da      	uxtb	r2, r3
 800259c:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <PPM_IRQ+0xb0>)
 800259e:	701a      	strb	r2, [r3, #0]
			if (jitter >= PPM_JITTER_ARRAY) { jitter = 0; }
 80025a0:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <PPM_IRQ+0xb0>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d902      	bls.n	80025ae <PPM_IRQ+0x9a>
 80025a8:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <PPM_IRQ+0xb0>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80025ae:	46c0      	nop			; (mov r8, r8)
 80025b0:	46bd      	mov	sp, r7
 80025b2:	b002      	add	sp, #8
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	46c0      	nop			; (mov r8, r8)
 80025b8:	2000003c 	.word	0x2000003c
 80025bc:	200002e0 	.word	0x200002e0
 80025c0:	200002e2 	.word	0x200002e2
 80025c4:	200002e3 	.word	0x200002e3
 80025c8:	20000294 	.word	0x20000294
 80025cc:	200002c4 	.word	0x200002c4

080025d0 <CORE_GetTick>:
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
	return gTicks;
 80025d4:	4b02      	ldr	r3, [pc, #8]	; (80025e0 <CORE_GetTick+0x10>)
 80025d6:	681b      	ldr	r3, [r3, #0]
}
 80025d8:	0018      	movs	r0, r3
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	46c0      	nop			; (mov r8, r8)
 80025e0:	200003cc 	.word	0x200003cc

080025e4 <GPIO_EnableInput>:
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	1dfb      	adds	r3, r7, #7
 80025f0:	701a      	strb	r2, [r3, #0]
	GPIO_Init(gpio, pin, GPIO_Mode_Input | pull);
 80025f2:	1dfb      	adds	r3, r7, #7
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	68b9      	ldr	r1, [r7, #8]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	0018      	movs	r0, r3
 80025fe:	f001 fe47 	bl	8004290 <GPIO_Init>
}
 8002602:	46c0      	nop			; (mov r8, r8)
 8002604:	46bd      	mov	sp, r7
 8002606:	b004      	add	sp, #16
 8002608:	bd80      	pop	{r7, pc}

0800260a <GPIO_Deinit>:
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b082      	sub	sp, #8
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
 8002612:	6039      	str	r1, [r7, #0]
	GPIO_Init(gpio, pin, GPIO_Mode_Analog);
 8002614:	6839      	ldr	r1, [r7, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2203      	movs	r2, #3
 800261a:	0018      	movs	r0, r3
 800261c:	f001 fe38 	bl	8004290 <GPIO_Init>
}
 8002620:	46c0      	nop			; (mov r8, r8)
 8002622:	46bd      	mov	sp, r7
 8002624:	b002      	add	sp, #8
 8002626:	bd80      	pop	{r7, pc}

08002628 <GPIO_Read>:
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
	return ((gpio->IDR & pin) > 0);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	4013      	ands	r3, r2
 800263a:	1e5a      	subs	r2, r3, #1
 800263c:	4193      	sbcs	r3, r2
 800263e:	b2db      	uxtb	r3, r3
}
 8002640:	0018      	movs	r0, r3
 8002642:	46bd      	mov	sp, r7
 8002644:	b002      	add	sp, #8
 8002646:	bd80      	pop	{r7, pc}

08002648 <TIM_Read>:
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
	return tim->Instance->CNT;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002656:	0018      	movs	r0, r3
 8002658:	46bd      	mov	sp, r7
 800265a:	b002      	add	sp, #8
 800265c:	bd80      	pop	{r7, pc}
	...

08002660 <PWM_Detect>:
 * PUBLIC FUNCTIONS
 */

// TODO: Fix the false-positive when running PPM protocol
bool PWM_Detect(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
	PWM_Init();
 8002666:	f000 f83d 	bl	80026e4 <PWM_Init>

	uint32_t tick = CORE_GetTick();
 800266a:	f7ff ffb1 	bl	80025d0 <CORE_GetTick>
 800266e:	0003      	movs	r3, r0
 8002670:	603b      	str	r3, [r7, #0]
	while ((PWM_TIMEOUT * 2) > CORE_GetTick() - tick)
 8002672:	e001      	b.n	8002678 <PWM_Detect+0x18>
	{
		CORE_Idle();
 8002674:	f001 fc58 	bl	8003f28 <CORE_Idle>
	while ((PWM_TIMEOUT * 2) > CORE_GetTick() - tick)
 8002678:	f7ff ffaa 	bl	80025d0 <CORE_GetTick>
 800267c:	0002      	movs	r2, r0
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b77      	cmp	r3, #119	; 0x77
 8002684:	d9f6      	bls.n	8002674 <PWM_Detect+0x14>
	}

	PWM_Deinit();
 8002686:	f000 f887 	bl	8002798 <PWM_Deinit>

	bool retVal = false;
 800268a:	1dfb      	adds	r3, r7, #7
 800268c:	2200      	movs	r2, #0
 800268e:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < PWM_NUM_CHANNELS; i++)
 8002690:	1dbb      	adds	r3, r7, #6
 8002692:	2200      	movs	r2, #0
 8002694:	701a      	strb	r2, [r3, #0]
 8002696:	e018      	b.n	80026ca <PWM_Detect+0x6a>
	{
		retVal = retVal || rxHeartbeatPWM[i];
 8002698:	1dfb      	adds	r3, r7, #7
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d106      	bne.n	80026ae <PWM_Detect+0x4e>
 80026a0:	1dbb      	adds	r3, r7, #6
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	4a0e      	ldr	r2, [pc, #56]	; (80026e0 <PWM_Detect+0x80>)
 80026a6:	5cd3      	ldrb	r3, [r2, r3]
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <PWM_Detect+0x52>
 80026ae:	2201      	movs	r2, #1
 80026b0:	e000      	b.n	80026b4 <PWM_Detect+0x54>
 80026b2:	2200      	movs	r2, #0
 80026b4:	1dfb      	adds	r3, r7, #7
 80026b6:	701a      	strb	r2, [r3, #0]
 80026b8:	781a      	ldrb	r2, [r3, #0]
 80026ba:	2101      	movs	r1, #1
 80026bc:	400a      	ands	r2, r1
 80026be:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < PWM_NUM_CHANNELS; i++)
 80026c0:	1dbb      	adds	r3, r7, #6
 80026c2:	781a      	ldrb	r2, [r3, #0]
 80026c4:	1dbb      	adds	r3, r7, #6
 80026c6:	3201      	adds	r2, #1
 80026c8:	701a      	strb	r2, [r3, #0]
 80026ca:	1dbb      	adds	r3, r7, #6
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	2b03      	cmp	r3, #3
 80026d0:	d9e2      	bls.n	8002698 <PWM_Detect+0x38>
	}
	return retVal;
 80026d2:	1dfb      	adds	r3, r7, #7
 80026d4:	781b      	ldrb	r3, [r3, #0]
}
 80026d6:	0018      	movs	r0, r3
 80026d8:	46bd      	mov	sp, r7
 80026da:	b002      	add	sp, #8
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	46c0      	nop			; (mov r8, r8)
 80026e0:	200002fc 	.word	0x200002fc

080026e4 <PWM_Init>:

void PWM_Init ()
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
	PWM_memset();
 80026e8:	f000 f98e 	bl	8002a08 <PWM_memset>

	TIM_Init(PWM_TIM, PWM_TIM_FREQ, PWM_TIM_RELOAD);
 80026ec:	4b22      	ldr	r3, [pc, #136]	; (8002778 <PWM_Init+0x94>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a22      	ldr	r2, [pc, #136]	; (800277c <PWM_Init+0x98>)
 80026f2:	4923      	ldr	r1, [pc, #140]	; (8002780 <PWM_Init+0x9c>)
 80026f4:	0018      	movs	r0, r3
 80026f6:	f001 ff9d 	bl	8004634 <TIM_Init>
	TIM_Start(PWM_TIM);
 80026fa:	4b1f      	ldr	r3, [pc, #124]	; (8002778 <PWM_Init+0x94>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	0018      	movs	r0, r3
 8002700:	f002 f86c 	bl	80047dc <TIM_Start>

	GPIO_EnableInput(PWM_S1_GPIO, PWM_S1_PIN, GPIO_Pull_Down);
 8002704:	2380      	movs	r3, #128	; 0x80
 8002706:	011b      	lsls	r3, r3, #4
 8002708:	481e      	ldr	r0, [pc, #120]	; (8002784 <PWM_Init+0xa0>)
 800270a:	2220      	movs	r2, #32
 800270c:	0019      	movs	r1, r3
 800270e:	f7ff ff69 	bl	80025e4 <GPIO_EnableInput>
	GPIO_EnableInput(PWM_S2_GPIO, PWM_S2_PIN, GPIO_Pull_Down);
 8002712:	4b1c      	ldr	r3, [pc, #112]	; (8002784 <PWM_Init+0xa0>)
 8002714:	2220      	movs	r2, #32
 8002716:	2104      	movs	r1, #4
 8002718:	0018      	movs	r0, r3
 800271a:	f7ff ff63 	bl	80025e4 <GPIO_EnableInput>
	GPIO_EnableInput(PWM_S3_GPIO, PWM_S3_PIN, GPIO_Pull_Down);
 800271e:	23a0      	movs	r3, #160	; 0xa0
 8002720:	05db      	lsls	r3, r3, #23
 8002722:	2220      	movs	r2, #32
 8002724:	2140      	movs	r1, #64	; 0x40
 8002726:	0018      	movs	r0, r3
 8002728:	f7ff ff5c 	bl	80025e4 <GPIO_EnableInput>
	GPIO_EnableInput(PWM_S4_GPIO, PWM_S4_PIN, GPIO_Pull_Down);
 800272c:	23a0      	movs	r3, #160	; 0xa0
 800272e:	05db      	lsls	r3, r3, #23
 8002730:	2220      	movs	r2, #32
 8002732:	2120      	movs	r1, #32
 8002734:	0018      	movs	r0, r3
 8002736:	f7ff ff55 	bl	80025e4 <GPIO_EnableInput>
	GPIO_OnChange(PWM_S1_GPIO, PWM_S1_PIN, GPIO_IT_Both, PWM1_IRQ);
 800273a:	4b13      	ldr	r3, [pc, #76]	; (8002788 <PWM_Init+0xa4>)
 800273c:	2280      	movs	r2, #128	; 0x80
 800273e:	0111      	lsls	r1, r2, #4
 8002740:	4810      	ldr	r0, [pc, #64]	; (8002784 <PWM_Init+0xa0>)
 8002742:	2203      	movs	r2, #3
 8002744:	f001 fd78 	bl	8004238 <GPIO_OnChange>
	GPIO_OnChange(PWM_S2_GPIO, PWM_S2_PIN, GPIO_IT_Both, PWM2_IRQ);
 8002748:	4b10      	ldr	r3, [pc, #64]	; (800278c <PWM_Init+0xa8>)
 800274a:	480e      	ldr	r0, [pc, #56]	; (8002784 <PWM_Init+0xa0>)
 800274c:	2203      	movs	r2, #3
 800274e:	2104      	movs	r1, #4
 8002750:	f001 fd72 	bl	8004238 <GPIO_OnChange>
	GPIO_OnChange(PWM_S3_GPIO, PWM_S3_PIN, GPIO_IT_Both, PWM3_IRQ);
 8002754:	4b0e      	ldr	r3, [pc, #56]	; (8002790 <PWM_Init+0xac>)
 8002756:	22a0      	movs	r2, #160	; 0xa0
 8002758:	05d0      	lsls	r0, r2, #23
 800275a:	2203      	movs	r2, #3
 800275c:	2140      	movs	r1, #64	; 0x40
 800275e:	f001 fd6b 	bl	8004238 <GPIO_OnChange>
	GPIO_OnChange(PWM_S4_GPIO, PWM_S4_PIN, GPIO_IT_Both, PWM4_IRQ);
 8002762:	4b0c      	ldr	r3, [pc, #48]	; (8002794 <PWM_Init+0xb0>)
 8002764:	22a0      	movs	r2, #160	; 0xa0
 8002766:	05d0      	lsls	r0, r2, #23
 8002768:	2203      	movs	r2, #3
 800276a:	2120      	movs	r1, #32
 800276c:	f001 fd64 	bl	8004238 <GPIO_OnChange>
}
 8002770:	46c0      	nop			; (mov r8, r8)
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	46c0      	nop			; (mov r8, r8)
 8002778:	2000003c 	.word	0x2000003c
 800277c:	0000ffff 	.word	0x0000ffff
 8002780:	000f4240 	.word	0x000f4240
 8002784:	50000400 	.word	0x50000400
 8002788:	08002a65 	.word	0x08002a65
 800278c:	08002b21 	.word	0x08002b21
 8002790:	08002bd9 	.word	0x08002bd9
 8002794:	08002c91 	.word	0x08002c91

08002798 <PWM_Deinit>:

void PWM_Deinit (void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
	TIM_Deinit(TIM_RADIO);
 800279c:	4b1d      	ldr	r3, [pc, #116]	; (8002814 <PWM_Deinit+0x7c>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	0018      	movs	r0, r3
 80027a2:	f002 f847 	bl	8004834 <TIM_Deinit>

	GPIO_OnChange(PWM_S1_GPIO, PWM_S1_PIN, GPIO_IT_None, NULL);
 80027a6:	2380      	movs	r3, #128	; 0x80
 80027a8:	0119      	lsls	r1, r3, #4
 80027aa:	481b      	ldr	r0, [pc, #108]	; (8002818 <PWM_Deinit+0x80>)
 80027ac:	2300      	movs	r3, #0
 80027ae:	2200      	movs	r2, #0
 80027b0:	f001 fd42 	bl	8004238 <GPIO_OnChange>
	GPIO_OnChange(PWM_S2_GPIO, PWM_S2_PIN, GPIO_IT_None, NULL);
 80027b4:	4818      	ldr	r0, [pc, #96]	; (8002818 <PWM_Deinit+0x80>)
 80027b6:	2300      	movs	r3, #0
 80027b8:	2200      	movs	r2, #0
 80027ba:	2104      	movs	r1, #4
 80027bc:	f001 fd3c 	bl	8004238 <GPIO_OnChange>
	GPIO_OnChange(PWM_S3_GPIO, PWM_S3_PIN, GPIO_IT_None, NULL);
 80027c0:	23a0      	movs	r3, #160	; 0xa0
 80027c2:	05d8      	lsls	r0, r3, #23
 80027c4:	2300      	movs	r3, #0
 80027c6:	2200      	movs	r2, #0
 80027c8:	2140      	movs	r1, #64	; 0x40
 80027ca:	f001 fd35 	bl	8004238 <GPIO_OnChange>
	GPIO_OnChange(PWM_S4_GPIO, PWM_S4_PIN, GPIO_IT_None, NULL);
 80027ce:	23a0      	movs	r3, #160	; 0xa0
 80027d0:	05d8      	lsls	r0, r3, #23
 80027d2:	2300      	movs	r3, #0
 80027d4:	2200      	movs	r2, #0
 80027d6:	2120      	movs	r1, #32
 80027d8:	f001 fd2e 	bl	8004238 <GPIO_OnChange>
	GPIO_Deinit(PWM_S1_GPIO, PWM_S1_PIN);
 80027dc:	2380      	movs	r3, #128	; 0x80
 80027de:	011b      	lsls	r3, r3, #4
 80027e0:	4a0d      	ldr	r2, [pc, #52]	; (8002818 <PWM_Deinit+0x80>)
 80027e2:	0019      	movs	r1, r3
 80027e4:	0010      	movs	r0, r2
 80027e6:	f7ff ff10 	bl	800260a <GPIO_Deinit>
	GPIO_Deinit(PWM_S2_GPIO, PWM_S2_PIN);
 80027ea:	4b0b      	ldr	r3, [pc, #44]	; (8002818 <PWM_Deinit+0x80>)
 80027ec:	2104      	movs	r1, #4
 80027ee:	0018      	movs	r0, r3
 80027f0:	f7ff ff0b 	bl	800260a <GPIO_Deinit>
	GPIO_Deinit(PWM_S3_GPIO, PWM_S3_PIN);
 80027f4:	23a0      	movs	r3, #160	; 0xa0
 80027f6:	05db      	lsls	r3, r3, #23
 80027f8:	2140      	movs	r1, #64	; 0x40
 80027fa:	0018      	movs	r0, r3
 80027fc:	f7ff ff05 	bl	800260a <GPIO_Deinit>
	GPIO_Deinit(PWM_S4_GPIO, PWM_S4_PIN);
 8002800:	23a0      	movs	r3, #160	; 0xa0
 8002802:	05db      	lsls	r3, r3, #23
 8002804:	2120      	movs	r1, #32
 8002806:	0018      	movs	r0, r3
 8002808:	f7ff feff 	bl	800260a <GPIO_Deinit>
}
 800280c:	46c0      	nop			; (mov r8, r8)
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	46c0      	nop			; (mov r8, r8)
 8002814:	2000003c 	.word	0x2000003c
 8002818:	50000400 	.word	0x50000400

0800281c <PWM_Update>:

void PWM_Update (void)
{
 800281c:	b590      	push	{r4, r7, lr}
 800281e:	b087      	sub	sp, #28
 8002820:	af00      	add	r7, sp, #0
	uint32_t now = CORE_GetTick();
 8002822:	f7ff fed5 	bl	80025d0 <CORE_GetTick>
 8002826:	0003      	movs	r3, r0
 8002828:	60bb      	str	r3, [r7, #8]
	static uint32_t prev = 0;

	// Check for New Input Data
	if (rxHeartbeatPWM[0] || rxHeartbeatPWM [1] || rxHeartbeatPWM [2] || rxHeartbeatPWM [3])
 800282a:	4b48      	ldr	r3, [pc, #288]	; (800294c <PWM_Update+0x130>)
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b00      	cmp	r3, #0
 8002832:	d10e      	bne.n	8002852 <PWM_Update+0x36>
 8002834:	4b45      	ldr	r3, [pc, #276]	; (800294c <PWM_Update+0x130>)
 8002836:	785b      	ldrb	r3, [r3, #1]
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d109      	bne.n	8002852 <PWM_Update+0x36>
 800283e:	4b43      	ldr	r3, [pc, #268]	; (800294c <PWM_Update+0x130>)
 8002840:	789b      	ldrb	r3, [r3, #2]
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b00      	cmp	r3, #0
 8002846:	d104      	bne.n	8002852 <PWM_Update+0x36>
 8002848:	4b40      	ldr	r3, [pc, #256]	; (800294c <PWM_Update+0x130>)
 800284a:	78db      	ldrb	r3, [r3, #3]
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d068      	beq.n	8002924 <PWM_Update+0x108>
	{
		// Average and Assign Input to data Struct
		for (uint8_t j = 0; j < PWM_NUM_CHANNELS; j++)
 8002852:	2317      	movs	r3, #23
 8002854:	18fb      	adds	r3, r7, r3
 8002856:	2200      	movs	r2, #0
 8002858:	701a      	strb	r2, [r3, #0]
 800285a:	e04f      	b.n	80028fc <PWM_Update+0xe0>
		{
			uint8_t avg = 0;
 800285c:	2316      	movs	r3, #22
 800285e:	18fb      	adds	r3, r7, r3
 8002860:	2200      	movs	r2, #0
 8002862:	701a      	strb	r2, [r3, #0]
			uint32_t ch = 0;
 8002864:	2300      	movs	r3, #0
 8002866:	613b      	str	r3, [r7, #16]
			for (uint8_t i = 0; i < PWM_JITTER_ARRAY; i++)
 8002868:	230f      	movs	r3, #15
 800286a:	18fb      	adds	r3, r7, r3
 800286c:	2200      	movs	r2, #0
 800286e:	701a      	strb	r2, [r3, #0]
 8002870:	e026      	b.n	80028c0 <PWM_Update+0xa4>
			{
				uint16_t trunc = PWM_Truncate(rxPWM[i][j]);
 8002872:	230f      	movs	r3, #15
 8002874:	18fb      	adds	r3, r7, r3
 8002876:	7819      	ldrb	r1, [r3, #0]
 8002878:	2317      	movs	r3, #23
 800287a:	18fb      	adds	r3, r7, r3
 800287c:	781a      	ldrb	r2, [r3, #0]
 800287e:	4b34      	ldr	r3, [pc, #208]	; (8002950 <PWM_Update+0x134>)
 8002880:	0089      	lsls	r1, r1, #2
 8002882:	188a      	adds	r2, r1, r2
 8002884:	0052      	lsls	r2, r2, #1
 8002886:	5ad3      	ldrh	r3, [r2, r3]
 8002888:	b29b      	uxth	r3, r3
 800288a:	1dbc      	adds	r4, r7, #6
 800288c:	0018      	movs	r0, r3
 800288e:	f000 f86d 	bl	800296c <PWM_Truncate>
 8002892:	0003      	movs	r3, r0
 8002894:	8023      	strh	r3, [r4, #0]
				if (trunc != 0)
 8002896:	1dbb      	adds	r3, r7, #6
 8002898:	881b      	ldrh	r3, [r3, #0]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00a      	beq.n	80028b4 <PWM_Update+0x98>
				{
					ch += trunc;
 800289e:	1dbb      	adds	r3, r7, #6
 80028a0:	881b      	ldrh	r3, [r3, #0]
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	18d3      	adds	r3, r2, r3
 80028a6:	613b      	str	r3, [r7, #16]
					avg += 1;
 80028a8:	2216      	movs	r2, #22
 80028aa:	18bb      	adds	r3, r7, r2
 80028ac:	18ba      	adds	r2, r7, r2
 80028ae:	7812      	ldrb	r2, [r2, #0]
 80028b0:	3201      	adds	r2, #1
 80028b2:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < PWM_JITTER_ARRAY; i++)
 80028b4:	210f      	movs	r1, #15
 80028b6:	187b      	adds	r3, r7, r1
 80028b8:	781a      	ldrb	r2, [r3, #0]
 80028ba:	187b      	adds	r3, r7, r1
 80028bc:	3201      	adds	r2, #1
 80028be:	701a      	strb	r2, [r3, #0]
 80028c0:	230f      	movs	r3, #15
 80028c2:	18fb      	adds	r3, r7, r3
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d9d3      	bls.n	8002872 <PWM_Update+0x56>
				}
			}
			ch /= avg;
 80028ca:	2316      	movs	r3, #22
 80028cc:	18fb      	adds	r3, r7, r3
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	0019      	movs	r1, r3
 80028d2:	6938      	ldr	r0, [r7, #16]
 80028d4:	f7fd fc18 	bl	8000108 <__udivsi3>
 80028d8:	0003      	movs	r3, r0
 80028da:	613b      	str	r3, [r7, #16]
			dataPWM.ch[j] = ch;
 80028dc:	2017      	movs	r0, #23
 80028de:	183b      	adds	r3, r7, r0
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	b211      	sxth	r1, r2
 80028e6:	4a1b      	ldr	r2, [pc, #108]	; (8002954 <PWM_Update+0x138>)
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	18d3      	adds	r3, r2, r3
 80028ec:	3302      	adds	r3, #2
 80028ee:	1c0a      	adds	r2, r1, #0
 80028f0:	801a      	strh	r2, [r3, #0]
		for (uint8_t j = 0; j < PWM_NUM_CHANNELS; j++)
 80028f2:	183b      	adds	r3, r7, r0
 80028f4:	781a      	ldrb	r2, [r3, #0]
 80028f6:	183b      	adds	r3, r7, r0
 80028f8:	3201      	adds	r2, #1
 80028fa:	701a      	strb	r2, [r3, #0]
 80028fc:	2317      	movs	r3, #23
 80028fe:	18fb      	adds	r3, r7, r3
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	2b03      	cmp	r3, #3
 8002904:	d9aa      	bls.n	800285c <PWM_Update+0x40>
		}
		rxHeartbeatPWM[0] = false;
 8002906:	4b11      	ldr	r3, [pc, #68]	; (800294c <PWM_Update+0x130>)
 8002908:	2200      	movs	r2, #0
 800290a:	701a      	strb	r2, [r3, #0]
		rxHeartbeatPWM[1] = false;
 800290c:	4b0f      	ldr	r3, [pc, #60]	; (800294c <PWM_Update+0x130>)
 800290e:	2200      	movs	r2, #0
 8002910:	705a      	strb	r2, [r3, #1]
		rxHeartbeatPWM[2] = false;
 8002912:	4b0e      	ldr	r3, [pc, #56]	; (800294c <PWM_Update+0x130>)
 8002914:	2200      	movs	r2, #0
 8002916:	709a      	strb	r2, [r3, #2]
		rxHeartbeatPWM[3] = false;
 8002918:	4b0c      	ldr	r3, [pc, #48]	; (800294c <PWM_Update+0x130>)
 800291a:	2200      	movs	r2, #0
 800291c:	70da      	strb	r2, [r3, #3]
		prev = now;
 800291e:	4b0e      	ldr	r3, [pc, #56]	; (8002958 <PWM_Update+0x13c>)
 8002920:	68ba      	ldr	r2, [r7, #8]
 8002922:	601a      	str	r2, [r3, #0]
	}

	// Check for Input Failsafe
	if (PWM_TIMEOUT <= (now - prev)) {
 8002924:	4b0c      	ldr	r3, [pc, #48]	; (8002958 <PWM_Update+0x13c>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68ba      	ldr	r2, [r7, #8]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b3b      	cmp	r3, #59	; 0x3b
 800292e:	d905      	bls.n	800293c <PWM_Update+0x120>
		dataPWM.inputLost = true;
 8002930:	4b08      	ldr	r3, [pc, #32]	; (8002954 <PWM_Update+0x138>)
 8002932:	2201      	movs	r2, #1
 8002934:	701a      	strb	r2, [r3, #0]
		PWM_memset();
 8002936:	f000 f867 	bl	8002a08 <PWM_memset>
	} else {
		dataPWM.inputLost = false;
	}
}
 800293a:	e002      	b.n	8002942 <PWM_Update+0x126>
		dataPWM.inputLost = false;
 800293c:	4b05      	ldr	r3, [pc, #20]	; (8002954 <PWM_Update+0x138>)
 800293e:	2200      	movs	r2, #0
 8002940:	701a      	strb	r2, [r3, #0]
}
 8002942:	46c0      	nop			; (mov r8, r8)
 8002944:	46bd      	mov	sp, r7
 8002946:	b007      	add	sp, #28
 8002948:	bd90      	pop	{r4, r7, pc}
 800294a:	46c0      	nop			; (mov r8, r8)
 800294c:	200002fc 	.word	0x200002fc
 8002950:	200002e4 	.word	0x200002e4
 8002954:	20000300 	.word	0x20000300
 8002958:	2000030c 	.word	0x2000030c

0800295c <PWM_GetDataPtr>:

PWM_Data* PWM_GetDataPtr (void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
	return &dataPWM;
 8002960:	4b01      	ldr	r3, [pc, #4]	; (8002968 <PWM_GetDataPtr+0xc>)
}
 8002962:	0018      	movs	r0, r3
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	20000300 	.word	0x20000300

0800296c <PWM_Truncate>:
/*
 * PRIVATE FUNCTIONS
 */

uint16_t PWM_Truncate (uint16_t r)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	0002      	movs	r2, r0
 8002974:	1dbb      	adds	r3, r7, #6
 8002976:	801a      	strh	r2, [r3, #0]
	uint16_t retVal = 0;
 8002978:	210e      	movs	r1, #14
 800297a:	187b      	adds	r3, r7, r1
 800297c:	2200      	movs	r2, #0
 800297e:	801a      	strh	r2, [r3, #0]

	if (r == 0) {
 8002980:	1dbb      	adds	r3, r7, #6
 8002982:	881b      	ldrh	r3, [r3, #0]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d103      	bne.n	8002990 <PWM_Truncate+0x24>
		retVal = 0;
 8002988:	187b      	adds	r3, r7, r1
 800298a:	2200      	movs	r2, #0
 800298c:	801a      	strh	r2, [r3, #0]
 800298e:	e031      	b.n	80029f4 <PWM_Truncate+0x88>
	} else if (r < (PWM_MIN - PWM_THRESHOLD)) {
 8002990:	1dbb      	adds	r3, r7, #6
 8002992:	881a      	ldrh	r2, [r3, #0]
 8002994:	23fa      	movs	r3, #250	; 0xfa
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	429a      	cmp	r2, r3
 800299a:	d204      	bcs.n	80029a6 <PWM_Truncate+0x3a>
		retVal = 0;
 800299c:	230e      	movs	r3, #14
 800299e:	18fb      	adds	r3, r7, r3
 80029a0:	2200      	movs	r2, #0
 80029a2:	801a      	strh	r2, [r3, #0]
 80029a4:	e026      	b.n	80029f4 <PWM_Truncate+0x88>
	} else if (r < PWM_MIN) {
 80029a6:	1dbb      	adds	r3, r7, #6
 80029a8:	881a      	ldrh	r2, [r3, #0]
 80029aa:	23fa      	movs	r3, #250	; 0xfa
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d205      	bcs.n	80029be <PWM_Truncate+0x52>
		retVal = PWM_MIN;
 80029b2:	230e      	movs	r3, #14
 80029b4:	18fb      	adds	r3, r7, r3
 80029b6:	22fa      	movs	r2, #250	; 0xfa
 80029b8:	0092      	lsls	r2, r2, #2
 80029ba:	801a      	strh	r2, [r3, #0]
 80029bc:	e01a      	b.n	80029f4 <PWM_Truncate+0x88>
	} else if (r <= PWM_MAX) {
 80029be:	1dbb      	adds	r3, r7, #6
 80029c0:	881a      	ldrh	r2, [r3, #0]
 80029c2:	23fa      	movs	r3, #250	; 0xfa
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d805      	bhi.n	80029d6 <PWM_Truncate+0x6a>
		retVal = r;
 80029ca:	230e      	movs	r3, #14
 80029cc:	18fb      	adds	r3, r7, r3
 80029ce:	1dba      	adds	r2, r7, #6
 80029d0:	8812      	ldrh	r2, [r2, #0]
 80029d2:	801a      	strh	r2, [r3, #0]
 80029d4:	e00e      	b.n	80029f4 <PWM_Truncate+0x88>
	} else if (r < (PWM_MAX + PWM_THRESHOLD))	{
 80029d6:	1dbb      	adds	r3, r7, #6
 80029d8:	881b      	ldrh	r3, [r3, #0]
 80029da:	4a0a      	ldr	r2, [pc, #40]	; (8002a04 <PWM_Truncate+0x98>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d805      	bhi.n	80029ec <PWM_Truncate+0x80>
		retVal = PWM_MAX;
 80029e0:	230e      	movs	r3, #14
 80029e2:	18fb      	adds	r3, r7, r3
 80029e4:	22fa      	movs	r2, #250	; 0xfa
 80029e6:	00d2      	lsls	r2, r2, #3
 80029e8:	801a      	strh	r2, [r3, #0]
 80029ea:	e003      	b.n	80029f4 <PWM_Truncate+0x88>
	} else {
		retVal = 0;
 80029ec:	230e      	movs	r3, #14
 80029ee:	18fb      	adds	r3, r7, r3
 80029f0:	2200      	movs	r2, #0
 80029f2:	801a      	strh	r2, [r3, #0]
	}

	return retVal;
 80029f4:	230e      	movs	r3, #14
 80029f6:	18fb      	adds	r3, r7, r3
 80029f8:	881b      	ldrh	r3, [r3, #0]
}
 80029fa:	0018      	movs	r0, r3
 80029fc:	46bd      	mov	sp, r7
 80029fe:	b004      	add	sp, #16
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	46c0      	nop			; (mov r8, r8)
 8002a04:	000009c3 	.word	0x000009c3

08002a08 <PWM_memset>:

void PWM_memset (void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
	for (uint8_t j = 0; j < PWM_NUM_CHANNELS; j++)
 8002a0e:	1dfb      	adds	r3, r7, #7
 8002a10:	2200      	movs	r2, #0
 8002a12:	701a      	strb	r2, [r3, #0]
 8002a14:	e01b      	b.n	8002a4e <PWM_memset+0x46>
	{
		for (uint8_t i = 0; i < PWM_JITTER_ARRAY; i++)
 8002a16:	1dbb      	adds	r3, r7, #6
 8002a18:	2200      	movs	r2, #0
 8002a1a:	701a      	strb	r2, [r3, #0]
 8002a1c:	e00e      	b.n	8002a3c <PWM_memset+0x34>
		{
			rxPWM[i][j] = 0;
 8002a1e:	1dbb      	adds	r3, r7, #6
 8002a20:	7819      	ldrb	r1, [r3, #0]
 8002a22:	1dfb      	adds	r3, r7, #7
 8002a24:	781a      	ldrb	r2, [r3, #0]
 8002a26:	4b0e      	ldr	r3, [pc, #56]	; (8002a60 <PWM_memset+0x58>)
 8002a28:	0089      	lsls	r1, r1, #2
 8002a2a:	188a      	adds	r2, r1, r2
 8002a2c:	0052      	lsls	r2, r2, #1
 8002a2e:	2100      	movs	r1, #0
 8002a30:	52d1      	strh	r1, [r2, r3]
		for (uint8_t i = 0; i < PWM_JITTER_ARRAY; i++)
 8002a32:	1dbb      	adds	r3, r7, #6
 8002a34:	781a      	ldrb	r2, [r3, #0]
 8002a36:	1dbb      	adds	r3, r7, #6
 8002a38:	3201      	adds	r2, #1
 8002a3a:	701a      	strb	r2, [r3, #0]
 8002a3c:	1dbb      	adds	r3, r7, #6
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d9ec      	bls.n	8002a1e <PWM_memset+0x16>
	for (uint8_t j = 0; j < PWM_NUM_CHANNELS; j++)
 8002a44:	1dfb      	adds	r3, r7, #7
 8002a46:	781a      	ldrb	r2, [r3, #0]
 8002a48:	1dfb      	adds	r3, r7, #7
 8002a4a:	3201      	adds	r2, #1
 8002a4c:	701a      	strb	r2, [r3, #0]
 8002a4e:	1dfb      	adds	r3, r7, #7
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	2b03      	cmp	r3, #3
 8002a54:	d9df      	bls.n	8002a16 <PWM_memset+0xe>
		}
	}
}
 8002a56:	46c0      	nop			; (mov r8, r8)
 8002a58:	46c0      	nop			; (mov r8, r8)
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	b002      	add	sp, #8
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	200002e4 	.word	0x200002e4

08002a64 <PWM1_IRQ>:
/*
 * INTERRUPT ROUTINES
 */

void PWM1_IRQ (void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
	uint16_t now = TIM_Read(TIM_RADIO);
 8002a6a:	4b26      	ldr	r3, [pc, #152]	; (8002b04 <PWM1_IRQ+0xa0>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	0018      	movs	r0, r3
 8002a70:	f7ff fdea 	bl	8002648 <TIM_Read>
 8002a74:	0002      	movs	r2, r0
 8002a76:	1dbb      	adds	r3, r7, #6
 8002a78:	801a      	strh	r2, [r3, #0]
	uint16_t pulse = 0;
 8002a7a:	1d3b      	adds	r3, r7, #4
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	801a      	strh	r2, [r3, #0]
	static uint16_t tick = 0;
	static uint8_t jitter = 0;

	if (GPIO_Read(PWM_S1_GPIO, PWM_S1_PIN))
 8002a80:	2380      	movs	r3, #128	; 0x80
 8002a82:	011b      	lsls	r3, r3, #4
 8002a84:	4a20      	ldr	r2, [pc, #128]	; (8002b08 <PWM1_IRQ+0xa4>)
 8002a86:	0019      	movs	r1, r3
 8002a88:	0010      	movs	r0, r2
 8002a8a:	f7ff fdcd 	bl	8002628 <GPIO_Read>
 8002a8e:	1e03      	subs	r3, r0, #0
 8002a90:	d004      	beq.n	8002a9c <PWM1_IRQ+0x38>
	{
		tick = now;
 8002a92:	4b1e      	ldr	r3, [pc, #120]	; (8002b0c <PWM1_IRQ+0xa8>)
 8002a94:	1dba      	adds	r2, r7, #6
 8002a96:	8812      	ldrh	r2, [r2, #0]
 8002a98:	801a      	strh	r2, [r3, #0]
 8002a9a:	e027      	b.n	8002aec <PWM1_IRQ+0x88>
	}
	else
	{
		pulse = now - tick;
 8002a9c:	4b1b      	ldr	r3, [pc, #108]	; (8002b0c <PWM1_IRQ+0xa8>)
 8002a9e:	881a      	ldrh	r2, [r3, #0]
 8002aa0:	1d3b      	adds	r3, r7, #4
 8002aa2:	1db9      	adds	r1, r7, #6
 8002aa4:	8809      	ldrh	r1, [r1, #0]
 8002aa6:	1a8a      	subs	r2, r1, r2
 8002aa8:	801a      	strh	r2, [r3, #0]
		// Check pulse is valid
		if (pulse <= (PWM_MAX + PWM_THRESHOLD) && pulse >= (PWM_MIN - PWM_THRESHOLD))
 8002aaa:	1d3b      	adds	r3, r7, #4
 8002aac:	881b      	ldrh	r3, [r3, #0]
 8002aae:	4a18      	ldr	r2, [pc, #96]	; (8002b10 <PWM1_IRQ+0xac>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d81b      	bhi.n	8002aec <PWM1_IRQ+0x88>
 8002ab4:	1d3b      	adds	r3, r7, #4
 8002ab6:	881a      	ldrh	r2, [r3, #0]
 8002ab8:	23fa      	movs	r3, #250	; 0xfa
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d315      	bcc.n	8002aec <PWM1_IRQ+0x88>
		{
			rxPWM[jitter][0] = pulse;
 8002ac0:	4b14      	ldr	r3, [pc, #80]	; (8002b14 <PWM1_IRQ+0xb0>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	001a      	movs	r2, r3
 8002ac6:	4b14      	ldr	r3, [pc, #80]	; (8002b18 <PWM1_IRQ+0xb4>)
 8002ac8:	00d2      	lsls	r2, r2, #3
 8002aca:	1d39      	adds	r1, r7, #4
 8002acc:	8809      	ldrh	r1, [r1, #0]
 8002ace:	52d1      	strh	r1, [r2, r3]
			rxHeartbeatPWM[0] = CORE_GetTick();
 8002ad0:	f7ff fd7e 	bl	80025d0 <CORE_GetTick>
 8002ad4:	0003      	movs	r3, r0
 8002ad6:	1e5a      	subs	r2, r3, #1
 8002ad8:	4193      	sbcs	r3, r2
 8002ada:	b2da      	uxtb	r2, r3
 8002adc:	4b0f      	ldr	r3, [pc, #60]	; (8002b1c <PWM1_IRQ+0xb8>)
 8002ade:	701a      	strb	r2, [r3, #0]
			jitter += 1;
 8002ae0:	4b0c      	ldr	r3, [pc, #48]	; (8002b14 <PWM1_IRQ+0xb0>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	b2da      	uxtb	r2, r3
 8002ae8:	4b0a      	ldr	r3, [pc, #40]	; (8002b14 <PWM1_IRQ+0xb0>)
 8002aea:	701a      	strb	r2, [r3, #0]
		}
	}

	if (jitter >= PWM_JITTER_ARRAY) {
 8002aec:	4b09      	ldr	r3, [pc, #36]	; (8002b14 <PWM1_IRQ+0xb0>)
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d902      	bls.n	8002afa <PWM1_IRQ+0x96>
		jitter = 0;
 8002af4:	4b07      	ldr	r3, [pc, #28]	; (8002b14 <PWM1_IRQ+0xb0>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	701a      	strb	r2, [r3, #0]
	}
}
 8002afa:	46c0      	nop			; (mov r8, r8)
 8002afc:	46bd      	mov	sp, r7
 8002afe:	b002      	add	sp, #8
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	46c0      	nop			; (mov r8, r8)
 8002b04:	2000003c 	.word	0x2000003c
 8002b08:	50000400 	.word	0x50000400
 8002b0c:	20000310 	.word	0x20000310
 8002b10:	000009c4 	.word	0x000009c4
 8002b14:	20000312 	.word	0x20000312
 8002b18:	200002e4 	.word	0x200002e4
 8002b1c:	200002fc 	.word	0x200002fc

08002b20 <PWM2_IRQ>:

void PWM2_IRQ (void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
	uint16_t now = TIM_Read(TIM_RADIO);
 8002b26:	4b25      	ldr	r3, [pc, #148]	; (8002bbc <PWM2_IRQ+0x9c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	0018      	movs	r0, r3
 8002b2c:	f7ff fd8c 	bl	8002648 <TIM_Read>
 8002b30:	0002      	movs	r2, r0
 8002b32:	1dbb      	adds	r3, r7, #6
 8002b34:	801a      	strh	r2, [r3, #0]
	uint16_t pulse = 0;
 8002b36:	1d3b      	adds	r3, r7, #4
 8002b38:	2200      	movs	r2, #0
 8002b3a:	801a      	strh	r2, [r3, #0]
	static uint16_t tick = 0;
	static uint8_t jitter = 0;

	if (GPIO_Read(PWM_S2_GPIO, PWM_S2_PIN))
 8002b3c:	4b20      	ldr	r3, [pc, #128]	; (8002bc0 <PWM2_IRQ+0xa0>)
 8002b3e:	2104      	movs	r1, #4
 8002b40:	0018      	movs	r0, r3
 8002b42:	f7ff fd71 	bl	8002628 <GPIO_Read>
 8002b46:	1e03      	subs	r3, r0, #0
 8002b48:	d004      	beq.n	8002b54 <PWM2_IRQ+0x34>
	{
		tick = now;
 8002b4a:	4b1e      	ldr	r3, [pc, #120]	; (8002bc4 <PWM2_IRQ+0xa4>)
 8002b4c:	1dba      	adds	r2, r7, #6
 8002b4e:	8812      	ldrh	r2, [r2, #0]
 8002b50:	801a      	strh	r2, [r3, #0]
 8002b52:	e028      	b.n	8002ba6 <PWM2_IRQ+0x86>
	}
	else
	{
		pulse = now - tick;
 8002b54:	4b1b      	ldr	r3, [pc, #108]	; (8002bc4 <PWM2_IRQ+0xa4>)
 8002b56:	881a      	ldrh	r2, [r3, #0]
 8002b58:	1d3b      	adds	r3, r7, #4
 8002b5a:	1db9      	adds	r1, r7, #6
 8002b5c:	8809      	ldrh	r1, [r1, #0]
 8002b5e:	1a8a      	subs	r2, r1, r2
 8002b60:	801a      	strh	r2, [r3, #0]

		// Check pulse is valid
		if (pulse <= (PWM_MAX + PWM_THRESHOLD) && pulse >= (PWM_MIN - PWM_THRESHOLD))
 8002b62:	1d3b      	adds	r3, r7, #4
 8002b64:	881b      	ldrh	r3, [r3, #0]
 8002b66:	4a18      	ldr	r2, [pc, #96]	; (8002bc8 <PWM2_IRQ+0xa8>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d81c      	bhi.n	8002ba6 <PWM2_IRQ+0x86>
 8002b6c:	1d3b      	adds	r3, r7, #4
 8002b6e:	881a      	ldrh	r2, [r3, #0]
 8002b70:	23fa      	movs	r3, #250	; 0xfa
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d316      	bcc.n	8002ba6 <PWM2_IRQ+0x86>
		{
			rxPWM[jitter][1] = pulse;
 8002b78:	4b14      	ldr	r3, [pc, #80]	; (8002bcc <PWM2_IRQ+0xac>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	4a14      	ldr	r2, [pc, #80]	; (8002bd0 <PWM2_IRQ+0xb0>)
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	18d3      	adds	r3, r2, r3
 8002b82:	3302      	adds	r3, #2
 8002b84:	1d3a      	adds	r2, r7, #4
 8002b86:	8812      	ldrh	r2, [r2, #0]
 8002b88:	801a      	strh	r2, [r3, #0]
			rxHeartbeatPWM[1] = CORE_GetTick();
 8002b8a:	f7ff fd21 	bl	80025d0 <CORE_GetTick>
 8002b8e:	0003      	movs	r3, r0
 8002b90:	1e5a      	subs	r2, r3, #1
 8002b92:	4193      	sbcs	r3, r2
 8002b94:	b2da      	uxtb	r2, r3
 8002b96:	4b0f      	ldr	r3, [pc, #60]	; (8002bd4 <PWM2_IRQ+0xb4>)
 8002b98:	705a      	strb	r2, [r3, #1]
			jitter += 1;
 8002b9a:	4b0c      	ldr	r3, [pc, #48]	; (8002bcc <PWM2_IRQ+0xac>)
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	4b0a      	ldr	r3, [pc, #40]	; (8002bcc <PWM2_IRQ+0xac>)
 8002ba4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (jitter >= PWM_JITTER_ARRAY) {
 8002ba6:	4b09      	ldr	r3, [pc, #36]	; (8002bcc <PWM2_IRQ+0xac>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d902      	bls.n	8002bb4 <PWM2_IRQ+0x94>
		jitter = 0;
 8002bae:	4b07      	ldr	r3, [pc, #28]	; (8002bcc <PWM2_IRQ+0xac>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	701a      	strb	r2, [r3, #0]
	}
}
 8002bb4:	46c0      	nop			; (mov r8, r8)
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	b002      	add	sp, #8
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	2000003c 	.word	0x2000003c
 8002bc0:	50000400 	.word	0x50000400
 8002bc4:	20000314 	.word	0x20000314
 8002bc8:	000009c4 	.word	0x000009c4
 8002bcc:	20000316 	.word	0x20000316
 8002bd0:	200002e4 	.word	0x200002e4
 8002bd4:	200002fc 	.word	0x200002fc

08002bd8 <PWM3_IRQ>:

void PWM3_IRQ (void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
	uint16_t now = TIM_Read(TIM_RADIO);
 8002bde:	4b26      	ldr	r3, [pc, #152]	; (8002c78 <PWM3_IRQ+0xa0>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	0018      	movs	r0, r3
 8002be4:	f7ff fd30 	bl	8002648 <TIM_Read>
 8002be8:	0002      	movs	r2, r0
 8002bea:	1dbb      	adds	r3, r7, #6
 8002bec:	801a      	strh	r2, [r3, #0]
	uint16_t pulse = 0;
 8002bee:	1d3b      	adds	r3, r7, #4
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	801a      	strh	r2, [r3, #0]
	static uint16_t tick = 0;
	static uint8_t jitter = 0;

	if (GPIO_Read(PWM_S3_GPIO, PWM_S3_PIN))
 8002bf4:	23a0      	movs	r3, #160	; 0xa0
 8002bf6:	05db      	lsls	r3, r3, #23
 8002bf8:	2140      	movs	r1, #64	; 0x40
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	f7ff fd14 	bl	8002628 <GPIO_Read>
 8002c00:	1e03      	subs	r3, r0, #0
 8002c02:	d004      	beq.n	8002c0e <PWM3_IRQ+0x36>
	{
		tick = now;
 8002c04:	4b1d      	ldr	r3, [pc, #116]	; (8002c7c <PWM3_IRQ+0xa4>)
 8002c06:	1dba      	adds	r2, r7, #6
 8002c08:	8812      	ldrh	r2, [r2, #0]
 8002c0a:	801a      	strh	r2, [r3, #0]
 8002c0c:	e028      	b.n	8002c60 <PWM3_IRQ+0x88>
	}
	else
	{
		pulse = now - tick;
 8002c0e:	4b1b      	ldr	r3, [pc, #108]	; (8002c7c <PWM3_IRQ+0xa4>)
 8002c10:	881a      	ldrh	r2, [r3, #0]
 8002c12:	1d3b      	adds	r3, r7, #4
 8002c14:	1db9      	adds	r1, r7, #6
 8002c16:	8809      	ldrh	r1, [r1, #0]
 8002c18:	1a8a      	subs	r2, r1, r2
 8002c1a:	801a      	strh	r2, [r3, #0]

		// Check pulse is valid
		if (pulse <= (PWM_MAX + PWM_THRESHOLD) && pulse >= (PWM_MIN - PWM_THRESHOLD))
 8002c1c:	1d3b      	adds	r3, r7, #4
 8002c1e:	881b      	ldrh	r3, [r3, #0]
 8002c20:	4a17      	ldr	r2, [pc, #92]	; (8002c80 <PWM3_IRQ+0xa8>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d81c      	bhi.n	8002c60 <PWM3_IRQ+0x88>
 8002c26:	1d3b      	adds	r3, r7, #4
 8002c28:	881a      	ldrh	r2, [r3, #0]
 8002c2a:	23fa      	movs	r3, #250	; 0xfa
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d316      	bcc.n	8002c60 <PWM3_IRQ+0x88>
		{
			rxPWM[jitter][2] = pulse;
 8002c32:	4b14      	ldr	r3, [pc, #80]	; (8002c84 <PWM3_IRQ+0xac>)
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	4a14      	ldr	r2, [pc, #80]	; (8002c88 <PWM3_IRQ+0xb0>)
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	18d3      	adds	r3, r2, r3
 8002c3c:	3304      	adds	r3, #4
 8002c3e:	1d3a      	adds	r2, r7, #4
 8002c40:	8812      	ldrh	r2, [r2, #0]
 8002c42:	801a      	strh	r2, [r3, #0]
			rxHeartbeatPWM[2] = CORE_GetTick();
 8002c44:	f7ff fcc4 	bl	80025d0 <CORE_GetTick>
 8002c48:	0003      	movs	r3, r0
 8002c4a:	1e5a      	subs	r2, r3, #1
 8002c4c:	4193      	sbcs	r3, r2
 8002c4e:	b2da      	uxtb	r2, r3
 8002c50:	4b0e      	ldr	r3, [pc, #56]	; (8002c8c <PWM3_IRQ+0xb4>)
 8002c52:	709a      	strb	r2, [r3, #2]
			jitter += 1;
 8002c54:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <PWM3_IRQ+0xac>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	b2da      	uxtb	r2, r3
 8002c5c:	4b09      	ldr	r3, [pc, #36]	; (8002c84 <PWM3_IRQ+0xac>)
 8002c5e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (jitter >= PWM_JITTER_ARRAY) {
 8002c60:	4b08      	ldr	r3, [pc, #32]	; (8002c84 <PWM3_IRQ+0xac>)
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d902      	bls.n	8002c6e <PWM3_IRQ+0x96>
		jitter = 0;
 8002c68:	4b06      	ldr	r3, [pc, #24]	; (8002c84 <PWM3_IRQ+0xac>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	701a      	strb	r2, [r3, #0]
	}
}
 8002c6e:	46c0      	nop			; (mov r8, r8)
 8002c70:	46bd      	mov	sp, r7
 8002c72:	b002      	add	sp, #8
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	46c0      	nop			; (mov r8, r8)
 8002c78:	2000003c 	.word	0x2000003c
 8002c7c:	20000318 	.word	0x20000318
 8002c80:	000009c4 	.word	0x000009c4
 8002c84:	2000031a 	.word	0x2000031a
 8002c88:	200002e4 	.word	0x200002e4
 8002c8c:	200002fc 	.word	0x200002fc

08002c90 <PWM4_IRQ>:

void PWM4_IRQ (void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
	uint16_t now = TIM_Read(TIM_RADIO);
 8002c96:	4b26      	ldr	r3, [pc, #152]	; (8002d30 <PWM4_IRQ+0xa0>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	0018      	movs	r0, r3
 8002c9c:	f7ff fcd4 	bl	8002648 <TIM_Read>
 8002ca0:	0002      	movs	r2, r0
 8002ca2:	1dbb      	adds	r3, r7, #6
 8002ca4:	801a      	strh	r2, [r3, #0]
	uint16_t pulse = 0;
 8002ca6:	1d3b      	adds	r3, r7, #4
 8002ca8:	2200      	movs	r2, #0
 8002caa:	801a      	strh	r2, [r3, #0]
	static uint16_t tick = 0;
	static uint8_t jitter = 0;

	if (GPIO_Read(PWM_S4_GPIO, PWM_S4_PIN))
 8002cac:	23a0      	movs	r3, #160	; 0xa0
 8002cae:	05db      	lsls	r3, r3, #23
 8002cb0:	2120      	movs	r1, #32
 8002cb2:	0018      	movs	r0, r3
 8002cb4:	f7ff fcb8 	bl	8002628 <GPIO_Read>
 8002cb8:	1e03      	subs	r3, r0, #0
 8002cba:	d004      	beq.n	8002cc6 <PWM4_IRQ+0x36>
	{
		tick = now;
 8002cbc:	4b1d      	ldr	r3, [pc, #116]	; (8002d34 <PWM4_IRQ+0xa4>)
 8002cbe:	1dba      	adds	r2, r7, #6
 8002cc0:	8812      	ldrh	r2, [r2, #0]
 8002cc2:	801a      	strh	r2, [r3, #0]
 8002cc4:	e028      	b.n	8002d18 <PWM4_IRQ+0x88>
	}
	else
	{
		pulse = now - tick;
 8002cc6:	4b1b      	ldr	r3, [pc, #108]	; (8002d34 <PWM4_IRQ+0xa4>)
 8002cc8:	881a      	ldrh	r2, [r3, #0]
 8002cca:	1d3b      	adds	r3, r7, #4
 8002ccc:	1db9      	adds	r1, r7, #6
 8002cce:	8809      	ldrh	r1, [r1, #0]
 8002cd0:	1a8a      	subs	r2, r1, r2
 8002cd2:	801a      	strh	r2, [r3, #0]

		// Check pulse is valid
		if (pulse <= (PWM_MAX + PWM_THRESHOLD) && pulse >= (PWM_MIN - PWM_THRESHOLD))
 8002cd4:	1d3b      	adds	r3, r7, #4
 8002cd6:	881b      	ldrh	r3, [r3, #0]
 8002cd8:	4a17      	ldr	r2, [pc, #92]	; (8002d38 <PWM4_IRQ+0xa8>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d81c      	bhi.n	8002d18 <PWM4_IRQ+0x88>
 8002cde:	1d3b      	adds	r3, r7, #4
 8002ce0:	881a      	ldrh	r2, [r3, #0]
 8002ce2:	23fa      	movs	r3, #250	; 0xfa
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d316      	bcc.n	8002d18 <PWM4_IRQ+0x88>
		{
			rxPWM[jitter][3] = pulse;
 8002cea:	4b14      	ldr	r3, [pc, #80]	; (8002d3c <PWM4_IRQ+0xac>)
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	4a14      	ldr	r2, [pc, #80]	; (8002d40 <PWM4_IRQ+0xb0>)
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	18d3      	adds	r3, r2, r3
 8002cf4:	3306      	adds	r3, #6
 8002cf6:	1d3a      	adds	r2, r7, #4
 8002cf8:	8812      	ldrh	r2, [r2, #0]
 8002cfa:	801a      	strh	r2, [r3, #0]
			rxHeartbeatPWM[3] = CORE_GetTick();
 8002cfc:	f7ff fc68 	bl	80025d0 <CORE_GetTick>
 8002d00:	0003      	movs	r3, r0
 8002d02:	1e5a      	subs	r2, r3, #1
 8002d04:	4193      	sbcs	r3, r2
 8002d06:	b2da      	uxtb	r2, r3
 8002d08:	4b0e      	ldr	r3, [pc, #56]	; (8002d44 <PWM4_IRQ+0xb4>)
 8002d0a:	70da      	strb	r2, [r3, #3]
			jitter += 1;
 8002d0c:	4b0b      	ldr	r3, [pc, #44]	; (8002d3c <PWM4_IRQ+0xac>)
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	3301      	adds	r3, #1
 8002d12:	b2da      	uxtb	r2, r3
 8002d14:	4b09      	ldr	r3, [pc, #36]	; (8002d3c <PWM4_IRQ+0xac>)
 8002d16:	701a      	strb	r2, [r3, #0]
		}
	}

	if (jitter >= PWM_JITTER_ARRAY) {
 8002d18:	4b08      	ldr	r3, [pc, #32]	; (8002d3c <PWM4_IRQ+0xac>)
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d902      	bls.n	8002d26 <PWM4_IRQ+0x96>
		jitter = 0;
 8002d20:	4b06      	ldr	r3, [pc, #24]	; (8002d3c <PWM4_IRQ+0xac>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	701a      	strb	r2, [r3, #0]
	}
}
 8002d26:	46c0      	nop			; (mov r8, r8)
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	b002      	add	sp, #8
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	46c0      	nop			; (mov r8, r8)
 8002d30:	2000003c 	.word	0x2000003c
 8002d34:	2000031c 	.word	0x2000031c
 8002d38:	000009c4 	.word	0x000009c4
 8002d3c:	2000031e 	.word	0x2000031e
 8002d40:	200002e4 	.word	0x200002e4
 8002d44:	200002fc 	.word	0x200002fc

08002d48 <CORE_GetTick>:
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
	return gTicks;
 8002d4c:	4b02      	ldr	r3, [pc, #8]	; (8002d58 <CORE_GetTick+0x10>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
}
 8002d50:	0018      	movs	r0, r3
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	46c0      	nop			; (mov r8, r8)
 8002d58:	200003cc 	.word	0x200003cc

08002d5c <RADIO_Detect>:
/*
 * PUBLIC FUNCTIONS
 */

void RADIO_Detect (RADIO_Properties * r)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
	PWM_Deinit();
 8002d64:	f7ff fd18 	bl	8002798 <PWM_Deinit>
	PPM_Deinit();
 8002d68:	f7ff faac 	bl	80022c4 <PPM_Deinit>
	SBUS_Deinit();
 8002d6c:	f000 f954 	bl	8003018 <SBUS_Deinit>
	IBUS_Deinit();
 8002d70:	f7ff f86c 	bl	8001e4c <IBUS_Deinit>

	uint32_t tick = CORE_GetTick();
 8002d74:	f7ff ffe8 	bl	8002d48 <CORE_GetTick>
 8002d78:	0003      	movs	r3, r0
 8002d7a:	60fb      	str	r3, [r7, #12]

	while (1)
	{
		uint32_t now = CORE_GetTick();
 8002d7c:	f7ff ffe4 	bl	8002d48 <CORE_GetTick>
 8002d80:	0003      	movs	r3, r0
 8002d82:	60bb      	str	r3, [r7, #8]
		if (PPM_Detect())
 8002d84:	f7ff fa54 	bl	8002230 <PPM_Detect>
 8002d88:	1e03      	subs	r3, r0, #0
 8002d8a:	d003      	beq.n	8002d94 <RADIO_Detect+0x38>
		{
			r->Protocol = PPM;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	711a      	strb	r2, [r3, #4]
			break;
 8002d92:	e037      	b.n	8002e04 <RADIO_Detect+0xa8>
		}

		if (SBUS_Detect(SBUS_BAUD))
 8002d94:	4b1d      	ldr	r3, [pc, #116]	; (8002e0c <RADIO_Detect+0xb0>)
 8002d96:	0018      	movs	r0, r3
 8002d98:	f000 f902 	bl	8002fa0 <SBUS_Detect>
 8002d9c:	1e03      	subs	r3, r0, #0
 8002d9e:	d006      	beq.n	8002dae <RADIO_Detect+0x52>
		{
			r->Protocol = SBUS;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	711a      	strb	r2, [r3, #4]
			r->Baud_SBUS = SBUS_BAUD;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a18      	ldr	r2, [pc, #96]	; (8002e0c <RADIO_Detect+0xb0>)
 8002daa:	601a      	str	r2, [r3, #0]
			break;
 8002dac:	e02a      	b.n	8002e04 <RADIO_Detect+0xa8>
		}

		if (SBUS_Detect(SBUS_BAUD_FAST))
 8002dae:	4b18      	ldr	r3, [pc, #96]	; (8002e10 <RADIO_Detect+0xb4>)
 8002db0:	0018      	movs	r0, r3
 8002db2:	f000 f8f5 	bl	8002fa0 <SBUS_Detect>
 8002db6:	1e03      	subs	r3, r0, #0
 8002db8:	d006      	beq.n	8002dc8 <RADIO_Detect+0x6c>
		{
			r->Protocol = SBUS;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	711a      	strb	r2, [r3, #4]
			r->Baud_SBUS = SBUS_BAUD_FAST;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a13      	ldr	r2, [pc, #76]	; (8002e10 <RADIO_Detect+0xb4>)
 8002dc4:	601a      	str	r2, [r3, #0]
			break;
 8002dc6:	e01d      	b.n	8002e04 <RADIO_Detect+0xa8>
		}

		if (IBUS_Detect())
 8002dc8:	f7ff f808 	bl	8001ddc <IBUS_Detect>
 8002dcc:	1e03      	subs	r3, r0, #0
 8002dce:	d003      	beq.n	8002dd8 <RADIO_Detect+0x7c>
		{
			r->Protocol = IBUS;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	711a      	strb	r2, [r3, #4]
			break;
 8002dd6:	e015      	b.n	8002e04 <RADIO_Detect+0xa8>
		}

		if (PWM_Detect())
 8002dd8:	f7ff fc42 	bl	8002660 <PWM_Detect>
 8002ddc:	1e03      	subs	r3, r0, #0
 8002dde:	d003      	beq.n	8002de8 <RADIO_Detect+0x8c>
		{
			r->Protocol = PWM;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2203      	movs	r2, #3
 8002de4:	711a      	strb	r2, [r3, #4]
			break;
 8002de6:	e00d      	b.n	8002e04 <RADIO_Detect+0xa8>
		}

		if ( RADIO_DETECT_TIMEOUT <= (now - tick))
 8002de8:	68ba      	ldr	r2, [r7, #8]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	1ad2      	subs	r2, r2, r3
 8002dee:	23fa      	movs	r3, #250	; 0xfa
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d303      	bcc.n	8002dfe <RADIO_Detect+0xa2>
		{
			r->Protocol = PWM;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2203      	movs	r2, #3
 8002dfa:	711a      	strb	r2, [r3, #4]
			break;
 8002dfc:	e002      	b.n	8002e04 <RADIO_Detect+0xa8>
		}

		CORE_Idle();
 8002dfe:	f001 f893 	bl	8003f28 <CORE_Idle>
	{
 8002e02:	e7bb      	b.n	8002d7c <RADIO_Detect+0x20>
	}
}
 8002e04:	46c0      	nop			; (mov r8, r8)
 8002e06:	46bd      	mov	sp, r7
 8002e08:	b004      	add	sp, #16
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	000186a0 	.word	0x000186a0
 8002e10:	00030d40 	.word	0x00030d40

08002e14 <RADIO_Init>:

void RADIO_Init (RADIO_Properties *r)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
	radio.Baud_SBUS = r->Baud_SBUS;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	4b21      	ldr	r3, [pc, #132]	; (8002ea8 <RADIO_Init+0x94>)
 8002e22:	601a      	str	r2, [r3, #0]
	radio.Protocol = r->Protocol;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	791a      	ldrb	r2, [r3, #4]
 8002e28:	4b1f      	ldr	r3, [pc, #124]	; (8002ea8 <RADIO_Init+0x94>)
 8002e2a:	711a      	strb	r2, [r3, #4]

	if (radio.Protocol == PPM)
 8002e2c:	4b1e      	ldr	r3, [pc, #120]	; (8002ea8 <RADIO_Init+0x94>)
 8002e2e:	791b      	ldrb	r3, [r3, #4]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d10a      	bne.n	8002e4a <RADIO_Init+0x36>
	{
		data.ch_num = PPM_NUM_CHANNELS;
 8002e34:	4b1d      	ldr	r3, [pc, #116]	; (8002eac <RADIO_Init+0x98>)
 8002e36:	2208      	movs	r2, #8
 8002e38:	705a      	strb	r2, [r3, #1]
		PPM_Init();
 8002e3a:	f7ff fa17 	bl	800226c <PPM_Init>
		ptrData.ppm = PPM_GetDataPtr();
 8002e3e:	f7ff fae5 	bl	800240c <PPM_GetDataPtr>
 8002e42:	0002      	movs	r2, r0
 8002e44:	4b1a      	ldr	r3, [pc, #104]	; (8002eb0 <RADIO_Init+0x9c>)
 8002e46:	601a      	str	r2, [r3, #0]
	{
		data.ch_num = PWM_NUM_CHANNELS;
		PWM_Init();
		ptrData.pwm = PWM_GetDataPtr();
	}
}
 8002e48:	e02a      	b.n	8002ea0 <RADIO_Init+0x8c>
	else if (radio.Protocol == SBUS)
 8002e4a:	4b17      	ldr	r3, [pc, #92]	; (8002ea8 <RADIO_Init+0x94>)
 8002e4c:	791b      	ldrb	r3, [r3, #4]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d10d      	bne.n	8002e6e <RADIO_Init+0x5a>
		data.ch_num = SBUS_NUM_CHANNELS;
 8002e52:	4b16      	ldr	r3, [pc, #88]	; (8002eac <RADIO_Init+0x98>)
 8002e54:	2210      	movs	r2, #16
 8002e56:	705a      	strb	r2, [r3, #1]
		SBUS_Init(radio.Baud_SBUS);
 8002e58:	4b13      	ldr	r3, [pc, #76]	; (8002ea8 <RADIO_Init+0x94>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	f000 f8c1 	bl	8002fe4 <SBUS_Init>
		ptrData.sbus = SBUS_GetDataPtr();
 8002e62:	f000 f927 	bl	80030b4 <SBUS_GetDataPtr>
 8002e66:	0002      	movs	r2, r0
 8002e68:	4b11      	ldr	r3, [pc, #68]	; (8002eb0 <RADIO_Init+0x9c>)
 8002e6a:	601a      	str	r2, [r3, #0]
}
 8002e6c:	e018      	b.n	8002ea0 <RADIO_Init+0x8c>
	else if (radio.Protocol == IBUS)
 8002e6e:	4b0e      	ldr	r3, [pc, #56]	; (8002ea8 <RADIO_Init+0x94>)
 8002e70:	791b      	ldrb	r3, [r3, #4]
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d10a      	bne.n	8002e8c <RADIO_Init+0x78>
		data.ch_num = IBUS_NUM_CHANNELS;
 8002e76:	4b0d      	ldr	r3, [pc, #52]	; (8002eac <RADIO_Init+0x98>)
 8002e78:	220e      	movs	r2, #14
 8002e7a:	705a      	strb	r2, [r3, #1]
		IBUS_Init();
 8002e7c:	f7fe ffce 	bl	8001e1c <IBUS_Init>
		ptrData.ibus = IBUS_GetDataPtr();
 8002e80:	f7ff f88c 	bl	8001f9c <IBUS_GetDataPtr>
 8002e84:	0002      	movs	r2, r0
 8002e86:	4b0a      	ldr	r3, [pc, #40]	; (8002eb0 <RADIO_Init+0x9c>)
 8002e88:	601a      	str	r2, [r3, #0]
}
 8002e8a:	e009      	b.n	8002ea0 <RADIO_Init+0x8c>
		data.ch_num = PWM_NUM_CHANNELS;
 8002e8c:	4b07      	ldr	r3, [pc, #28]	; (8002eac <RADIO_Init+0x98>)
 8002e8e:	2204      	movs	r2, #4
 8002e90:	705a      	strb	r2, [r3, #1]
		PWM_Init();
 8002e92:	f7ff fc27 	bl	80026e4 <PWM_Init>
		ptrData.pwm = PWM_GetDataPtr();
 8002e96:	f7ff fd61 	bl	800295c <PWM_GetDataPtr>
 8002e9a:	0002      	movs	r2, r0
 8002e9c:	4b04      	ldr	r3, [pc, #16]	; (8002eb0 <RADIO_Init+0x9c>)
 8002e9e:	601a      	str	r2, [r3, #0]
}
 8002ea0:	46c0      	nop			; (mov r8, r8)
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	b002      	add	sp, #8
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	20000320 	.word	0x20000320
 8002eac:	20000328 	.word	0x20000328
 8002eb0:	2000034c 	.word	0x2000034c

08002eb4 <RADIO_Update>:

void RADIO_Update (void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
	switch (radio.Protocol) {
 8002eb8:	4b2c      	ldr	r3, [pc, #176]	; (8002f6c <RADIO_Update+0xb8>)
 8002eba:	791b      	ldrb	r3, [r3, #4]
 8002ebc:	2b03      	cmp	r3, #3
 8002ebe:	d008      	beq.n	8002ed2 <RADIO_Update+0x1e>
 8002ec0:	dc47      	bgt.n	8002f52 <RADIO_Update+0x9e>
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d025      	beq.n	8002f12 <RADIO_Update+0x5e>
 8002ec6:	dc44      	bgt.n	8002f52 <RADIO_Update+0x9e>
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d012      	beq.n	8002ef2 <RADIO_Update+0x3e>
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d030      	beq.n	8002f32 <RADIO_Update+0x7e>
 8002ed0:	e03f      	b.n	8002f52 <RADIO_Update+0x9e>

	case PWM:
		PWM_Update();
 8002ed2:	f7ff fca3 	bl	800281c <PWM_Update>
		data.inputLost = ptrData.pwm->inputLost;
 8002ed6:	4b26      	ldr	r3, [pc, #152]	; (8002f70 <RADIO_Update+0xbc>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	781a      	ldrb	r2, [r3, #0]
 8002edc:	4b25      	ldr	r3, [pc, #148]	; (8002f74 <RADIO_Update+0xc0>)
 8002ede:	701a      	strb	r2, [r3, #0]
		memcpy(data.ch, ptrData.pwm->ch, sizeof(ptrData.pwm->ch));
 8002ee0:	4b23      	ldr	r3, [pc, #140]	; (8002f70 <RADIO_Update+0xbc>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	1c99      	adds	r1, r3, #2
 8002ee6:	4b24      	ldr	r3, [pc, #144]	; (8002f78 <RADIO_Update+0xc4>)
 8002ee8:	2208      	movs	r2, #8
 8002eea:	0018      	movs	r0, r3
 8002eec:	f002 f93e 	bl	800516c <memcpy>
		break;
 8002ef0:	e038      	b.n	8002f64 <RADIO_Update+0xb0>

	case PPM:
		PPM_Update();
 8002ef2:	f7ff fa03 	bl	80022fc <PPM_Update>
		data.inputLost = ptrData.ppm->inputLost;
 8002ef6:	4b1e      	ldr	r3, [pc, #120]	; (8002f70 <RADIO_Update+0xbc>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	781a      	ldrb	r2, [r3, #0]
 8002efc:	4b1d      	ldr	r3, [pc, #116]	; (8002f74 <RADIO_Update+0xc0>)
 8002efe:	701a      	strb	r2, [r3, #0]
		memcpy(data.ch, ptrData.ppm->ch, sizeof(ptrData.ppm->ch));
 8002f00:	4b1b      	ldr	r3, [pc, #108]	; (8002f70 <RADIO_Update+0xbc>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	1c99      	adds	r1, r3, #2
 8002f06:	4b1c      	ldr	r3, [pc, #112]	; (8002f78 <RADIO_Update+0xc4>)
 8002f08:	2210      	movs	r2, #16
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	f002 f92e 	bl	800516c <memcpy>
		break;
 8002f10:	e028      	b.n	8002f64 <RADIO_Update+0xb0>

	case IBUS:
		IBUS_Update();
 8002f12:	f7fe ffa7 	bl	8001e64 <IBUS_Update>
		data.inputLost = ptrData.ibus->inputLost;
 8002f16:	4b16      	ldr	r3, [pc, #88]	; (8002f70 <RADIO_Update+0xbc>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	781a      	ldrb	r2, [r3, #0]
 8002f1c:	4b15      	ldr	r3, [pc, #84]	; (8002f74 <RADIO_Update+0xc0>)
 8002f1e:	701a      	strb	r2, [r3, #0]
		memcpy(data.ch, ptrData.ibus->ch, sizeof(ptrData.ibus->ch));
 8002f20:	4b13      	ldr	r3, [pc, #76]	; (8002f70 <RADIO_Update+0xbc>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	1c99      	adds	r1, r3, #2
 8002f26:	4b14      	ldr	r3, [pc, #80]	; (8002f78 <RADIO_Update+0xc4>)
 8002f28:	221c      	movs	r2, #28
 8002f2a:	0018      	movs	r0, r3
 8002f2c:	f002 f91e 	bl	800516c <memcpy>
		break;
 8002f30:	e018      	b.n	8002f64 <RADIO_Update+0xb0>

	case SBUS:
		SBUS_Update();
 8002f32:	f000 f87d 	bl	8003030 <SBUS_Update>
		data.inputLost = ptrData.sbus->inputLost;
 8002f36:	4b0e      	ldr	r3, [pc, #56]	; (8002f70 <RADIO_Update+0xbc>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	781a      	ldrb	r2, [r3, #0]
 8002f3c:	4b0d      	ldr	r3, [pc, #52]	; (8002f74 <RADIO_Update+0xc0>)
 8002f3e:	701a      	strb	r2, [r3, #0]
		memcpy(data.ch, ptrData.sbus->ch, sizeof(ptrData.sbus->ch));
 8002f40:	4b0b      	ldr	r3, [pc, #44]	; (8002f70 <RADIO_Update+0xbc>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	1d99      	adds	r1, r3, #6
 8002f46:	4b0c      	ldr	r3, [pc, #48]	; (8002f78 <RADIO_Update+0xc4>)
 8002f48:	2220      	movs	r2, #32
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	f002 f90e 	bl	800516c <memcpy>
		break;
 8002f50:	e008      	b.n	8002f64 <RADIO_Update+0xb0>

	default:
		radio.Protocol = PWM;
 8002f52:	4b06      	ldr	r3, [pc, #24]	; (8002f6c <RADIO_Update+0xb8>)
 8002f54:	2203      	movs	r2, #3
 8002f56:	711a      	strb	r2, [r3, #4]
		ptrData.pwm = PWM_GetDataPtr();
 8002f58:	f7ff fd00 	bl	800295c <PWM_GetDataPtr>
 8002f5c:	0002      	movs	r2, r0
 8002f5e:	4b04      	ldr	r3, [pc, #16]	; (8002f70 <RADIO_Update+0xbc>)
 8002f60:	601a      	str	r2, [r3, #0]
		break;
 8002f62:	46c0      	nop			; (mov r8, r8)
	}
}
 8002f64:	46c0      	nop			; (mov r8, r8)
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	46c0      	nop			; (mov r8, r8)
 8002f6c:	20000320 	.word	0x20000320
 8002f70:	2000034c 	.word	0x2000034c
 8002f74:	20000328 	.word	0x20000328
 8002f78:	2000032a 	.word	0x2000032a

08002f7c <RADIO_GetDataPtr>:

RADIO_Data* RADIO_GetDataPtr (void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
	return &data;
 8002f80:	4b01      	ldr	r3, [pc, #4]	; (8002f88 <RADIO_GetDataPtr+0xc>)
}
 8002f82:	0018      	movs	r0, r3
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	20000328 	.word	0x20000328

08002f8c <CORE_GetTick>:
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
	return gTicks;
 8002f90:	4b02      	ldr	r3, [pc, #8]	; (8002f9c <CORE_GetTick+0x10>)
 8002f92:	681b      	ldr	r3, [r3, #0]
}
 8002f94:	0018      	movs	r0, r3
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	46c0      	nop			; (mov r8, r8)
 8002f9c:	200003cc 	.word	0x200003cc

08002fa0 <SBUS_Detect>:
/*
 * PUBLIC FUNCTIONS
 */

bool SBUS_Detect(uint32_t baud)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
	SBUS_Init(baud);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	0018      	movs	r0, r3
 8002fac:	f000 f81a 	bl	8002fe4 <SBUS_Init>

	uint32_t tick = CORE_GetTick();
 8002fb0:	f7ff ffec 	bl	8002f8c <CORE_GetTick>
 8002fb4:	0003      	movs	r3, r0
 8002fb6:	60fb      	str	r3, [r7, #12]
	while ((SBUS_TIMEOUT * 2) > CORE_GetTick() - tick)
 8002fb8:	e003      	b.n	8002fc2 <SBUS_Detect+0x22>
	{
		SBUS_HandleUART();
 8002fba:	f000 fd5d 	bl	8003a78 <SBUS_HandleUART>
		CORE_Idle();
 8002fbe:	f000 ffb3 	bl	8003f28 <CORE_Idle>
	while ((SBUS_TIMEOUT * 2) > CORE_GetTick() - tick)
 8002fc2:	f7ff ffe3 	bl	8002f8c <CORE_GetTick>
 8002fc6:	0002      	movs	r2, r0
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	2b53      	cmp	r3, #83	; 0x53
 8002fce:	d9f4      	bls.n	8002fba <SBUS_Detect+0x1a>
	}

	SBUS_Deinit();
 8002fd0:	f000 f822 	bl	8003018 <SBUS_Deinit>

	return rxHeartbeatSBUS;
 8002fd4:	4b02      	ldr	r3, [pc, #8]	; (8002fe0 <SBUS_Detect+0x40>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
}
 8002fd8:	0018      	movs	r0, r3
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	b004      	add	sp, #16
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	2000039b 	.word	0x2000039b

08002fe4 <SBUS_Init>:

void SBUS_Init (uint32_t baud)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
	memset(rxSBUS, 0, sizeof(rxSBUS));
 8002fec:	4b08      	ldr	r3, [pc, #32]	; (8003010 <SBUS_Init+0x2c>)
 8002fee:	224b      	movs	r2, #75	; 0x4b
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	0018      	movs	r0, r3
 8002ff4:	f002 f8c3 	bl	800517e <memset>

	UART_Init(SBUS_UART, baud, UART_Mode_Inverted);
 8002ff8:	4b06      	ldr	r3, [pc, #24]	; (8003014 <SBUS_Init+0x30>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	6879      	ldr	r1, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	0018      	movs	r0, r3
 8003002:	f001 fe0f 	bl	8004c24 <UART_Init>
}
 8003006:	46c0      	nop			; (mov r8, r8)
 8003008:	46bd      	mov	sp, r7
 800300a:	b002      	add	sp, #8
 800300c:	bd80      	pop	{r7, pc}
 800300e:	46c0      	nop			; (mov r8, r8)
 8003010:	20000350 	.word	0x20000350
 8003014:	2000018c 	.word	0x2000018c

08003018 <SBUS_Deinit>:

void SBUS_Deinit (void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
	UART_Deinit(SBUS_UART);
 800301c:	4b03      	ldr	r3, [pc, #12]	; (800302c <SBUS_Deinit+0x14>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	0018      	movs	r0, r3
 8003022:	f001 fee3 	bl	8004dec <UART_Deinit>
}
 8003026:	46c0      	nop			; (mov r8, r8)
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	2000018c 	.word	0x2000018c

08003030 <SBUS_Update>:

void SBUS_Update (void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
	// Update Rx Data
	SBUS_HandleUART();
 8003036:	f000 fd1f 	bl	8003a78 <SBUS_HandleUART>

	// Update Loop Variables
	uint32_t now = CORE_GetTick();
 800303a:	f7ff ffa7 	bl	8002f8c <CORE_GetTick>
 800303e:	0003      	movs	r3, r0
 8003040:	603b      	str	r3, [r7, #0]
	static uint32_t prev = 0;

	// Check for New Input Data
	if (rxHeartbeatSBUS)
 8003042:	4b18      	ldr	r3, [pc, #96]	; (80030a4 <SBUS_Update+0x74>)
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d007      	beq.n	800305a <SBUS_Update+0x2a>
	{
		SBUS_JitterAverage();
 800304a:	f000 f87b 	bl	8003144 <SBUS_JitterAverage>
		rxHeartbeatSBUS = false;
 800304e:	4b15      	ldr	r3, [pc, #84]	; (80030a4 <SBUS_Update+0x74>)
 8003050:	2200      	movs	r2, #0
 8003052:	701a      	strb	r2, [r3, #0]
		prev = now;
 8003054:	4b14      	ldr	r3, [pc, #80]	; (80030a8 <SBUS_Update+0x78>)
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	601a      	str	r2, [r3, #0]
	}

	// Check for Input Failsafe
	if (SBUS_TIMEOUT <= (now - prev)) {
 800305a:	4b13      	ldr	r3, [pc, #76]	; (80030a8 <SBUS_Update+0x78>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	683a      	ldr	r2, [r7, #0]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b29      	cmp	r3, #41	; 0x29
 8003064:	d909      	bls.n	800307a <SBUS_Update+0x4a>
		dataSBUS.inputLost = true;
 8003066:	4b11      	ldr	r3, [pc, #68]	; (80030ac <SBUS_Update+0x7c>)
 8003068:	2201      	movs	r2, #1
 800306a:	701a      	strb	r2, [r3, #0]
		memset(rxSBUS, 0, sizeof(rxSBUS));
 800306c:	4b10      	ldr	r3, [pc, #64]	; (80030b0 <SBUS_Update+0x80>)
 800306e:	224b      	movs	r2, #75	; 0x4b
 8003070:	2100      	movs	r1, #0
 8003072:	0018      	movs	r0, r3
 8003074:	f002 f883 	bl	800517e <memset>
 8003078:	e002      	b.n	8003080 <SBUS_Update+0x50>
	} else {
		dataSBUS.inputLost = false;
 800307a:	4b0c      	ldr	r3, [pc, #48]	; (80030ac <SBUS_Update+0x7c>)
 800307c:	2200      	movs	r2, #0
 800307e:	701a      	strb	r2, [r3, #0]
	}


	for (uint8_t i = 0; i < SBUS_JITTER_ARRAY; i++)
 8003080:	1dfb      	adds	r3, r7, #7
 8003082:	2200      	movs	r2, #0
 8003084:	701a      	strb	r2, [r3, #0]
 8003086:	e004      	b.n	8003092 <SBUS_Update+0x62>
 8003088:	1dfb      	adds	r3, r7, #7
 800308a:	781a      	ldrb	r2, [r3, #0]
 800308c:	1dfb      	adds	r3, r7, #7
 800308e:	3201      	adds	r2, #1
 8003090:	701a      	strb	r2, [r3, #0]
 8003092:	1dfb      	adds	r3, r7, #7
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	2b02      	cmp	r3, #2
 8003098:	d9f6      	bls.n	8003088 <SBUS_Update+0x58>
	{

	}

}
 800309a:	46c0      	nop			; (mov r8, r8)
 800309c:	46c0      	nop			; (mov r8, r8)
 800309e:	46bd      	mov	sp, r7
 80030a0:	b002      	add	sp, #8
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	2000039b 	.word	0x2000039b
 80030a8:	200003c4 	.word	0x200003c4
 80030ac:	2000039c 	.word	0x2000039c
 80030b0:	20000350 	.word	0x20000350

080030b4 <SBUS_GetDataPtr>:

SBUS_Data* SBUS_GetDataPtr (void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
	return &dataSBUS;
 80030b8:	4b01      	ldr	r3, [pc, #4]	; (80030c0 <SBUS_GetDataPtr+0xc>)
}
 80030ba:	0018      	movs	r0, r3
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	2000039c 	.word	0x2000039c

080030c4 <SBUS_Truncate>:
/*
 * PRIVATE FUNCTIONS
 */

uint16_t SBUS_Truncate (uint16_t r)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	0002      	movs	r2, r0
 80030cc:	1dbb      	adds	r3, r7, #6
 80030ce:	801a      	strh	r2, [r3, #0]
	uint16_t retVal = 0;
 80030d0:	210e      	movs	r1, #14
 80030d2:	187b      	adds	r3, r7, r1
 80030d4:	2200      	movs	r2, #0
 80030d6:	801a      	strh	r2, [r3, #0]

	if (r == 0) {
 80030d8:	1dbb      	adds	r3, r7, #6
 80030da:	881b      	ldrh	r3, [r3, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d103      	bne.n	80030e8 <SBUS_Truncate+0x24>
		retVal = 0;
 80030e0:	187b      	adds	r3, r7, r1
 80030e2:	2200      	movs	r2, #0
 80030e4:	801a      	strh	r2, [r3, #0]
 80030e6:	e021      	b.n	800312c <SBUS_Truncate+0x68>
	} else if (r < (SBUS_MIN - SBUS_THRESHOLD)) {
		retVal = 0;
	} else if (r < SBUS_MIN) {
 80030e8:	1dbb      	adds	r3, r7, #6
 80030ea:	881b      	ldrh	r3, [r3, #0]
 80030ec:	2bab      	cmp	r3, #171	; 0xab
 80030ee:	d804      	bhi.n	80030fa <SBUS_Truncate+0x36>
		retVal = SBUS_MIN;
 80030f0:	230e      	movs	r3, #14
 80030f2:	18fb      	adds	r3, r7, r3
 80030f4:	22ac      	movs	r2, #172	; 0xac
 80030f6:	801a      	strh	r2, [r3, #0]
 80030f8:	e018      	b.n	800312c <SBUS_Truncate+0x68>
	} else if (r <= SBUS_MAX) {
 80030fa:	1dbb      	adds	r3, r7, #6
 80030fc:	881b      	ldrh	r3, [r3, #0]
 80030fe:	4a0f      	ldr	r2, [pc, #60]	; (800313c <SBUS_Truncate+0x78>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d805      	bhi.n	8003110 <SBUS_Truncate+0x4c>
		retVal = r;
 8003104:	230e      	movs	r3, #14
 8003106:	18fb      	adds	r3, r7, r3
 8003108:	1dba      	adds	r2, r7, #6
 800310a:	8812      	ldrh	r2, [r2, #0]
 800310c:	801a      	strh	r2, [r3, #0]
 800310e:	e00d      	b.n	800312c <SBUS_Truncate+0x68>
	} else if (r < (SBUS_MAX + SBUS_THRESHOLD))	{
 8003110:	1dbb      	adds	r3, r7, #6
 8003112:	881b      	ldrh	r3, [r3, #0]
 8003114:	4a0a      	ldr	r2, [pc, #40]	; (8003140 <SBUS_Truncate+0x7c>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d804      	bhi.n	8003124 <SBUS_Truncate+0x60>
		retVal = SBUS_MAX;
 800311a:	230e      	movs	r3, #14
 800311c:	18fb      	adds	r3, r7, r3
 800311e:	4a07      	ldr	r2, [pc, #28]	; (800313c <SBUS_Truncate+0x78>)
 8003120:	801a      	strh	r2, [r3, #0]
 8003122:	e003      	b.n	800312c <SBUS_Truncate+0x68>
	} else {
		retVal = 0;
 8003124:	230e      	movs	r3, #14
 8003126:	18fb      	adds	r3, r7, r3
 8003128:	2200      	movs	r2, #0
 800312a:	801a      	strh	r2, [r3, #0]
	}

	return retVal;
 800312c:	230e      	movs	r3, #14
 800312e:	18fb      	adds	r3, r7, r3
 8003130:	881b      	ldrh	r3, [r3, #0]
}
 8003132:	0018      	movs	r0, r3
 8003134:	46bd      	mov	sp, r7
 8003136:	b004      	add	sp, #16
 8003138:	bd80      	pop	{r7, pc}
 800313a:	46c0      	nop			; (mov r8, r8)
 800313c:	00000713 	.word	0x00000713
 8003140:	00000906 	.word	0x00000906

08003144 <SBUS_JitterAverage>:

void SBUS_JitterAverage(void)
{
 8003144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003146:	b08b      	sub	sp, #44	; 0x2c
 8003148:	af00      	add	r7, sp, #0
	for (uint8_t l = 0; l < 2; l++)
 800314a:	2327      	movs	r3, #39	; 0x27
 800314c:	18fb      	adds	r3, r7, r3
 800314e:	2200      	movs	r2, #0
 8003150:	701a      	strb	r2, [r3, #0]
 8003152:	f000 fbe2 	bl	800391a <SBUS_JitterAverage+0x7d6>
	{
		uint8_t avg = 0;
 8003156:	2326      	movs	r3, #38	; 0x26
 8003158:	18fb      	adds	r3, r7, r3
 800315a:	2200      	movs	r2, #0
 800315c:	701a      	strb	r2, [r3, #0]
		uint32_t ch = 0;
 800315e:	2300      	movs	r3, #0
 8003160:	623b      	str	r3, [r7, #32]
		for (uint8_t i = 0; i < SBUS_JITTER_ARRAY; i++)
 8003162:	231f      	movs	r3, #31
 8003164:	18fb      	adds	r3, r7, r3
 8003166:	2200      	movs	r2, #0
 8003168:	701a      	strb	r2, [r3, #0]
 800316a:	e04c      	b.n	8003206 <SBUS_JitterAverage+0xc2>
		{
			uint16_t trunc = (int16_t)( (rxSBUS[i][1 + (l*11)] | rxSBUS[i][2 + (l*11)] << 8 ) & 0x07FF);
 800316c:	241f      	movs	r4, #31
 800316e:	193b      	adds	r3, r7, r4
 8003170:	7819      	ldrb	r1, [r3, #0]
 8003172:	2527      	movs	r5, #39	; 0x27
 8003174:	197b      	adds	r3, r7, r5
 8003176:	781a      	ldrb	r2, [r3, #0]
 8003178:	0013      	movs	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	189b      	adds	r3, r3, r2
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	189b      	adds	r3, r3, r2
 8003182:	1c5a      	adds	r2, r3, #1
 8003184:	48eb      	ldr	r0, [pc, #940]	; (8003534 <SBUS_JitterAverage+0x3f0>)
 8003186:	000b      	movs	r3, r1
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	185b      	adds	r3, r3, r1
 800318c:	0099      	lsls	r1, r3, #2
 800318e:	185b      	adds	r3, r3, r1
 8003190:	18c3      	adds	r3, r0, r3
 8003192:	5c9b      	ldrb	r3, [r3, r2]
 8003194:	b218      	sxth	r0, r3
 8003196:	193b      	adds	r3, r7, r4
 8003198:	7819      	ldrb	r1, [r3, #0]
 800319a:	197b      	adds	r3, r7, r5
 800319c:	781a      	ldrb	r2, [r3, #0]
 800319e:	0013      	movs	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	189b      	adds	r3, r3, r2
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	189b      	adds	r3, r3, r2
 80031a8:	1c9a      	adds	r2, r3, #2
 80031aa:	4ce2      	ldr	r4, [pc, #904]	; (8003534 <SBUS_JitterAverage+0x3f0>)
 80031ac:	000b      	movs	r3, r1
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	185b      	adds	r3, r3, r1
 80031b2:	0099      	lsls	r1, r3, #2
 80031b4:	185b      	adds	r3, r3, r1
 80031b6:	18e3      	adds	r3, r4, r3
 80031b8:	5c9b      	ldrb	r3, [r3, r2]
 80031ba:	021b      	lsls	r3, r3, #8
 80031bc:	b21b      	sxth	r3, r3
 80031be:	4303      	orrs	r3, r0
 80031c0:	b21b      	sxth	r3, r3
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	1cbb      	adds	r3, r7, #2
 80031c6:	0552      	lsls	r2, r2, #21
 80031c8:	0d52      	lsrs	r2, r2, #21
 80031ca:	801a      	strh	r2, [r3, #0]
			trunc = SBUS_Truncate(trunc);
 80031cc:	1cbc      	adds	r4, r7, #2
 80031ce:	1cbb      	adds	r3, r7, #2
 80031d0:	881b      	ldrh	r3, [r3, #0]
 80031d2:	0018      	movs	r0, r3
 80031d4:	f7ff ff76 	bl	80030c4 <SBUS_Truncate>
 80031d8:	0003      	movs	r3, r0
 80031da:	8023      	strh	r3, [r4, #0]
			if (trunc != 0)
 80031dc:	1cbb      	adds	r3, r7, #2
 80031de:	881b      	ldrh	r3, [r3, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00a      	beq.n	80031fa <SBUS_JitterAverage+0xb6>
			{
				ch += trunc;
 80031e4:	1cbb      	adds	r3, r7, #2
 80031e6:	881b      	ldrh	r3, [r3, #0]
 80031e8:	6a3a      	ldr	r2, [r7, #32]
 80031ea:	18d3      	adds	r3, r2, r3
 80031ec:	623b      	str	r3, [r7, #32]
				avg += 1;
 80031ee:	2226      	movs	r2, #38	; 0x26
 80031f0:	18bb      	adds	r3, r7, r2
 80031f2:	18ba      	adds	r2, r7, r2
 80031f4:	7812      	ldrb	r2, [r2, #0]
 80031f6:	3201      	adds	r2, #1
 80031f8:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < SBUS_JITTER_ARRAY; i++)
 80031fa:	211f      	movs	r1, #31
 80031fc:	187b      	adds	r3, r7, r1
 80031fe:	781a      	ldrb	r2, [r3, #0]
 8003200:	187b      	adds	r3, r7, r1
 8003202:	3201      	adds	r2, #1
 8003204:	701a      	strb	r2, [r3, #0]
 8003206:	231f      	movs	r3, #31
 8003208:	18fb      	adds	r3, r7, r3
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	2b02      	cmp	r3, #2
 800320e:	d9ad      	bls.n	800316c <SBUS_JitterAverage+0x28>
			}
		}
		ch /= avg;
 8003210:	2426      	movs	r4, #38	; 0x26
 8003212:	193b      	adds	r3, r7, r4
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	0019      	movs	r1, r3
 8003218:	6a38      	ldr	r0, [r7, #32]
 800321a:	f7fc ff75 	bl	8000108 <__udivsi3>
 800321e:	0003      	movs	r3, r0
 8003220:	623b      	str	r3, [r7, #32]
		dataSBUS.ch[0 + (l*8)] = ch;
 8003222:	2327      	movs	r3, #39	; 0x27
 8003224:	18fb      	adds	r3, r7, r3
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	6a3a      	ldr	r2, [r7, #32]
 800322c:	b211      	sxth	r1, r2
 800322e:	4ac2      	ldr	r2, [pc, #776]	; (8003538 <SBUS_JitterAverage+0x3f4>)
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	18d3      	adds	r3, r2, r3
 8003234:	3306      	adds	r3, #6
 8003236:	1c0a      	adds	r2, r1, #0
 8003238:	801a      	strh	r2, [r3, #0]

		avg = 0;
 800323a:	193b      	adds	r3, r7, r4
 800323c:	2200      	movs	r2, #0
 800323e:	701a      	strb	r2, [r3, #0]
		ch = 0;
 8003240:	2300      	movs	r3, #0
 8003242:	623b      	str	r3, [r7, #32]
		for (uint8_t i = 0; i < SBUS_JITTER_ARRAY; i++)
 8003244:	231e      	movs	r3, #30
 8003246:	18fb      	adds	r3, r7, r3
 8003248:	2200      	movs	r2, #0
 800324a:	701a      	strb	r2, [r3, #0]
 800324c:	e04e      	b.n	80032ec <SBUS_JitterAverage+0x1a8>
		{
			uint16_t trunc = (int16_t)( (rxSBUS[i][2 + (l*11)] >> 3 | rxSBUS[i][3 + (l*11)] << 5 ) & 0x07FF);
 800324e:	241e      	movs	r4, #30
 8003250:	193b      	adds	r3, r7, r4
 8003252:	7819      	ldrb	r1, [r3, #0]
 8003254:	2527      	movs	r5, #39	; 0x27
 8003256:	197b      	adds	r3, r7, r5
 8003258:	781a      	ldrb	r2, [r3, #0]
 800325a:	0013      	movs	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	189b      	adds	r3, r3, r2
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	189b      	adds	r3, r3, r2
 8003264:	1c9a      	adds	r2, r3, #2
 8003266:	48b3      	ldr	r0, [pc, #716]	; (8003534 <SBUS_JitterAverage+0x3f0>)
 8003268:	000b      	movs	r3, r1
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	185b      	adds	r3, r3, r1
 800326e:	0099      	lsls	r1, r3, #2
 8003270:	185b      	adds	r3, r3, r1
 8003272:	18c3      	adds	r3, r0, r3
 8003274:	5c9b      	ldrb	r3, [r3, r2]
 8003276:	08db      	lsrs	r3, r3, #3
 8003278:	b2db      	uxtb	r3, r3
 800327a:	b218      	sxth	r0, r3
 800327c:	193b      	adds	r3, r7, r4
 800327e:	7819      	ldrb	r1, [r3, #0]
 8003280:	197b      	adds	r3, r7, r5
 8003282:	781a      	ldrb	r2, [r3, #0]
 8003284:	0013      	movs	r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	189b      	adds	r3, r3, r2
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	189b      	adds	r3, r3, r2
 800328e:	1cda      	adds	r2, r3, #3
 8003290:	4ca8      	ldr	r4, [pc, #672]	; (8003534 <SBUS_JitterAverage+0x3f0>)
 8003292:	000b      	movs	r3, r1
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	185b      	adds	r3, r3, r1
 8003298:	0099      	lsls	r1, r3, #2
 800329a:	185b      	adds	r3, r3, r1
 800329c:	18e3      	adds	r3, r4, r3
 800329e:	5c9b      	ldrb	r3, [r3, r2]
 80032a0:	015b      	lsls	r3, r3, #5
 80032a2:	b21b      	sxth	r3, r3
 80032a4:	4303      	orrs	r3, r0
 80032a6:	b21b      	sxth	r3, r3
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	1d3b      	adds	r3, r7, #4
 80032ac:	0552      	lsls	r2, r2, #21
 80032ae:	0d52      	lsrs	r2, r2, #21
 80032b0:	801a      	strh	r2, [r3, #0]
			trunc = SBUS_Truncate(trunc);
 80032b2:	1d3c      	adds	r4, r7, #4
 80032b4:	1d3b      	adds	r3, r7, #4
 80032b6:	881b      	ldrh	r3, [r3, #0]
 80032b8:	0018      	movs	r0, r3
 80032ba:	f7ff ff03 	bl	80030c4 <SBUS_Truncate>
 80032be:	0003      	movs	r3, r0
 80032c0:	8023      	strh	r3, [r4, #0]
			if (trunc != 0)
 80032c2:	1d3b      	adds	r3, r7, #4
 80032c4:	881b      	ldrh	r3, [r3, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00a      	beq.n	80032e0 <SBUS_JitterAverage+0x19c>
			{
				ch += trunc;
 80032ca:	1d3b      	adds	r3, r7, #4
 80032cc:	881b      	ldrh	r3, [r3, #0]
 80032ce:	6a3a      	ldr	r2, [r7, #32]
 80032d0:	18d3      	adds	r3, r2, r3
 80032d2:	623b      	str	r3, [r7, #32]
				avg += 1;
 80032d4:	2226      	movs	r2, #38	; 0x26
 80032d6:	18bb      	adds	r3, r7, r2
 80032d8:	18ba      	adds	r2, r7, r2
 80032da:	7812      	ldrb	r2, [r2, #0]
 80032dc:	3201      	adds	r2, #1
 80032de:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < SBUS_JITTER_ARRAY; i++)
 80032e0:	211e      	movs	r1, #30
 80032e2:	187b      	adds	r3, r7, r1
 80032e4:	781a      	ldrb	r2, [r3, #0]
 80032e6:	187b      	adds	r3, r7, r1
 80032e8:	3201      	adds	r2, #1
 80032ea:	701a      	strb	r2, [r3, #0]
 80032ec:	231e      	movs	r3, #30
 80032ee:	18fb      	adds	r3, r7, r3
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d9ab      	bls.n	800324e <SBUS_JitterAverage+0x10a>
			}
		}
		ch /= avg;
 80032f6:	2426      	movs	r4, #38	; 0x26
 80032f8:	193b      	adds	r3, r7, r4
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	0019      	movs	r1, r3
 80032fe:	6a38      	ldr	r0, [r7, #32]
 8003300:	f7fc ff02 	bl	8000108 <__udivsi3>
 8003304:	0003      	movs	r3, r0
 8003306:	623b      	str	r3, [r7, #32]
		dataSBUS.ch[1 + (l*8)] = ch;
 8003308:	2327      	movs	r3, #39	; 0x27
 800330a:	18fb      	adds	r3, r7, r3
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	3301      	adds	r3, #1
 8003312:	6a3a      	ldr	r2, [r7, #32]
 8003314:	b211      	sxth	r1, r2
 8003316:	4a88      	ldr	r2, [pc, #544]	; (8003538 <SBUS_JitterAverage+0x3f4>)
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	18d3      	adds	r3, r2, r3
 800331c:	3306      	adds	r3, #6
 800331e:	1c0a      	adds	r2, r1, #0
 8003320:	801a      	strh	r2, [r3, #0]

		avg = 0;
 8003322:	193b      	adds	r3, r7, r4
 8003324:	2200      	movs	r2, #0
 8003326:	701a      	strb	r2, [r3, #0]
		ch = 0;
 8003328:	2300      	movs	r3, #0
 800332a:	623b      	str	r3, [r7, #32]
		for (uint8_t i = 0; i < SBUS_JITTER_ARRAY; i++)
 800332c:	231d      	movs	r3, #29
 800332e:	18fb      	adds	r3, r7, r3
 8003330:	2200      	movs	r2, #0
 8003332:	701a      	strb	r2, [r3, #0]
 8003334:	e064      	b.n	8003400 <SBUS_JitterAverage+0x2bc>
		{
			uint16_t trunc = (int16_t)( (rxSBUS[i][3 + (l*11)] >> 6 | rxSBUS[i][4 + (l*11)] << 2  | rxSBUS[i][5 + (l*11)] << 10 ) & 0x07FF);
 8003336:	251d      	movs	r5, #29
 8003338:	197b      	adds	r3, r7, r5
 800333a:	7819      	ldrb	r1, [r3, #0]
 800333c:	2627      	movs	r6, #39	; 0x27
 800333e:	19bb      	adds	r3, r7, r6
 8003340:	781a      	ldrb	r2, [r3, #0]
 8003342:	0013      	movs	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	189b      	adds	r3, r3, r2
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	189b      	adds	r3, r3, r2
 800334c:	1cda      	adds	r2, r3, #3
 800334e:	4879      	ldr	r0, [pc, #484]	; (8003534 <SBUS_JitterAverage+0x3f0>)
 8003350:	000b      	movs	r3, r1
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	185b      	adds	r3, r3, r1
 8003356:	0099      	lsls	r1, r3, #2
 8003358:	185b      	adds	r3, r3, r1
 800335a:	18c3      	adds	r3, r0, r3
 800335c:	5c9b      	ldrb	r3, [r3, r2]
 800335e:	099b      	lsrs	r3, r3, #6
 8003360:	b2db      	uxtb	r3, r3
 8003362:	b218      	sxth	r0, r3
 8003364:	197b      	adds	r3, r7, r5
 8003366:	7819      	ldrb	r1, [r3, #0]
 8003368:	19bb      	adds	r3, r7, r6
 800336a:	781a      	ldrb	r2, [r3, #0]
 800336c:	0013      	movs	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	189b      	adds	r3, r3, r2
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	189b      	adds	r3, r3, r2
 8003376:	1d1a      	adds	r2, r3, #4
 8003378:	4c6e      	ldr	r4, [pc, #440]	; (8003534 <SBUS_JitterAverage+0x3f0>)
 800337a:	000b      	movs	r3, r1
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	185b      	adds	r3, r3, r1
 8003380:	0099      	lsls	r1, r3, #2
 8003382:	185b      	adds	r3, r3, r1
 8003384:	18e3      	adds	r3, r4, r3
 8003386:	5c9b      	ldrb	r3, [r3, r2]
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	b21b      	sxth	r3, r3
 800338c:	4303      	orrs	r3, r0
 800338e:	b218      	sxth	r0, r3
 8003390:	197b      	adds	r3, r7, r5
 8003392:	7819      	ldrb	r1, [r3, #0]
 8003394:	19bb      	adds	r3, r7, r6
 8003396:	781a      	ldrb	r2, [r3, #0]
 8003398:	0013      	movs	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	189b      	adds	r3, r3, r2
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	189b      	adds	r3, r3, r2
 80033a2:	1d5a      	adds	r2, r3, #5
 80033a4:	4c63      	ldr	r4, [pc, #396]	; (8003534 <SBUS_JitterAverage+0x3f0>)
 80033a6:	000b      	movs	r3, r1
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	185b      	adds	r3, r3, r1
 80033ac:	0099      	lsls	r1, r3, #2
 80033ae:	185b      	adds	r3, r3, r1
 80033b0:	18e3      	adds	r3, r4, r3
 80033b2:	5c9b      	ldrb	r3, [r3, r2]
 80033b4:	029b      	lsls	r3, r3, #10
 80033b6:	b21b      	sxth	r3, r3
 80033b8:	4303      	orrs	r3, r0
 80033ba:	b21b      	sxth	r3, r3
 80033bc:	b29a      	uxth	r2, r3
 80033be:	1dbb      	adds	r3, r7, #6
 80033c0:	0552      	lsls	r2, r2, #21
 80033c2:	0d52      	lsrs	r2, r2, #21
 80033c4:	801a      	strh	r2, [r3, #0]
			trunc = SBUS_Truncate(trunc);
 80033c6:	1dbc      	adds	r4, r7, #6
 80033c8:	1dbb      	adds	r3, r7, #6
 80033ca:	881b      	ldrh	r3, [r3, #0]
 80033cc:	0018      	movs	r0, r3
 80033ce:	f7ff fe79 	bl	80030c4 <SBUS_Truncate>
 80033d2:	0003      	movs	r3, r0
 80033d4:	8023      	strh	r3, [r4, #0]
			if (trunc != 0)
 80033d6:	1dbb      	adds	r3, r7, #6
 80033d8:	881b      	ldrh	r3, [r3, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00a      	beq.n	80033f4 <SBUS_JitterAverage+0x2b0>
			{
				ch += trunc;
 80033de:	1dbb      	adds	r3, r7, #6
 80033e0:	881b      	ldrh	r3, [r3, #0]
 80033e2:	6a3a      	ldr	r2, [r7, #32]
 80033e4:	18d3      	adds	r3, r2, r3
 80033e6:	623b      	str	r3, [r7, #32]
				avg += 1;
 80033e8:	2226      	movs	r2, #38	; 0x26
 80033ea:	18bb      	adds	r3, r7, r2
 80033ec:	18ba      	adds	r2, r7, r2
 80033ee:	7812      	ldrb	r2, [r2, #0]
 80033f0:	3201      	adds	r2, #1
 80033f2:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < SBUS_JITTER_ARRAY; i++)
 80033f4:	211d      	movs	r1, #29
 80033f6:	187b      	adds	r3, r7, r1
 80033f8:	781a      	ldrb	r2, [r3, #0]
 80033fa:	187b      	adds	r3, r7, r1
 80033fc:	3201      	adds	r2, #1
 80033fe:	701a      	strb	r2, [r3, #0]
 8003400:	231d      	movs	r3, #29
 8003402:	18fb      	adds	r3, r7, r3
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	2b02      	cmp	r3, #2
 8003408:	d995      	bls.n	8003336 <SBUS_JitterAverage+0x1f2>
			}
		}
		ch /= avg;
 800340a:	2426      	movs	r4, #38	; 0x26
 800340c:	193b      	adds	r3, r7, r4
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	0019      	movs	r1, r3
 8003412:	6a38      	ldr	r0, [r7, #32]
 8003414:	f7fc fe78 	bl	8000108 <__udivsi3>
 8003418:	0003      	movs	r3, r0
 800341a:	623b      	str	r3, [r7, #32]
		dataSBUS.ch[2 + (l*8)] = ch;
 800341c:	2327      	movs	r3, #39	; 0x27
 800341e:	18fb      	adds	r3, r7, r3
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	3302      	adds	r3, #2
 8003426:	6a3a      	ldr	r2, [r7, #32]
 8003428:	b211      	sxth	r1, r2
 800342a:	4a43      	ldr	r2, [pc, #268]	; (8003538 <SBUS_JitterAverage+0x3f4>)
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	18d3      	adds	r3, r2, r3
 8003430:	3306      	adds	r3, #6
 8003432:	1c0a      	adds	r2, r1, #0
 8003434:	801a      	strh	r2, [r3, #0]

		avg = 0;
 8003436:	193b      	adds	r3, r7, r4
 8003438:	2200      	movs	r2, #0
 800343a:	701a      	strb	r2, [r3, #0]
		ch = 0;
 800343c:	2300      	movs	r3, #0
 800343e:	623b      	str	r3, [r7, #32]
		for (uint8_t i = 0; i < SBUS_JITTER_ARRAY; i++)
 8003440:	231c      	movs	r3, #28
 8003442:	18fb      	adds	r3, r7, r3
 8003444:	2200      	movs	r2, #0
 8003446:	701a      	strb	r2, [r3, #0]
 8003448:	e04f      	b.n	80034ea <SBUS_JitterAverage+0x3a6>
		{
			uint16_t trunc = (int16_t)( (rxSBUS[i][5 + (l*11)] >> 1 | rxSBUS[i][6 + (l*11)] << 7 ) & 0x07FF);
 800344a:	241c      	movs	r4, #28
 800344c:	193b      	adds	r3, r7, r4
 800344e:	7819      	ldrb	r1, [r3, #0]
 8003450:	2527      	movs	r5, #39	; 0x27
 8003452:	197b      	adds	r3, r7, r5
 8003454:	781a      	ldrb	r2, [r3, #0]
 8003456:	0013      	movs	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	189b      	adds	r3, r3, r2
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	189b      	adds	r3, r3, r2
 8003460:	1d5a      	adds	r2, r3, #5
 8003462:	4834      	ldr	r0, [pc, #208]	; (8003534 <SBUS_JitterAverage+0x3f0>)
 8003464:	000b      	movs	r3, r1
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	185b      	adds	r3, r3, r1
 800346a:	0099      	lsls	r1, r3, #2
 800346c:	185b      	adds	r3, r3, r1
 800346e:	18c3      	adds	r3, r0, r3
 8003470:	5c9b      	ldrb	r3, [r3, r2]
 8003472:	085b      	lsrs	r3, r3, #1
 8003474:	b2db      	uxtb	r3, r3
 8003476:	b218      	sxth	r0, r3
 8003478:	193b      	adds	r3, r7, r4
 800347a:	7819      	ldrb	r1, [r3, #0]
 800347c:	197b      	adds	r3, r7, r5
 800347e:	781a      	ldrb	r2, [r3, #0]
 8003480:	0013      	movs	r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	189b      	adds	r3, r3, r2
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	189b      	adds	r3, r3, r2
 800348a:	1d9a      	adds	r2, r3, #6
 800348c:	4c29      	ldr	r4, [pc, #164]	; (8003534 <SBUS_JitterAverage+0x3f0>)
 800348e:	000b      	movs	r3, r1
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	185b      	adds	r3, r3, r1
 8003494:	0099      	lsls	r1, r3, #2
 8003496:	185b      	adds	r3, r3, r1
 8003498:	18e3      	adds	r3, r4, r3
 800349a:	5c9b      	ldrb	r3, [r3, r2]
 800349c:	01db      	lsls	r3, r3, #7
 800349e:	b21b      	sxth	r3, r3
 80034a0:	4303      	orrs	r3, r0
 80034a2:	b21b      	sxth	r3, r3
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	2508      	movs	r5, #8
 80034a8:	197b      	adds	r3, r7, r5
 80034aa:	0552      	lsls	r2, r2, #21
 80034ac:	0d52      	lsrs	r2, r2, #21
 80034ae:	801a      	strh	r2, [r3, #0]
			trunc = SBUS_Truncate(trunc);
 80034b0:	197c      	adds	r4, r7, r5
 80034b2:	197b      	adds	r3, r7, r5
 80034b4:	881b      	ldrh	r3, [r3, #0]
 80034b6:	0018      	movs	r0, r3
 80034b8:	f7ff fe04 	bl	80030c4 <SBUS_Truncate>
 80034bc:	0003      	movs	r3, r0
 80034be:	8023      	strh	r3, [r4, #0]
			if (trunc != 0)
 80034c0:	197b      	adds	r3, r7, r5
 80034c2:	881b      	ldrh	r3, [r3, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00a      	beq.n	80034de <SBUS_JitterAverage+0x39a>
			{
				ch += trunc;
 80034c8:	197b      	adds	r3, r7, r5
 80034ca:	881b      	ldrh	r3, [r3, #0]
 80034cc:	6a3a      	ldr	r2, [r7, #32]
 80034ce:	18d3      	adds	r3, r2, r3
 80034d0:	623b      	str	r3, [r7, #32]
				avg += 1;
 80034d2:	2226      	movs	r2, #38	; 0x26
 80034d4:	18bb      	adds	r3, r7, r2
 80034d6:	18ba      	adds	r2, r7, r2
 80034d8:	7812      	ldrb	r2, [r2, #0]
 80034da:	3201      	adds	r2, #1
 80034dc:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < SBUS_JITTER_ARRAY; i++)
 80034de:	211c      	movs	r1, #28
 80034e0:	187b      	adds	r3, r7, r1
 80034e2:	781a      	ldrb	r2, [r3, #0]
 80034e4:	187b      	adds	r3, r7, r1
 80034e6:	3201      	adds	r2, #1
 80034e8:	701a      	strb	r2, [r3, #0]
 80034ea:	231c      	movs	r3, #28
 80034ec:	18fb      	adds	r3, r7, r3
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d9aa      	bls.n	800344a <SBUS_JitterAverage+0x306>
			}
		}
		ch /= avg;
 80034f4:	2426      	movs	r4, #38	; 0x26
 80034f6:	193b      	adds	r3, r7, r4
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	0019      	movs	r1, r3
 80034fc:	6a38      	ldr	r0, [r7, #32]
 80034fe:	f7fc fe03 	bl	8000108 <__udivsi3>
 8003502:	0003      	movs	r3, r0
 8003504:	623b      	str	r3, [r7, #32]
		dataSBUS.ch[3 + (l*8)] = ch;
 8003506:	2327      	movs	r3, #39	; 0x27
 8003508:	18fb      	adds	r3, r7, r3
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	3303      	adds	r3, #3
 8003510:	6a3a      	ldr	r2, [r7, #32]
 8003512:	b211      	sxth	r1, r2
 8003514:	4a08      	ldr	r2, [pc, #32]	; (8003538 <SBUS_JitterAverage+0x3f4>)
 8003516:	005b      	lsls	r3, r3, #1
 8003518:	18d3      	adds	r3, r2, r3
 800351a:	3306      	adds	r3, #6
 800351c:	1c0a      	adds	r2, r1, #0
 800351e:	801a      	strh	r2, [r3, #0]

		avg = 0;
 8003520:	193b      	adds	r3, r7, r4
 8003522:	2200      	movs	r2, #0
 8003524:	701a      	strb	r2, [r3, #0]
		ch = 0;
 8003526:	2300      	movs	r3, #0
 8003528:	623b      	str	r3, [r7, #32]
		for (uint8_t i = 0; i < SBUS_JITTER_ARRAY; i++)
 800352a:	231b      	movs	r3, #27
 800352c:	18fb      	adds	r3, r7, r3
 800352e:	2200      	movs	r2, #0
 8003530:	701a      	strb	r2, [r3, #0]
 8003532:	e053      	b.n	80035dc <SBUS_JitterAverage+0x498>
 8003534:	20000350 	.word	0x20000350
 8003538:	2000039c 	.word	0x2000039c
		{
			uint16_t trunc = (int16_t)( (rxSBUS[i][6 + (l*11)] >> 4 | rxSBUS[i][7 + (l*11)] << 4 ) & 0x07FF);
 800353c:	241b      	movs	r4, #27
 800353e:	193b      	adds	r3, r7, r4
 8003540:	7819      	ldrb	r1, [r3, #0]
 8003542:	2527      	movs	r5, #39	; 0x27
 8003544:	197b      	adds	r3, r7, r5
 8003546:	781a      	ldrb	r2, [r3, #0]
 8003548:	0013      	movs	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	189b      	adds	r3, r3, r2
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	189b      	adds	r3, r3, r2
 8003552:	1d9a      	adds	r2, r3, #6
 8003554:	48b6      	ldr	r0, [pc, #728]	; (8003830 <SBUS_JitterAverage+0x6ec>)
 8003556:	000b      	movs	r3, r1
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	185b      	adds	r3, r3, r1
 800355c:	0099      	lsls	r1, r3, #2
 800355e:	185b      	adds	r3, r3, r1
 8003560:	18c3      	adds	r3, r0, r3
 8003562:	5c9b      	ldrb	r3, [r3, r2]
 8003564:	091b      	lsrs	r3, r3, #4
 8003566:	b2db      	uxtb	r3, r3
 8003568:	b218      	sxth	r0, r3
 800356a:	193b      	adds	r3, r7, r4
 800356c:	7819      	ldrb	r1, [r3, #0]
 800356e:	197b      	adds	r3, r7, r5
 8003570:	781a      	ldrb	r2, [r3, #0]
 8003572:	0013      	movs	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	189b      	adds	r3, r3, r2
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	189b      	adds	r3, r3, r2
 800357c:	1dda      	adds	r2, r3, #7
 800357e:	4cac      	ldr	r4, [pc, #688]	; (8003830 <SBUS_JitterAverage+0x6ec>)
 8003580:	000b      	movs	r3, r1
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	185b      	adds	r3, r3, r1
 8003586:	0099      	lsls	r1, r3, #2
 8003588:	185b      	adds	r3, r3, r1
 800358a:	18e3      	adds	r3, r4, r3
 800358c:	5c9b      	ldrb	r3, [r3, r2]
 800358e:	011b      	lsls	r3, r3, #4
 8003590:	b21b      	sxth	r3, r3
 8003592:	4303      	orrs	r3, r0
 8003594:	b21b      	sxth	r3, r3
 8003596:	b29a      	uxth	r2, r3
 8003598:	250a      	movs	r5, #10
 800359a:	197b      	adds	r3, r7, r5
 800359c:	0552      	lsls	r2, r2, #21
 800359e:	0d52      	lsrs	r2, r2, #21
 80035a0:	801a      	strh	r2, [r3, #0]
			trunc = SBUS_Truncate(trunc);
 80035a2:	197c      	adds	r4, r7, r5
 80035a4:	197b      	adds	r3, r7, r5
 80035a6:	881b      	ldrh	r3, [r3, #0]
 80035a8:	0018      	movs	r0, r3
 80035aa:	f7ff fd8b 	bl	80030c4 <SBUS_Truncate>
 80035ae:	0003      	movs	r3, r0
 80035b0:	8023      	strh	r3, [r4, #0]
			if (trunc != 0)
 80035b2:	197b      	adds	r3, r7, r5
 80035b4:	881b      	ldrh	r3, [r3, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00a      	beq.n	80035d0 <SBUS_JitterAverage+0x48c>
			{
				ch += trunc;
 80035ba:	197b      	adds	r3, r7, r5
 80035bc:	881b      	ldrh	r3, [r3, #0]
 80035be:	6a3a      	ldr	r2, [r7, #32]
 80035c0:	18d3      	adds	r3, r2, r3
 80035c2:	623b      	str	r3, [r7, #32]
				avg += 1;
 80035c4:	2226      	movs	r2, #38	; 0x26
 80035c6:	18bb      	adds	r3, r7, r2
 80035c8:	18ba      	adds	r2, r7, r2
 80035ca:	7812      	ldrb	r2, [r2, #0]
 80035cc:	3201      	adds	r2, #1
 80035ce:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < SBUS_JITTER_ARRAY; i++)
 80035d0:	211b      	movs	r1, #27
 80035d2:	187b      	adds	r3, r7, r1
 80035d4:	781a      	ldrb	r2, [r3, #0]
 80035d6:	187b      	adds	r3, r7, r1
 80035d8:	3201      	adds	r2, #1
 80035da:	701a      	strb	r2, [r3, #0]
 80035dc:	231b      	movs	r3, #27
 80035de:	18fb      	adds	r3, r7, r3
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d9aa      	bls.n	800353c <SBUS_JitterAverage+0x3f8>
			}
		}
		ch /= avg;
 80035e6:	2426      	movs	r4, #38	; 0x26
 80035e8:	193b      	adds	r3, r7, r4
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	0019      	movs	r1, r3
 80035ee:	6a38      	ldr	r0, [r7, #32]
 80035f0:	f7fc fd8a 	bl	8000108 <__udivsi3>
 80035f4:	0003      	movs	r3, r0
 80035f6:	623b      	str	r3, [r7, #32]
		dataSBUS.ch[4 + (l*8)] = ch;
 80035f8:	2327      	movs	r3, #39	; 0x27
 80035fa:	18fb      	adds	r3, r7, r3
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	3304      	adds	r3, #4
 8003602:	6a3a      	ldr	r2, [r7, #32]
 8003604:	b211      	sxth	r1, r2
 8003606:	4a8b      	ldr	r2, [pc, #556]	; (8003834 <SBUS_JitterAverage+0x6f0>)
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	18d3      	adds	r3, r2, r3
 800360c:	3306      	adds	r3, #6
 800360e:	1c0a      	adds	r2, r1, #0
 8003610:	801a      	strh	r2, [r3, #0]

		avg = 0;
 8003612:	193b      	adds	r3, r7, r4
 8003614:	2200      	movs	r2, #0
 8003616:	701a      	strb	r2, [r3, #0]
		ch = 0;
 8003618:	2300      	movs	r3, #0
 800361a:	623b      	str	r3, [r7, #32]
		for (uint8_t i = 0; i < SBUS_JITTER_ARRAY; i++)
 800361c:	231a      	movs	r3, #26
 800361e:	18fb      	adds	r3, r7, r3
 8003620:	2200      	movs	r2, #0
 8003622:	701a      	strb	r2, [r3, #0]
 8003624:	e067      	b.n	80036f6 <SBUS_JitterAverage+0x5b2>
		{
			uint16_t trunc = (int16_t)( (rxSBUS[i][7 + (l*11)] >> 7 | rxSBUS[i][8 + (l*11)] << 1 | rxSBUS[i][9 + (l*11)] << 9 ) & 0x07FF);
 8003626:	251a      	movs	r5, #26
 8003628:	197b      	adds	r3, r7, r5
 800362a:	7819      	ldrb	r1, [r3, #0]
 800362c:	2627      	movs	r6, #39	; 0x27
 800362e:	19bb      	adds	r3, r7, r6
 8003630:	781a      	ldrb	r2, [r3, #0]
 8003632:	0013      	movs	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	189b      	adds	r3, r3, r2
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	189b      	adds	r3, r3, r2
 800363c:	1dda      	adds	r2, r3, #7
 800363e:	487c      	ldr	r0, [pc, #496]	; (8003830 <SBUS_JitterAverage+0x6ec>)
 8003640:	000b      	movs	r3, r1
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	185b      	adds	r3, r3, r1
 8003646:	0099      	lsls	r1, r3, #2
 8003648:	185b      	adds	r3, r3, r1
 800364a:	18c3      	adds	r3, r0, r3
 800364c:	5c9b      	ldrb	r3, [r3, r2]
 800364e:	09db      	lsrs	r3, r3, #7
 8003650:	b2db      	uxtb	r3, r3
 8003652:	b218      	sxth	r0, r3
 8003654:	197b      	adds	r3, r7, r5
 8003656:	7819      	ldrb	r1, [r3, #0]
 8003658:	19bb      	adds	r3, r7, r6
 800365a:	781a      	ldrb	r2, [r3, #0]
 800365c:	0013      	movs	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	189b      	adds	r3, r3, r2
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	189b      	adds	r3, r3, r2
 8003666:	3308      	adds	r3, #8
 8003668:	001a      	movs	r2, r3
 800366a:	4c71      	ldr	r4, [pc, #452]	; (8003830 <SBUS_JitterAverage+0x6ec>)
 800366c:	000b      	movs	r3, r1
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	185b      	adds	r3, r3, r1
 8003672:	0099      	lsls	r1, r3, #2
 8003674:	185b      	adds	r3, r3, r1
 8003676:	18e3      	adds	r3, r4, r3
 8003678:	5c9b      	ldrb	r3, [r3, r2]
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	b21b      	sxth	r3, r3
 800367e:	4303      	orrs	r3, r0
 8003680:	b218      	sxth	r0, r3
 8003682:	197b      	adds	r3, r7, r5
 8003684:	7819      	ldrb	r1, [r3, #0]
 8003686:	19bb      	adds	r3, r7, r6
 8003688:	781a      	ldrb	r2, [r3, #0]
 800368a:	0013      	movs	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	189b      	adds	r3, r3, r2
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	189b      	adds	r3, r3, r2
 8003694:	3309      	adds	r3, #9
 8003696:	001a      	movs	r2, r3
 8003698:	4c65      	ldr	r4, [pc, #404]	; (8003830 <SBUS_JitterAverage+0x6ec>)
 800369a:	000b      	movs	r3, r1
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	185b      	adds	r3, r3, r1
 80036a0:	0099      	lsls	r1, r3, #2
 80036a2:	185b      	adds	r3, r3, r1
 80036a4:	18e3      	adds	r3, r4, r3
 80036a6:	5c9b      	ldrb	r3, [r3, r2]
 80036a8:	025b      	lsls	r3, r3, #9
 80036aa:	b21b      	sxth	r3, r3
 80036ac:	4303      	orrs	r3, r0
 80036ae:	b21b      	sxth	r3, r3
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	250c      	movs	r5, #12
 80036b4:	197b      	adds	r3, r7, r5
 80036b6:	0552      	lsls	r2, r2, #21
 80036b8:	0d52      	lsrs	r2, r2, #21
 80036ba:	801a      	strh	r2, [r3, #0]
			trunc = SBUS_Truncate(trunc);
 80036bc:	197c      	adds	r4, r7, r5
 80036be:	197b      	adds	r3, r7, r5
 80036c0:	881b      	ldrh	r3, [r3, #0]
 80036c2:	0018      	movs	r0, r3
 80036c4:	f7ff fcfe 	bl	80030c4 <SBUS_Truncate>
 80036c8:	0003      	movs	r3, r0
 80036ca:	8023      	strh	r3, [r4, #0]
			if (trunc != 0)
 80036cc:	197b      	adds	r3, r7, r5
 80036ce:	881b      	ldrh	r3, [r3, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00a      	beq.n	80036ea <SBUS_JitterAverage+0x5a6>
			{
				ch += trunc;
 80036d4:	197b      	adds	r3, r7, r5
 80036d6:	881b      	ldrh	r3, [r3, #0]
 80036d8:	6a3a      	ldr	r2, [r7, #32]
 80036da:	18d3      	adds	r3, r2, r3
 80036dc:	623b      	str	r3, [r7, #32]
				avg += 1;
 80036de:	2226      	movs	r2, #38	; 0x26
 80036e0:	18bb      	adds	r3, r7, r2
 80036e2:	18ba      	adds	r2, r7, r2
 80036e4:	7812      	ldrb	r2, [r2, #0]
 80036e6:	3201      	adds	r2, #1
 80036e8:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < SBUS_JITTER_ARRAY; i++)
 80036ea:	211a      	movs	r1, #26
 80036ec:	187b      	adds	r3, r7, r1
 80036ee:	781a      	ldrb	r2, [r3, #0]
 80036f0:	187b      	adds	r3, r7, r1
 80036f2:	3201      	adds	r2, #1
 80036f4:	701a      	strb	r2, [r3, #0]
 80036f6:	231a      	movs	r3, #26
 80036f8:	18fb      	adds	r3, r7, r3
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d992      	bls.n	8003626 <SBUS_JitterAverage+0x4e2>
			}
		}
		ch /= avg;
 8003700:	2426      	movs	r4, #38	; 0x26
 8003702:	193b      	adds	r3, r7, r4
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	0019      	movs	r1, r3
 8003708:	6a38      	ldr	r0, [r7, #32]
 800370a:	f7fc fcfd 	bl	8000108 <__udivsi3>
 800370e:	0003      	movs	r3, r0
 8003710:	623b      	str	r3, [r7, #32]
		dataSBUS.ch[5 + (l*8)] = ch;
 8003712:	2327      	movs	r3, #39	; 0x27
 8003714:	18fb      	adds	r3, r7, r3
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	3305      	adds	r3, #5
 800371c:	6a3a      	ldr	r2, [r7, #32]
 800371e:	b211      	sxth	r1, r2
 8003720:	4a44      	ldr	r2, [pc, #272]	; (8003834 <SBUS_JitterAverage+0x6f0>)
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	18d3      	adds	r3, r2, r3
 8003726:	3306      	adds	r3, #6
 8003728:	1c0a      	adds	r2, r1, #0
 800372a:	801a      	strh	r2, [r3, #0]

		avg = 0;
 800372c:	193b      	adds	r3, r7, r4
 800372e:	2200      	movs	r2, #0
 8003730:	701a      	strb	r2, [r3, #0]
		ch = 0;
 8003732:	2300      	movs	r3, #0
 8003734:	623b      	str	r3, [r7, #32]
		for (uint8_t i = 0; i < SBUS_JITTER_ARRAY; i++)
 8003736:	2319      	movs	r3, #25
 8003738:	18fb      	adds	r3, r7, r3
 800373a:	2200      	movs	r2, #0
 800373c:	701a      	strb	r2, [r3, #0]
 800373e:	e051      	b.n	80037e4 <SBUS_JitterAverage+0x6a0>
		{
			uint16_t trunc = (int16_t)( (rxSBUS[i][9 + (l*11)] >> 2 | rxSBUS[i][10 + (l*11)] << 6 ) & 0x07FF);
 8003740:	2419      	movs	r4, #25
 8003742:	193b      	adds	r3, r7, r4
 8003744:	7819      	ldrb	r1, [r3, #0]
 8003746:	2527      	movs	r5, #39	; 0x27
 8003748:	197b      	adds	r3, r7, r5
 800374a:	781a      	ldrb	r2, [r3, #0]
 800374c:	0013      	movs	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	189b      	adds	r3, r3, r2
 8003752:	005b      	lsls	r3, r3, #1
 8003754:	189b      	adds	r3, r3, r2
 8003756:	3309      	adds	r3, #9
 8003758:	001a      	movs	r2, r3
 800375a:	4835      	ldr	r0, [pc, #212]	; (8003830 <SBUS_JitterAverage+0x6ec>)
 800375c:	000b      	movs	r3, r1
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	185b      	adds	r3, r3, r1
 8003762:	0099      	lsls	r1, r3, #2
 8003764:	185b      	adds	r3, r3, r1
 8003766:	18c3      	adds	r3, r0, r3
 8003768:	5c9b      	ldrb	r3, [r3, r2]
 800376a:	089b      	lsrs	r3, r3, #2
 800376c:	b2db      	uxtb	r3, r3
 800376e:	b218      	sxth	r0, r3
 8003770:	193b      	adds	r3, r7, r4
 8003772:	7819      	ldrb	r1, [r3, #0]
 8003774:	197b      	adds	r3, r7, r5
 8003776:	781a      	ldrb	r2, [r3, #0]
 8003778:	0013      	movs	r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	189b      	adds	r3, r3, r2
 800377e:	005b      	lsls	r3, r3, #1
 8003780:	189b      	adds	r3, r3, r2
 8003782:	330a      	adds	r3, #10
 8003784:	001a      	movs	r2, r3
 8003786:	4c2a      	ldr	r4, [pc, #168]	; (8003830 <SBUS_JitterAverage+0x6ec>)
 8003788:	000b      	movs	r3, r1
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	185b      	adds	r3, r3, r1
 800378e:	0099      	lsls	r1, r3, #2
 8003790:	185b      	adds	r3, r3, r1
 8003792:	18e3      	adds	r3, r4, r3
 8003794:	5c9b      	ldrb	r3, [r3, r2]
 8003796:	019b      	lsls	r3, r3, #6
 8003798:	b21b      	sxth	r3, r3
 800379a:	4303      	orrs	r3, r0
 800379c:	b21b      	sxth	r3, r3
 800379e:	b29a      	uxth	r2, r3
 80037a0:	250e      	movs	r5, #14
 80037a2:	197b      	adds	r3, r7, r5
 80037a4:	0552      	lsls	r2, r2, #21
 80037a6:	0d52      	lsrs	r2, r2, #21
 80037a8:	801a      	strh	r2, [r3, #0]
			trunc = SBUS_Truncate(trunc);
 80037aa:	197c      	adds	r4, r7, r5
 80037ac:	197b      	adds	r3, r7, r5
 80037ae:	881b      	ldrh	r3, [r3, #0]
 80037b0:	0018      	movs	r0, r3
 80037b2:	f7ff fc87 	bl	80030c4 <SBUS_Truncate>
 80037b6:	0003      	movs	r3, r0
 80037b8:	8023      	strh	r3, [r4, #0]
			if (trunc != 0)
 80037ba:	197b      	adds	r3, r7, r5
 80037bc:	881b      	ldrh	r3, [r3, #0]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00a      	beq.n	80037d8 <SBUS_JitterAverage+0x694>
			{
				ch += trunc;
 80037c2:	197b      	adds	r3, r7, r5
 80037c4:	881b      	ldrh	r3, [r3, #0]
 80037c6:	6a3a      	ldr	r2, [r7, #32]
 80037c8:	18d3      	adds	r3, r2, r3
 80037ca:	623b      	str	r3, [r7, #32]
				avg += 1;
 80037cc:	2226      	movs	r2, #38	; 0x26
 80037ce:	18bb      	adds	r3, r7, r2
 80037d0:	18ba      	adds	r2, r7, r2
 80037d2:	7812      	ldrb	r2, [r2, #0]
 80037d4:	3201      	adds	r2, #1
 80037d6:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < SBUS_JITTER_ARRAY; i++)
 80037d8:	2119      	movs	r1, #25
 80037da:	187b      	adds	r3, r7, r1
 80037dc:	781a      	ldrb	r2, [r3, #0]
 80037de:	187b      	adds	r3, r7, r1
 80037e0:	3201      	adds	r2, #1
 80037e2:	701a      	strb	r2, [r3, #0]
 80037e4:	2319      	movs	r3, #25
 80037e6:	18fb      	adds	r3, r7, r3
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d9a8      	bls.n	8003740 <SBUS_JitterAverage+0x5fc>
			}
		}
		ch /= avg;
 80037ee:	2426      	movs	r4, #38	; 0x26
 80037f0:	193b      	adds	r3, r7, r4
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	0019      	movs	r1, r3
 80037f6:	6a38      	ldr	r0, [r7, #32]
 80037f8:	f7fc fc86 	bl	8000108 <__udivsi3>
 80037fc:	0003      	movs	r3, r0
 80037fe:	623b      	str	r3, [r7, #32]
		dataSBUS.ch[6 + (l*8)] = ch;
 8003800:	2327      	movs	r3, #39	; 0x27
 8003802:	18fb      	adds	r3, r7, r3
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	3306      	adds	r3, #6
 800380a:	6a3a      	ldr	r2, [r7, #32]
 800380c:	b211      	sxth	r1, r2
 800380e:	4a09      	ldr	r2, [pc, #36]	; (8003834 <SBUS_JitterAverage+0x6f0>)
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	18d3      	adds	r3, r2, r3
 8003814:	3306      	adds	r3, #6
 8003816:	1c0a      	adds	r2, r1, #0
 8003818:	801a      	strh	r2, [r3, #0]

		avg = 0;
 800381a:	193b      	adds	r3, r7, r4
 800381c:	2200      	movs	r2, #0
 800381e:	701a      	strb	r2, [r3, #0]
		ch = 0;
 8003820:	2300      	movs	r3, #0
 8003822:	623b      	str	r3, [r7, #32]
		for (uint8_t i = 0; i < SBUS_JITTER_ARRAY; i++)
 8003824:	2318      	movs	r3, #24
 8003826:	18fb      	adds	r3, r7, r3
 8003828:	2200      	movs	r2, #0
 800382a:	701a      	strb	r2, [r3, #0]
 800382c:	e055      	b.n	80038da <SBUS_JitterAverage+0x796>
 800382e:	46c0      	nop			; (mov r8, r8)
 8003830:	20000350 	.word	0x20000350
 8003834:	2000039c 	.word	0x2000039c
		{
			uint16_t trunc = (int16_t)( (rxSBUS[i][10 + (l*11)] >> 5 | rxSBUS[i][11 + (l*11)] << 3 ) & 0x07FF);
 8003838:	2418      	movs	r4, #24
 800383a:	193b      	adds	r3, r7, r4
 800383c:	7819      	ldrb	r1, [r3, #0]
 800383e:	2527      	movs	r5, #39	; 0x27
 8003840:	197b      	adds	r3, r7, r5
 8003842:	781a      	ldrb	r2, [r3, #0]
 8003844:	0013      	movs	r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	189b      	adds	r3, r3, r2
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	189b      	adds	r3, r3, r2
 800384e:	330a      	adds	r3, #10
 8003850:	001a      	movs	r2, r3
 8003852:	4887      	ldr	r0, [pc, #540]	; (8003a70 <SBUS_JitterAverage+0x92c>)
 8003854:	000b      	movs	r3, r1
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	185b      	adds	r3, r3, r1
 800385a:	0099      	lsls	r1, r3, #2
 800385c:	185b      	adds	r3, r3, r1
 800385e:	18c3      	adds	r3, r0, r3
 8003860:	5c9b      	ldrb	r3, [r3, r2]
 8003862:	095b      	lsrs	r3, r3, #5
 8003864:	b2db      	uxtb	r3, r3
 8003866:	b218      	sxth	r0, r3
 8003868:	193b      	adds	r3, r7, r4
 800386a:	7819      	ldrb	r1, [r3, #0]
 800386c:	197b      	adds	r3, r7, r5
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	1c5a      	adds	r2, r3, #1
 8003872:	0013      	movs	r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	189b      	adds	r3, r3, r2
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	189a      	adds	r2, r3, r2
 800387c:	4c7c      	ldr	r4, [pc, #496]	; (8003a70 <SBUS_JitterAverage+0x92c>)
 800387e:	000b      	movs	r3, r1
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	185b      	adds	r3, r3, r1
 8003884:	0099      	lsls	r1, r3, #2
 8003886:	185b      	adds	r3, r3, r1
 8003888:	18e3      	adds	r3, r4, r3
 800388a:	5c9b      	ldrb	r3, [r3, r2]
 800388c:	00db      	lsls	r3, r3, #3
 800388e:	b21b      	sxth	r3, r3
 8003890:	4303      	orrs	r3, r0
 8003892:	b21b      	sxth	r3, r3
 8003894:	b29a      	uxth	r2, r3
 8003896:	2510      	movs	r5, #16
 8003898:	197b      	adds	r3, r7, r5
 800389a:	0552      	lsls	r2, r2, #21
 800389c:	0d52      	lsrs	r2, r2, #21
 800389e:	801a      	strh	r2, [r3, #0]
			trunc = SBUS_Truncate(trunc);
 80038a0:	197c      	adds	r4, r7, r5
 80038a2:	197b      	adds	r3, r7, r5
 80038a4:	881b      	ldrh	r3, [r3, #0]
 80038a6:	0018      	movs	r0, r3
 80038a8:	f7ff fc0c 	bl	80030c4 <SBUS_Truncate>
 80038ac:	0003      	movs	r3, r0
 80038ae:	8023      	strh	r3, [r4, #0]
			if (trunc != 0)
 80038b0:	197b      	adds	r3, r7, r5
 80038b2:	881b      	ldrh	r3, [r3, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00a      	beq.n	80038ce <SBUS_JitterAverage+0x78a>
			{
				ch += trunc;
 80038b8:	197b      	adds	r3, r7, r5
 80038ba:	881b      	ldrh	r3, [r3, #0]
 80038bc:	6a3a      	ldr	r2, [r7, #32]
 80038be:	18d3      	adds	r3, r2, r3
 80038c0:	623b      	str	r3, [r7, #32]
				avg += 1;
 80038c2:	2226      	movs	r2, #38	; 0x26
 80038c4:	18bb      	adds	r3, r7, r2
 80038c6:	18ba      	adds	r2, r7, r2
 80038c8:	7812      	ldrb	r2, [r2, #0]
 80038ca:	3201      	adds	r2, #1
 80038cc:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < SBUS_JITTER_ARRAY; i++)
 80038ce:	2118      	movs	r1, #24
 80038d0:	187b      	adds	r3, r7, r1
 80038d2:	781a      	ldrb	r2, [r3, #0]
 80038d4:	187b      	adds	r3, r7, r1
 80038d6:	3201      	adds	r2, #1
 80038d8:	701a      	strb	r2, [r3, #0]
 80038da:	2318      	movs	r3, #24
 80038dc:	18fb      	adds	r3, r7, r3
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d9a9      	bls.n	8003838 <SBUS_JitterAverage+0x6f4>
			}
		}
		ch /= avg;
 80038e4:	2326      	movs	r3, #38	; 0x26
 80038e6:	18fb      	adds	r3, r7, r3
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	0019      	movs	r1, r3
 80038ec:	6a38      	ldr	r0, [r7, #32]
 80038ee:	f7fc fc0b 	bl	8000108 <__udivsi3>
 80038f2:	0003      	movs	r3, r0
 80038f4:	623b      	str	r3, [r7, #32]
		dataSBUS.ch[7 + (l*8)] = ch;
 80038f6:	2027      	movs	r0, #39	; 0x27
 80038f8:	183b      	adds	r3, r7, r0
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	00db      	lsls	r3, r3, #3
 80038fe:	3307      	adds	r3, #7
 8003900:	6a3a      	ldr	r2, [r7, #32]
 8003902:	b211      	sxth	r1, r2
 8003904:	4a5b      	ldr	r2, [pc, #364]	; (8003a74 <SBUS_JitterAverage+0x930>)
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	18d3      	adds	r3, r2, r3
 800390a:	3306      	adds	r3, #6
 800390c:	1c0a      	adds	r2, r1, #0
 800390e:	801a      	strh	r2, [r3, #0]
	for (uint8_t l = 0; l < 2; l++)
 8003910:	183b      	adds	r3, r7, r0
 8003912:	781a      	ldrb	r2, [r3, #0]
 8003914:	183b      	adds	r3, r7, r0
 8003916:	3201      	adds	r2, #1
 8003918:	701a      	strb	r2, [r3, #0]
 800391a:	2327      	movs	r3, #39	; 0x27
 800391c:	18fb      	adds	r3, r7, r3
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d801      	bhi.n	8003928 <SBUS_JitterAverage+0x7e4>
 8003924:	f7ff fc17 	bl	8003156 <SBUS_JitterAverage+0x12>
	}

	uint8_t ch17 = 0;
 8003928:	2317      	movs	r3, #23
 800392a:	18fb      	adds	r3, r7, r3
 800392c:	2200      	movs	r2, #0
 800392e:	701a      	strb	r2, [r3, #0]
	uint8_t ch18 = 0;
 8003930:	2316      	movs	r3, #22
 8003932:	18fb      	adds	r3, r7, r3
 8003934:	2200      	movs	r2, #0
 8003936:	701a      	strb	r2, [r3, #0]
	uint8_t fs = 0;
 8003938:	2315      	movs	r3, #21
 800393a:	18fb      	adds	r3, r7, r3
 800393c:	2200      	movs	r2, #0
 800393e:	701a      	strb	r2, [r3, #0]
	uint8_t lf = 0;
 8003940:	2314      	movs	r3, #20
 8003942:	18fb      	adds	r3, r7, r3
 8003944:	2200      	movs	r2, #0
 8003946:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < SBUS_JITTER_ARRAY; i++)
 8003948:	2313      	movs	r3, #19
 800394a:	18fb      	adds	r3, r7, r3
 800394c:	2200      	movs	r2, #0
 800394e:	701a      	strb	r2, [r3, #0]
 8003950:	e055      	b.n	80039fe <SBUS_JitterAverage+0x8ba>
	{
		ch17 += rxSBUS[i][23] & SBUS_CH17_MASK;
 8003952:	2013      	movs	r0, #19
 8003954:	183b      	adds	r3, r7, r0
 8003956:	781a      	ldrb	r2, [r3, #0]
 8003958:	4945      	ldr	r1, [pc, #276]	; (8003a70 <SBUS_JitterAverage+0x92c>)
 800395a:	0013      	movs	r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	189b      	adds	r3, r3, r2
 8003960:	009a      	lsls	r2, r3, #2
 8003962:	189b      	adds	r3, r3, r2
 8003964:	18cb      	adds	r3, r1, r3
 8003966:	3317      	adds	r3, #23
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	2201      	movs	r2, #1
 800396c:	4013      	ands	r3, r2
 800396e:	b2d9      	uxtb	r1, r3
 8003970:	2217      	movs	r2, #23
 8003972:	18bb      	adds	r3, r7, r2
 8003974:	18ba      	adds	r2, r7, r2
 8003976:	7812      	ldrb	r2, [r2, #0]
 8003978:	188a      	adds	r2, r1, r2
 800397a:	701a      	strb	r2, [r3, #0]
		ch18 += rxSBUS[i][23] & SBUS_CH18_MASK;
 800397c:	183b      	adds	r3, r7, r0
 800397e:	781a      	ldrb	r2, [r3, #0]
 8003980:	493b      	ldr	r1, [pc, #236]	; (8003a70 <SBUS_JitterAverage+0x92c>)
 8003982:	0013      	movs	r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	189b      	adds	r3, r3, r2
 8003988:	009a      	lsls	r2, r3, #2
 800398a:	189b      	adds	r3, r3, r2
 800398c:	18cb      	adds	r3, r1, r3
 800398e:	3317      	adds	r3, #23
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	2202      	movs	r2, #2
 8003994:	4013      	ands	r3, r2
 8003996:	b2d9      	uxtb	r1, r3
 8003998:	2216      	movs	r2, #22
 800399a:	18bb      	adds	r3, r7, r2
 800399c:	18ba      	adds	r2, r7, r2
 800399e:	7812      	ldrb	r2, [r2, #0]
 80039a0:	188a      	adds	r2, r1, r2
 80039a2:	701a      	strb	r2, [r3, #0]
		fs += rxSBUS[i][23] & SBUS_FAILSAFE_MASK;
 80039a4:	183b      	adds	r3, r7, r0
 80039a6:	781a      	ldrb	r2, [r3, #0]
 80039a8:	4931      	ldr	r1, [pc, #196]	; (8003a70 <SBUS_JitterAverage+0x92c>)
 80039aa:	0013      	movs	r3, r2
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	189b      	adds	r3, r3, r2
 80039b0:	009a      	lsls	r2, r3, #2
 80039b2:	189b      	adds	r3, r3, r2
 80039b4:	18cb      	adds	r3, r1, r3
 80039b6:	3317      	adds	r3, #23
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	2208      	movs	r2, #8
 80039bc:	4013      	ands	r3, r2
 80039be:	b2d9      	uxtb	r1, r3
 80039c0:	2215      	movs	r2, #21
 80039c2:	18bb      	adds	r3, r7, r2
 80039c4:	18ba      	adds	r2, r7, r2
 80039c6:	7812      	ldrb	r2, [r2, #0]
 80039c8:	188a      	adds	r2, r1, r2
 80039ca:	701a      	strb	r2, [r3, #0]
		lf += rxSBUS[i][23] & SBUS_LOSTFRAME_MASK;
 80039cc:	183b      	adds	r3, r7, r0
 80039ce:	781a      	ldrb	r2, [r3, #0]
 80039d0:	4927      	ldr	r1, [pc, #156]	; (8003a70 <SBUS_JitterAverage+0x92c>)
 80039d2:	0013      	movs	r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	189b      	adds	r3, r3, r2
 80039d8:	009a      	lsls	r2, r3, #2
 80039da:	189b      	adds	r3, r3, r2
 80039dc:	18cb      	adds	r3, r1, r3
 80039de:	3317      	adds	r3, #23
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	2204      	movs	r2, #4
 80039e4:	4013      	ands	r3, r2
 80039e6:	b2d9      	uxtb	r1, r3
 80039e8:	2214      	movs	r2, #20
 80039ea:	18bb      	adds	r3, r7, r2
 80039ec:	18ba      	adds	r2, r7, r2
 80039ee:	7812      	ldrb	r2, [r2, #0]
 80039f0:	188a      	adds	r2, r1, r2
 80039f2:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < SBUS_JITTER_ARRAY; i++)
 80039f4:	183b      	adds	r3, r7, r0
 80039f6:	781a      	ldrb	r2, [r3, #0]
 80039f8:	183b      	adds	r3, r7, r0
 80039fa:	3201      	adds	r2, #1
 80039fc:	701a      	strb	r2, [r3, #0]
 80039fe:	2313      	movs	r3, #19
 8003a00:	18fb      	adds	r3, r7, r3
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d9a4      	bls.n	8003952 <SBUS_JitterAverage+0x80e>
	}
	if ( ch17 > (SBUS_JITTER_ARRAY / 2) ) {
 8003a08:	2317      	movs	r3, #23
 8003a0a:	18fb      	adds	r3, r7, r3
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d903      	bls.n	8003a1a <SBUS_JitterAverage+0x8d6>
		dataSBUS.ch17 = true;
 8003a12:	4b18      	ldr	r3, [pc, #96]	; (8003a74 <SBUS_JitterAverage+0x930>)
 8003a14:	2201      	movs	r2, #1
 8003a16:	70da      	strb	r2, [r3, #3]
 8003a18:	e002      	b.n	8003a20 <SBUS_JitterAverage+0x8dc>
	} else {
		dataSBUS.ch17 = false;
 8003a1a:	4b16      	ldr	r3, [pc, #88]	; (8003a74 <SBUS_JitterAverage+0x930>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	70da      	strb	r2, [r3, #3]
	}
	if ( ch18 > (SBUS_JITTER_ARRAY / 2) ) {
 8003a20:	2316      	movs	r3, #22
 8003a22:	18fb      	adds	r3, r7, r3
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d903      	bls.n	8003a32 <SBUS_JitterAverage+0x8ee>
		dataSBUS.ch18 = true;
 8003a2a:	4b12      	ldr	r3, [pc, #72]	; (8003a74 <SBUS_JitterAverage+0x930>)
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	711a      	strb	r2, [r3, #4]
 8003a30:	e002      	b.n	8003a38 <SBUS_JitterAverage+0x8f4>
	} else {
		dataSBUS.ch18 = false;
 8003a32:	4b10      	ldr	r3, [pc, #64]	; (8003a74 <SBUS_JitterAverage+0x930>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	711a      	strb	r2, [r3, #4]
	}
	if ( fs > 0 ) {
 8003a38:	2315      	movs	r3, #21
 8003a3a:	18fb      	adds	r3, r7, r3
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d003      	beq.n	8003a4a <SBUS_JitterAverage+0x906>
		dataSBUS.failsafe = true;
 8003a42:	4b0c      	ldr	r3, [pc, #48]	; (8003a74 <SBUS_JitterAverage+0x930>)
 8003a44:	2201      	movs	r2, #1
 8003a46:	709a      	strb	r2, [r3, #2]
 8003a48:	e002      	b.n	8003a50 <SBUS_JitterAverage+0x90c>
	} else {
		dataSBUS.failsafe = false;
 8003a4a:	4b0a      	ldr	r3, [pc, #40]	; (8003a74 <SBUS_JitterAverage+0x930>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	709a      	strb	r2, [r3, #2]
	}
	if ( lf > 0 ) {
 8003a50:	2314      	movs	r3, #20
 8003a52:	18fb      	adds	r3, r7, r3
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d003      	beq.n	8003a62 <SBUS_JitterAverage+0x91e>
		dataSBUS.frameLost = true;
 8003a5a:	4b06      	ldr	r3, [pc, #24]	; (8003a74 <SBUS_JitterAverage+0x930>)
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	705a      	strb	r2, [r3, #1]
	} else {
		dataSBUS.frameLost = false;
	}

}
 8003a60:	e002      	b.n	8003a68 <SBUS_JitterAverage+0x924>
		dataSBUS.frameLost = false;
 8003a62:	4b04      	ldr	r3, [pc, #16]	; (8003a74 <SBUS_JitterAverage+0x930>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	705a      	strb	r2, [r3, #1]
}
 8003a68:	46c0      	nop			; (mov r8, r8)
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	b00b      	add	sp, #44	; 0x2c
 8003a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a70:	20000350 	.word	0x20000350
 8003a74:	2000039c 	.word	0x2000039c

08003a78 <SBUS_HandleUART>:


void SBUS_HandleUART (void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
	static uint8_t jitter = 0;			// Jitter-Smoothing Array Index

	while (UART_ReadCount(SBUS_UART) >= SBUS_PAYLOAD_LEN)
 8003a7c:	e04a      	b.n	8003b14 <SBUS_HandleUART+0x9c>
	{
		UART_Read(SBUS_UART, &rxSBUS[jitter][SBUS_HEADER_INDEX], SBUS_HEADER_LEN);
 8003a7e:	4b2b      	ldr	r3, [pc, #172]	; (8003b2c <SBUS_HandleUART+0xb4>)
 8003a80:	6818      	ldr	r0, [r3, #0]
 8003a82:	4b2b      	ldr	r3, [pc, #172]	; (8003b30 <SBUS_HandleUART+0xb8>)
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	001a      	movs	r2, r3
 8003a88:	0013      	movs	r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	189b      	adds	r3, r3, r2
 8003a8e:	009a      	lsls	r2, r3, #2
 8003a90:	189b      	adds	r3, r3, r2
 8003a92:	4a28      	ldr	r2, [pc, #160]	; (8003b34 <SBUS_HandleUART+0xbc>)
 8003a94:	189b      	adds	r3, r3, r2
 8003a96:	2201      	movs	r2, #1
 8003a98:	0019      	movs	r1, r3
 8003a9a:	f001 fa16 	bl	8004eca <UART_Read>
		if (rxSBUS[jitter][SBUS_HEADER_INDEX] == SBUS_HEADER)
 8003a9e:	4b24      	ldr	r3, [pc, #144]	; (8003b30 <SBUS_HandleUART+0xb8>)
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	0019      	movs	r1, r3
 8003aa4:	4a23      	ldr	r2, [pc, #140]	; (8003b34 <SBUS_HandleUART+0xbc>)
 8003aa6:	000b      	movs	r3, r1
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	185b      	adds	r3, r3, r1
 8003aac:	0099      	lsls	r1, r3, #2
 8003aae:	185b      	adds	r3, r3, r1
 8003ab0:	5c9b      	ldrb	r3, [r3, r2]
 8003ab2:	2bf0      	cmp	r3, #240	; 0xf0
 8003ab4:	d12e      	bne.n	8003b14 <SBUS_HandleUART+0x9c>
		{
			// Read and Decode Channel dataSBUS
			UART_Read(SBUS_UART, &rxSBUS[jitter][SBUS_DATA_INDEX], (SBUS_PAYLOAD_LEN - SBUS_HEADER_LEN));
 8003ab6:	4b1d      	ldr	r3, [pc, #116]	; (8003b2c <SBUS_HandleUART+0xb4>)
 8003ab8:	6818      	ldr	r0, [r3, #0]
 8003aba:	4b1d      	ldr	r3, [pc, #116]	; (8003b30 <SBUS_HandleUART+0xb8>)
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	001a      	movs	r2, r3
 8003ac0:	0013      	movs	r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	189b      	adds	r3, r3, r2
 8003ac6:	009a      	lsls	r2, r3, #2
 8003ac8:	189b      	adds	r3, r3, r2
 8003aca:	1c5a      	adds	r2, r3, #1
 8003acc:	4b19      	ldr	r3, [pc, #100]	; (8003b34 <SBUS_HandleUART+0xbc>)
 8003ace:	18d3      	adds	r3, r2, r3
 8003ad0:	2218      	movs	r2, #24
 8003ad2:	0019      	movs	r1, r3
 8003ad4:	f001 f9f9 	bl	8004eca <UART_Read>
			// Verify the Message Validity
			if (rxSBUS[jitter][SBUS_FOOTER_INDEX] == SBUS_FOOTER) {
 8003ad8:	4b15      	ldr	r3, [pc, #84]	; (8003b30 <SBUS_HandleUART+0xb8>)
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	0019      	movs	r1, r3
 8003ade:	4a15      	ldr	r2, [pc, #84]	; (8003b34 <SBUS_HandleUART+0xbc>)
 8003ae0:	000b      	movs	r3, r1
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	185b      	adds	r3, r3, r1
 8003ae6:	0099      	lsls	r1, r3, #2
 8003ae8:	185b      	adds	r3, r3, r1
 8003aea:	18d3      	adds	r3, r2, r3
 8003aec:	3318      	adds	r3, #24
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d10f      	bne.n	8003b14 <SBUS_HandleUART+0x9c>
				// Kick Heartbeat
				rxHeartbeatSBUS = true;
 8003af4:	4b10      	ldr	r3, [pc, #64]	; (8003b38 <SBUS_HandleUART+0xc0>)
 8003af6:	2201      	movs	r2, #1
 8003af8:	701a      	strb	r2, [r3, #0]
				//Increment Jitter Array Index
				jitter += 1;
 8003afa:	4b0d      	ldr	r3, [pc, #52]	; (8003b30 <SBUS_HandleUART+0xb8>)
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	3301      	adds	r3, #1
 8003b00:	b2da      	uxtb	r2, r3
 8003b02:	4b0b      	ldr	r3, [pc, #44]	; (8003b30 <SBUS_HandleUART+0xb8>)
 8003b04:	701a      	strb	r2, [r3, #0]
				if (jitter >= SBUS_JITTER_ARRAY) { jitter = 0; }
 8003b06:	4b0a      	ldr	r3, [pc, #40]	; (8003b30 <SBUS_HandleUART+0xb8>)
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d902      	bls.n	8003b14 <SBUS_HandleUART+0x9c>
 8003b0e:	4b08      	ldr	r3, [pc, #32]	; (8003b30 <SBUS_HandleUART+0xb8>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	701a      	strb	r2, [r3, #0]
	while (UART_ReadCount(SBUS_UART) >= SBUS_PAYLOAD_LEN)
 8003b14:	4b05      	ldr	r3, [pc, #20]	; (8003b2c <SBUS_HandleUART+0xb4>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	0018      	movs	r0, r3
 8003b1a:	f001 f9a9 	bl	8004e70 <UART_ReadCount>
 8003b1e:	0003      	movs	r3, r0
 8003b20:	2b18      	cmp	r3, #24
 8003b22:	d8ac      	bhi.n	8003a7e <SBUS_HandleUART+0x6>
			}
		}
	}
}
 8003b24:	46c0      	nop			; (mov r8, r8)
 8003b26:	46c0      	nop			; (mov r8, r8)
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	2000018c 	.word	0x2000018c
 8003b30:	200003c8 	.word	0x200003c8
 8003b34:	20000350 	.word	0x20000350
 8003b38:	2000039b 	.word	0x2000039b

08003b3c <ADC_Init>:
/*
 * PUBLIC FUNCTIONS
 */

void ADC_Init(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
	CLK_EnableADCCLK();
 8003b40:	f000 f994 	bl	8003e6c <CLK_EnableADCCLK>
	__HAL_RCC_ADC1_CLK_ENABLE();
 8003b44:	4b25      	ldr	r3, [pc, #148]	; (8003bdc <ADC_Init+0xa0>)
 8003b46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b48:	4b24      	ldr	r3, [pc, #144]	; (8003bdc <ADC_Init+0xa0>)
 8003b4a:	2180      	movs	r1, #128	; 0x80
 8003b4c:	0089      	lsls	r1, r1, #2
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	635a      	str	r2, [r3, #52]	; 0x34

	_ADC_CLOCK_PRESCALER(ADCx, ADC_CLOCK_PRESCALAR);
 8003b52:	4b23      	ldr	r3, [pc, #140]	; (8003be0 <ADC_Init+0xa4>)
 8003b54:	691a      	ldr	r2, [r3, #16]
 8003b56:	4b22      	ldr	r3, [pc, #136]	; (8003be0 <ADC_Init+0xa4>)
 8003b58:	0092      	lsls	r2, r2, #2
 8003b5a:	0892      	lsrs	r2, r2, #2
 8003b5c:	611a      	str	r2, [r3, #16]
 8003b5e:	4b21      	ldr	r3, [pc, #132]	; (8003be4 <ADC_Init+0xa8>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a21      	ldr	r2, [pc, #132]	; (8003be8 <ADC_Init+0xac>)
 8003b64:	401a      	ands	r2, r3
 8003b66:	4b1f      	ldr	r3, [pc, #124]	; (8003be4 <ADC_Init+0xa8>)
 8003b68:	2180      	movs	r1, #128	; 0x80
 8003b6a:	0309      	lsls	r1, r1, #12
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	601a      	str	r2, [r3, #0]

#ifdef ADC_CCR_LFMEN
	// Disable the low power mode
	MODIFY_REG(ADC->CCR, ADC_CCR_LFMEN, __HAL_ADC_CCR_LOWFREQUENCY(DISABLE));
 8003b70:	4b1c      	ldr	r3, [pc, #112]	; (8003be4 <ADC_Init+0xa8>)
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	4b1b      	ldr	r3, [pc, #108]	; (8003be4 <ADC_Init+0xa8>)
 8003b76:	491d      	ldr	r1, [pc, #116]	; (8003bec <ADC_Init+0xb0>)
 8003b78:	400a      	ands	r2, r1
 8003b7a:	601a      	str	r2, [r3, #0]
#endif
#ifdef ADC_CR_ADVREGEN
	// Enable the voltage regulator
	if (HAL_IS_BIT_CLR(ADCx->CR, ADC_CR_ADVREGEN))
 8003b7c:	4b18      	ldr	r3, [pc, #96]	; (8003be0 <ADC_Init+0xa4>)
 8003b7e:	689a      	ldr	r2, [r3, #8]
 8003b80:	2380      	movs	r3, #128	; 0x80
 8003b82:	055b      	lsls	r3, r3, #21
 8003b84:	4013      	ands	r3, r2
 8003b86:	d109      	bne.n	8003b9c <ADC_Init+0x60>
	{
		ADCx->CR |= ADC_CR_ADVREGEN;
 8003b88:	4b15      	ldr	r3, [pc, #84]	; (8003be0 <ADC_Init+0xa4>)
 8003b8a:	689a      	ldr	r2, [r3, #8]
 8003b8c:	4b14      	ldr	r3, [pc, #80]	; (8003be0 <ADC_Init+0xa4>)
 8003b8e:	2180      	movs	r1, #128	; 0x80
 8003b90:	0549      	lsls	r1, r1, #21
 8003b92:	430a      	orrs	r2, r1
 8003b94:	609a      	str	r2, [r3, #8]
		// Wait for regulator stability.
		US_Delay(20);
 8003b96:	2014      	movs	r0, #20
 8003b98:	f001 fab2 	bl	8005100 <US_Delay>
	}
#endif

	ADCx->CFGR1 = ADC_DATAALIGN_RIGHT
 8003b9c:	4b10      	ldr	r3, [pc, #64]	; (8003be0 <ADC_Init+0xa4>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	60da      	str	r2, [r3, #12]
		| ADC_CFGR1_AUTOWAIT(DISABLE)
		| ADC_CFGR1_AUTOOFF(DISABLE)
		| ADC_OVR_DATA_PRESERVED
		| ADC_RESOLUTION_12B;

	ADCx->CFGR2 = 0;
 8003ba2:	4b0f      	ldr	r3, [pc, #60]	; (8003be0 <ADC_Init+0xa4>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	611a      	str	r2, [r3, #16]
	// Configure the default sampling rate
	MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMPR, ADC_SMPR_DEFAULT);
 8003ba8:	4b0d      	ldr	r3, [pc, #52]	; (8003be0 <ADC_Init+0xa4>)
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	2207      	movs	r2, #7
 8003bae:	4393      	bics	r3, r2
 8003bb0:	001a      	movs	r2, r3
 8003bb2:	4b0b      	ldr	r3, [pc, #44]	; (8003be0 <ADC_Init+0xa4>)
 8003bb4:	2106      	movs	r1, #6
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	615a      	str	r2, [r3, #20]

	ADC_Calibrate();
 8003bba:	f000 f8c9 	bl	8003d50 <ADC_Calibrate>
	__HAL_ADC_ENABLE(&gADC);
 8003bbe:	4b0c      	ldr	r3, [pc, #48]	; (8003bf0 <ADC_Init+0xb4>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	689a      	ldr	r2, [r3, #8]
 8003bc4:	4b0a      	ldr	r3, [pc, #40]	; (8003bf0 <ADC_Init+0xb4>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2101      	movs	r1, #1
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	609a      	str	r2, [r3, #8]
	ADC_WaitForFlag(ADC_FLAG_RDY);
 8003bce:	2001      	movs	r0, #1
 8003bd0:	f000 f8aa 	bl	8003d28 <ADC_WaitForFlag>
}
 8003bd4:	46c0      	nop			; (mov r8, r8)
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	46c0      	nop			; (mov r8, r8)
 8003bdc:	40021000 	.word	0x40021000
 8003be0:	40012400 	.word	0x40012400
 8003be4:	40012708 	.word	0x40012708
 8003be8:	ffc3ffff 	.word	0xffc3ffff
 8003bec:	fdffffff 	.word	0xfdffffff
 8003bf0:	20000004 	.word	0x20000004

08003bf4 <ADC_Read>:
	}
}
#endif

uint32_t ADC_Read(ADC_Channel_t channel)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
	__HAL_ADC_CLEAR_FLAG(&gADC, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003bfc:	4b0d      	ldr	r3, [pc, #52]	; (8003c34 <ADC_Read+0x40>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	221c      	movs	r2, #28
 8003c02:	601a      	str	r2, [r3, #0]

	ADCx->CHSELR = channel;
 8003c04:	4b0c      	ldr	r3, [pc, #48]	; (8003c38 <ADC_Read+0x44>)
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	629a      	str	r2, [r3, #40]	; 0x28

	// Put it back in single shot mode.
	MODIFY_REG( ADCx->CFGR1,
 8003c0a:	4b0b      	ldr	r3, [pc, #44]	; (8003c38 <ADC_Read+0x44>)
 8003c0c:	68da      	ldr	r2, [r3, #12]
 8003c0e:	4b0a      	ldr	r3, [pc, #40]	; (8003c38 <ADC_Read+0x44>)
 8003c10:	490a      	ldr	r1, [pc, #40]	; (8003c3c <ADC_Read+0x48>)
 8003c12:	400a      	ands	r2, r1
 8003c14:	60da      	str	r2, [r3, #12]
				ADC_CFGR1_DMACFG | ADC_CFGR1_CONT | ADC_CFGR1_DMAEN,
				ADC_CFGR1_CONTINUOUS(DISABLE) | ADC_CFGR1_DMACONTREQ(DISABLE)
			);

	ADCx->CR |= ADC_CR_ADSTART;
 8003c16:	4b08      	ldr	r3, [pc, #32]	; (8003c38 <ADC_Read+0x44>)
 8003c18:	689a      	ldr	r2, [r3, #8]
 8003c1a:	4b07      	ldr	r3, [pc, #28]	; (8003c38 <ADC_Read+0x44>)
 8003c1c:	2104      	movs	r1, #4
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	609a      	str	r2, [r3, #8]

	ADC_WaitForFlag(ADC_FLAG_EOC);
 8003c22:	2004      	movs	r0, #4
 8003c24:	f000 f880 	bl	8003d28 <ADC_WaitForFlag>

	return ADCx->DR;
 8003c28:	4b03      	ldr	r3, [pc, #12]	; (8003c38 <ADC_Read+0x44>)
 8003c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003c2c:	0018      	movs	r0, r3
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	b002      	add	sp, #8
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	20000004 	.word	0x20000004
 8003c38:	40012400 	.word	0x40012400
 8003c3c:	ffffdffc 	.word	0xffffdffc

08003c40 <AIN_AinToDivider>:
	__HAL_RCC_ADC1_CLK_DISABLE();
	CLK_DisableADCCLK();
}

uint32_t AIN_AinToDivider(uint32_t ain, uint32_t rlow, uint32_t rhigh)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]
	return AIN_AinToMv(ain) * (rhigh + rlow) / rlow;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	0018      	movs	r0, r3
 8003c50:	f000 f80e 	bl	8003c70 <AIN_AinToMv>
 8003c54:	0001      	movs	r1, r0
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	18d3      	adds	r3, r2, r3
 8003c5c:	434b      	muls	r3, r1
 8003c5e:	68b9      	ldr	r1, [r7, #8]
 8003c60:	0018      	movs	r0, r3
 8003c62:	f7fc fa51 	bl	8000108 <__udivsi3>
 8003c66:	0003      	movs	r3, r0
}
 8003c68:	0018      	movs	r0, r3
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	b004      	add	sp, #16
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <AIN_AinToMv>:

uint32_t AIN_AinToMv(uint32_t ain)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
	return (ain * ADC_VREF) / ADC_MAX;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a05      	ldr	r2, [pc, #20]	; (8003c90 <AIN_AinToMv+0x20>)
 8003c7c:	4353      	muls	r3, r2
 8003c7e:	4905      	ldr	r1, [pc, #20]	; (8003c94 <AIN_AinToMv+0x24>)
 8003c80:	0018      	movs	r0, r3
 8003c82:	f7fc fa41 	bl	8000108 <__udivsi3>
 8003c86:	0003      	movs	r3, r0
}
 8003c88:	0018      	movs	r0, r3
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	b002      	add	sp, #8
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	00000ce4 	.word	0x00000ce4
 8003c94:	00000fff 	.word	0x00000fff

08003c98 <ADC_ReadDieTemp>:

int32_t ADC_ReadDieTemp(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
	ADC->CCR |= ADC_CCR_TSEN;
 8003c9e:	4b1c      	ldr	r3, [pc, #112]	; (8003d10 <ADC_ReadDieTemp+0x78>)
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	4b1b      	ldr	r3, [pc, #108]	; (8003d10 <ADC_ReadDieTemp+0x78>)
 8003ca4:	2180      	movs	r1, #128	; 0x80
 8003ca6:	0409      	lsls	r1, r1, #16
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	601a      	str	r2, [r3, #0]
	US_Delay(10);
 8003cac:	200a      	movs	r0, #10
 8003cae:	f001 fa27 	bl	8005100 <US_Delay>
	int32_t ain = ADC_Read(ADC_Channel_Temp);
 8003cb2:	2380      	movs	r3, #128	; 0x80
 8003cb4:	02db      	lsls	r3, r3, #11
 8003cb6:	0018      	movs	r0, r3
 8003cb8:	f7ff ff9c 	bl	8003bf4 <ADC_Read>
 8003cbc:	0003      	movs	r3, r0
 8003cbe:	607b      	str	r3, [r7, #4]
	ADC->CCR &= ~ADC_CCR_TSEN;
 8003cc0:	4b13      	ldr	r3, [pc, #76]	; (8003d10 <ADC_ReadDieTemp+0x78>)
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	4b12      	ldr	r3, [pc, #72]	; (8003d10 <ADC_ReadDieTemp+0x78>)
 8003cc6:	4913      	ldr	r1, [pc, #76]	; (8003d14 <ADC_ReadDieTemp+0x7c>)
 8003cc8:	400a      	ands	r2, r1
 8003cca:	601a      	str	r2, [r3, #0]

	// The temp sensor is not ratiometric, so the vref must be adjusted for.
	ain = ain * ADC_VREF / TS_CAL_VREF;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a12      	ldr	r2, [pc, #72]	; (8003d18 <ADC_ReadDieTemp+0x80>)
 8003cd0:	4353      	muls	r3, r2
 8003cd2:	4912      	ldr	r1, [pc, #72]	; (8003d1c <ADC_ReadDieTemp+0x84>)
 8003cd4:	0018      	movs	r0, r3
 8003cd6:	f7fc faa1 	bl	800021c <__divsi3>
 8003cda:	0003      	movs	r3, r0
 8003cdc:	607b      	str	r3, [r7, #4]
	ain = ((ain - TS_CAL1_AIN) * (TS_CAL2_DEG - TS_CAL1_DEG) / (TS_CAL2_AIN - TS_CAL1_AIN)) + TS_CAL1_DEG;
 8003cde:	4b10      	ldr	r3, [pc, #64]	; (8003d20 <ADC_ReadDieTemp+0x88>)
 8003ce0:	881b      	ldrh	r3, [r3, #0]
 8003ce2:	001a      	movs	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	1a9b      	subs	r3, r3, r2
 8003ce8:	2264      	movs	r2, #100	; 0x64
 8003cea:	4353      	muls	r3, r2
 8003cec:	4a0d      	ldr	r2, [pc, #52]	; (8003d24 <ADC_ReadDieTemp+0x8c>)
 8003cee:	8812      	ldrh	r2, [r2, #0]
 8003cf0:	0011      	movs	r1, r2
 8003cf2:	4a0b      	ldr	r2, [pc, #44]	; (8003d20 <ADC_ReadDieTemp+0x88>)
 8003cf4:	8812      	ldrh	r2, [r2, #0]
 8003cf6:	1a8a      	subs	r2, r1, r2
 8003cf8:	0011      	movs	r1, r2
 8003cfa:	0018      	movs	r0, r3
 8003cfc:	f7fc fa8e 	bl	800021c <__divsi3>
 8003d00:	0003      	movs	r3, r0
 8003d02:	331e      	adds	r3, #30
 8003d04:	607b      	str	r3, [r7, #4]
//	ain = ((ain - 665) * (TS_CAL2_DEG - TS_CAL1_DEG) / (897 - 665)) + TS_CAL1_DEG;
	return ain;
 8003d06:	687b      	ldr	r3, [r7, #4]
}
 8003d08:	0018      	movs	r0, r3
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	b002      	add	sp, #8
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	40012708 	.word	0x40012708
 8003d14:	ff7fffff 	.word	0xff7fffff
 8003d18:	00000ce4 	.word	0x00000ce4
 8003d1c:	00000bb8 	.word	0x00000bb8
 8003d20:	1ff8007a 	.word	0x1ff8007a
 8003d24:	1ff8007e 	.word	0x1ff8007e

08003d28 <ADC_WaitForFlag>:
		while(ADCx->CR & ADC_CR_ADSTART);
	}
}

static void ADC_WaitForFlag(uint32_t flag)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
	while (!__HAL_ADC_GET_FLAG(&gADC, flag));
 8003d30:	46c0      	nop			; (mov r8, r8)
 8003d32:	4b06      	ldr	r3, [pc, #24]	; (8003d4c <ADC_WaitForFlag+0x24>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d1f7      	bne.n	8003d32 <ADC_WaitForFlag+0xa>
}
 8003d42:	46c0      	nop			; (mov r8, r8)
 8003d44:	46c0      	nop			; (mov r8, r8)
 8003d46:	46bd      	mov	sp, r7
 8003d48:	b002      	add	sp, #8
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	20000004 	.word	0x20000004

08003d50 <ADC_Calibrate>:

static void ADC_Calibrate(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	af00      	add	r7, sp, #0
	// Note, ADC must be disabled for this to occurr
	ADCx->CR |= ADC_CR_ADCAL;
 8003d54:	4b07      	ldr	r3, [pc, #28]	; (8003d74 <ADC_Calibrate+0x24>)
 8003d56:	689a      	ldr	r2, [r3, #8]
 8003d58:	4b06      	ldr	r3, [pc, #24]	; (8003d74 <ADC_Calibrate+0x24>)
 8003d5a:	2180      	movs	r1, #128	; 0x80
 8003d5c:	0609      	lsls	r1, r1, #24
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	609a      	str	r2, [r3, #8]
	while(ADCx->CR & ADC_CR_ADCAL);
 8003d62:	46c0      	nop			; (mov r8, r8)
 8003d64:	4b03      	ldr	r3, [pc, #12]	; (8003d74 <ADC_Calibrate+0x24>)
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	dbfb      	blt.n	8003d64 <ADC_Calibrate+0x14>
}
 8003d6c:	46c0      	nop			; (mov r8, r8)
 8003d6e:	46c0      	nop			; (mov r8, r8)
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	40012400 	.word	0x40012400

08003d78 <CLK_InitSYSCLK>:
/*
 * PUBLIC FUNCTIONS
 */

void CLK_InitSYSCLK(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
	__HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 8003d7c:	4b33      	ldr	r3, [pc, #204]	; (8003e4c <CLK_InitSYSCLK+0xd4>)
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	4b32      	ldr	r3, [pc, #200]	; (8003e4c <CLK_InitSYSCLK+0xd4>)
 8003d82:	2101      	movs	r1, #1
 8003d84:	430a      	orrs	r2, r1
 8003d86:	601a      	str	r2, [r3, #0]
#ifdef CLK_USE_HSE
	__HAL_RCC_HSE_CONFIG(RCC_HSE_ON);
	while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U);
#endif
#ifdef CLK_USE_HSI
	__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_HSICALIBRATION_DEFAULT);
 8003d88:	4b31      	ldr	r3, [pc, #196]	; (8003e50 <CLK_InitSYSCLK+0xd8>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	4a31      	ldr	r2, [pc, #196]	; (8003e54 <CLK_InitSYSCLK+0xdc>)
 8003d8e:	401a      	ands	r2, r3
 8003d90:	4b2f      	ldr	r3, [pc, #188]	; (8003e50 <CLK_InitSYSCLK+0xd8>)
 8003d92:	2180      	movs	r1, #128	; 0x80
 8003d94:	0149      	lsls	r1, r1, #5
 8003d96:	430a      	orrs	r2, r1
 8003d98:	605a      	str	r2, [r3, #4]
	__HAL_RCC_HSI_ENABLE();
 8003d9a:	4b2d      	ldr	r3, [pc, #180]	; (8003e50 <CLK_InitSYSCLK+0xd8>)
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	4b2c      	ldr	r3, [pc, #176]	; (8003e50 <CLK_InitSYSCLK+0xd8>)
 8003da0:	2101      	movs	r1, #1
 8003da2:	430a      	orrs	r2, r1
 8003da4:	601a      	str	r2, [r3, #0]
	while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U);
 8003da6:	46c0      	nop			; (mov r8, r8)
 8003da8:	4b29      	ldr	r3, [pc, #164]	; (8003e50 <CLK_InitSYSCLK+0xd8>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2204      	movs	r2, #4
 8003dae:	4013      	ands	r3, r2
 8003db0:	d0fa      	beq.n	8003da8 <CLK_InitSYSCLK+0x30>
	__HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_MSICALIBRATION_DEFAULT);
#endif

#ifdef CLK_USE_PLL
	// PLL must be disables for configuration.
	__HAL_RCC_PLL_DISABLE();
 8003db2:	4b27      	ldr	r3, [pc, #156]	; (8003e50 <CLK_InitSYSCLK+0xd8>)
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	4b26      	ldr	r3, [pc, #152]	; (8003e50 <CLK_InitSYSCLK+0xd8>)
 8003db8:	4927      	ldr	r1, [pc, #156]	; (8003e58 <CLK_InitSYSCLK+0xe0>)
 8003dba:	400a      	ands	r2, r1
 8003dbc:	601a      	str	r2, [r3, #0]
	while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U);
 8003dbe:	46c0      	nop			; (mov r8, r8)
 8003dc0:	4b23      	ldr	r3, [pc, #140]	; (8003e50 <CLK_InitSYSCLK+0xd8>)
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	2380      	movs	r3, #128	; 0x80
 8003dc6:	049b      	lsls	r3, r3, #18
 8003dc8:	4013      	ands	r3, r2
 8003dca:	d1f9      	bne.n	8003dc0 <CLK_InitSYSCLK+0x48>
	__CLK_PLL_CONFIG(CLK_PLL_SRC, CLK_PLL_MUL_CFG, CLK_PLL_DIV_CFG);
 8003dcc:	4b20      	ldr	r3, [pc, #128]	; (8003e50 <CLK_InitSYSCLK+0xd8>)
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	4a22      	ldr	r2, [pc, #136]	; (8003e5c <CLK_InitSYSCLK+0xe4>)
 8003dd2:	401a      	ands	r2, r3
 8003dd4:	4b1e      	ldr	r3, [pc, #120]	; (8003e50 <CLK_InitSYSCLK+0xd8>)
 8003dd6:	2188      	movs	r1, #136	; 0x88
 8003dd8:	03c9      	lsls	r1, r1, #15
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	60da      	str	r2, [r3, #12]
	__HAL_RCC_PLL_ENABLE();
 8003dde:	4b1c      	ldr	r3, [pc, #112]	; (8003e50 <CLK_InitSYSCLK+0xd8>)
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	4b1b      	ldr	r3, [pc, #108]	; (8003e50 <CLK_InitSYSCLK+0xd8>)
 8003de4:	2180      	movs	r1, #128	; 0x80
 8003de6:	0449      	lsls	r1, r1, #17
 8003de8:	430a      	orrs	r2, r1
 8003dea:	601a      	str	r2, [r3, #0]
	while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U);
 8003dec:	46c0      	nop			; (mov r8, r8)
 8003dee:	4b18      	ldr	r3, [pc, #96]	; (8003e50 <CLK_InitSYSCLK+0xd8>)
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	2380      	movs	r3, #128	; 0x80
 8003df4:	049b      	lsls	r3, r3, #18
 8003df6:	4013      	ands	r3, r2
 8003df8:	d0f9      	beq.n	8003dee <CLK_InitSYSCLK+0x76>
	 * CONFIGURE CLOCKS
	 * Select the sources and dividers for internal clocks
	 */

	// Configure AHBCLK divider
	MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003dfa:	4b15      	ldr	r3, [pc, #84]	; (8003e50 <CLK_InitSYSCLK+0xd8>)
 8003dfc:	68da      	ldr	r2, [r3, #12]
 8003dfe:	4b14      	ldr	r3, [pc, #80]	; (8003e50 <CLK_InitSYSCLK+0xd8>)
 8003e00:	21f0      	movs	r1, #240	; 0xf0
 8003e02:	438a      	bics	r2, r1
 8003e04:	60da      	str	r2, [r3, #12]

	// Apply SYSCLK source
	__HAL_RCC_SYSCLK_CONFIG(CLK_SYSCLK_SRC);
 8003e06:	4b12      	ldr	r3, [pc, #72]	; (8003e50 <CLK_InitSYSCLK+0xd8>)
 8003e08:	68da      	ldr	r2, [r3, #12]
 8003e0a:	4b11      	ldr	r3, [pc, #68]	; (8003e50 <CLK_InitSYSCLK+0xd8>)
 8003e0c:	2103      	movs	r1, #3
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	60da      	str	r2, [r3, #12]
#elif (CLK_SYSCLK_SRC == RCC_SYSCLKSOURCE_STATUS_HSI)
	while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI);
#elif (CLK_SYSCLK_SRC == RCC_SYSCLKSOURCE_STATUS_HSE)
	while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE);
#elif (CLK_SYSCLK_SRC == RCC_SYSCLKSOURCE_PLLCLK)
	while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK);
 8003e12:	46c0      	nop			; (mov r8, r8)
 8003e14:	4b0e      	ldr	r3, [pc, #56]	; (8003e50 <CLK_InitSYSCLK+0xd8>)
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	220c      	movs	r2, #12
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	2b0c      	cmp	r3, #12
 8003e1e:	d1f9      	bne.n	8003e14 <CLK_InitSYSCLK+0x9c>
	// Configure PCLK dividers (peripheral clock)


#if defined(STM32L0)
	// STM32L0's have a second PCLK. The shift by 3 is defined like this in the HAL.
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV1);
 8003e20:	4b0b      	ldr	r3, [pc, #44]	; (8003e50 <CLK_InitSYSCLK+0xd8>)
 8003e22:	68da      	ldr	r2, [r3, #12]
 8003e24:	4b0a      	ldr	r3, [pc, #40]	; (8003e50 <CLK_InitSYSCLK+0xd8>)
 8003e26:	490e      	ldr	r1, [pc, #56]	; (8003e60 <CLK_InitSYSCLK+0xe8>)
 8003e28:	400a      	ands	r2, r1
 8003e2a:	60da      	str	r2, [r3, #12]
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV1 << 3);
 8003e2c:	4b08      	ldr	r3, [pc, #32]	; (8003e50 <CLK_InitSYSCLK+0xd8>)
 8003e2e:	68da      	ldr	r2, [r3, #12]
 8003e30:	4b07      	ldr	r3, [pc, #28]	; (8003e50 <CLK_InitSYSCLK+0xd8>)
 8003e32:	490c      	ldr	r1, [pc, #48]	; (8003e64 <CLK_InitSYSCLK+0xec>)
 8003e34:	400a      	ands	r2, r1
 8003e36:	60da      	str	r2, [r3, #12]

#ifndef CLK_USE_HSI
	__HAL_RCC_HSI_DISABLE();
#endif
#if (defined(RCC_SYSCLKSOURCE_MSI) && !defined(CLK_USE_MSI))
	__HAL_RCC_MSI_DISABLE();
 8003e38:	4b05      	ldr	r3, [pc, #20]	; (8003e50 <CLK_InitSYSCLK+0xd8>)
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	4b04      	ldr	r3, [pc, #16]	; (8003e50 <CLK_InitSYSCLK+0xd8>)
 8003e3e:	490a      	ldr	r1, [pc, #40]	; (8003e68 <CLK_InitSYSCLK+0xf0>)
 8003e40:	400a      	ands	r2, r1
 8003e42:	601a      	str	r2, [r3, #0]
#endif
}
 8003e44:	46c0      	nop			; (mov r8, r8)
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	46c0      	nop			; (mov r8, r8)
 8003e4c:	40022000 	.word	0x40022000
 8003e50:	40021000 	.word	0x40021000
 8003e54:	ffffe0ff 	.word	0xffffe0ff
 8003e58:	feffffff 	.word	0xfeffffff
 8003e5c:	ff02ffff 	.word	0xff02ffff
 8003e60:	fffff8ff 	.word	0xfffff8ff
 8003e64:	ffffc7ff 	.word	0xffffc7ff
 8003e68:	fffffeff 	.word	0xfffffeff

08003e6c <CLK_EnableADCCLK>:
	__HAL_RCC_LSI_DISABLE();
#endif
}

void CLK_EnableADCCLK(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0
	// ADC CLK is driven off the HSI on STM32L0
#if defined(STM32L0) && !defined(CLK_USE_HSI)
	__HAL_RCC_HSI_ENABLE();
	while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0);
#endif
}
 8003e70:	46c0      	nop			; (mov r8, r8)
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
	...

08003e78 <CORE_GetTick>:
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	af00      	add	r7, sp, #0
	return gTicks;
 8003e7c:	4b02      	ldr	r3, [pc, #8]	; (8003e88 <CORE_GetTick+0x10>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
}
 8003e80:	0018      	movs	r0, r3
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	46c0      	nop			; (mov r8, r8)
 8003e88:	200003cc 	.word	0x200003cc

08003e8c <GPIO_Deinit>:
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
	GPIO_Init(gpio, pin, GPIO_Mode_Analog);
 8003e96:	6839      	ldr	r1, [r7, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2203      	movs	r2, #3
 8003e9c:	0018      	movs	r0, r3
 8003e9e:	f000 f9f7 	bl	8004290 <GPIO_Init>
}
 8003ea2:	46c0      	nop			; (mov r8, r8)
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	b002      	add	sp, #8
 8003ea8:	bd80      	pop	{r7, pc}
	...

08003eac <CLK_GetHCLKFreq>:
/*
 * INLINE FUNCTION DEFINITIONS
 */

static inline uint32_t CLK_GetHCLKFreq(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	af00      	add	r7, sp, #0
	return CLK_SYSCLK_FREQ;
 8003eb0:	4b01      	ldr	r3, [pc, #4]	; (8003eb8 <CLK_GetHCLKFreq+0xc>)
}
 8003eb2:	0018      	movs	r0, r3
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	01e84800 	.word	0x01e84800

08003ebc <CORE_Init>:
/*
 * PUBLIC FUNCTIONS
 */

void CORE_Init(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0
#if defined(STM32L0)
	__HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003ec0:	4b15      	ldr	r3, [pc, #84]	; (8003f18 <CORE_Init+0x5c>)
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	4b14      	ldr	r3, [pc, #80]	; (8003f18 <CORE_Init+0x5c>)
 8003ec6:	2140      	movs	r1, #64	; 0x40
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	601a      	str	r2, [r3, #0]

#elif defined(STM32F0)
	__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ecc:	4b13      	ldr	r3, [pc, #76]	; (8003f1c <CORE_Init+0x60>)
 8003ece:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ed0:	4b12      	ldr	r3, [pc, #72]	; (8003f1c <CORE_Init+0x60>)
 8003ed2:	2101      	movs	r1, #1
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_RCC_PWR_CLK_ENABLE();
 8003ed8:	4b10      	ldr	r3, [pc, #64]	; (8003f1c <CORE_Init+0x60>)
 8003eda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003edc:	4b0f      	ldr	r3, [pc, #60]	; (8003f1c <CORE_Init+0x60>)
 8003ede:	2180      	movs	r1, #128	; 0x80
 8003ee0:	0549      	lsls	r1, r1, #21
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	639a      	str	r2, [r3, #56]	; 0x38
#ifdef STM32L0
#ifndef USB_ENABLE
	// This seems to disrupt USB. Future investigation needed.
	SET_BIT(PWR->CR, PWR_CR_ULP | PWR_CR_FWU); // Enable Ultra low power mode & Fast wakeup
 8003ee6:	4b0e      	ldr	r3, [pc, #56]	; (8003f20 <CORE_Init+0x64>)
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	4b0d      	ldr	r3, [pc, #52]	; (8003f20 <CORE_Init+0x64>)
 8003eec:	21c0      	movs	r1, #192	; 0xc0
 8003eee:	00c9      	lsls	r1, r1, #3
 8003ef0:	430a      	orrs	r2, r1
 8003ef2:	601a      	str	r2, [r3, #0]
#endif
	__HAL_PWR_VOLTAGESCALING_CONFIG(CORE_VOLTAGE_RANGE);
 8003ef4:	4b0a      	ldr	r3, [pc, #40]	; (8003f20 <CORE_Init+0x64>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a0a      	ldr	r2, [pc, #40]	; (8003f24 <CORE_Init+0x68>)
 8003efa:	401a      	ands	r2, r3
 8003efc:	4b08      	ldr	r3, [pc, #32]	; (8003f20 <CORE_Init+0x64>)
 8003efe:	2180      	movs	r1, #128	; 0x80
 8003f00:	0109      	lsls	r1, r1, #4
 8003f02:	430a      	orrs	r2, r1
 8003f04:	601a      	str	r2, [r3, #0]
#endif

	CLK_InitSYSCLK();
 8003f06:	f7ff ff37 	bl	8003d78 <CLK_InitSYSCLK>
	CORE_InitSysTick();
 8003f0a:	f000 f82e 	bl	8003f6a <CORE_InitSysTick>
	CORE_InitGPIO();
 8003f0e:	f000 f845 	bl	8003f9c <CORE_InitGPIO>
#ifdef	US_ENABLE
	US_Init();
#endif
}
 8003f12:	46c0      	nop			; (mov r8, r8)
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	40022000 	.word	0x40022000
 8003f1c:	40021000 	.word	0x40021000
 8003f20:	40007000 	.word	0x40007000
 8003f24:	ffffe7ff 	.word	0xffffe7ff

08003f28 <CORE_Idle>:

void __attribute__ ((noinline)) CORE_Idle(void)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	af00      	add	r7, sp, #0
	// The push and pop of this function protects r0 from being clobbered during interrupt.
	// I do not understand why this is not preserved by the IRQ's push/pop.
	// If this function is inlined - then the usually pushed registers can get clobbered when returning from WFI.

	// As long as systick is on, this will at least return each millisecond.
	__WFI();
 8003f2c:	bf30      	wfi
}
 8003f2e:	46c0      	nop			; (mov r8, r8)
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <CORE_Delay>:
	CLK_InitSYSCLK();
	HAL_ResumeTick();
}

void CORE_Delay(uint32_t ms)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
	ms += MS_PER_SYSTICK; // Add to guarantee a minimum delay
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	3301      	adds	r3, #1
 8003f40:	607b      	str	r3, [r7, #4]
	uint32_t start = CORE_GetTick();
 8003f42:	f7ff ff99 	bl	8003e78 <CORE_GetTick>
 8003f46:	0003      	movs	r3, r0
 8003f48:	60fb      	str	r3, [r7, #12]
	while (CORE_GetTick() - start < ms)
 8003f4a:	e001      	b.n	8003f50 <CORE_Delay+0x1c>
	{
		CORE_Idle();
 8003f4c:	f7ff ffec 	bl	8003f28 <CORE_Idle>
	while (CORE_GetTick() - start < ms)
 8003f50:	f7ff ff92 	bl	8003e78 <CORE_GetTick>
 8003f54:	0002      	movs	r2, r0
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d8f5      	bhi.n	8003f4c <CORE_Delay+0x18>
	}
}
 8003f60:	46c0      	nop			; (mov r8, r8)
 8003f62:	46c0      	nop			; (mov r8, r8)
 8003f64:	46bd      	mov	sp, r7
 8003f66:	b004      	add	sp, #16
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <CORE_InitSysTick>:
/*
 * PRIVATE FUNCTIONS
 */

void CORE_InitSysTick(void)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	af00      	add	r7, sp, #0
	HAL_SYSTICK_Config(CLK_GetHCLKFreq() / CORE_SYSTICK_FREQ);
 8003f6e:	f7ff ff9d 	bl	8003eac <CLK_GetHCLKFreq>
 8003f72:	0002      	movs	r2, r0
 8003f74:	23fa      	movs	r3, #250	; 0xfa
 8003f76:	0099      	lsls	r1, r3, #2
 8003f78:	0010      	movs	r0, r2
 8003f7a:	f7fc f8c5 	bl	8000108 <__udivsi3>
 8003f7e:	0003      	movs	r3, r0
 8003f80:	0018      	movs	r0, r3
 8003f82:	f7fd ff14 	bl	8001dae <HAL_SYSTICK_Config>
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003f86:	2301      	movs	r3, #1
 8003f88:	425b      	negs	r3, r3
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	0018      	movs	r0, r3
 8003f90:	f7fd fed8 	bl	8001d44 <HAL_NVIC_SetPriority>
}
 8003f94:	46c0      	nop			; (mov r8, r8)
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
	...

08003f9c <CORE_InitGPIO>:

void CORE_InitGPIO(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003fa2:	4b26      	ldr	r3, [pc, #152]	; (800403c <CORE_InitGPIO+0xa0>)
 8003fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fa6:	4b25      	ldr	r3, [pc, #148]	; (800403c <CORE_InitGPIO+0xa0>)
 8003fa8:	2101      	movs	r1, #1
 8003faa:	430a      	orrs	r2, r1
 8003fac:	62da      	str	r2, [r3, #44]	; 0x2c
 8003fae:	4b23      	ldr	r3, [pc, #140]	; (800403c <CORE_InitGPIO+0xa0>)
 8003fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	60fb      	str	r3, [r7, #12]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
#ifdef DEBUG
	// SWCLK and SWDIO on PA13, PA14
	GPIO_Deinit(GPIOA, GPIO_PIN_All & ~(GPIO_PIN_13 | GPIO_PIN_14));
 8003fba:	4a21      	ldr	r2, [pc, #132]	; (8004040 <CORE_InitGPIO+0xa4>)
 8003fbc:	23a0      	movs	r3, #160	; 0xa0
 8003fbe:	05db      	lsls	r3, r3, #23
 8003fc0:	0011      	movs	r1, r2
 8003fc2:	0018      	movs	r0, r3
 8003fc4:	f7ff ff62 	bl	8003e8c <GPIO_Deinit>
#else
	GPIO_Deinit(GPIOA, GPIO_PIN_All);
#endif

	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003fc8:	4b1c      	ldr	r3, [pc, #112]	; (800403c <CORE_InitGPIO+0xa0>)
 8003fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fcc:	4b1b      	ldr	r3, [pc, #108]	; (800403c <CORE_InitGPIO+0xa0>)
 8003fce:	2102      	movs	r1, #2
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	62da      	str	r2, [r3, #44]	; 0x2c
 8003fd4:	4b19      	ldr	r3, [pc, #100]	; (800403c <CORE_InitGPIO+0xa0>)
 8003fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd8:	2202      	movs	r2, #2
 8003fda:	4013      	ands	r3, r2
 8003fdc:	60bb      	str	r3, [r7, #8]
 8003fde:	68bb      	ldr	r3, [r7, #8]
	GPIO_Deinit(GPIOB, GPIO_PIN_All);
 8003fe0:	4a18      	ldr	r2, [pc, #96]	; (8004044 <CORE_InitGPIO+0xa8>)
 8003fe2:	4b19      	ldr	r3, [pc, #100]	; (8004048 <CORE_InitGPIO+0xac>)
 8003fe4:	0011      	movs	r1, r2
 8003fe6:	0018      	movs	r0, r3
 8003fe8:	f7ff ff50 	bl	8003e8c <GPIO_Deinit>

	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003fec:	4b13      	ldr	r3, [pc, #76]	; (800403c <CORE_InitGPIO+0xa0>)
 8003fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff0:	4b12      	ldr	r3, [pc, #72]	; (800403c <CORE_InitGPIO+0xa0>)
 8003ff2:	2104      	movs	r1, #4
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	62da      	str	r2, [r3, #44]	; 0x2c
 8003ff8:	4b10      	ldr	r3, [pc, #64]	; (800403c <CORE_InitGPIO+0xa0>)
 8003ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffc:	2204      	movs	r2, #4
 8003ffe:	4013      	ands	r3, r2
 8004000:	607b      	str	r3, [r7, #4]
 8004002:	687b      	ldr	r3, [r7, #4]
	GPIO_Deinit(GPIOC, GPIO_PIN_All);
 8004004:	4a0f      	ldr	r2, [pc, #60]	; (8004044 <CORE_InitGPIO+0xa8>)
 8004006:	4b11      	ldr	r3, [pc, #68]	; (800404c <CORE_InitGPIO+0xb0>)
 8004008:	0011      	movs	r1, r2
 800400a:	0018      	movs	r0, r3
 800400c:	f7ff ff3e 	bl	8003e8c <GPIO_Deinit>

#if defined(GPIOD)
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8004010:	4b0a      	ldr	r3, [pc, #40]	; (800403c <CORE_InitGPIO+0xa0>)
 8004012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004014:	4b09      	ldr	r3, [pc, #36]	; (800403c <CORE_InitGPIO+0xa0>)
 8004016:	2108      	movs	r1, #8
 8004018:	430a      	orrs	r2, r1
 800401a:	62da      	str	r2, [r3, #44]	; 0x2c
 800401c:	4b07      	ldr	r3, [pc, #28]	; (800403c <CORE_InitGPIO+0xa0>)
 800401e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004020:	2208      	movs	r2, #8
 8004022:	4013      	ands	r3, r2
 8004024:	603b      	str	r3, [r7, #0]
 8004026:	683b      	ldr	r3, [r7, #0]
	GPIO_Deinit(GPIOD, GPIO_PIN_All);
 8004028:	4a06      	ldr	r2, [pc, #24]	; (8004044 <CORE_InitGPIO+0xa8>)
 800402a:	4b09      	ldr	r3, [pc, #36]	; (8004050 <CORE_InitGPIO+0xb4>)
 800402c:	0011      	movs	r1, r2
 800402e:	0018      	movs	r0, r3
 8004030:	f7ff ff2c 	bl	8003e8c <GPIO_Deinit>
#endif
}
 8004034:	46c0      	nop			; (mov r8, r8)
 8004036:	46bd      	mov	sp, r7
 8004038:	b004      	add	sp, #16
 800403a:	bd80      	pop	{r7, pc}
 800403c:	40021000 	.word	0x40021000
 8004040:	00009fff 	.word	0x00009fff
 8004044:	0000ffff 	.word	0x0000ffff
 8004048:	50000400 	.word	0x50000400
 800404c:	50000800 	.word	0x50000800
 8004050:	50000c00 	.word	0x50000c00

08004054 <SysTick_Handler>:
/*
 * INTERRUPT ROUTINES
 */

void SysTick_Handler(void)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	af00      	add	r7, sp, #0
	gTicks += MS_PER_SYSTICK;
 8004058:	4b03      	ldr	r3, [pc, #12]	; (8004068 <SysTick_Handler+0x14>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	1c5a      	adds	r2, r3, #1
 800405e:	4b02      	ldr	r3, [pc, #8]	; (8004068 <SysTick_Handler+0x14>)
 8004060:	601a      	str	r2, [r3, #0]
	if (gTickCallback != NULL)
	{
		gTickCallback();
	}
#endif
}
 8004062:	46c0      	nop			; (mov r8, r8)
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	200003cc 	.word	0x200003cc

0800406c <EEPROM_Write>:
/*
 * PUBLIC FUNCTIONS
 */

void EEPROM_Write(uint32_t offset, const void * data, uint32_t size)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b088      	sub	sp, #32
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
	uint8_t * bytes = (uint8_t *)data;
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	61bb      	str	r3, [r7, #24]
	uint8_t * eeprom = (uint8_t *)(DATA_EEPROM_BASE + offset);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	4a15      	ldr	r2, [pc, #84]	; (80040d4 <EEPROM_Write+0x68>)
 8004080:	4694      	mov	ip, r2
 8004082:	4463      	add	r3, ip
 8004084:	617b      	str	r3, [r7, #20]

	EEPROM_Unlock();
 8004086:	f000 f83f 	bl	8004108 <EEPROM_Unlock>
	for (uint32_t i = 0; i < size; i++)
 800408a:	2300      	movs	r3, #0
 800408c:	61fb      	str	r3, [r7, #28]
 800408e:	e016      	b.n	80040be <EEPROM_Write+0x52>
	{
		if (bytes[i] != eeprom[i])
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	18d3      	adds	r3, r2, r3
 8004096:	781a      	ldrb	r2, [r3, #0]
 8004098:	6979      	ldr	r1, [r7, #20]
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	18cb      	adds	r3, r1, r3
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d009      	beq.n	80040b8 <EEPROM_Write+0x4c>
		{
			eeprom[i] = bytes[i]; // This triggers an 8 bit write operation.
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	18d2      	adds	r2, r2, r3
 80040aa:	6979      	ldr	r1, [r7, #20]
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	18cb      	adds	r3, r1, r3
 80040b0:	7812      	ldrb	r2, [r2, #0]
 80040b2:	701a      	strb	r2, [r3, #0]
			EEPROM_WaitForOperation();
 80040b4:	f000 f856 	bl	8004164 <EEPROM_WaitForOperation>
	for (uint32_t i = 0; i < size; i++)
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	3301      	adds	r3, #1
 80040bc:	61fb      	str	r3, [r7, #28]
 80040be:	69fa      	ldr	r2, [r7, #28]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d3e4      	bcc.n	8004090 <EEPROM_Write+0x24>
		}
	}
	EEPROM_Lock();
 80040c6:	f000 f83f 	bl	8004148 <EEPROM_Lock>
}
 80040ca:	46c0      	nop			; (mov r8, r8)
 80040cc:	46bd      	mov	sp, r7
 80040ce:	b008      	add	sp, #32
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	46c0      	nop			; (mov r8, r8)
 80040d4:	08080000 	.word	0x08080000

080040d8 <EEPROM_Read>:

void EEPROM_Read(uint32_t offset, void * data, uint32_t size)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
	uint8_t * eeprom = (uint8_t *)(DATA_EEPROM_BASE + offset);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	4a07      	ldr	r2, [pc, #28]	; (8004104 <EEPROM_Read+0x2c>)
 80040e8:	4694      	mov	ip, r2
 80040ea:	4463      	add	r3, ip
 80040ec:	617b      	str	r3, [r7, #20]
	memcpy(data, eeprom, size);
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	6979      	ldr	r1, [r7, #20]
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	0018      	movs	r0, r3
 80040f6:	f001 f839 	bl	800516c <memcpy>
}
 80040fa:	46c0      	nop			; (mov r8, r8)
 80040fc:	46bd      	mov	sp, r7
 80040fe:	b006      	add	sp, #24
 8004100:	bd80      	pop	{r7, pc}
 8004102:	46c0      	nop			; (mov r8, r8)
 8004104:	08080000 	.word	0x08080000

08004108 <EEPROM_Unlock>:
/*
 * PRIVATE FUNCTIONS
 */

static void EEPROM_Unlock(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800410e:	f3ef 8310 	mrs	r3, PRIMASK
 8004112:	607b      	str	r3, [r7, #4]
  return(result);
 8004114:	687b      	ldr	r3, [r7, #4]
	// This sequence must not be interrupted.
	uint32_t primask_bit = __get_PRIMASK();
 8004116:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8004118:	b672      	cpsid	i
}
 800411a:	46c0      	nop			; (mov r8, r8)
	__disable_irq();

	FLASH->PEKEYR = FLASH_PEKEY1;
 800411c:	4b07      	ldr	r3, [pc, #28]	; (800413c <EEPROM_Unlock+0x34>)
 800411e:	4a08      	ldr	r2, [pc, #32]	; (8004140 <EEPROM_Unlock+0x38>)
 8004120:	60da      	str	r2, [r3, #12]
	FLASH->PEKEYR = FLASH_PEKEY2;
 8004122:	4b06      	ldr	r3, [pc, #24]	; (800413c <EEPROM_Unlock+0x34>)
 8004124:	4a07      	ldr	r2, [pc, #28]	; (8004144 <EEPROM_Unlock+0x3c>)
 8004126:	60da      	str	r2, [r3, #12]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	f383 8810 	msr	PRIMASK, r3
}
 8004132:	46c0      	nop			; (mov r8, r8)

	__set_PRIMASK(primask_bit);
}
 8004134:	46c0      	nop			; (mov r8, r8)
 8004136:	46bd      	mov	sp, r7
 8004138:	b004      	add	sp, #16
 800413a:	bd80      	pop	{r7, pc}
 800413c:	40022000 	.word	0x40022000
 8004140:	89abcdef 	.word	0x89abcdef
 8004144:	02030405 	.word	0x02030405

08004148 <EEPROM_Lock>:

static inline void EEPROM_Lock(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	af00      	add	r7, sp, #0
	SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800414c:	4b04      	ldr	r3, [pc, #16]	; (8004160 <EEPROM_Lock+0x18>)
 800414e:	685a      	ldr	r2, [r3, #4]
 8004150:	4b03      	ldr	r3, [pc, #12]	; (8004160 <EEPROM_Lock+0x18>)
 8004152:	2101      	movs	r1, #1
 8004154:	430a      	orrs	r2, r1
 8004156:	605a      	str	r2, [r3, #4]
}
 8004158:	46c0      	nop			; (mov r8, r8)
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	46c0      	nop			; (mov r8, r8)
 8004160:	40022000 	.word	0x40022000

08004164 <EEPROM_WaitForOperation>:

static void EEPROM_WaitForOperation(void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	af00      	add	r7, sp, #0
	while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY));
 8004168:	46c0      	nop			; (mov r8, r8)
 800416a:	4b09      	ldr	r3, [pc, #36]	; (8004190 <EEPROM_WaitForOperation+0x2c>)
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	2201      	movs	r2, #1
 8004170:	4013      	ands	r3, r2
 8004172:	2b01      	cmp	r3, #1
 8004174:	d0f9      	beq.n	800416a <EEPROM_WaitForOperation+0x6>
	if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004176:	4b06      	ldr	r3, [pc, #24]	; (8004190 <EEPROM_WaitForOperation+0x2c>)
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	2202      	movs	r2, #2
 800417c:	4013      	ands	r3, r2
 800417e:	2b02      	cmp	r3, #2
 8004180:	d102      	bne.n	8004188 <EEPROM_WaitForOperation+0x24>
	{
		__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004182:	4b03      	ldr	r3, [pc, #12]	; (8004190 <EEPROM_WaitForOperation+0x2c>)
 8004184:	2202      	movs	r2, #2
 8004186:	619a      	str	r2, [r3, #24]
	}
}
 8004188:	46c0      	nop			; (mov r8, r8)
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	46c0      	nop			; (mov r8, r8)
 8004190:	40022000 	.word	0x40022000

08004194 <GPIO_Set>:
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
	gpio->BSRR = (uint32_t)pin;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	683a      	ldr	r2, [r7, #0]
 80041a2:	619a      	str	r2, [r3, #24]
}
 80041a4:	46c0      	nop			; (mov r8, r8)
 80041a6:	46bd      	mov	sp, r7
 80041a8:	b002      	add	sp, #8
 80041aa:	bd80      	pop	{r7, pc}

080041ac <GPIO_Reset>:
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
	gpio->BRR = (uint32_t)pin;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	683a      	ldr	r2, [r7, #0]
 80041ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80041bc:	46c0      	nop			; (mov r8, r8)
 80041be:	46bd      	mov	sp, r7
 80041c0:	b002      	add	sp, #8
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <GPIO_Write>:
/*
 * PUBLIC FUNCTIONS
 */

void GPIO_Write(GPIO_t * gpio, uint32_t pin, GPIO_State_t state)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	1dfb      	adds	r3, r7, #7
 80041d0:	701a      	strb	r2, [r3, #0]
	if (state)
 80041d2:	1dfb      	adds	r3, r7, #7
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d006      	beq.n	80041e8 <GPIO_Write+0x24>
	{
		GPIO_Set(gpio, pin);
 80041da:	68ba      	ldr	r2, [r7, #8]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	0011      	movs	r1, r2
 80041e0:	0018      	movs	r0, r3
 80041e2:	f7ff ffd7 	bl	8004194 <GPIO_Set>
	}
	else
	{
		GPIO_Reset(gpio, pin);
	}
}
 80041e6:	e005      	b.n	80041f4 <GPIO_Write+0x30>
		GPIO_Reset(gpio, pin);
 80041e8:	68ba      	ldr	r2, [r7, #8]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	0011      	movs	r1, r2
 80041ee:	0018      	movs	r0, r3
 80041f0:	f7ff ffdc 	bl	80041ac <GPIO_Reset>
}
 80041f4:	46c0      	nop			; (mov r8, r8)
 80041f6:	46bd      	mov	sp, r7
 80041f8:	b004      	add	sp, #16
 80041fa:	bd80      	pop	{r7, pc}

080041fc <GPIO_EnableAlternate>:

void GPIO_EnableAlternate(GPIO_t * gpio, uint32_t pin, GPIO_Flag_t flags, uint32_t af)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	603b      	str	r3, [r7, #0]
 8004208:	1dbb      	adds	r3, r7, #6
 800420a:	801a      	strh	r2, [r3, #0]
	GPIO_ConfigAlternate(gpio, pin, af);
 800420c:	683a      	ldr	r2, [r7, #0]
 800420e:	68b9      	ldr	r1, [r7, #8]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	0018      	movs	r0, r3
 8004214:	f000 f8ab 	bl	800436e <GPIO_ConfigAlternate>
	GPIO_Init(gpio, pin, GPIO_Mode_Alternate | GPIO_Speed_High | flags);
 8004218:	1dbb      	adds	r3, r7, #6
 800421a:	881b      	ldrh	r3, [r3, #0]
 800421c:	4a05      	ldr	r2, [pc, #20]	; (8004234 <GPIO_EnableAlternate+0x38>)
 800421e:	4313      	orrs	r3, r2
 8004220:	b29a      	uxth	r2, r3
 8004222:	68b9      	ldr	r1, [r7, #8]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	0018      	movs	r0, r3
 8004228:	f000 f832 	bl	8004290 <GPIO_Init>
}
 800422c:	46c0      	nop			; (mov r8, r8)
 800422e:	46bd      	mov	sp, r7
 8004230:	b004      	add	sp, #16
 8004232:	bd80      	pop	{r7, pc}
 8004234:	00000302 	.word	0x00000302

08004238 <GPIO_OnChange>:

#ifdef GPIO_USE_IRQS
void GPIO_OnChange(GPIO_t * gpio, uint32_t pin, GPIO_IT_Dir_t dir, VoidFunction_t callback)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b086      	sub	sp, #24
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	603b      	str	r3, [r7, #0]
 8004244:	1dfb      	adds	r3, r7, #7
 8004246:	701a      	strb	r2, [r3, #0]
	int n = 0;
 8004248:	2300      	movs	r3, #0
 800424a:	617b      	str	r3, [r7, #20]
	while ((pin & (1 << n)) == 0) { n++; }
 800424c:	e002      	b.n	8004254 <GPIO_OnChange+0x1c>
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	3301      	adds	r3, #1
 8004252:	617b      	str	r3, [r7, #20]
 8004254:	2201      	movs	r2, #1
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	409a      	lsls	r2, r3
 800425a:	0013      	movs	r3, r2
 800425c:	001a      	movs	r2, r3
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	4013      	ands	r3, r2
 8004262:	d0f4      	beq.n	800424e <GPIO_OnChange+0x16>

	gCallback[n] = callback;
 8004264:	4b09      	ldr	r3, [pc, #36]	; (800428c <GPIO_OnChange+0x54>)
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	0092      	lsls	r2, r2, #2
 800426a:	6839      	ldr	r1, [r7, #0]
 800426c:	50d1      	str	r1, [r2, r3]

	GPIO_ConfigInterrupt(gpio, n, dir);
 800426e:	1dfb      	adds	r3, r7, #7
 8004270:	781a      	ldrb	r2, [r3, #0]
 8004272:	6979      	ldr	r1, [r7, #20]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	0018      	movs	r0, r3
 8004278:	f000 f8b2 	bl	80043e0 <GPIO_ConfigInterrupt>

	EXTIx_EnableIRQn(n);
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	0018      	movs	r0, r3
 8004280:	f000 f99e 	bl	80045c0 <EXTIx_EnableIRQn>
}
 8004284:	46c0      	nop			; (mov r8, r8)
 8004286:	46bd      	mov	sp, r7
 8004288:	b006      	add	sp, #24
 800428a:	bd80      	pop	{r7, pc}
 800428c:	200003d0 	.word	0x200003d0

08004290 <GPIO_Init>:
#endif //GPIO_USE_IRQS

void GPIO_Init(GPIO_t * gpio, uint32_t pins, GPIO_Flag_t mode)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b088      	sub	sp, #32
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	1dbb      	adds	r3, r7, #6
 800429c:	801a      	strh	r2, [r3, #0]
	uint32_t pinmask = GPIO_SWARBitDouble(pins);
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	0018      	movs	r0, r3
 80042a2:	f000 f933 	bl	800450c <GPIO_SWARBitDouble>
 80042a6:	0003      	movs	r3, r0
 80042a8:	61fb      	str	r3, [r7, #28]

	GPIO_Mode_t dir = mode & GPIO_Mode_MASK;
 80042aa:	1dbb      	adds	r3, r7, #6
 80042ac:	881b      	ldrh	r3, [r3, #0]
 80042ae:	b2da      	uxtb	r2, r3
 80042b0:	201b      	movs	r0, #27
 80042b2:	183b      	adds	r3, r7, r0
 80042b4:	2103      	movs	r1, #3
 80042b6:	400a      	ands	r2, r1
 80042b8:	701a      	strb	r2, [r3, #0]

	if (dir == GPIO_Mode_Alternate || dir == GPIO_Mode_Output)
 80042ba:	183b      	adds	r3, r7, r0
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d003      	beq.n	80042ca <GPIO_Init+0x3a>
 80042c2:	183b      	adds	r3, r7, r0
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d126      	bne.n	8004318 <GPIO_Init+0x88>
	{
		uint32_t speed = (mode & GPIO_Speed_MASK) >> GPIOCFG_SPEED_POS;
 80042ca:	1dbb      	adds	r3, r7, #6
 80042cc:	881b      	ldrh	r3, [r3, #0]
 80042ce:	121b      	asrs	r3, r3, #8
 80042d0:	001a      	movs	r2, r3
 80042d2:	2303      	movs	r3, #3
 80042d4:	4013      	ands	r3, r2
 80042d6:	617b      	str	r3, [r7, #20]
		MODIFY_REG( gpio->OSPEEDR, pinmask * GPIO_OSPEEDER_OSPEED0, pinmask * speed );
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6899      	ldr	r1, [r3, #8]
 80042dc:	69fa      	ldr	r2, [r7, #28]
 80042de:	0013      	movs	r3, r2
 80042e0:	005b      	lsls	r3, r3, #1
 80042e2:	189b      	adds	r3, r3, r2
 80042e4:	43db      	mvns	r3, r3
 80042e6:	400b      	ands	r3, r1
 80042e8:	001a      	movs	r2, r3
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	6979      	ldr	r1, [r7, #20]
 80042ee:	434b      	muls	r3, r1
 80042f0:	431a      	orrs	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	609a      	str	r2, [r3, #8]
		MODIFY_REG( gpio->OTYPER, pins, (mode & GPIO_Flag_OpenDrain) ? pins : 0 );
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	43d2      	mvns	r2, r2
 80042fe:	401a      	ands	r2, r3
 8004300:	1dbb      	adds	r3, r7, #6
 8004302:	8819      	ldrh	r1, [r3, #0]
 8004304:	2380      	movs	r3, #128	; 0x80
 8004306:	015b      	lsls	r3, r3, #5
 8004308:	400b      	ands	r3, r1
 800430a:	d001      	beq.n	8004310 <GPIO_Init+0x80>
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	e000      	b.n	8004312 <GPIO_Init+0x82>
 8004310:	2300      	movs	r3, #0
 8004312:	431a      	orrs	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	605a      	str	r2, [r3, #4]
	}

	MODIFY_REG( gpio->MODER, pinmask * GPIO_MODER_MODE0, pinmask * dir);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6819      	ldr	r1, [r3, #0]
 800431c:	69fa      	ldr	r2, [r7, #28]
 800431e:	0013      	movs	r3, r2
 8004320:	005b      	lsls	r3, r3, #1
 8004322:	189b      	adds	r3, r3, r2
 8004324:	43db      	mvns	r3, r3
 8004326:	400b      	ands	r3, r1
 8004328:	001a      	movs	r2, r3
 800432a:	231b      	movs	r3, #27
 800432c:	18fb      	adds	r3, r7, r3
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	69f9      	ldr	r1, [r7, #28]
 8004332:	434b      	muls	r3, r1
 8004334:	431a      	orrs	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	601a      	str	r2, [r3, #0]
	uint32_t pull = (mode & GPIO_Pull_MASK) >> GPIOCFG_PULL_POS;
 800433a:	1dbb      	adds	r3, r7, #6
 800433c:	881b      	ldrh	r3, [r3, #0]
 800433e:	111b      	asrs	r3, r3, #4
 8004340:	001a      	movs	r2, r3
 8004342:	2303      	movs	r3, #3
 8004344:	4013      	ands	r3, r2
 8004346:	613b      	str	r3, [r7, #16]
	MODIFY_REG( gpio->PUPDR, pinmask * GPIO_PUPDR_PUPD0, pinmask * pull);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	68d9      	ldr	r1, [r3, #12]
 800434c:	69fa      	ldr	r2, [r7, #28]
 800434e:	0013      	movs	r3, r2
 8004350:	005b      	lsls	r3, r3, #1
 8004352:	189b      	adds	r3, r3, r2
 8004354:	43db      	mvns	r3, r3
 8004356:	400b      	ands	r3, r1
 8004358:	001a      	movs	r2, r3
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	6939      	ldr	r1, [r7, #16]
 800435e:	434b      	muls	r3, r1
 8004360:	431a      	orrs	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	60da      	str	r2, [r3, #12]
}
 8004366:	46c0      	nop			; (mov r8, r8)
 8004368:	46bd      	mov	sp, r7
 800436a:	b008      	add	sp, #32
 800436c:	bd80      	pop	{r7, pc}

0800436e <GPIO_ConfigAlternate>:
/*
 * PRIVATE FUNCTIONS
 */

static void GPIO_ConfigAlternate( GPIO_t * gpio, uint32_t pins, uint32_t af)
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b086      	sub	sp, #24
 8004372:	af00      	add	r7, sp, #0
 8004374:	60f8      	str	r0, [r7, #12]
 8004376:	60b9      	str	r1, [r7, #8]
 8004378:	607a      	str	r2, [r7, #4]
	uint32_t pos = 0;
 800437a:	2300      	movs	r3, #0
 800437c:	617b      	str	r3, [r7, #20]
	while (pins)
 800437e:	e026      	b.n	80043ce <GPIO_ConfigAlternate+0x60>
	{
		if (pins & 0x1)
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	2201      	movs	r2, #1
 8004384:	4013      	ands	r3, r2
 8004386:	d01c      	beq.n	80043c2 <GPIO_ConfigAlternate+0x54>
		{
			uint32_t alt_offset = (pos & 0x7) * 4;
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	2207      	movs	r2, #7
 800438c:	4013      	ands	r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	613b      	str	r3, [r7, #16]
			MODIFY_REG(gpio->AFR[pos >> 3], (0xF << alt_offset), (af << alt_offset));
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	08da      	lsrs	r2, r3, #3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	3208      	adds	r2, #8
 800439a:	0092      	lsls	r2, r2, #2
 800439c:	58d3      	ldr	r3, [r2, r3]
 800439e:	210f      	movs	r1, #15
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	4091      	lsls	r1, r2
 80043a4:	000a      	movs	r2, r1
 80043a6:	43d2      	mvns	r2, r2
 80043a8:	401a      	ands	r2, r3
 80043aa:	0011      	movs	r1, r2
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	409a      	lsls	r2, r3
 80043b2:	0013      	movs	r3, r2
 80043b4:	697a      	ldr	r2, [r7, #20]
 80043b6:	08d2      	lsrs	r2, r2, #3
 80043b8:	4319      	orrs	r1, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	3208      	adds	r2, #8
 80043be:	0092      	lsls	r2, r2, #2
 80043c0:	50d1      	str	r1, [r2, r3]
		}
		pins >>= 1;
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	085b      	lsrs	r3, r3, #1
 80043c6:	60bb      	str	r3, [r7, #8]
		pos++;
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	3301      	adds	r3, #1
 80043cc:	617b      	str	r3, [r7, #20]
	while (pins)
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1d5      	bne.n	8004380 <GPIO_ConfigAlternate+0x12>
	}
}
 80043d4:	46c0      	nop			; (mov r8, r8)
 80043d6:	46c0      	nop			; (mov r8, r8)
 80043d8:	46bd      	mov	sp, r7
 80043da:	b006      	add	sp, #24
 80043dc:	bd80      	pop	{r7, pc}
	...

080043e0 <GPIO_ConfigInterrupt>:

#ifdef GPIO_USE_IRQS
static void GPIO_ConfigInterrupt( GPIO_t * gpio, int n, GPIO_IT_Dir_t dir)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b088      	sub	sp, #32
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	1dfb      	adds	r3, r7, #7
 80043ec:	701a      	strb	r2, [r3, #0]
	uint32_t pin = 1 << n;
 80043ee:	2201      	movs	r2, #1
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	409a      	lsls	r2, r3
 80043f4:	0013      	movs	r3, r2
 80043f6:	61fb      	str	r3, [r7, #28]
	if (dir == GPIO_IT_None)
 80043f8:	1dfb      	adds	r3, r7, #7
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d107      	bne.n	8004410 <GPIO_ConfigInterrupt+0x30>
	{
		// Disable the EXTI channel.
		CLEAR_BIT(EXTI->IMR, pin);
 8004400:	4b3b      	ldr	r3, [pc, #236]	; (80044f0 <GPIO_ConfigInterrupt+0x110>)
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	43d9      	mvns	r1, r3
 8004408:	4b39      	ldr	r3, [pc, #228]	; (80044f0 <GPIO_ConfigInterrupt+0x110>)
 800440a:	400a      	ands	r2, r1
 800440c:	601a      	str	r2, [r3, #0]
		// Configure the EXTI channel
		SET_BIT(EXTI->IMR, pin);
		MODIFY_REG(EXTI->RTSR, pin, (dir & GPIO_IT_Rising) ? pin : 0);
		MODIFY_REG(EXTI->FTSR, pin, (dir & GPIO_IT_Falling) ? pin : 0);
	}
}
 800440e:	e06a      	b.n	80044e6 <GPIO_ConfigInterrupt+0x106>
		__HAL_RCC_SYSCFG_CLK_ENABLE();
 8004410:	4b38      	ldr	r3, [pc, #224]	; (80044f4 <GPIO_ConfigInterrupt+0x114>)
 8004412:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004414:	4b37      	ldr	r3, [pc, #220]	; (80044f4 <GPIO_ConfigInterrupt+0x114>)
 8004416:	2101      	movs	r1, #1
 8004418:	430a      	orrs	r2, r1
 800441a:	635a      	str	r2, [r3, #52]	; 0x34
		uint32_t gpio_index = GPIO_GET_INDEX(gpio);
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	23a0      	movs	r3, #160	; 0xa0
 8004420:	05db      	lsls	r3, r3, #23
 8004422:	429a      	cmp	r2, r3
 8004424:	d019      	beq.n	800445a <GPIO_ConfigInterrupt+0x7a>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	4a33      	ldr	r2, [pc, #204]	; (80044f8 <GPIO_ConfigInterrupt+0x118>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d013      	beq.n	8004456 <GPIO_ConfigInterrupt+0x76>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	4a32      	ldr	r2, [pc, #200]	; (80044fc <GPIO_ConfigInterrupt+0x11c>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d00d      	beq.n	8004452 <GPIO_ConfigInterrupt+0x72>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	4a31      	ldr	r2, [pc, #196]	; (8004500 <GPIO_ConfigInterrupt+0x120>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d007      	beq.n	800444e <GPIO_ConfigInterrupt+0x6e>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	4a30      	ldr	r2, [pc, #192]	; (8004504 <GPIO_ConfigInterrupt+0x124>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d101      	bne.n	800444a <GPIO_ConfigInterrupt+0x6a>
 8004446:	2305      	movs	r3, #5
 8004448:	e008      	b.n	800445c <GPIO_ConfigInterrupt+0x7c>
 800444a:	2306      	movs	r3, #6
 800444c:	e006      	b.n	800445c <GPIO_ConfigInterrupt+0x7c>
 800444e:	2303      	movs	r3, #3
 8004450:	e004      	b.n	800445c <GPIO_ConfigInterrupt+0x7c>
 8004452:	2302      	movs	r3, #2
 8004454:	e002      	b.n	800445c <GPIO_ConfigInterrupt+0x7c>
 8004456:	2301      	movs	r3, #1
 8004458:	e000      	b.n	800445c <GPIO_ConfigInterrupt+0x7c>
 800445a:	2300      	movs	r3, #0
 800445c:	61bb      	str	r3, [r7, #24]
		uint32_t offset = (n & 0x3) * 4;
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	2203      	movs	r2, #3
 8004462:	4013      	ands	r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	617b      	str	r3, [r7, #20]
		MODIFY_REG(SYSCFG->EXTICR[n >> 2], 0xF << offset, gpio_index << offset);
 8004468:	4a27      	ldr	r2, [pc, #156]	; (8004508 <GPIO_ConfigInterrupt+0x128>)
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	109b      	asrs	r3, r3, #2
 800446e:	3302      	adds	r3, #2
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	589b      	ldr	r3, [r3, r2]
 8004474:	210f      	movs	r1, #15
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	4091      	lsls	r1, r2
 800447a:	000a      	movs	r2, r1
 800447c:	43d2      	mvns	r2, r2
 800447e:	401a      	ands	r2, r3
 8004480:	0011      	movs	r1, r2
 8004482:	69ba      	ldr	r2, [r7, #24]
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	409a      	lsls	r2, r3
 8004488:	481f      	ldr	r0, [pc, #124]	; (8004508 <GPIO_ConfigInterrupt+0x128>)
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	109b      	asrs	r3, r3, #2
 800448e:	430a      	orrs	r2, r1
 8004490:	3302      	adds	r3, #2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	501a      	str	r2, [r3, r0]
		SET_BIT(EXTI->IMR, pin);
 8004496:	4b16      	ldr	r3, [pc, #88]	; (80044f0 <GPIO_ConfigInterrupt+0x110>)
 8004498:	6819      	ldr	r1, [r3, #0]
 800449a:	4b15      	ldr	r3, [pc, #84]	; (80044f0 <GPIO_ConfigInterrupt+0x110>)
 800449c:	69fa      	ldr	r2, [r7, #28]
 800449e:	430a      	orrs	r2, r1
 80044a0:	601a      	str	r2, [r3, #0]
		MODIFY_REG(EXTI->RTSR, pin, (dir & GPIO_IT_Rising) ? pin : 0);
 80044a2:	4b13      	ldr	r3, [pc, #76]	; (80044f0 <GPIO_ConfigInterrupt+0x110>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	69fa      	ldr	r2, [r7, #28]
 80044a8:	43d2      	mvns	r2, r2
 80044aa:	401a      	ands	r2, r3
 80044ac:	0011      	movs	r1, r2
 80044ae:	1dfb      	adds	r3, r7, #7
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	2201      	movs	r2, #1
 80044b4:	4013      	ands	r3, r2
 80044b6:	d001      	beq.n	80044bc <GPIO_ConfigInterrupt+0xdc>
 80044b8:	69fa      	ldr	r2, [r7, #28]
 80044ba:	e000      	b.n	80044be <GPIO_ConfigInterrupt+0xde>
 80044bc:	2200      	movs	r2, #0
 80044be:	4b0c      	ldr	r3, [pc, #48]	; (80044f0 <GPIO_ConfigInterrupt+0x110>)
 80044c0:	430a      	orrs	r2, r1
 80044c2:	609a      	str	r2, [r3, #8]
		MODIFY_REG(EXTI->FTSR, pin, (dir & GPIO_IT_Falling) ? pin : 0);
 80044c4:	4b0a      	ldr	r3, [pc, #40]	; (80044f0 <GPIO_ConfigInterrupt+0x110>)
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	69fa      	ldr	r2, [r7, #28]
 80044ca:	43d2      	mvns	r2, r2
 80044cc:	401a      	ands	r2, r3
 80044ce:	0011      	movs	r1, r2
 80044d0:	1dfb      	adds	r3, r7, #7
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	2202      	movs	r2, #2
 80044d6:	4013      	ands	r3, r2
 80044d8:	d001      	beq.n	80044de <GPIO_ConfigInterrupt+0xfe>
 80044da:	69fa      	ldr	r2, [r7, #28]
 80044dc:	e000      	b.n	80044e0 <GPIO_ConfigInterrupt+0x100>
 80044de:	2200      	movs	r2, #0
 80044e0:	4b03      	ldr	r3, [pc, #12]	; (80044f0 <GPIO_ConfigInterrupt+0x110>)
 80044e2:	430a      	orrs	r2, r1
 80044e4:	60da      	str	r2, [r3, #12]
}
 80044e6:	46c0      	nop			; (mov r8, r8)
 80044e8:	46bd      	mov	sp, r7
 80044ea:	b008      	add	sp, #32
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	46c0      	nop			; (mov r8, r8)
 80044f0:	40010400 	.word	0x40010400
 80044f4:	40021000 	.word	0x40021000
 80044f8:	50000400 	.word	0x50000400
 80044fc:	50000800 	.word	0x50000800
 8004500:	50000c00 	.word	0x50000c00
 8004504:	50001c00 	.word	0x50001c00
 8004508:	40010000 	.word	0x40010000

0800450c <GPIO_SWARBitDouble>:
#endif

static uint32_t GPIO_SWARBitDouble(uint32_t s)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
	s = (s & ~0xFF00FF00) | ((s & 0xFF00FF00) << 8);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a14      	ldr	r2, [pc, #80]	; (8004568 <GPIO_SWARBitDouble+0x5c>)
 8004518:	401a      	ands	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	0219      	lsls	r1, r3, #8
 800451e:	23ff      	movs	r3, #255	; 0xff
 8004520:	041b      	lsls	r3, r3, #16
 8004522:	400b      	ands	r3, r1
 8004524:	4313      	orrs	r3, r2
 8004526:	607b      	str	r3, [r7, #4]
	s = (s & ~0xF0F0F0F0) | ((s & 0xF0F0F0F0) << 4);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a10      	ldr	r2, [pc, #64]	; (800456c <GPIO_SWARBitDouble+0x60>)
 800452c:	401a      	ands	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	011b      	lsls	r3, r3, #4
 8004532:	490f      	ldr	r1, [pc, #60]	; (8004570 <GPIO_SWARBitDouble+0x64>)
 8004534:	400b      	ands	r3, r1
 8004536:	4313      	orrs	r3, r2
 8004538:	607b      	str	r3, [r7, #4]
	s = (s & ~0xCCCCCCCC) | ((s & 0xCCCCCCCC) << 2);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a0d      	ldr	r2, [pc, #52]	; (8004574 <GPIO_SWARBitDouble+0x68>)
 800453e:	401a      	ands	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	490c      	ldr	r1, [pc, #48]	; (8004578 <GPIO_SWARBitDouble+0x6c>)
 8004546:	400b      	ands	r3, r1
 8004548:	4313      	orrs	r3, r2
 800454a:	607b      	str	r3, [r7, #4]
	s = (s & ~0xAAAAAAAA) | ((s & 0xAAAAAAAA) << 1);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a0b      	ldr	r2, [pc, #44]	; (800457c <GPIO_SWARBitDouble+0x70>)
 8004550:	401a      	ands	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	490a      	ldr	r1, [pc, #40]	; (8004580 <GPIO_SWARBitDouble+0x74>)
 8004558:	400b      	ands	r3, r1
 800455a:	4313      	orrs	r3, r2
 800455c:	607b      	str	r3, [r7, #4]
	return s;
 800455e:	687b      	ldr	r3, [r7, #4]
}
 8004560:	0018      	movs	r0, r3
 8004562:	46bd      	mov	sp, r7
 8004564:	b002      	add	sp, #8
 8004566:	bd80      	pop	{r7, pc}
 8004568:	00ff00ff 	.word	0x00ff00ff
 800456c:	0f0f0f0f 	.word	0x0f0f0f0f
 8004570:	0f0f0f00 	.word	0x0f0f0f00
 8004574:	33333333 	.word	0x33333333
 8004578:	33333330 	.word	0x33333330
 800457c:	55555555 	.word	0x55555555
 8004580:	55555554 	.word	0x55555554

08004584 <EXTIx_IRQHandler>:


#ifdef GPIO_USE_IRQS
static inline void EXTIx_IRQHandler(int n)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
	if (__HAL_GPIO_EXTI_GET_IT(1 << n) != RESET)
 800458c:	4b0a      	ldr	r3, [pc, #40]	; (80045b8 <EXTIx_IRQHandler+0x34>)
 800458e:	695b      	ldr	r3, [r3, #20]
 8004590:	2101      	movs	r1, #1
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	4091      	lsls	r1, r2
 8004596:	000a      	movs	r2, r1
 8004598:	4013      	ands	r3, r2
 800459a:	d009      	beq.n	80045b0 <EXTIx_IRQHandler+0x2c>
	{
		__HAL_GPIO_EXTI_CLEAR_IT(1 << n);
 800459c:	2201      	movs	r2, #1
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	409a      	lsls	r2, r3
 80045a2:	4b05      	ldr	r3, [pc, #20]	; (80045b8 <EXTIx_IRQHandler+0x34>)
 80045a4:	615a      	str	r2, [r3, #20]
		gCallback[n]();
 80045a6:	4b05      	ldr	r3, [pc, #20]	; (80045bc <EXTIx_IRQHandler+0x38>)
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	0092      	lsls	r2, r2, #2
 80045ac:	58d3      	ldr	r3, [r2, r3]
 80045ae:	4798      	blx	r3
	}
}
 80045b0:	46c0      	nop			; (mov r8, r8)
 80045b2:	46bd      	mov	sp, r7
 80045b4:	b002      	add	sp, #8
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	40010400 	.word	0x40010400
 80045bc:	200003d0 	.word	0x200003d0

080045c0 <EXTIx_EnableIRQn>:

static void EXTIx_EnableIRQn(int n)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
	if (n <= 1)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	dc03      	bgt.n	80045d6 <EXTIx_EnableIRQn+0x16>
	{
		HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80045ce:	2005      	movs	r0, #5
 80045d0:	f7fd fbcd 	bl	8001d6e <HAL_NVIC_EnableIRQ>
	}
	else
	{
		HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
	}
}
 80045d4:	e009      	b.n	80045ea <EXTIx_EnableIRQn+0x2a>
	else if (n <= 3)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2b03      	cmp	r3, #3
 80045da:	dc03      	bgt.n	80045e4 <EXTIx_EnableIRQn+0x24>
		HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80045dc:	2006      	movs	r0, #6
 80045de:	f7fd fbc6 	bl	8001d6e <HAL_NVIC_EnableIRQ>
}
 80045e2:	e002      	b.n	80045ea <EXTIx_EnableIRQn+0x2a>
		HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80045e4:	2007      	movs	r0, #7
 80045e6:	f7fd fbc2 	bl	8001d6e <HAL_NVIC_EnableIRQ>
}
 80045ea:	46c0      	nop			; (mov r8, r8)
 80045ec:	46bd      	mov	sp, r7
 80045ee:	b002      	add	sp, #8
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <EXTI2_3_IRQHandler>:
}
#endif

#if defined(GPIO_IRQ2_ENABLE) || defined(GPIO_IRQ3_ENABLE)
void EXTI2_3_IRQHandler(void)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	af00      	add	r7, sp, #0
#ifdef GPIO_IRQ2_ENABLE
	EXTIx_IRQHandler(2);
 80045f6:	2002      	movs	r0, #2
 80045f8:	f7ff ffc4 	bl	8004584 <EXTIx_IRQHandler>
#endif
#ifdef GPIO_IRQ3_ENABLE
	EXTIx_IRQHandler(3);
#endif
}
 80045fc:	46c0      	nop			; (mov r8, r8)
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <EXTI4_15_IRQHandler>:
#if    defined(GPIO_IRQ4_ENABLE) || defined(GPIO_IRQ5_ENABLE) || defined(GPIO_IRQ6_ENABLE)   \
    || defined(GPIO_IRQ7_ENABLE) || defined(GPIO_IRQ8_ENABLE) || defined(GPIO_IRQ9_ENABLE)   \
	|| defined(GPIO_IRQ10_ENABLE) || defined(GPIO_IRQ11_ENABLE) || defined(GPIO_IRQ12_ENABLE)\
	|| defined(GPIO_IRQ13_ENABLE) || defined(GPIO_IRQ14_ENABLE) || defined(GPIO_IRQ15_ENABLE)
void EXTI4_15_IRQHandler(void)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	af00      	add	r7, sp, #0
#ifdef GPIO_IRQ4_ENABLE
	EXTIx_IRQHandler(4);
#endif
#ifdef GPIO_IRQ5_ENABLE
	EXTIx_IRQHandler(5);
 8004606:	2005      	movs	r0, #5
 8004608:	f7ff ffbc 	bl	8004584 <EXTIx_IRQHandler>
#endif
#ifdef GPIO_IRQ6_ENABLE
	EXTIx_IRQHandler(6);
 800460c:	2006      	movs	r0, #6
 800460e:	f7ff ffb9 	bl	8004584 <EXTIx_IRQHandler>
#endif
#ifdef GPIO_IRQ9_ENABLE
	EXTIx_IRQHandler(9);
#endif
#ifdef GPIO_IRQ10_ENABLE
	EXTIx_IRQHandler(10);
 8004612:	200a      	movs	r0, #10
 8004614:	f7ff ffb6 	bl	8004584 <EXTIx_IRQHandler>
#endif
#ifdef GPIO_IRQ11_ENABLE
	EXTIx_IRQHandler(11);
 8004618:	200b      	movs	r0, #11
 800461a:	f7ff ffb3 	bl	8004584 <EXTIx_IRQHandler>
	EXTIx_IRQHandler(14);
#endif
#ifdef GPIO_IRQ15_ENABLE
	EXTIx_IRQHandler(15);
#endif
}
 800461e:	46c0      	nop			; (mov r8, r8)
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <CLK_GetPCLKFreq>:

static inline uint32_t CLK_GetPCLKFreq(void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	af00      	add	r7, sp, #0
	return CLK_SYSCLK_FREQ;
 8004628:	4b01      	ldr	r3, [pc, #4]	; (8004630 <CLK_GetPCLKFreq+0xc>)
}
 800462a:	0018      	movs	r0, r3
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}
 8004630:	01e84800 	.word	0x01e84800

08004634 <TIM_Init>:
/*
 * PUBLIC FUNCTIONS
 */

void TIM_Init(TIM_t * tim, uint32_t freq, uint32_t reload)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b086      	sub	sp, #24
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
	TIMx_Init(tim);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	0018      	movs	r0, r3
 8004644:	f000 f9c6 	bl	80049d4 <TIMx_Init>

	uint32_t cr1 = tim->Instance->CR1;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	617b      	str	r3, [r7, #20]
	cr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS | TIM_CR1_CKD | TIM_CR1_ARPE);
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	4a0d      	ldr	r2, [pc, #52]	; (8004688 <TIM_Init+0x54>)
 8004654:	4013      	ands	r3, r2
 8004656:	617b      	str	r3, [r7, #20]
	cr1 |= TIM_AUTORELOAD_PRELOAD_ENABLE | TIM_CLOCKDIVISION_DIV1 | TIM_COUNTERMODE_UP;
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	2280      	movs	r2, #128	; 0x80
 800465c:	4313      	orrs	r3, r2
 800465e:	617b      	str	r3, [r7, #20]
	tim->Instance->CR1 = cr1;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	601a      	str	r2, [r3, #0]

	TIM_SetFreq(tim, freq);
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	0011      	movs	r1, r2
 800466e:	0018      	movs	r0, r3
 8004670:	f000 f80c 	bl	800468c <TIM_SetFreq>
	TIM_SetReload(tim, reload);
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	0011      	movs	r1, r2
 800467a:	0018      	movs	r0, r3
 800467c:	f000 f81d 	bl	80046ba <TIM_SetReload>
}
 8004680:	46c0      	nop			; (mov r8, r8)
 8004682:	46bd      	mov	sp, r7
 8004684:	b006      	add	sp, #24
 8004686:	bd80      	pop	{r7, pc}
 8004688:	fffffc0f 	.word	0xfffffc0f

0800468c <TIM_SetFreq>:

void TIM_SetFreq(TIM_t * tim, uint32_t freq)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
	uint32_t clk = CLK_GetPCLKFreq();
 8004696:	f7ff ffc5 	bl	8004624 <CLK_GetPCLKFreq>
 800469a:	0003      	movs	r3, r0
 800469c:	60fb      	str	r3, [r7, #12]
	tim->Instance->PSC = (clk / freq) - 1;
 800469e:	6839      	ldr	r1, [r7, #0]
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	f7fb fd31 	bl	8000108 <__udivsi3>
 80046a6:	0003      	movs	r3, r0
 80046a8:	001a      	movs	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	3a01      	subs	r2, #1
 80046b0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80046b2:	46c0      	nop			; (mov r8, r8)
 80046b4:	46bd      	mov	sp, r7
 80046b6:	b004      	add	sp, #16
 80046b8:	bd80      	pop	{r7, pc}

080046ba <TIM_SetReload>:

void TIM_SetReload(TIM_t * tim, uint32_t reload)
{
 80046ba:	b580      	push	{r7, lr}
 80046bc:	b082      	sub	sp, #8
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
 80046c2:	6039      	str	r1, [r7, #0]
	tim->Instance->ARR = reload;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	683a      	ldr	r2, [r7, #0]
 80046ca:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80046cc:	46c0      	nop			; (mov r8, r8)
 80046ce:	46bd      	mov	sp, r7
 80046d0:	b002      	add	sp, #8
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <TIM_OnReload>:

#ifdef TIM_USE_IRQS
void TIM_OnReload(TIM_t * tim, VoidFunction_t callback)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
	__HAL_TIM_ENABLE_IT(tim, TIM_IT_UPDATE);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68da      	ldr	r2, [r3, #12]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2101      	movs	r1, #1
 80046ea:	430a      	orrs	r2, r1
 80046ec:	60da      	str	r2, [r3, #12]
	tim->ReloadCallback = callback;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	683a      	ldr	r2, [r7, #0]
 80046f2:	605a      	str	r2, [r3, #4]
}
 80046f4:	46c0      	nop			; (mov r8, r8)
 80046f6:	46bd      	mov	sp, r7
 80046f8:	b002      	add	sp, #8
 80046fa:	bd80      	pop	{r7, pc}

080046fc <TIM_OnPulse>:

void TIM_OnPulse(TIM_t * tim, TIM_Channel_t ch, VoidFunction_t callback)
{
 80046fc:	b590      	push	{r4, r7, lr}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	607a      	str	r2, [r7, #4]
 8004706:	240b      	movs	r4, #11
 8004708:	193b      	adds	r3, r7, r4
 800470a:	1c0a      	adds	r2, r1, #0
 800470c:	701a      	strb	r2, [r3, #0]
	// WARN: This will fail horribly if ch is greater than 4.
	TIM_EnableOCx(tim, ch, TIM_OCMODE_ACTIVE);
 800470e:	193b      	adds	r3, r7, r4
 8004710:	7819      	ldrb	r1, [r3, #0]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2210      	movs	r2, #16
 8004716:	0018      	movs	r0, r3
 8004718:	f000 f8b0 	bl	800487c <TIM_EnableOCx>
	// Note that the channels IT's are 1 << 1 through 1 << 4
	__HAL_TIM_ENABLE_IT(tim, TIM_IT_CC1 << ch);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68d9      	ldr	r1, [r3, #12]
 8004722:	0020      	movs	r0, r4
 8004724:	183b      	adds	r3, r7, r0
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	2202      	movs	r2, #2
 800472a:	409a      	lsls	r2, r3
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	430a      	orrs	r2, r1
 8004732:	60da      	str	r2, [r3, #12]
	tim->PulseCallback[ch] = callback;
 8004734:	183b      	adds	r3, r7, r0
 8004736:	781a      	ldrb	r2, [r3, #0]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	3202      	adds	r2, #2
 800473c:	0092      	lsls	r2, r2, #2
 800473e:	6879      	ldr	r1, [r7, #4]
 8004740:	50d1      	str	r1, [r2, r3]
}
 8004742:	46c0      	nop			; (mov r8, r8)
 8004744:	46bd      	mov	sp, r7
 8004746:	b005      	add	sp, #20
 8004748:	bd90      	pop	{r4, r7, pc}

0800474a <TIM_EnablePwm>:
#endif //TIM_USE_IRQS

void TIM_EnablePwm(TIM_t * tim, TIM_Channel_t ch, GPIO_t * gpio, uint32_t pin, uint32_t af)
{
 800474a:	b580      	push	{r7, lr}
 800474c:	b084      	sub	sp, #16
 800474e:	af00      	add	r7, sp, #0
 8004750:	60f8      	str	r0, [r7, #12]
 8004752:	607a      	str	r2, [r7, #4]
 8004754:	603b      	str	r3, [r7, #0]
 8004756:	200b      	movs	r0, #11
 8004758:	183b      	adds	r3, r7, r0
 800475a:	1c0a      	adds	r2, r1, #0
 800475c:	701a      	strb	r2, [r3, #0]
	// TIM_CCMR1_OC1PE is the output compare preload
	TIM_EnableOCx(tim, ch, TIM_OCMODE_PWM1 | TIM_CCMR1_OC1PE | TIM_OCFAST_ENABLE);
 800475e:	183b      	adds	r3, r7, r0
 8004760:	7819      	ldrb	r1, [r3, #0]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	226c      	movs	r2, #108	; 0x6c
 8004766:	0018      	movs	r0, r3
 8004768:	f000 f888 	bl	800487c <TIM_EnableOCx>
	GPIO_EnableAlternate(gpio, pin, 0, af);
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	6839      	ldr	r1, [r7, #0]
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f7ff fd42 	bl	80041fc <GPIO_EnableAlternate>
}
 8004778:	46c0      	nop			; (mov r8, r8)
 800477a:	46bd      	mov	sp, r7
 800477c:	b004      	add	sp, #16
 800477e:	bd80      	pop	{r7, pc}

08004780 <TIM_SetPulse>:


void TIM_SetPulse(TIM_t * tim, TIM_Channel_t ch, uint32_t pulse)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	607a      	str	r2, [r7, #4]
 800478a:	200b      	movs	r0, #11
 800478c:	183b      	adds	r3, r7, r0
 800478e:	1c0a      	adds	r2, r1, #0
 8004790:	701a      	strb	r2, [r3, #0]
	switch (ch)
 8004792:	183b      	adds	r3, r7, r0
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	2b03      	cmp	r3, #3
 8004798:	d017      	beq.n	80047ca <TIM_SetPulse+0x4a>
 800479a:	dc1b      	bgt.n	80047d4 <TIM_SetPulse+0x54>
 800479c:	2b02      	cmp	r3, #2
 800479e:	d00f      	beq.n	80047c0 <TIM_SetPulse+0x40>
 80047a0:	dc18      	bgt.n	80047d4 <TIM_SetPulse+0x54>
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d002      	beq.n	80047ac <TIM_SetPulse+0x2c>
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d005      	beq.n	80047b6 <TIM_SetPulse+0x36>
	case TIM_CH4:
		tim->Instance->CCR4 = pulse;
		break;
	}

}
 80047aa:	e013      	b.n	80047d4 <TIM_SetPulse+0x54>
		tim->Instance->CCR1 = pulse;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80047b4:	e00e      	b.n	80047d4 <TIM_SetPulse+0x54>
		tim->Instance->CCR2 = pulse;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 80047be:	e009      	b.n	80047d4 <TIM_SetPulse+0x54>
		tim->Instance->CCR3 = pulse;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 80047c8:	e004      	b.n	80047d4 <TIM_SetPulse+0x54>
		tim->Instance->CCR4 = pulse;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 80047d2:	46c0      	nop			; (mov r8, r8)
}
 80047d4:	46c0      	nop			; (mov r8, r8)
 80047d6:	46bd      	mov	sp, r7
 80047d8:	b004      	add	sp, #16
 80047da:	bd80      	pop	{r7, pc}

080047dc <TIM_Start>:

void TIM_Start(TIM_t * tim)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
	TIM_Reload(tim);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	0018      	movs	r0, r3
 80047e8:	f000 f8d6 	bl	8004998 <TIM_Reload>
	__HAL_TIM_ENABLE(tim);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2101      	movs	r1, #1
 80047f8:	430a      	orrs	r2, r1
 80047fa:	601a      	str	r2, [r3, #0]
}
 80047fc:	46c0      	nop			; (mov r8, r8)
 80047fe:	46bd      	mov	sp, r7
 8004800:	b002      	add	sp, #8
 8004802:	bd80      	pop	{r7, pc}

08004804 <TIM_Stop>:

void TIM_Stop(TIM_t * tim)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_DISABLE(tim);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6a1b      	ldr	r3, [r3, #32]
 8004812:	4a07      	ldr	r2, [pc, #28]	; (8004830 <TIM_Stop+0x2c>)
 8004814:	4013      	ands	r3, r2
 8004816:	d107      	bne.n	8004828 <TIM_Stop+0x24>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2101      	movs	r1, #1
 8004824:	438a      	bics	r2, r1
 8004826:	601a      	str	r2, [r3, #0]
}
 8004828:	46c0      	nop			; (mov r8, r8)
 800482a:	46bd      	mov	sp, r7
 800482c:	b002      	add	sp, #8
 800482e:	bd80      	pop	{r7, pc}
 8004830:	00001111 	.word	0x00001111

08004834 <TIM_Deinit>:

void TIM_Deinit(TIM_t * tim)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_DISABLE(tim);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	4a0d      	ldr	r2, [pc, #52]	; (8004878 <TIM_Deinit+0x44>)
 8004844:	4013      	ands	r3, r2
 8004846:	d107      	bne.n	8004858 <TIM_Deinit+0x24>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2101      	movs	r1, #1
 8004854:	438a      	bics	r2, r1
 8004856:	601a      	str	r2, [r3, #0]
	__HAL_TIM_DISABLE_IT(tim, TIM_IT_UPDATE | TIM_IT_CC1 | TIM_IT_CC2 | TIM_IT_CC3 | TIM_IT_CC4);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68da      	ldr	r2, [r3, #12]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	211f      	movs	r1, #31
 8004864:	438a      	bics	r2, r1
 8004866:	60da      	str	r2, [r3, #12]
	TIMx_Deinit(tim);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	0018      	movs	r0, r3
 800486c:	f000 f8fc 	bl	8004a68 <TIMx_Deinit>
}
 8004870:	46c0      	nop			; (mov r8, r8)
 8004872:	46bd      	mov	sp, r7
 8004874:	b002      	add	sp, #8
 8004876:	bd80      	pop	{r7, pc}
 8004878:	00001111 	.word	0x00001111

0800487c <TIM_EnableOCx>:
/*
 * PRIVATE FUNCTIONS
 */

static void TIM_EnableOCx(TIM_t * tim, uint32_t oc, uint32_t mode)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
	// Disable the channel during the update.
	TIM_DISABLE_CCx(tim, oc);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6a1a      	ldr	r2, [r3, #32]
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	2101      	movs	r1, #1
 8004894:	4099      	lsls	r1, r3
 8004896:	000b      	movs	r3, r1
 8004898:	43d9      	mvns	r1, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	400a      	ands	r2, r1
 80048a0:	621a      	str	r2, [r3, #32]
	switch (oc)
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	2b03      	cmp	r3, #3
 80048a6:	d04c      	beq.n	8004942 <TIM_EnableOCx+0xc6>
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	2b03      	cmp	r3, #3
 80048ac:	d85e      	bhi.n	800496c <TIM_EnableOCx+0xf0>
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d032      	beq.n	800491a <TIM_EnableOCx+0x9e>
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d858      	bhi.n	800496c <TIM_EnableOCx+0xf0>
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d003      	beq.n	80048c8 <TIM_EnableOCx+0x4c>
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d014      	beq.n	80048f0 <TIM_EnableOCx+0x74>
 80048c6:	e051      	b.n	800496c <TIM_EnableOCx+0xf0>
	{
	case 0:
		MODIFY_REG(tim->Instance->CCMR1, TIM_CCMRx_MSK, mode);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	227f      	movs	r2, #127	; 0x7f
 80048d0:	4393      	bics	r3, r2
 80048d2:	0019      	movs	r1, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	430a      	orrs	r2, r1
 80048dc:	619a      	str	r2, [r3, #24]
		MODIFY_REG(tim->Instance->CCER, TIM_CCER_CC1P, TIM_OCPOLARITY_HIGH);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	6a1a      	ldr	r2, [r3, #32]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2102      	movs	r1, #2
 80048ea:	438a      	bics	r2, r1
 80048ec:	621a      	str	r2, [r3, #32]
		break;
 80048ee:	e03d      	b.n	800496c <TIM_EnableOCx+0xf0>
	case 1:
		MODIFY_REG(tim->Instance->CCMR1, TIM_CCMRx_MSK << 8, mode << 8);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	4a25      	ldr	r2, [pc, #148]	; (800498c <TIM_EnableOCx+0x110>)
 80048f8:	4013      	ands	r3, r2
 80048fa:	0019      	movs	r1, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	021a      	lsls	r2, r3, #8
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	430a      	orrs	r2, r1
 8004906:	619a      	str	r2, [r3, #24]
		MODIFY_REG(tim->Instance->CCER, TIM_CCER_CC2P, TIM_OCPOLARITY_HIGH << 4);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6a1a      	ldr	r2, [r3, #32]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2120      	movs	r1, #32
 8004914:	438a      	bics	r2, r1
 8004916:	621a      	str	r2, [r3, #32]
		break;
 8004918:	e028      	b.n	800496c <TIM_EnableOCx+0xf0>
	case 2:
		MODIFY_REG(tim->Instance->CCMR2, TIM_CCMRx_MSK, mode);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	69db      	ldr	r3, [r3, #28]
 8004920:	227f      	movs	r2, #127	; 0x7f
 8004922:	4393      	bics	r3, r2
 8004924:	0019      	movs	r1, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	430a      	orrs	r2, r1
 800492e:	61da      	str	r2, [r3, #28]
		MODIFY_REG(tim->Instance->CCER, TIM_CCER_CC3P, TIM_OCPOLARITY_HIGH << 8);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6a1a      	ldr	r2, [r3, #32]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4915      	ldr	r1, [pc, #84]	; (8004990 <TIM_EnableOCx+0x114>)
 800493c:	400a      	ands	r2, r1
 800493e:	621a      	str	r2, [r3, #32]
		break;
 8004940:	e014      	b.n	800496c <TIM_EnableOCx+0xf0>
	case 3:
		MODIFY_REG(tim->Instance->CCMR2, TIM_CCMRx_MSK << 8, mode << 8);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	69db      	ldr	r3, [r3, #28]
 8004948:	4a10      	ldr	r2, [pc, #64]	; (800498c <TIM_EnableOCx+0x110>)
 800494a:	4013      	ands	r3, r2
 800494c:	0019      	movs	r1, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	021a      	lsls	r2, r3, #8
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	430a      	orrs	r2, r1
 8004958:	61da      	str	r2, [r3, #28]
		MODIFY_REG(tim->Instance->CCER, TIM_CCER_CC4P, TIM_OCPOLARITY_HIGH << 12);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	6a1a      	ldr	r2, [r3, #32]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	490b      	ldr	r1, [pc, #44]	; (8004994 <TIM_EnableOCx+0x118>)
 8004966:	400a      	ands	r2, r1
 8004968:	621a      	str	r2, [r3, #32]
		break;
 800496a:	46c0      	nop			; (mov r8, r8)
	}
	TIM_ENABLE_CCx(tim, oc);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	6a19      	ldr	r1, [r3, #32]
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	2201      	movs	r2, #1
 8004978:	409a      	lsls	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	430a      	orrs	r2, r1
 8004980:	621a      	str	r2, [r3, #32]
	//	MODIFY_REG(tmpcr2, TIM_CR2_OIS1 | TIM_CR2_OIS1N, TIM_OCIDLESTATE_SET | TIM_OCNIDLESTATE_SET);
	//	TIMx->CR2 = tmpcr2;
	//}


}
 8004982:	46c0      	nop			; (mov r8, r8)
 8004984:	46bd      	mov	sp, r7
 8004986:	b004      	add	sp, #16
 8004988:	bd80      	pop	{r7, pc}
 800498a:	46c0      	nop			; (mov r8, r8)
 800498c:	ffff80ff 	.word	0xffff80ff
 8004990:	fffffdff 	.word	0xfffffdff
 8004994:	ffffdfff 	.word	0xffffdfff

08004998 <TIM_Reload>:

static void TIM_Reload(TIM_t * tim)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
	// Disable all timer event sources.
	uint32_t itSources = tim->Instance->DIER;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	60fb      	str	r3, [r7, #12]
	tim->Instance->DIER = 0;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2200      	movs	r2, #0
 80049ae:	60da      	str	r2, [r3, #12]

	// Update the prescalar
	tim->Instance->EGR = TIM_EGR_UG;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2201      	movs	r2, #1
 80049b6:	615a      	str	r2, [r3, #20]

	// Clear the event before it occurrs.
	__HAL_TIM_CLEAR_IT(tim, TIM_IT_UPDATE);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2202      	movs	r2, #2
 80049be:	4252      	negs	r2, r2
 80049c0:	611a      	str	r2, [r3, #16]
	tim->Instance->DIER = itSources;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	60da      	str	r2, [r3, #12]
}
 80049ca:	46c0      	nop			; (mov r8, r8)
 80049cc:	46bd      	mov	sp, r7
 80049ce:	b004      	add	sp, #16
 80049d0:	bd80      	pop	{r7, pc}
	...

080049d4 <TIMx_Init>:

static void TIMx_Init(TIM_t * tim)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
		__HAL_RCC_TIM1_CLK_ENABLE();
	}

#endif
#ifdef TIM2_ENABLE
	if (tim == TIM_2)
 80049dc:	4b1d      	ldr	r3, [pc, #116]	; (8004a54 <TIMx_Init+0x80>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d108      	bne.n	80049f8 <TIMx_Init+0x24>
	{
		HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80049e6:	200f      	movs	r0, #15
 80049e8:	f7fd f9c1 	bl	8001d6e <HAL_NVIC_EnableIRQ>
		__HAL_RCC_TIM2_CLK_ENABLE();
 80049ec:	4b1a      	ldr	r3, [pc, #104]	; (8004a58 <TIMx_Init+0x84>)
 80049ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049f0:	4b19      	ldr	r3, [pc, #100]	; (8004a58 <TIMx_Init+0x84>)
 80049f2:	2101      	movs	r1, #1
 80049f4:	430a      	orrs	r2, r1
 80049f6:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_NVIC_EnableIRQ(TIM5_IRQn);
		__HAL_RCC_TIM5_CLK_ENABLE();
	}
#endif
#ifdef TIM6_ENABLE
	if (tim == TIM_6)
 80049f8:	4b18      	ldr	r3, [pc, #96]	; (8004a5c <TIMx_Init+0x88>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d108      	bne.n	8004a14 <TIMx_Init+0x40>
	{
		HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8004a02:	2011      	movs	r0, #17
 8004a04:	f7fd f9b3 	bl	8001d6e <HAL_NVIC_EnableIRQ>
		__HAL_RCC_TIM6_CLK_ENABLE();
 8004a08:	4b13      	ldr	r3, [pc, #76]	; (8004a58 <TIMx_Init+0x84>)
 8004a0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a0c:	4b12      	ldr	r3, [pc, #72]	; (8004a58 <TIMx_Init+0x84>)
 8004a0e:	2110      	movs	r1, #16
 8004a10:	430a      	orrs	r2, r1
 8004a12:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_NVIC_EnableIRQ(TIM17_IRQn);
		__HAL_RCC_TIM17_CLK_ENABLE();
	}
#endif
#ifdef TIM21_ENABLE
	if (tim == TIM_21)
 8004a14:	4b12      	ldr	r3, [pc, #72]	; (8004a60 <TIMx_Init+0x8c>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d108      	bne.n	8004a30 <TIMx_Init+0x5c>
	{
		HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8004a1e:	2014      	movs	r0, #20
 8004a20:	f7fd f9a5 	bl	8001d6e <HAL_NVIC_EnableIRQ>
		__HAL_RCC_TIM21_CLK_ENABLE();
 8004a24:	4b0c      	ldr	r3, [pc, #48]	; (8004a58 <TIMx_Init+0x84>)
 8004a26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a28:	4b0b      	ldr	r3, [pc, #44]	; (8004a58 <TIMx_Init+0x84>)
 8004a2a:	2104      	movs	r1, #4
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	635a      	str	r2, [r3, #52]	; 0x34
	}
#endif
#ifdef TIM22_ENABLE
	if (tim == TIM_22)
 8004a30:	4b0c      	ldr	r3, [pc, #48]	; (8004a64 <TIMx_Init+0x90>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d108      	bne.n	8004a4c <TIMx_Init+0x78>
	{
		HAL_NVIC_EnableIRQ(TIM22_IRQn);
 8004a3a:	2016      	movs	r0, #22
 8004a3c:	f7fd f997 	bl	8001d6e <HAL_NVIC_EnableIRQ>
		__HAL_RCC_TIM22_CLK_ENABLE();
 8004a40:	4b05      	ldr	r3, [pc, #20]	; (8004a58 <TIMx_Init+0x84>)
 8004a42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a44:	4b04      	ldr	r3, [pc, #16]	; (8004a58 <TIMx_Init+0x84>)
 8004a46:	2120      	movs	r1, #32
 8004a48:	430a      	orrs	r2, r1
 8004a4a:	635a      	str	r2, [r3, #52]	; 0x34
	}
#endif
}
 8004a4c:	46c0      	nop			; (mov r8, r8)
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	b002      	add	sp, #8
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	20000020 	.word	0x20000020
 8004a58:	40021000 	.word	0x40021000
 8004a5c:	2000003c 	.word	0x2000003c
 8004a60:	20000058 	.word	0x20000058
 8004a64:	20000074 	.word	0x20000074

08004a68 <TIMx_Deinit>:


static void TIMx_Deinit(TIM_t * tim)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
		HAL_NVIC_DisableIRQ(TIM1_CC_IRQn);
		__HAL_RCC_TIM1_CLK_DISABLE();
	}
#endif
#ifdef TIM2_ENABLE
	if (tim == TIM_2)
 8004a70:	4b1d      	ldr	r3, [pc, #116]	; (8004ae8 <TIMx_Deinit+0x80>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d108      	bne.n	8004a8c <TIMx_Deinit+0x24>
	{
		HAL_NVIC_DisableIRQ(TIM2_IRQn);
 8004a7a:	200f      	movs	r0, #15
 8004a7c:	f7fd f987 	bl	8001d8e <HAL_NVIC_DisableIRQ>
		__HAL_RCC_TIM2_CLK_DISABLE();
 8004a80:	4b1a      	ldr	r3, [pc, #104]	; (8004aec <TIMx_Deinit+0x84>)
 8004a82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a84:	4b19      	ldr	r3, [pc, #100]	; (8004aec <TIMx_Deinit+0x84>)
 8004a86:	2101      	movs	r1, #1
 8004a88:	438a      	bics	r2, r1
 8004a8a:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_NVIC_DisableIRQ(TIM5_IRQn);
		__HAL_RCC_TIM5_CLK_DISABLE();
	}
#endif
#ifdef TIM6_ENABLE
	if (tim == TIM_6)
 8004a8c:	4b18      	ldr	r3, [pc, #96]	; (8004af0 <TIMx_Deinit+0x88>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d108      	bne.n	8004aa8 <TIMx_Deinit+0x40>
	{
		HAL_NVIC_DisableIRQ(TIM6_IRQn);
 8004a96:	2011      	movs	r0, #17
 8004a98:	f7fd f979 	bl	8001d8e <HAL_NVIC_DisableIRQ>
		__HAL_RCC_TIM6_CLK_DISABLE();
 8004a9c:	4b13      	ldr	r3, [pc, #76]	; (8004aec <TIMx_Deinit+0x84>)
 8004a9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004aa0:	4b12      	ldr	r3, [pc, #72]	; (8004aec <TIMx_Deinit+0x84>)
 8004aa2:	2110      	movs	r1, #16
 8004aa4:	438a      	bics	r2, r1
 8004aa6:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_NVIC_DisableIRQ(TIM17_IRQn);
		__HAL_RCC_TIM17_CLK_DISABLE();
	}
#endif
#ifdef TIM21_ENABLE
	if (tim == TIM_21)
 8004aa8:	4b12      	ldr	r3, [pc, #72]	; (8004af4 <TIMx_Deinit+0x8c>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d108      	bne.n	8004ac4 <TIMx_Deinit+0x5c>
	{
		HAL_NVIC_DisableIRQ(TIM21_IRQn);
 8004ab2:	2014      	movs	r0, #20
 8004ab4:	f7fd f96b 	bl	8001d8e <HAL_NVIC_DisableIRQ>
		__HAL_RCC_TIM21_CLK_DISABLE();
 8004ab8:	4b0c      	ldr	r3, [pc, #48]	; (8004aec <TIMx_Deinit+0x84>)
 8004aba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004abc:	4b0b      	ldr	r3, [pc, #44]	; (8004aec <TIMx_Deinit+0x84>)
 8004abe:	2104      	movs	r1, #4
 8004ac0:	438a      	bics	r2, r1
 8004ac2:	635a      	str	r2, [r3, #52]	; 0x34
	}
#endif
#ifdef TIM22_ENABLE
	if (tim == TIM_22)
 8004ac4:	4b0c      	ldr	r3, [pc, #48]	; (8004af8 <TIMx_Deinit+0x90>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d108      	bne.n	8004ae0 <TIMx_Deinit+0x78>
	{
		HAL_NVIC_DisableIRQ(TIM22_IRQn);
 8004ace:	2016      	movs	r0, #22
 8004ad0:	f7fd f95d 	bl	8001d8e <HAL_NVIC_DisableIRQ>
		__HAL_RCC_TIM22_CLK_DISABLE();
 8004ad4:	4b05      	ldr	r3, [pc, #20]	; (8004aec <TIMx_Deinit+0x84>)
 8004ad6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ad8:	4b04      	ldr	r3, [pc, #16]	; (8004aec <TIMx_Deinit+0x84>)
 8004ada:	2120      	movs	r1, #32
 8004adc:	438a      	bics	r2, r1
 8004ade:	635a      	str	r2, [r3, #52]	; 0x34
	}
#endif
}
 8004ae0:	46c0      	nop			; (mov r8, r8)
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	b002      	add	sp, #8
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	20000020 	.word	0x20000020
 8004aec:	40021000 	.word	0x40021000
 8004af0:	2000003c 	.word	0x2000003c
 8004af4:	20000058 	.word	0x20000058
 8004af8:	20000074 	.word	0x20000074

08004afc <TIM_IRQHandler>:
 */

#ifdef TIM_USE_IRQS

static void TIM_IRQHandler(TIM_t * tim)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
	uint32_t irqs = TIM_GET_IRQ_SOURCES(tim);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	691a      	ldr	r2, [r3, #16]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	4013      	ands	r3, r2
 8004b12:	60fb      	str	r3, [r7, #12]
	if(irqs & TIM_FLAG_CC1)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2202      	movs	r2, #2
 8004b18:	4013      	ands	r3, r2
 8004b1a:	d007      	beq.n	8004b2c <TIM_IRQHandler+0x30>
	{
		__HAL_TIM_CLEAR_IT(tim, TIM_IT_CC1);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2203      	movs	r2, #3
 8004b22:	4252      	negs	r2, r2
 8004b24:	611a      	str	r2, [r3, #16]
		tim->PulseCallback[0]();
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	4798      	blx	r3
	}
	if(irqs & TIM_FLAG_CC2)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2204      	movs	r2, #4
 8004b30:	4013      	ands	r3, r2
 8004b32:	d007      	beq.n	8004b44 <TIM_IRQHandler+0x48>
	{
		__HAL_TIM_CLEAR_IT(tim, TIM_IT_CC2);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2205      	movs	r2, #5
 8004b3a:	4252      	negs	r2, r2
 8004b3c:	611a      	str	r2, [r3, #16]
		tim->PulseCallback[1]();
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	4798      	blx	r3
	}
	if(irqs & TIM_FLAG_CC3)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2208      	movs	r2, #8
 8004b48:	4013      	ands	r3, r2
 8004b4a:	d007      	beq.n	8004b5c <TIM_IRQHandler+0x60>
	{
		__HAL_TIM_CLEAR_IT(tim, TIM_IT_CC3);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2209      	movs	r2, #9
 8004b52:	4252      	negs	r2, r2
 8004b54:	611a      	str	r2, [r3, #16]
		tim->PulseCallback[2]();
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	4798      	blx	r3
	}
	if(irqs & TIM_FLAG_CC4)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2210      	movs	r2, #16
 8004b60:	4013      	ands	r3, r2
 8004b62:	d007      	beq.n	8004b74 <TIM_IRQHandler+0x78>
	{
		__HAL_TIM_CLEAR_IT(tim, TIM_IT_CC4);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2211      	movs	r2, #17
 8004b6a:	4252      	negs	r2, r2
 8004b6c:	611a      	str	r2, [r3, #16]
		tim->PulseCallback[3]();
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	4798      	blx	r3
	}
	if(irqs & TIM_FLAG_UPDATE)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2201      	movs	r2, #1
 8004b78:	4013      	ands	r3, r2
 8004b7a:	d007      	beq.n	8004b8c <TIM_IRQHandler+0x90>
	{
		__HAL_TIM_CLEAR_IT(tim, TIM_IT_UPDATE);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2202      	movs	r2, #2
 8004b82:	4252      	negs	r2, r2
 8004b84:	611a      	str	r2, [r3, #16]
		tim->ReloadCallback();
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	4798      	blx	r3
	}
}
 8004b8c:	46c0      	nop			; (mov r8, r8)
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	b004      	add	sp, #16
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <TIM2_IRQHandler>:
	TIM_IRQHandler(TIM_1);
}
#endif
#ifdef TIM2_ENABLE
void TIM2_IRQHandler(void)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	af00      	add	r7, sp, #0
	TIM_IRQHandler(TIM_2);
 8004b98:	4b03      	ldr	r3, [pc, #12]	; (8004ba8 <TIM2_IRQHandler+0x14>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	0018      	movs	r0, r3
 8004b9e:	f7ff ffad 	bl	8004afc <TIM_IRQHandler>
}
 8004ba2:	46c0      	nop			; (mov r8, r8)
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	20000020 	.word	0x20000020

08004bac <TIM6_IRQHandler>:
	TIM_IRQHandler(TIM_5);
}
#endif
#ifdef TIM6_ENABLE
void TIM6_IRQHandler(void)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	af00      	add	r7, sp, #0
	TIM_IRQHandler(TIM_6);
 8004bb0:	4b03      	ldr	r3, [pc, #12]	; (8004bc0 <TIM6_IRQHandler+0x14>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	0018      	movs	r0, r3
 8004bb6:	f7ff ffa1 	bl	8004afc <TIM_IRQHandler>
}
 8004bba:	46c0      	nop			; (mov r8, r8)
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	2000003c 	.word	0x2000003c

08004bc4 <TIM21_IRQHandler>:
	TIM_IRQHandler(TIM_17);
}
#endif
#ifdef TIM21_ENABLE
void TIM21_IRQHandler(void)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	af00      	add	r7, sp, #0
	TIM_IRQHandler(TIM_21);
 8004bc8:	4b03      	ldr	r3, [pc, #12]	; (8004bd8 <TIM21_IRQHandler+0x14>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	0018      	movs	r0, r3
 8004bce:	f7ff ff95 	bl	8004afc <TIM_IRQHandler>
}
 8004bd2:	46c0      	nop			; (mov r8, r8)
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	20000058 	.word	0x20000058

08004bdc <TIM22_IRQHandler>:
#endif
#ifdef TIM22_ENABLE
void TIM22_IRQHandler(void)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	af00      	add	r7, sp, #0
	TIM_IRQHandler(TIM_22);
 8004be0:	4b03      	ldr	r3, [pc, #12]	; (8004bf0 <TIM22_IRQHandler+0x14>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	0018      	movs	r0, r3
 8004be6:	f7ff ff89 	bl	8004afc <TIM_IRQHandler>
}
 8004bea:	46c0      	nop			; (mov r8, r8)
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	20000074 	.word	0x20000074

08004bf4 <GPIO_Deinit>:
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
	GPIO_Init(gpio, pin, GPIO_Mode_Analog);
 8004bfe:	6839      	ldr	r1, [r7, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2203      	movs	r2, #3
 8004c04:	0018      	movs	r0, r3
 8004c06:	f7ff fb43 	bl	8004290 <GPIO_Init>
}
 8004c0a:	46c0      	nop			; (mov r8, r8)
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	b002      	add	sp, #8
 8004c10:	bd80      	pop	{r7, pc}
	...

08004c14 <CLK_GetPCLKFreq>:
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	af00      	add	r7, sp, #0
	return CLK_SYSCLK_FREQ;
 8004c18:	4b01      	ldr	r3, [pc, #4]	; (8004c20 <CLK_GetPCLKFreq+0xc>)
}
 8004c1a:	0018      	movs	r0, r3
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	01e84800 	.word	0x01e84800

08004c24 <UART_Init>:
 * PUBLIC FUNCTIONS
 */


void UART_Init(UART_t * uart, uint32_t baud, UART_Mode_t mode)
{
 8004c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c26:	b093      	sub	sp, #76	; 0x4c
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6278      	str	r0, [r7, #36]	; 0x24
 8004c2c:	6239      	str	r1, [r7, #32]
 8004c2e:	261f      	movs	r6, #31
 8004c30:	19bb      	adds	r3, r7, r6
 8004c32:	701a      	strb	r2, [r3, #0]
	uart->tx.head = uart->tx.tail = 0;
 8004c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c36:	2284      	movs	r2, #132	; 0x84
 8004c38:	2100      	movs	r1, #0
 8004c3a:	5099      	str	r1, [r3, r2]
 8004c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3e:	2284      	movs	r2, #132	; 0x84
 8004c40:	589a      	ldr	r2, [r3, r2]
 8004c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c44:	2180      	movs	r1, #128	; 0x80
 8004c46:	505a      	str	r2, [r3, r1]
	uart->rx.head = uart->rx.tail = 0;
 8004c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c4a:	2386      	movs	r3, #134	; 0x86
 8004c4c:	005b      	lsls	r3, r3, #1
 8004c4e:	2100      	movs	r1, #0
 8004c50:	50d1      	str	r1, [r2, r3]
 8004c52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c54:	2386      	movs	r3, #134	; 0x86
 8004c56:	005b      	lsls	r3, r3, #1
 8004c58:	58d1      	ldr	r1, [r2, r3]
 8004c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c5c:	2384      	movs	r3, #132	; 0x84
 8004c5e:	005b      	lsls	r3, r3, #1
 8004c60:	50d1      	str	r1, [r2, r3]

	// Enable the uart specific GPIO and clocks.
	UARTx_Init(uart);
 8004c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c64:	0018      	movs	r0, r3
 8004c66:	f000 f96b 	bl	8004f40 <UARTx_Init>

	__HAL_UART_DISABLE(uart);
 8004c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c6c:	2388      	movs	r3, #136	; 0x88
 8004c6e:	005b      	lsls	r3, r3, #1
 8004c70:	58d3      	ldr	r3, [r2, r3]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c76:	2388      	movs	r3, #136	; 0x88
 8004c78:	005b      	lsls	r3, r3, #1
 8004c7a:	58cb      	ldr	r3, [r1, r3]
 8004c7c:	2101      	movs	r1, #1
 8004c7e:	438a      	bics	r2, r1
 8004c80:	601a      	str	r2, [r3, #0]
	// Configure to standard settings: 8N1, no flow control.
	uint32_t cr1 = (uint32_t)UART_WORDLENGTH_8B | UART_PARITY_NONE | UART_MODE_TX_RX | UART_OVERSAMPLING_16;
 8004c82:	230c      	movs	r3, #12
 8004c84:	643b      	str	r3, [r7, #64]	; 0x40
	const uint32_t cr1msk = USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8;
 8004c86:	4b56      	ldr	r3, [pc, #344]	; (8004de0 <UART_Init+0x1bc>)
 8004c88:	63fb      	str	r3, [r7, #60]	; 0x3c
	MODIFY_REG(uart->Instance->CR1, cr1msk,	cr1);
 8004c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c8c:	2388      	movs	r3, #136	; 0x88
 8004c8e:	005b      	lsls	r3, r3, #1
 8004c90:	58d3      	ldr	r3, [r2, r3]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c96:	43d2      	mvns	r2, r2
 8004c98:	401a      	ands	r2, r3
 8004c9a:	0011      	movs	r1, r2
 8004c9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c9e:	2388      	movs	r3, #136	; 0x88
 8004ca0:	005b      	lsls	r3, r3, #1
 8004ca2:	58d3      	ldr	r3, [r2, r3]
 8004ca4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	601a      	str	r2, [r3, #0]

	uint32_t cr2 = UART_STOPBITS_1;
 8004caa:	2300      	movs	r3, #0
 8004cac:	647b      	str	r3, [r7, #68]	; 0x44
	if (mode & UART_Mode_Inverted) 	{ cr2 |= USART_CR2_RXINV | USART_CR2_TXINV; }
 8004cae:	19bb      	adds	r3, r7, r6
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	d004      	beq.n	8004cc2 <UART_Init+0x9e>
 8004cb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cba:	22c0      	movs	r2, #192	; 0xc0
 8004cbc:	0292      	lsls	r2, r2, #10
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	647b      	str	r3, [r7, #68]	; 0x44
	if (mode & UART_Mode_Swap) 		{ cr2 |= USART_CR2_SWAP; }
 8004cc2:	231f      	movs	r3, #31
 8004cc4:	18fb      	adds	r3, r7, r3
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	2202      	movs	r2, #2
 8004cca:	4013      	ands	r3, r2
 8004ccc:	d004      	beq.n	8004cd8 <UART_Init+0xb4>
 8004cce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cd0:	2280      	movs	r2, #128	; 0x80
 8004cd2:	0212      	lsls	r2, r2, #8
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	647b      	str	r3, [r7, #68]	; 0x44
	const uint32_t cr2msk = USART_CR2_STOP | USART_CR2_RXINV | USART_CR2_TXINV | USART_CR2_SWAP | USART_CR2_LINEN | USART_CR2_CLKEN;
 8004cd8:	23fe      	movs	r3, #254	; 0xfe
 8004cda:	029b      	lsls	r3, r3, #10
 8004cdc:	63bb      	str	r3, [r7, #56]	; 0x38
	MODIFY_REG(uart->Instance->CR2, cr2msk, cr2);
 8004cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ce0:	2388      	movs	r3, #136	; 0x88
 8004ce2:	005b      	lsls	r3, r3, #1
 8004ce4:	58d3      	ldr	r3, [r2, r3]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cea:	43d2      	mvns	r2, r2
 8004cec:	401a      	ands	r2, r3
 8004cee:	0011      	movs	r1, r2
 8004cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cf2:	2388      	movs	r3, #136	; 0x88
 8004cf4:	005b      	lsls	r3, r3, #1
 8004cf6:	58d3      	ldr	r3, [r2, r3]
 8004cf8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	605a      	str	r2, [r3, #4]

	uint32_t cr3 = (uint32_t)UART_HWCONTROL_NONE | UART_ONE_BIT_SAMPLE_DISABLE;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	637b      	str	r3, [r7, #52]	; 0x34
	const uint32_t cr3msk = USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT | USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN;
 8004d02:	4b38      	ldr	r3, [pc, #224]	; (8004de4 <UART_Init+0x1c0>)
 8004d04:	633b      	str	r3, [r7, #48]	; 0x30
	MODIFY_REG(uart->Instance->CR3, cr3msk, cr3);
 8004d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d08:	2388      	movs	r3, #136	; 0x88
 8004d0a:	005b      	lsls	r3, r3, #1
 8004d0c:	58d3      	ldr	r3, [r2, r3]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d12:	43d2      	mvns	r2, r2
 8004d14:	401a      	ands	r2, r3
 8004d16:	0011      	movs	r1, r2
 8004d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d1a:	2388      	movs	r3, #136	; 0x88
 8004d1c:	005b      	lsls	r3, r3, #1
 8004d1e:	58d3      	ldr	r3, [r2, r3]
 8004d20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d22:	430a      	orrs	r2, r1
 8004d24:	609a      	str	r2, [r3, #8]

	// Calculate baud rate.
	uint32_t pclk = CLK_GetPCLKFreq();
 8004d26:	f7ff ff75 	bl	8004c14 <CLK_GetPCLKFreq>
 8004d2a:	0003      	movs	r3, r0
 8004d2c:	62fb      	str	r3, [r7, #44]	; 0x2c

#ifdef UARTLP_GPIO
	if (UART_INSTANCE_LOWPOWER(uart))
 8004d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d30:	2388      	movs	r3, #136	; 0x88
 8004d32:	005b      	lsls	r3, r3, #1
 8004d34:	58d3      	ldr	r3, [r2, r3]
 8004d36:	4a2c      	ldr	r2, [pc, #176]	; (8004de8 <UART_Init+0x1c4>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d128      	bne.n	8004d8e <UART_Init+0x16a>
	{
		uart->Instance->BRR = UART_DIV_LPUART(pclk, baud);
 8004d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d3e:	613b      	str	r3, [r7, #16]
 8004d40:	2300      	movs	r3, #0
 8004d42:	617b      	str	r3, [r7, #20]
 8004d44:	6939      	ldr	r1, [r7, #16]
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	000b      	movs	r3, r1
 8004d4a:	0e1b      	lsrs	r3, r3, #24
 8004d4c:	0010      	movs	r0, r2
 8004d4e:	0205      	lsls	r5, r0, #8
 8004d50:	431d      	orrs	r5, r3
 8004d52:	000b      	movs	r3, r1
 8004d54:	021c      	lsls	r4, r3, #8
 8004d56:	6a3b      	ldr	r3, [r7, #32]
 8004d58:	085b      	lsrs	r3, r3, #1
 8004d5a:	60bb      	str	r3, [r7, #8]
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	60fb      	str	r3, [r7, #12]
 8004d60:	68b8      	ldr	r0, [r7, #8]
 8004d62:	68f9      	ldr	r1, [r7, #12]
 8004d64:	1900      	adds	r0, r0, r4
 8004d66:	4169      	adcs	r1, r5
 8004d68:	6a3b      	ldr	r3, [r7, #32]
 8004d6a:	603b      	str	r3, [r7, #0]
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	607b      	str	r3, [r7, #4]
 8004d70:	683a      	ldr	r2, [r7, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f7fb fb3e 	bl	80003f4 <__aeabi_uldivmod>
 8004d78:	0002      	movs	r2, r0
 8004d7a:	000b      	movs	r3, r1
 8004d7c:	0010      	movs	r0, r2
 8004d7e:	0019      	movs	r1, r3
 8004d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d82:	2388      	movs	r3, #136	; 0x88
 8004d84:	005b      	lsls	r3, r3, #1
 8004d86:	58d3      	ldr	r3, [r2, r3]
 8004d88:	0002      	movs	r2, r0
 8004d8a:	60da      	str	r2, [r3, #12]
 8004d8c:	e00c      	b.n	8004da8 <UART_Init+0x184>
	}
	else
#endif
	{
		uart->Instance->BRR = UART_DIV_SAMPLING16(pclk, baud);
 8004d8e:	6a3b      	ldr	r3, [r7, #32]
 8004d90:	085a      	lsrs	r2, r3, #1
 8004d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d94:	18d0      	adds	r0, r2, r3
 8004d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d98:	2388      	movs	r3, #136	; 0x88
 8004d9a:	005b      	lsls	r3, r3, #1
 8004d9c:	58d4      	ldr	r4, [r2, r3]
 8004d9e:	6a39      	ldr	r1, [r7, #32]
 8004da0:	f7fb f9b2 	bl	8000108 <__udivsi3>
 8004da4:	0003      	movs	r3, r0
 8004da6:	60e3      	str	r3, [r4, #12]
	}
	__HAL_UART_ENABLE(uart);
 8004da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004daa:	2388      	movs	r3, #136	; 0x88
 8004dac:	005b      	lsls	r3, r3, #1
 8004dae:	58d3      	ldr	r3, [r2, r3]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004db4:	2388      	movs	r3, #136	; 0x88
 8004db6:	005b      	lsls	r3, r3, #1
 8004db8:	58cb      	ldr	r3, [r1, r3]
 8004dba:	2101      	movs	r1, #1
 8004dbc:	430a      	orrs	r2, r1
 8004dbe:	601a      	str	r2, [r3, #0]

	// Enable RX IRQ.
	__UART_RX_ENABLE(uart);
 8004dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dc2:	2388      	movs	r3, #136	; 0x88
 8004dc4:	005b      	lsls	r3, r3, #1
 8004dc6:	58d3      	ldr	r3, [r2, r3]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004dcc:	2388      	movs	r3, #136	; 0x88
 8004dce:	005b      	lsls	r3, r3, #1
 8004dd0:	58cb      	ldr	r3, [r1, r3]
 8004dd2:	2120      	movs	r1, #32
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	601a      	str	r2, [r3, #0]
}
 8004dd8:	46c0      	nop			; (mov r8, r8)
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	b013      	add	sp, #76	; 0x4c
 8004dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004de0:	1000960c 	.word	0x1000960c
 8004de4:	00000b2a 	.word	0x00000b2a
 8004de8:	40004800 	.word	0x40004800

08004dec <UART_Deinit>:

void UART_Deinit(UART_t * uart)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
	// Disable RX IRQ, and TX IRQ in case a tx is underway.
	__UART_RX_DISABLE(uart);
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	2388      	movs	r3, #136	; 0x88
 8004df8:	005b      	lsls	r3, r3, #1
 8004dfa:	58d3      	ldr	r3, [r2, r3]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	6879      	ldr	r1, [r7, #4]
 8004e00:	2388      	movs	r3, #136	; 0x88
 8004e02:	005b      	lsls	r3, r3, #1
 8004e04:	58cb      	ldr	r3, [r1, r3]
 8004e06:	2120      	movs	r1, #32
 8004e08:	438a      	bics	r2, r1
 8004e0a:	601a      	str	r2, [r3, #0]
	__UART_TX_DISABLE(uart);
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	2388      	movs	r3, #136	; 0x88
 8004e10:	005b      	lsls	r3, r3, #1
 8004e12:	58d3      	ldr	r3, [r2, r3]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	6879      	ldr	r1, [r7, #4]
 8004e18:	2388      	movs	r3, #136	; 0x88
 8004e1a:	005b      	lsls	r3, r3, #1
 8004e1c:	58cb      	ldr	r3, [r1, r3]
 8004e1e:	2180      	movs	r1, #128	; 0x80
 8004e20:	438a      	bics	r2, r1
 8004e22:	601a      	str	r2, [r3, #0]

	__HAL_UART_DISABLE(uart);
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	2388      	movs	r3, #136	; 0x88
 8004e28:	005b      	lsls	r3, r3, #1
 8004e2a:	58d3      	ldr	r3, [r2, r3]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	6879      	ldr	r1, [r7, #4]
 8004e30:	2388      	movs	r3, #136	; 0x88
 8004e32:	005b      	lsls	r3, r3, #1
 8004e34:	58cb      	ldr	r3, [r1, r3]
 8004e36:	2101      	movs	r1, #1
 8004e38:	438a      	bics	r2, r1
 8004e3a:	601a      	str	r2, [r3, #0]
	// Clear all control registers.
	uart->Instance->CR1 = 0x0U;
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	2388      	movs	r3, #136	; 0x88
 8004e40:	005b      	lsls	r3, r3, #1
 8004e42:	58d3      	ldr	r3, [r2, r3]
 8004e44:	2200      	movs	r2, #0
 8004e46:	601a      	str	r2, [r3, #0]
	uart->Instance->CR2 = 0x0U;
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	2388      	movs	r3, #136	; 0x88
 8004e4c:	005b      	lsls	r3, r3, #1
 8004e4e:	58d3      	ldr	r3, [r2, r3]
 8004e50:	2200      	movs	r2, #0
 8004e52:	605a      	str	r2, [r3, #4]
	uart->Instance->CR3 = 0x0U;
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	2388      	movs	r3, #136	; 0x88
 8004e58:	005b      	lsls	r3, r3, #1
 8004e5a:	58d3      	ldr	r3, [r2, r3]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	609a      	str	r2, [r3, #8]

	// Disable uart specific GPIO and clocks.
	UARTx_Deinit(uart);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	0018      	movs	r0, r3
 8004e64:	f000 f890 	bl	8004f88 <UARTx_Deinit>
}
 8004e68:	46c0      	nop			; (mov r8, r8)
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	b002      	add	sp, #8
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <UART_ReadCount>:
{
	UART_Write(uart, (const uint8_t *)str, strlen(str));
}

uint32_t UART_ReadCount(UART_t * uart)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
	__UART_RX_DISABLE(uart);
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	2388      	movs	r3, #136	; 0x88
 8004e7c:	005b      	lsls	r3, r3, #1
 8004e7e:	58d3      	ldr	r3, [r2, r3]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	6879      	ldr	r1, [r7, #4]
 8004e84:	2388      	movs	r3, #136	; 0x88
 8004e86:	005b      	lsls	r3, r3, #1
 8004e88:	58cb      	ldr	r3, [r1, r3]
 8004e8a:	2120      	movs	r1, #32
 8004e8c:	438a      	bics	r2, r1
 8004e8e:	601a      	str	r2, [r3, #0]
	// We have to disable the IRQs, as the IRQ may bump the tail.
	uint32_t count = UART_BFR_WRAP(uart->rx.head - uart->rx.tail);
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	2384      	movs	r3, #132	; 0x84
 8004e94:	005b      	lsls	r3, r3, #1
 8004e96:	58d2      	ldr	r2, [r2, r3]
 8004e98:	6879      	ldr	r1, [r7, #4]
 8004e9a:	2386      	movs	r3, #134	; 0x86
 8004e9c:	005b      	lsls	r3, r3, #1
 8004e9e:	58cb      	ldr	r3, [r1, r3]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	227f      	movs	r2, #127	; 0x7f
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	60fb      	str	r3, [r7, #12]
	__UART_RX_ENABLE(uart);
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	2388      	movs	r3, #136	; 0x88
 8004eac:	005b      	lsls	r3, r3, #1
 8004eae:	58d3      	ldr	r3, [r2, r3]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	6879      	ldr	r1, [r7, #4]
 8004eb4:	2388      	movs	r3, #136	; 0x88
 8004eb6:	005b      	lsls	r3, r3, #1
 8004eb8:	58cb      	ldr	r3, [r1, r3]
 8004eba:	2120      	movs	r1, #32
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	601a      	str	r2, [r3, #0]
	return count;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
}
 8004ec2:	0018      	movs	r0, r3
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	b004      	add	sp, #16
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <UART_Read>:

uint32_t UART_Read(UART_t * uart, uint8_t * data, uint32_t count)
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b088      	sub	sp, #32
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	60f8      	str	r0, [r7, #12]
 8004ed2:	60b9      	str	r1, [r7, #8]
 8004ed4:	607a      	str	r2, [r7, #4]
	uint32_t available = UART_ReadCount(uart);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	0018      	movs	r0, r3
 8004eda:	f7ff ffc9 	bl	8004e70 <UART_ReadCount>
 8004ede:	0003      	movs	r3, r0
 8004ee0:	617b      	str	r3, [r7, #20]
	if (available < count)
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d201      	bcs.n	8004eee <UART_Read+0x24>
	{
		count = available;
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	607b      	str	r3, [r7, #4]
	}

	// As long as we read faster than the tail is nudged, we should be fine.
	uint32_t tail = uart->rx.tail;
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	2386      	movs	r3, #134	; 0x86
 8004ef2:	005b      	lsls	r3, r3, #1
 8004ef4:	58d3      	ldr	r3, [r2, r3]
 8004ef6:	61fb      	str	r3, [r7, #28]
	for (uint32_t i = 0; i < count; i++)
 8004ef8:	2300      	movs	r3, #0
 8004efa:	61bb      	str	r3, [r7, #24]
 8004efc:	e011      	b.n	8004f22 <UART_Read+0x58>
	{
		*data++ = uart->rx.buffer[tail];
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	1c5a      	adds	r2, r3, #1
 8004f02:	60ba      	str	r2, [r7, #8]
 8004f04:	68f9      	ldr	r1, [r7, #12]
 8004f06:	2088      	movs	r0, #136	; 0x88
 8004f08:	69fa      	ldr	r2, [r7, #28]
 8004f0a:	188a      	adds	r2, r1, r2
 8004f0c:	1812      	adds	r2, r2, r0
 8004f0e:	7812      	ldrb	r2, [r2, #0]
 8004f10:	701a      	strb	r2, [r3, #0]
		tail = UART_BFR_WRAP(tail + 1);
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	3301      	adds	r3, #1
 8004f16:	227f      	movs	r2, #127	; 0x7f
 8004f18:	4013      	ands	r3, r2
 8004f1a:	61fb      	str	r3, [r7, #28]
	for (uint32_t i = 0; i < count; i++)
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	3301      	adds	r3, #1
 8004f20:	61bb      	str	r3, [r7, #24]
 8004f22:	69ba      	ldr	r2, [r7, #24]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d3e9      	bcc.n	8004efe <UART_Read+0x34>
	}
	uart->rx.tail = tail;
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	2386      	movs	r3, #134	; 0x86
 8004f2e:	005b      	lsls	r3, r3, #1
 8004f30:	69f9      	ldr	r1, [r7, #28]
 8004f32:	50d1      	str	r1, [r2, r3]

	return count;
 8004f34:	687b      	ldr	r3, [r7, #4]
}
 8004f36:	0018      	movs	r0, r3
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	b008      	add	sp, #32
 8004f3c:	bd80      	pop	{r7, pc}
	...

08004f40 <UARTx_Init>:
/*
 * PRIVATE FUNCTIONS
 */

static void UARTx_Init(UART_t * uart)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
#ifdef UARTLP_GPIO
	if (uart == UART_LP)
 8004f48:	4b0c      	ldr	r3, [pc, #48]	; (8004f7c <UARTx_Init+0x3c>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d110      	bne.n	8004f74 <UARTx_Init+0x34>
	{
		__HAL_RCC_LPUART1_CLK_ENABLE();
 8004f52:	4b0b      	ldr	r3, [pc, #44]	; (8004f80 <UARTx_Init+0x40>)
 8004f54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f56:	4b0a      	ldr	r3, [pc, #40]	; (8004f80 <UARTx_Init+0x40>)
 8004f58:	2180      	movs	r1, #128	; 0x80
 8004f5a:	02c9      	lsls	r1, r1, #11
 8004f5c:	430a      	orrs	r2, r1
 8004f5e:	639a      	str	r2, [r3, #56]	; 0x38
		GPIO_EnableAlternate(UARTLP_GPIO, UARTLP_PINS, 0, UARTLP_AF);
 8004f60:	2380      	movs	r3, #128	; 0x80
 8004f62:	0119      	lsls	r1, r3, #4
 8004f64:	4807      	ldr	r0, [pc, #28]	; (8004f84 <UARTx_Init+0x44>)
 8004f66:	2304      	movs	r3, #4
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f7ff f947 	bl	80041fc <GPIO_EnableAlternate>
		HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8004f6e:	201d      	movs	r0, #29
 8004f70:	f7fc fefd 	bl	8001d6e <HAL_NVIC_EnableIRQ>
		__HAL_RCC_USART5_CLK_ENABLE();
		GPIO_EnableAlternate(UART5_GPIO, UART5_PINS, 0, UART5_AF);
		HAL_NVIC_EnableIRQ(USART4_5_IRQn);
	}
#endif
}
 8004f74:	46c0      	nop			; (mov r8, r8)
 8004f76:	46bd      	mov	sp, r7
 8004f78:	b002      	add	sp, #8
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	2000018c 	.word	0x2000018c
 8004f80:	40021000 	.word	0x40021000
 8004f84:	50000400 	.word	0x50000400

08004f88 <UARTx_Deinit>:

static void UARTx_Deinit(UART_t * uart)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
#ifdef UARTLP_GPIO
	if (uart == UART_LP)
 8004f90:	4b0c      	ldr	r3, [pc, #48]	; (8004fc4 <UARTx_Deinit+0x3c>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d10f      	bne.n	8004fba <UARTx_Deinit+0x32>
	{
		HAL_NVIC_DisableIRQ(LPUART1_IRQn);
 8004f9a:	201d      	movs	r0, #29
 8004f9c:	f7fc fef7 	bl	8001d8e <HAL_NVIC_DisableIRQ>
		__HAL_RCC_LPUART1_CLK_DISABLE();
 8004fa0:	4b09      	ldr	r3, [pc, #36]	; (8004fc8 <UARTx_Deinit+0x40>)
 8004fa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fa4:	4b08      	ldr	r3, [pc, #32]	; (8004fc8 <UARTx_Deinit+0x40>)
 8004fa6:	4909      	ldr	r1, [pc, #36]	; (8004fcc <UARTx_Deinit+0x44>)
 8004fa8:	400a      	ands	r2, r1
 8004faa:	639a      	str	r2, [r3, #56]	; 0x38
		GPIO_Deinit(UARTLP_GPIO, UARTLP_PINS);
 8004fac:	2380      	movs	r3, #128	; 0x80
 8004fae:	011b      	lsls	r3, r3, #4
 8004fb0:	4a07      	ldr	r2, [pc, #28]	; (8004fd0 <UARTx_Deinit+0x48>)
 8004fb2:	0019      	movs	r1, r3
 8004fb4:	0010      	movs	r0, r2
 8004fb6:	f7ff fe1d 	bl	8004bf4 <GPIO_Deinit>
		HAL_NVIC_DisableIRQ(USART4_5_IRQn);
		__HAL_RCC_USART5_CLK_DISABLE();
		GPIO_Deinit(UART5_GPIO, UART5_PINS);
	}
#endif
}
 8004fba:	46c0      	nop			; (mov r8, r8)
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	b002      	add	sp, #8
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	46c0      	nop			; (mov r8, r8)
 8004fc4:	2000018c 	.word	0x2000018c
 8004fc8:	40021000 	.word	0x40021000
 8004fcc:	fffbffff 	.word	0xfffbffff
 8004fd0:	50000400 	.word	0x50000400

08004fd4 <UART_IRQHandler>:
 * INTERRUPT ROUTINES
 */


void UART_IRQHandler(UART_t *uart)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
	uint32_t flags = uart->Instance->ISR;
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	2388      	movs	r3, #136	; 0x88
 8004fe0:	005b      	lsls	r3, r3, #1
 8004fe2:	58d3      	ldr	r3, [r2, r3]
 8004fe4:	69db      	ldr	r3, [r3, #28]
 8004fe6:	60fb      	str	r3, [r7, #12]

	if (flags & USART_ISR_RXNE)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2220      	movs	r2, #32
 8004fec:	4013      	ands	r3, r2
 8004fee:	d031      	beq.n	8005054 <UART_IRQHandler+0x80>
	{
		// New RX data. Put it in the RX buffer.
		uart->rx.buffer[uart->rx.head] = uart->Instance->RDR;
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	2388      	movs	r3, #136	; 0x88
 8004ff4:	005b      	lsls	r3, r3, #1
 8004ff6:	58d3      	ldr	r3, [r2, r3]
 8004ff8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	2384      	movs	r3, #132	; 0x84
 8004ffe:	005b      	lsls	r3, r3, #1
 8005000:	58d3      	ldr	r3, [r2, r3]
 8005002:	b2c8      	uxtb	r0, r1
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	2188      	movs	r1, #136	; 0x88
 8005008:	18d3      	adds	r3, r2, r3
 800500a:	185b      	adds	r3, r3, r1
 800500c:	1c02      	adds	r2, r0, #0
 800500e:	701a      	strb	r2, [r3, #0]
		uart->rx.head = UART_BFR_WRAP(uart->rx.head + 1);
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	2384      	movs	r3, #132	; 0x84
 8005014:	005b      	lsls	r3, r3, #1
 8005016:	58d3      	ldr	r3, [r2, r3]
 8005018:	3301      	adds	r3, #1
 800501a:	227f      	movs	r2, #127	; 0x7f
 800501c:	4013      	ands	r3, r2
 800501e:	0019      	movs	r1, r3
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	2384      	movs	r3, #132	; 0x84
 8005024:	005b      	lsls	r3, r3, #1
 8005026:	50d1      	str	r1, [r2, r3]
		if (uart->rx.head == uart->rx.tail) {
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	2384      	movs	r3, #132	; 0x84
 800502c:	005b      	lsls	r3, r3, #1
 800502e:	58d2      	ldr	r2, [r2, r3]
 8005030:	6879      	ldr	r1, [r7, #4]
 8005032:	2386      	movs	r3, #134	; 0x86
 8005034:	005b      	lsls	r3, r3, #1
 8005036:	58cb      	ldr	r3, [r1, r3]
 8005038:	429a      	cmp	r2, r3
 800503a:	d10b      	bne.n	8005054 <UART_IRQHandler+0x80>
			// The head just caught up with the tail. Uh oh. Increment the tail.
			// Note, this causes flaming huge issues.
			uart->rx.tail = UART_BFR_WRAP(uart->rx.tail + 1);
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	2386      	movs	r3, #134	; 0x86
 8005040:	005b      	lsls	r3, r3, #1
 8005042:	58d3      	ldr	r3, [r2, r3]
 8005044:	3301      	adds	r3, #1
 8005046:	227f      	movs	r2, #127	; 0x7f
 8005048:	4013      	ands	r3, r2
 800504a:	0019      	movs	r1, r3
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	2386      	movs	r3, #134	; 0x86
 8005050:	005b      	lsls	r3, r3, #1
 8005052:	50d1      	str	r1, [r2, r3]
		}
	}

	if (flags & USART_ISR_TXE)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2280      	movs	r2, #128	; 0x80
 8005058:	4013      	ands	r3, r2
 800505a:	d028      	beq.n	80050ae <UART_IRQHandler+0xda>
	{
		// No byte being transmitted..
		if (uart->tx.head != uart->tx.tail)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2280      	movs	r2, #128	; 0x80
 8005060:	589a      	ldr	r2, [r3, r2]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2184      	movs	r1, #132	; 0x84
 8005066:	585b      	ldr	r3, [r3, r1]
 8005068:	429a      	cmp	r2, r3
 800506a:	d014      	beq.n	8005096 <UART_IRQHandler+0xc2>
		{
			// Send a byte out.
			uart->Instance->TDR = uart->tx.buffer[uart->tx.tail];
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2284      	movs	r2, #132	; 0x84
 8005070:	589b      	ldr	r3, [r3, r2]
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	5cd1      	ldrb	r1, [r2, r3]
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	2388      	movs	r3, #136	; 0x88
 800507a:	005b      	lsls	r3, r3, #1
 800507c:	58d3      	ldr	r3, [r2, r3]
 800507e:	000a      	movs	r2, r1
 8005080:	629a      	str	r2, [r3, #40]	; 0x28
			uart->tx.tail = UART_BFR_WRAP(uart->tx.tail + 1);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2284      	movs	r2, #132	; 0x84
 8005086:	589b      	ldr	r3, [r3, r2]
 8005088:	3301      	adds	r3, #1
 800508a:	227f      	movs	r2, #127	; 0x7f
 800508c:	401a      	ands	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2184      	movs	r1, #132	; 0x84
 8005092:	505a      	str	r2, [r3, r1]
 8005094:	e00b      	b.n	80050ae <UART_IRQHandler+0xda>
		}
		else
		{
			// Tail caught up with head: no bytes remain.
			// Disable the TX IRQ.
			__UART_TX_DISABLE(uart);
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	2388      	movs	r3, #136	; 0x88
 800509a:	005b      	lsls	r3, r3, #1
 800509c:	58d3      	ldr	r3, [r2, r3]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	6879      	ldr	r1, [r7, #4]
 80050a2:	2388      	movs	r3, #136	; 0x88
 80050a4:	005b      	lsls	r3, r3, #1
 80050a6:	58cb      	ldr	r3, [r1, r3]
 80050a8:	2180      	movs	r1, #128	; 0x80
 80050aa:	438a      	bics	r2, r1
 80050ac:	601a      	str	r2, [r3, #0]
		}
	}

	if (flags & (USART_ISR_ORE | USART_ISR_PE | USART_ISR_NE | USART_ISR_FE))
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	220f      	movs	r2, #15
 80050b2:	4013      	ands	r3, r2
 80050b4:	d00b      	beq.n	80050ce <UART_IRQHandler+0xfa>
	{
		__UART_CLEAR_FLAGS(uart, (UART_CLEAR_PEF | UART_CLEAR_FEF | UART_CLEAR_NEF | UART_CLEAR_OREF));
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	2388      	movs	r3, #136	; 0x88
 80050ba:	005b      	lsls	r3, r3, #1
 80050bc:	58d3      	ldr	r3, [r2, r3]
 80050be:	6a1a      	ldr	r2, [r3, #32]
 80050c0:	6879      	ldr	r1, [r7, #4]
 80050c2:	2388      	movs	r3, #136	; 0x88
 80050c4:	005b      	lsls	r3, r3, #1
 80050c6:	58cb      	ldr	r3, [r1, r3]
 80050c8:	210f      	movs	r1, #15
 80050ca:	430a      	orrs	r2, r1
 80050cc:	621a      	str	r2, [r3, #32]
	}
}
 80050ce:	46c0      	nop			; (mov r8, r8)
 80050d0:	46bd      	mov	sp, r7
 80050d2:	b004      	add	sp, #16
 80050d4:	bd80      	pop	{r7, pc}
	...

080050d8 <LPUART1_IRQHandler>:


#ifdef UARTLP_GPIO
void LPUART1_IRQHandler(void)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	af00      	add	r7, sp, #0
	UART_IRQHandler(UART_LP);
 80050dc:	4b03      	ldr	r3, [pc, #12]	; (80050ec <LPUART1_IRQHandler+0x14>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	0018      	movs	r0, r3
 80050e2:	f7ff ff77 	bl	8004fd4 <UART_IRQHandler>
}
 80050e6:	46c0      	nop			; (mov r8, r8)
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	2000018c 	.word	0x2000018c

080050f0 <CLK_GetHCLKFreq>:
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	af00      	add	r7, sp, #0
	return CLK_SYSCLK_FREQ;
 80050f4:	4b01      	ldr	r3, [pc, #4]	; (80050fc <CLK_GetHCLKFreq+0xc>)
}
 80050f6:	0018      	movs	r0, r3
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	01e84800 	.word	0x01e84800

08005100 <US_Delay>:
}

#else //US_ENABLE

void __attribute__((optimize("-Os"))) US_Delay(uint32_t us)
{
 8005100:	b513      	push	{r0, r1, r4, lr}
 8005102:	0004      	movs	r4, r0
	// -Os will generate a straight forward output.
	// 11225 is our tuned factor.
	volatile uint32_t i = (us * (CLK_GetHCLKFreq() >> 10)) / 11225;
 8005104:	f7ff fff4 	bl	80050f0 <CLK_GetHCLKFreq>
 8005108:	0a80      	lsrs	r0, r0, #10
 800510a:	4360      	muls	r0, r4
 800510c:	4904      	ldr	r1, [pc, #16]	; (8005120 <US_Delay+0x20>)
 800510e:	f7fa fffb 	bl	8000108 <__udivsi3>
 8005112:	9001      	str	r0, [sp, #4]
	while(i--);
 8005114:	9b01      	ldr	r3, [sp, #4]
 8005116:	1e5a      	subs	r2, r3, #1
 8005118:	9201      	str	r2, [sp, #4]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d1fa      	bne.n	8005114 <US_Delay+0x14>
}
 800511e:	bd13      	pop	{r0, r1, r4, pc}
 8005120:	00002bd9 	.word	0x00002bd9

08005124 <__libc_init_array>:
 8005124:	b570      	push	{r4, r5, r6, lr}
 8005126:	2600      	movs	r6, #0
 8005128:	4d0c      	ldr	r5, [pc, #48]	; (800515c <__libc_init_array+0x38>)
 800512a:	4c0d      	ldr	r4, [pc, #52]	; (8005160 <__libc_init_array+0x3c>)
 800512c:	1b64      	subs	r4, r4, r5
 800512e:	10a4      	asrs	r4, r4, #2
 8005130:	42a6      	cmp	r6, r4
 8005132:	d109      	bne.n	8005148 <__libc_init_array+0x24>
 8005134:	2600      	movs	r6, #0
 8005136:	f000 f82b 	bl	8005190 <_init>
 800513a:	4d0a      	ldr	r5, [pc, #40]	; (8005164 <__libc_init_array+0x40>)
 800513c:	4c0a      	ldr	r4, [pc, #40]	; (8005168 <__libc_init_array+0x44>)
 800513e:	1b64      	subs	r4, r4, r5
 8005140:	10a4      	asrs	r4, r4, #2
 8005142:	42a6      	cmp	r6, r4
 8005144:	d105      	bne.n	8005152 <__libc_init_array+0x2e>
 8005146:	bd70      	pop	{r4, r5, r6, pc}
 8005148:	00b3      	lsls	r3, r6, #2
 800514a:	58eb      	ldr	r3, [r5, r3]
 800514c:	4798      	blx	r3
 800514e:	3601      	adds	r6, #1
 8005150:	e7ee      	b.n	8005130 <__libc_init_array+0xc>
 8005152:	00b3      	lsls	r3, r6, #2
 8005154:	58eb      	ldr	r3, [r5, r3]
 8005156:	4798      	blx	r3
 8005158:	3601      	adds	r6, #1
 800515a:	e7f2      	b.n	8005142 <__libc_init_array+0x1e>
 800515c:	080051b0 	.word	0x080051b0
 8005160:	080051b0 	.word	0x080051b0
 8005164:	080051b0 	.word	0x080051b0
 8005168:	080051b4 	.word	0x080051b4

0800516c <memcpy>:
 800516c:	2300      	movs	r3, #0
 800516e:	b510      	push	{r4, lr}
 8005170:	429a      	cmp	r2, r3
 8005172:	d100      	bne.n	8005176 <memcpy+0xa>
 8005174:	bd10      	pop	{r4, pc}
 8005176:	5ccc      	ldrb	r4, [r1, r3]
 8005178:	54c4      	strb	r4, [r0, r3]
 800517a:	3301      	adds	r3, #1
 800517c:	e7f8      	b.n	8005170 <memcpy+0x4>

0800517e <memset>:
 800517e:	0003      	movs	r3, r0
 8005180:	1882      	adds	r2, r0, r2
 8005182:	4293      	cmp	r3, r2
 8005184:	d100      	bne.n	8005188 <memset+0xa>
 8005186:	4770      	bx	lr
 8005188:	7019      	strb	r1, [r3, #0]
 800518a:	3301      	adds	r3, #1
 800518c:	e7f9      	b.n	8005182 <memset+0x4>
	...

08005190 <_init>:
 8005190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005192:	46c0      	nop			; (mov r8, r8)
 8005194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005196:	bc08      	pop	{r3}
 8005198:	469e      	mov	lr, r3
 800519a:	4770      	bx	lr

0800519c <_fini>:
 800519c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800519e:	46c0      	nop			; (mov r8, r8)
 80051a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051a2:	bc08      	pop	{r3}
 80051a4:	469e      	mov	lr, r3
 80051a6:	4770      	bx	lr
