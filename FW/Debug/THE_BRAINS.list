
THE_BRAINS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f08  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08004fc8  08004fc8  00014fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fd0  08004fd0  00020290  2**0
                  CONTENTS
  4 .ARM          00000008  08004fd0  08004fd0  00014fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fd8  08004fd8  00020290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fd8  08004fd8  00014fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fdc  08004fdc  00014fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000290  20000000  08004fe0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  20000290  08005270  00020290  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005a4  08005270  000205a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007fbd  00000000  00000000  000202b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029aa  00000000  00000000  00028275  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000960  00000000  00000000  0002ac20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000830  00000000  00000000  0002b580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001661b  00000000  00000000  0002bdb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ed74  00000000  00000000  000423cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007faf7  00000000  00000000  0005113f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d0c36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e50  00000000  00000000  000d0c88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000290 	.word	0x20000290
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004fb0 	.word	0x08004fb0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000294 	.word	0x20000294
 8000104:	08004fb0 	.word	0x08004fb0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	0008      	movs	r0, r1
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	; (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f806 	bl	8000434 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__udivmoddi4>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	4657      	mov	r7, sl
 8000438:	464e      	mov	r6, r9
 800043a:	4645      	mov	r5, r8
 800043c:	46de      	mov	lr, fp
 800043e:	b5e0      	push	{r5, r6, r7, lr}
 8000440:	0004      	movs	r4, r0
 8000442:	000d      	movs	r5, r1
 8000444:	4692      	mov	sl, r2
 8000446:	4699      	mov	r9, r3
 8000448:	b083      	sub	sp, #12
 800044a:	428b      	cmp	r3, r1
 800044c:	d830      	bhi.n	80004b0 <__udivmoddi4+0x7c>
 800044e:	d02d      	beq.n	80004ac <__udivmoddi4+0x78>
 8000450:	4649      	mov	r1, r9
 8000452:	4650      	mov	r0, sl
 8000454:	f000 f8ba 	bl	80005cc <__clzdi2>
 8000458:	0029      	movs	r1, r5
 800045a:	0006      	movs	r6, r0
 800045c:	0020      	movs	r0, r4
 800045e:	f000 f8b5 	bl	80005cc <__clzdi2>
 8000462:	1a33      	subs	r3, r6, r0
 8000464:	4698      	mov	r8, r3
 8000466:	3b20      	subs	r3, #32
 8000468:	469b      	mov	fp, r3
 800046a:	d433      	bmi.n	80004d4 <__udivmoddi4+0xa0>
 800046c:	465a      	mov	r2, fp
 800046e:	4653      	mov	r3, sl
 8000470:	4093      	lsls	r3, r2
 8000472:	4642      	mov	r2, r8
 8000474:	001f      	movs	r7, r3
 8000476:	4653      	mov	r3, sl
 8000478:	4093      	lsls	r3, r2
 800047a:	001e      	movs	r6, r3
 800047c:	42af      	cmp	r7, r5
 800047e:	d83a      	bhi.n	80004f6 <__udivmoddi4+0xc2>
 8000480:	42af      	cmp	r7, r5
 8000482:	d100      	bne.n	8000486 <__udivmoddi4+0x52>
 8000484:	e078      	b.n	8000578 <__udivmoddi4+0x144>
 8000486:	465b      	mov	r3, fp
 8000488:	1ba4      	subs	r4, r4, r6
 800048a:	41bd      	sbcs	r5, r7
 800048c:	2b00      	cmp	r3, #0
 800048e:	da00      	bge.n	8000492 <__udivmoddi4+0x5e>
 8000490:	e075      	b.n	800057e <__udivmoddi4+0x14a>
 8000492:	2200      	movs	r2, #0
 8000494:	2300      	movs	r3, #0
 8000496:	9200      	str	r2, [sp, #0]
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	465a      	mov	r2, fp
 800049e:	4093      	lsls	r3, r2
 80004a0:	9301      	str	r3, [sp, #4]
 80004a2:	2301      	movs	r3, #1
 80004a4:	4642      	mov	r2, r8
 80004a6:	4093      	lsls	r3, r2
 80004a8:	9300      	str	r3, [sp, #0]
 80004aa:	e028      	b.n	80004fe <__udivmoddi4+0xca>
 80004ac:	4282      	cmp	r2, r0
 80004ae:	d9cf      	bls.n	8000450 <__udivmoddi4+0x1c>
 80004b0:	2200      	movs	r2, #0
 80004b2:	2300      	movs	r3, #0
 80004b4:	9200      	str	r2, [sp, #0]
 80004b6:	9301      	str	r3, [sp, #4]
 80004b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <__udivmoddi4+0x8e>
 80004be:	601c      	str	r4, [r3, #0]
 80004c0:	605d      	str	r5, [r3, #4]
 80004c2:	9800      	ldr	r0, [sp, #0]
 80004c4:	9901      	ldr	r1, [sp, #4]
 80004c6:	b003      	add	sp, #12
 80004c8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ca:	46bb      	mov	fp, r7
 80004cc:	46b2      	mov	sl, r6
 80004ce:	46a9      	mov	r9, r5
 80004d0:	46a0      	mov	r8, r4
 80004d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d4:	4642      	mov	r2, r8
 80004d6:	2320      	movs	r3, #32
 80004d8:	1a9b      	subs	r3, r3, r2
 80004da:	4652      	mov	r2, sl
 80004dc:	40da      	lsrs	r2, r3
 80004de:	4641      	mov	r1, r8
 80004e0:	0013      	movs	r3, r2
 80004e2:	464a      	mov	r2, r9
 80004e4:	408a      	lsls	r2, r1
 80004e6:	0017      	movs	r7, r2
 80004e8:	4642      	mov	r2, r8
 80004ea:	431f      	orrs	r7, r3
 80004ec:	4653      	mov	r3, sl
 80004ee:	4093      	lsls	r3, r2
 80004f0:	001e      	movs	r6, r3
 80004f2:	42af      	cmp	r7, r5
 80004f4:	d9c4      	bls.n	8000480 <__udivmoddi4+0x4c>
 80004f6:	2200      	movs	r2, #0
 80004f8:	2300      	movs	r3, #0
 80004fa:	9200      	str	r2, [sp, #0]
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	4643      	mov	r3, r8
 8000500:	2b00      	cmp	r3, #0
 8000502:	d0d9      	beq.n	80004b8 <__udivmoddi4+0x84>
 8000504:	07fb      	lsls	r3, r7, #31
 8000506:	0872      	lsrs	r2, r6, #1
 8000508:	431a      	orrs	r2, r3
 800050a:	4646      	mov	r6, r8
 800050c:	087b      	lsrs	r3, r7, #1
 800050e:	e00e      	b.n	800052e <__udivmoddi4+0xfa>
 8000510:	42ab      	cmp	r3, r5
 8000512:	d101      	bne.n	8000518 <__udivmoddi4+0xe4>
 8000514:	42a2      	cmp	r2, r4
 8000516:	d80c      	bhi.n	8000532 <__udivmoddi4+0xfe>
 8000518:	1aa4      	subs	r4, r4, r2
 800051a:	419d      	sbcs	r5, r3
 800051c:	2001      	movs	r0, #1
 800051e:	1924      	adds	r4, r4, r4
 8000520:	416d      	adcs	r5, r5
 8000522:	2100      	movs	r1, #0
 8000524:	3e01      	subs	r6, #1
 8000526:	1824      	adds	r4, r4, r0
 8000528:	414d      	adcs	r5, r1
 800052a:	2e00      	cmp	r6, #0
 800052c:	d006      	beq.n	800053c <__udivmoddi4+0x108>
 800052e:	42ab      	cmp	r3, r5
 8000530:	d9ee      	bls.n	8000510 <__udivmoddi4+0xdc>
 8000532:	3e01      	subs	r6, #1
 8000534:	1924      	adds	r4, r4, r4
 8000536:	416d      	adcs	r5, r5
 8000538:	2e00      	cmp	r6, #0
 800053a:	d1f8      	bne.n	800052e <__udivmoddi4+0xfa>
 800053c:	9800      	ldr	r0, [sp, #0]
 800053e:	9901      	ldr	r1, [sp, #4]
 8000540:	465b      	mov	r3, fp
 8000542:	1900      	adds	r0, r0, r4
 8000544:	4169      	adcs	r1, r5
 8000546:	2b00      	cmp	r3, #0
 8000548:	db24      	blt.n	8000594 <__udivmoddi4+0x160>
 800054a:	002b      	movs	r3, r5
 800054c:	465a      	mov	r2, fp
 800054e:	4644      	mov	r4, r8
 8000550:	40d3      	lsrs	r3, r2
 8000552:	002a      	movs	r2, r5
 8000554:	40e2      	lsrs	r2, r4
 8000556:	001c      	movs	r4, r3
 8000558:	465b      	mov	r3, fp
 800055a:	0015      	movs	r5, r2
 800055c:	2b00      	cmp	r3, #0
 800055e:	db2a      	blt.n	80005b6 <__udivmoddi4+0x182>
 8000560:	0026      	movs	r6, r4
 8000562:	409e      	lsls	r6, r3
 8000564:	0033      	movs	r3, r6
 8000566:	0026      	movs	r6, r4
 8000568:	4647      	mov	r7, r8
 800056a:	40be      	lsls	r6, r7
 800056c:	0032      	movs	r2, r6
 800056e:	1a80      	subs	r0, r0, r2
 8000570:	4199      	sbcs	r1, r3
 8000572:	9000      	str	r0, [sp, #0]
 8000574:	9101      	str	r1, [sp, #4]
 8000576:	e79f      	b.n	80004b8 <__udivmoddi4+0x84>
 8000578:	42a3      	cmp	r3, r4
 800057a:	d8bc      	bhi.n	80004f6 <__udivmoddi4+0xc2>
 800057c:	e783      	b.n	8000486 <__udivmoddi4+0x52>
 800057e:	4642      	mov	r2, r8
 8000580:	2320      	movs	r3, #32
 8000582:	2100      	movs	r1, #0
 8000584:	1a9b      	subs	r3, r3, r2
 8000586:	2200      	movs	r2, #0
 8000588:	9100      	str	r1, [sp, #0]
 800058a:	9201      	str	r2, [sp, #4]
 800058c:	2201      	movs	r2, #1
 800058e:	40da      	lsrs	r2, r3
 8000590:	9201      	str	r2, [sp, #4]
 8000592:	e786      	b.n	80004a2 <__udivmoddi4+0x6e>
 8000594:	4642      	mov	r2, r8
 8000596:	2320      	movs	r3, #32
 8000598:	1a9b      	subs	r3, r3, r2
 800059a:	002a      	movs	r2, r5
 800059c:	4646      	mov	r6, r8
 800059e:	409a      	lsls	r2, r3
 80005a0:	0023      	movs	r3, r4
 80005a2:	40f3      	lsrs	r3, r6
 80005a4:	4644      	mov	r4, r8
 80005a6:	4313      	orrs	r3, r2
 80005a8:	002a      	movs	r2, r5
 80005aa:	40e2      	lsrs	r2, r4
 80005ac:	001c      	movs	r4, r3
 80005ae:	465b      	mov	r3, fp
 80005b0:	0015      	movs	r5, r2
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	dad4      	bge.n	8000560 <__udivmoddi4+0x12c>
 80005b6:	4642      	mov	r2, r8
 80005b8:	002f      	movs	r7, r5
 80005ba:	2320      	movs	r3, #32
 80005bc:	0026      	movs	r6, r4
 80005be:	4097      	lsls	r7, r2
 80005c0:	1a9b      	subs	r3, r3, r2
 80005c2:	40de      	lsrs	r6, r3
 80005c4:	003b      	movs	r3, r7
 80005c6:	4333      	orrs	r3, r6
 80005c8:	e7cd      	b.n	8000566 <__udivmoddi4+0x132>
 80005ca:	46c0      	nop			; (mov r8, r8)

080005cc <__clzdi2>:
 80005cc:	b510      	push	{r4, lr}
 80005ce:	2900      	cmp	r1, #0
 80005d0:	d103      	bne.n	80005da <__clzdi2+0xe>
 80005d2:	f000 f807 	bl	80005e4 <__clzsi2>
 80005d6:	3020      	adds	r0, #32
 80005d8:	e002      	b.n	80005e0 <__clzdi2+0x14>
 80005da:	0008      	movs	r0, r1
 80005dc:	f000 f802 	bl	80005e4 <__clzsi2>
 80005e0:	bd10      	pop	{r4, pc}
 80005e2:	46c0      	nop			; (mov r8, r8)

080005e4 <__clzsi2>:
 80005e4:	211c      	movs	r1, #28
 80005e6:	2301      	movs	r3, #1
 80005e8:	041b      	lsls	r3, r3, #16
 80005ea:	4298      	cmp	r0, r3
 80005ec:	d301      	bcc.n	80005f2 <__clzsi2+0xe>
 80005ee:	0c00      	lsrs	r0, r0, #16
 80005f0:	3910      	subs	r1, #16
 80005f2:	0a1b      	lsrs	r3, r3, #8
 80005f4:	4298      	cmp	r0, r3
 80005f6:	d301      	bcc.n	80005fc <__clzsi2+0x18>
 80005f8:	0a00      	lsrs	r0, r0, #8
 80005fa:	3908      	subs	r1, #8
 80005fc:	091b      	lsrs	r3, r3, #4
 80005fe:	4298      	cmp	r0, r3
 8000600:	d301      	bcc.n	8000606 <__clzsi2+0x22>
 8000602:	0900      	lsrs	r0, r0, #4
 8000604:	3904      	subs	r1, #4
 8000606:	a202      	add	r2, pc, #8	; (adr r2, 8000610 <__clzsi2+0x2c>)
 8000608:	5c10      	ldrb	r0, [r2, r0]
 800060a:	1840      	adds	r0, r0, r1
 800060c:	4770      	bx	lr
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	02020304 	.word	0x02020304
 8000614:	01010101 	.word	0x01010101
	...

08000620 <GPIO_EnableOutput>:
{
	GPIO_Init(gpio, pin, GPIO_Mode_Analog);
}

static inline void GPIO_EnableOutput(GPIO_t * gpio, uint32_t pin, GPIO_State_t state)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	60f8      	str	r0, [r7, #12]
 8000628:	60b9      	str	r1, [r7, #8]
 800062a:	1dfb      	adds	r3, r7, #7
 800062c:	701a      	strb	r2, [r3, #0]
	GPIO_Write(gpio, pin, state);
 800062e:	1dfb      	adds	r3, r7, #7
 8000630:	781a      	ldrb	r2, [r3, #0]
 8000632:	68b9      	ldr	r1, [r7, #8]
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	0018      	movs	r0, r3
 8000638:	f003 fca2 	bl	8003f80 <GPIO_Write>
	GPIO_Init(gpio, pin, GPIO_Mode_Output);
 800063c:	68b9      	ldr	r1, [r7, #8]
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	2201      	movs	r2, #1
 8000642:	0018      	movs	r0, r3
 8000644:	f003 fd02 	bl	800404c <GPIO_Init>
}
 8000648:	46c0      	nop			; (mov r8, r8)
 800064a:	46bd      	mov	sp, r7
 800064c:	b004      	add	sp, #16
 800064e:	bd80      	pop	{r7, pc}

08000650 <GPIO_Read>:
{
	gpio->BRR = (uint32_t)pin;
}

static inline GPIO_State_t GPIO_Read(GPIO_t * gpio, uint32_t pin)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	6039      	str	r1, [r7, #0]
	return ((gpio->IDR & pin) > 0);
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	691b      	ldr	r3, [r3, #16]
 800065e:	683a      	ldr	r2, [r7, #0]
 8000660:	4013      	ands	r3, r2
 8000662:	1e5a      	subs	r2, r3, #1
 8000664:	4193      	sbcs	r3, r2
 8000666:	b2db      	uxtb	r3, r3
}
 8000668:	0018      	movs	r0, r3
 800066a:	46bd      	mov	sp, r7
 800066c:	b002      	add	sp, #8
 800066e:	bd80      	pop	{r7, pc}

08000670 <CORE_GetTick>:
/*
 * INLINE FUNCTION DEFINITIONS
 */

static inline uint32_t CORE_GetTick(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
	return gTicks;
 8000674:	4b02      	ldr	r3, [pc, #8]	; (8000680 <CORE_GetTick+0x10>)
 8000676:	681b      	ldr	r3, [r3, #0]
}
 8000678:	0018      	movs	r0, r3
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	20000560 	.word	0x20000560

08000684 <LED_Init>:
 * PUBLIC FUNCTIONS
 */


void LED_Init (void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	GPIO_EnableOutput(LED_STATUS_GPIO, LED_STATUS_PIN, false);
 8000688:	4b07      	ldr	r3, [pc, #28]	; (80006a8 <LED_Init+0x24>)
 800068a:	2200      	movs	r2, #0
 800068c:	2102      	movs	r1, #2
 800068e:	0018      	movs	r0, r3
 8000690:	f7ff ffc6 	bl	8000620 <GPIO_EnableOutput>
	GPIO_EnableOutput(LED_FAULT_GPIO, LED_FAULT_PIN, false);
 8000694:	4b04      	ldr	r3, [pc, #16]	; (80006a8 <LED_Init+0x24>)
 8000696:	2200      	movs	r2, #0
 8000698:	2101      	movs	r1, #1
 800069a:	0018      	movs	r0, r3
 800069c:	f7ff ffc0 	bl	8000620 <GPIO_EnableOutput>
}
 80006a0:	46c0      	nop			; (mov r8, r8)
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	50000400 	.word	0x50000400

080006ac <LED_GreenState>:

bool LED_GreenState (void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
	return GPIO_Read(LED_STATUS_GPIO, LED_STATUS_PIN);
 80006b0:	4b04      	ldr	r3, [pc, #16]	; (80006c4 <LED_GreenState+0x18>)
 80006b2:	2102      	movs	r1, #2
 80006b4:	0018      	movs	r0, r3
 80006b6:	f7ff ffcb 	bl	8000650 <GPIO_Read>
 80006ba:	0003      	movs	r3, r0
}
 80006bc:	0018      	movs	r0, r3
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	50000400 	.word	0x50000400

080006c8 <LED_RedState>:

bool LED_RedState (void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
	return GPIO_Read(LED_FAULT_GPIO, LED_FAULT_PIN);
 80006cc:	4b04      	ldr	r3, [pc, #16]	; (80006e0 <LED_RedState+0x18>)
 80006ce:	2101      	movs	r1, #1
 80006d0:	0018      	movs	r0, r3
 80006d2:	f7ff ffbd 	bl	8000650 <GPIO_Read>
 80006d6:	0003      	movs	r3, r0
}
 80006d8:	0018      	movs	r0, r3
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	50000400 	.word	0x50000400

080006e4 <LED_GreenON>:

void LED_GreenON (void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
	GPIO_Write(LED_STATUS_GPIO, LED_STATUS_PIN, true);
 80006e8:	4b04      	ldr	r3, [pc, #16]	; (80006fc <LED_GreenON+0x18>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	2102      	movs	r1, #2
 80006ee:	0018      	movs	r0, r3
 80006f0:	f003 fc46 	bl	8003f80 <GPIO_Write>
}
 80006f4:	46c0      	nop			; (mov r8, r8)
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	50000400 	.word	0x50000400

08000700 <LED_RedON>:

void LED_RedON (void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
	GPIO_Write(LED_FAULT_GPIO, LED_FAULT_PIN, true);
 8000704:	4b04      	ldr	r3, [pc, #16]	; (8000718 <LED_RedON+0x18>)
 8000706:	2201      	movs	r2, #1
 8000708:	2101      	movs	r1, #1
 800070a:	0018      	movs	r0, r3
 800070c:	f003 fc38 	bl	8003f80 <GPIO_Write>
}
 8000710:	46c0      	nop			; (mov r8, r8)
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	50000400 	.word	0x50000400

0800071c <LED_GreenOFF>:

void LED_GreenOFF (void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
	GPIO_Write(LED_STATUS_GPIO, LED_STATUS_PIN, false);
 8000720:	4b04      	ldr	r3, [pc, #16]	; (8000734 <LED_GreenOFF+0x18>)
 8000722:	2200      	movs	r2, #0
 8000724:	2102      	movs	r1, #2
 8000726:	0018      	movs	r0, r3
 8000728:	f003 fc2a 	bl	8003f80 <GPIO_Write>
}
 800072c:	46c0      	nop			; (mov r8, r8)
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	50000400 	.word	0x50000400

08000738 <LED_RedOFF>:

void LED_RedOFF (void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	GPIO_Write(LED_FAULT_GPIO, LED_FAULT_PIN, false);
 800073c:	4b04      	ldr	r3, [pc, #16]	; (8000750 <LED_RedOFF+0x18>)
 800073e:	2200      	movs	r2, #0
 8000740:	2101      	movs	r1, #1
 8000742:	0018      	movs	r0, r3
 8000744:	f003 fc1c 	bl	8003f80 <GPIO_Write>
}
 8000748:	46c0      	nop			; (mov r8, r8)
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	50000400 	.word	0x50000400

08000754 <LED_GreenToggle>:

void LED_GreenToggle (void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	if (LED_GreenState()) {
 8000758:	f7ff ffa8 	bl	80006ac <LED_GreenState>
 800075c:	1e03      	subs	r3, r0, #0
 800075e:	d002      	beq.n	8000766 <LED_GreenToggle+0x12>
		LED_GreenOFF();
 8000760:	f7ff ffdc 	bl	800071c <LED_GreenOFF>
	} else {
		LED_GreenON();
	}
}
 8000764:	e001      	b.n	800076a <LED_GreenToggle+0x16>
		LED_GreenON();
 8000766:	f7ff ffbd 	bl	80006e4 <LED_GreenON>
}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}

08000770 <LED_RedToggle>:

void LED_RedToggle (void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
	if (LED_RedState()) {
 8000774:	f7ff ffa8 	bl	80006c8 <LED_RedState>
 8000778:	1e03      	subs	r3, r0, #0
 800077a:	d002      	beq.n	8000782 <LED_RedToggle+0x12>
		LED_RedOFF();
 800077c:	f7ff ffdc 	bl	8000738 <LED_RedOFF>
	} else {
		LED_RedON();
	}
}
 8000780:	e001      	b.n	8000786 <LED_RedToggle+0x16>
		LED_RedON();
 8000782:	f7ff ffbd 	bl	8000700 <LED_RedON>
}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <LED_Pulse>:


void LED_Pulse (void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
	uint32_t tick = CORE_GetTick();
 8000792:	f7ff ff6d 	bl	8000670 <CORE_GetTick>
 8000796:	0003      	movs	r3, r0
 8000798:	607b      	str	r3, [r7, #4]
	LED_RedON();
 800079a:	f7ff ffb1 	bl	8000700 <LED_RedON>
	LED_GreenON();
 800079e:	f7ff ffa1 	bl	80006e4 <LED_GreenON>
	while (PULSEON > (CORE_GetTick() - tick)) { CORE_Idle(); }
 80007a2:	e001      	b.n	80007a8 <LED_Pulse+0x1c>
 80007a4:	f003 fa9e 	bl	8003ce4 <CORE_Idle>
 80007a8:	f7ff ff62 	bl	8000670 <CORE_GetTick>
 80007ac:	0002      	movs	r2, r0
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	1ad3      	subs	r3, r2, r3
 80007b2:	2bc7      	cmp	r3, #199	; 0xc7
 80007b4:	d9f6      	bls.n	80007a4 <LED_Pulse+0x18>
	LED_RedOFF();
 80007b6:	f7ff ffbf 	bl	8000738 <LED_RedOFF>
	LED_GreenOFF();
 80007ba:	f7ff ffaf 	bl	800071c <LED_GreenOFF>
}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	46bd      	mov	sp, r7
 80007c2:	b002      	add	sp, #8
 80007c4:	bd80      	pop	{r7, pc}

080007c6 <LED_nPulse>:
{
	LED_nPulse(3);
}

void LED_nPulse (uint8_t n)
{
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b084      	sub	sp, #16
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	0002      	movs	r2, r0
 80007ce:	1dfb      	adds	r3, r7, #7
 80007d0:	701a      	strb	r2, [r3, #0]
	uint32_t tick = CORE_GetTick();
 80007d2:	f7ff ff4d 	bl	8000670 <CORE_GetTick>
 80007d6:	0003      	movs	r3, r0
 80007d8:	60bb      	str	r3, [r7, #8]
	LED_GreenOFF();
 80007da:	f7ff ff9f 	bl	800071c <LED_GreenOFF>
	LED_RedOFF();
 80007de:	f7ff ffab 	bl	8000738 <LED_RedOFF>
	while (PULSEOFF > (CORE_GetTick() - tick)) { CORE_Idle(); }
 80007e2:	e001      	b.n	80007e8 <LED_nPulse+0x22>
 80007e4:	f003 fa7e 	bl	8003ce4 <CORE_Idle>
 80007e8:	f7ff ff42 	bl	8000670 <CORE_GetTick>
 80007ec:	0002      	movs	r2, r0
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	1ad2      	subs	r2, r2, r3
 80007f2:	2396      	movs	r3, #150	; 0x96
 80007f4:	005b      	lsls	r3, r3, #1
 80007f6:	429a      	cmp	r2, r3
 80007f8:	d3f4      	bcc.n	80007e4 <LED_nPulse+0x1e>

	for (uint8_t i = 0; i < n; i++)
 80007fa:	230f      	movs	r3, #15
 80007fc:	18fb      	adds	r3, r7, r3
 80007fe:	2200      	movs	r2, #0
 8000800:	701a      	strb	r2, [r3, #0]
 8000802:	e017      	b.n	8000834 <LED_nPulse+0x6e>
	{
		LED_Pulse();
 8000804:	f7ff ffc2 	bl	800078c <LED_Pulse>
		tick = CORE_GetTick();
 8000808:	f7ff ff32 	bl	8000670 <CORE_GetTick>
 800080c:	0003      	movs	r3, r0
 800080e:	60bb      	str	r3, [r7, #8]
		while (PULSEOFF > (CORE_GetTick() - tick)) { CORE_Idle(); }
 8000810:	e001      	b.n	8000816 <LED_nPulse+0x50>
 8000812:	f003 fa67 	bl	8003ce4 <CORE_Idle>
 8000816:	f7ff ff2b 	bl	8000670 <CORE_GetTick>
 800081a:	0002      	movs	r2, r0
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	1ad2      	subs	r2, r2, r3
 8000820:	2396      	movs	r3, #150	; 0x96
 8000822:	005b      	lsls	r3, r3, #1
 8000824:	429a      	cmp	r2, r3
 8000826:	d3f4      	bcc.n	8000812 <LED_nPulse+0x4c>
	for (uint8_t i = 0; i < n; i++)
 8000828:	210f      	movs	r1, #15
 800082a:	187b      	adds	r3, r7, r1
 800082c:	781a      	ldrb	r2, [r3, #0]
 800082e:	187b      	adds	r3, r7, r1
 8000830:	3201      	adds	r2, #1
 8000832:	701a      	strb	r2, [r3, #0]
 8000834:	230f      	movs	r3, #15
 8000836:	18fa      	adds	r2, r7, r3
 8000838:	1dfb      	adds	r3, r7, #7
 800083a:	7812      	ldrb	r2, [r2, #0]
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	429a      	cmp	r2, r3
 8000840:	d3e0      	bcc.n	8000804 <LED_nPulse+0x3e>
	}
}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	46c0      	nop			; (mov r8, r8)
 8000846:	46bd      	mov	sp, r7
 8000848:	b004      	add	sp, #16
 800084a:	bd80      	pop	{r7, pc}

0800084c <GPIO_EnableOutput>:
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	60f8      	str	r0, [r7, #12]
 8000854:	60b9      	str	r1, [r7, #8]
 8000856:	1dfb      	adds	r3, r7, #7
 8000858:	701a      	strb	r2, [r3, #0]
	GPIO_Write(gpio, pin, state);
 800085a:	1dfb      	adds	r3, r7, #7
 800085c:	781a      	ldrb	r2, [r3, #0]
 800085e:	68b9      	ldr	r1, [r7, #8]
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	0018      	movs	r0, r3
 8000864:	f003 fb8c 	bl	8003f80 <GPIO_Write>
	GPIO_Init(gpio, pin, GPIO_Mode_Output);
 8000868:	68b9      	ldr	r1, [r7, #8]
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	2201      	movs	r2, #1
 800086e:	0018      	movs	r0, r3
 8000870:	f003 fbec 	bl	800404c <GPIO_Init>
}
 8000874:	46c0      	nop			; (mov r8, r8)
 8000876:	46bd      	mov	sp, r7
 8000878:	b004      	add	sp, #16
 800087a:	bd80      	pop	{r7, pc}

0800087c <MOTOR_Init>:
/*
 * PUBLIC FUNCTIONS
 */

void MOTOR_Init (void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af02      	add	r7, sp, #8
	TIM_Init(TIM_MOTOR, TIM_MOTOR_FREQ, TIM_MOTOR_RELOAD);
 8000882:	4b24      	ldr	r3, [pc, #144]	; (8000914 <MOTOR_Init+0x98>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4924      	ldr	r1, [pc, #144]	; (8000918 <MOTOR_Init+0x9c>)
 8000888:	22ff      	movs	r2, #255	; 0xff
 800088a:	0018      	movs	r0, r3
 800088c:	f003 fdb0 	bl	80043f0 <TIM_Init>

#if defined(USE_DRV8212)
	GPIO_EnableOutput(MOTOR_LMODE_GPIO, MOTOR_LMODE_PIN, MODE_PWM);
 8000890:	2380      	movs	r3, #128	; 0x80
 8000892:	021b      	lsls	r3, r3, #8
 8000894:	4821      	ldr	r0, [pc, #132]	; (800091c <MOTOR_Init+0xa0>)
 8000896:	2201      	movs	r2, #1
 8000898:	0019      	movs	r1, r3
 800089a:	f7ff ffd7 	bl	800084c <GPIO_EnableOutput>
	GPIO_EnableOutput(MOTOR_RMODE_GPIO, MOTOR_RMODE_PIN, MODE_PWM);
 800089e:	23a0      	movs	r3, #160	; 0xa0
 80008a0:	05db      	lsls	r3, r3, #23
 80008a2:	2201      	movs	r2, #1
 80008a4:	2110      	movs	r1, #16
 80008a6:	0018      	movs	r0, r3
 80008a8:	f7ff ffd0 	bl	800084c <GPIO_EnableOutput>
#endif

	TIM_EnablePwm(TIM_MOTOR, MOTOR_LPWM1_CH, MOTOR_LPWM1_GPIO, MOTOR_LPWM1_PIN, TIM_MOTOR_AF2);
 80008ac:	4b19      	ldr	r3, [pc, #100]	; (8000914 <MOTOR_Init+0x98>)
 80008ae:	6818      	ldr	r0, [r3, #0]
 80008b0:	23a0      	movs	r3, #160	; 0xa0
 80008b2:	05da      	lsls	r2, r3, #23
 80008b4:	2302      	movs	r3, #2
 80008b6:	9300      	str	r3, [sp, #0]
 80008b8:	2301      	movs	r3, #1
 80008ba:	2100      	movs	r1, #0
 80008bc:	f003 fe23 	bl	8004506 <TIM_EnablePwm>
	TIM_EnablePwm(TIM_MOTOR, MOTOR_LPWM2_CH, MOTOR_LPWM2_GPIO, MOTOR_LPWM2_PIN, TIM_MOTOR_AF2);
 80008c0:	4b14      	ldr	r3, [pc, #80]	; (8000914 <MOTOR_Init+0x98>)
 80008c2:	6818      	ldr	r0, [r3, #0]
 80008c4:	23a0      	movs	r3, #160	; 0xa0
 80008c6:	05da      	lsls	r2, r3, #23
 80008c8:	2302      	movs	r3, #2
 80008ca:	9300      	str	r3, [sp, #0]
 80008cc:	2302      	movs	r3, #2
 80008ce:	2101      	movs	r1, #1
 80008d0:	f003 fe19 	bl	8004506 <TIM_EnablePwm>
	TIM_EnablePwm(TIM_MOTOR, MOTOR_RPWM1_CH, MOTOR_RPWM1_GPIO, MOTOR_RPWM1_PIN, TIM_MOTOR_AF2);
 80008d4:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <MOTOR_Init+0x98>)
 80008d6:	6818      	ldr	r0, [r3, #0]
 80008d8:	23a0      	movs	r3, #160	; 0xa0
 80008da:	05da      	lsls	r2, r3, #23
 80008dc:	2302      	movs	r3, #2
 80008de:	9300      	str	r3, [sp, #0]
 80008e0:	2304      	movs	r3, #4
 80008e2:	2102      	movs	r1, #2
 80008e4:	f003 fe0f 	bl	8004506 <TIM_EnablePwm>
	TIM_EnablePwm(TIM_MOTOR, MOTOR_RPWM2_CH, MOTOR_RPWM2_GPIO, MOTOR_RPWM2_PIN, TIM_MOTOR_AF2);
 80008e8:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <MOTOR_Init+0x98>)
 80008ea:	6818      	ldr	r0, [r3, #0]
 80008ec:	23a0      	movs	r3, #160	; 0xa0
 80008ee:	05da      	lsls	r2, r3, #23
 80008f0:	2302      	movs	r3, #2
 80008f2:	9300      	str	r3, [sp, #0]
 80008f4:	2308      	movs	r3, #8
 80008f6:	2103      	movs	r1, #3
 80008f8:	f003 fe05 	bl	8004506 <TIM_EnablePwm>

	MOTOR_Update(MOTOR_OFF, MOTOR_OFF);
 80008fc:	2100      	movs	r1, #0
 80008fe:	2000      	movs	r0, #0
 8000900:	f000 f80e 	bl	8000920 <MOTOR_Update>
	TIM_Start(TIM_MOTOR);
 8000904:	4b03      	ldr	r3, [pc, #12]	; (8000914 <MOTOR_Init+0x98>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	0018      	movs	r0, r3
 800090a:	f003 fe45 	bl	8004598 <TIM_Start>
}
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000020 	.word	0x20000020
 8000918:	004e2000 	.word	0x004e2000
 800091c:	50000800 	.word	0x50000800

08000920 <MOTOR_Update>:


void MOTOR_Update (int32_t M1, int32_t M2)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	6039      	str	r1, [r7, #0]
	MOTOR_M1_Update(M1);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	0018      	movs	r0, r3
 800092e:	f000 f847 	bl	80009c0 <MOTOR_M1_Update>
	MOTOR_M2_Update(M2);
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	0018      	movs	r0, r3
 8000936:	f000 f891 	bl	8000a5c <MOTOR_M2_Update>
}
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	46bd      	mov	sp, r7
 800093e:	b002      	add	sp, #8
 8000940:	bd80      	pop	{r7, pc}
	...

08000944 <MOTOR_M1_Brake>:
/*
 * PRIVATE FUNCTIONS
 */

void MOTOR_M1_Brake (void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
	GPIO_Write(MOTOR_LMODE_GPIO, MOTOR_LMODE_PIN, MODE_BRAKE);
 8000948:	2380      	movs	r3, #128	; 0x80
 800094a:	021b      	lsls	r3, r3, #8
 800094c:	480b      	ldr	r0, [pc, #44]	; (800097c <MOTOR_M1_Brake+0x38>)
 800094e:	2201      	movs	r2, #1
 8000950:	0019      	movs	r1, r3
 8000952:	f003 fb15 	bl	8003f80 <GPIO_Write>
	TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM1_CH, PWM_BRAKE);
 8000956:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <MOTOR_M1_Brake+0x3c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	2280      	movs	r2, #128	; 0x80
 800095c:	0052      	lsls	r2, r2, #1
 800095e:	2100      	movs	r1, #0
 8000960:	0018      	movs	r0, r3
 8000962:	f003 fdeb 	bl	800453c <TIM_SetPulse>
	TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM2_CH, PWM_BRAKE);
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <MOTOR_M1_Brake+0x3c>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	2280      	movs	r2, #128	; 0x80
 800096c:	0052      	lsls	r2, r2, #1
 800096e:	2101      	movs	r1, #1
 8000970:	0018      	movs	r0, r3
 8000972:	f003 fde3 	bl	800453c <TIM_SetPulse>
}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	50000800 	.word	0x50000800
 8000980:	20000020 	.word	0x20000020

08000984 <MOTOR_M2_Brake>:

void MOTOR_M2_Brake (void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
	GPIO_Write(MOTOR_RMODE_GPIO, MOTOR_RMODE_PIN, MODE_BRAKE);
 8000988:	23a0      	movs	r3, #160	; 0xa0
 800098a:	05db      	lsls	r3, r3, #23
 800098c:	2201      	movs	r2, #1
 800098e:	2110      	movs	r1, #16
 8000990:	0018      	movs	r0, r3
 8000992:	f003 faf5 	bl	8003f80 <GPIO_Write>
	TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM1_CH, PWM_BRAKE);
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <MOTOR_M2_Brake+0x38>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	2280      	movs	r2, #128	; 0x80
 800099c:	0052      	lsls	r2, r2, #1
 800099e:	2102      	movs	r1, #2
 80009a0:	0018      	movs	r0, r3
 80009a2:	f003 fdcb 	bl	800453c <TIM_SetPulse>
	TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM2_CH, PWM_BRAKE);
 80009a6:	4b05      	ldr	r3, [pc, #20]	; (80009bc <MOTOR_M2_Brake+0x38>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	2280      	movs	r2, #128	; 0x80
 80009ac:	0052      	lsls	r2, r2, #1
 80009ae:	2103      	movs	r1, #3
 80009b0:	0018      	movs	r0, r3
 80009b2:	f003 fdc3 	bl	800453c <TIM_SetPulse>
}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000020 	.word	0x20000020

080009c0 <MOTOR_M1_Update>:
	TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM1_CH, PWM_COAST);
	TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM2_CH, PWM_COAST);
}

void MOTOR_M1_Update (int32_t throttle)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
	bool reverse = false;
 80009c8:	210f      	movs	r1, #15
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	2200      	movs	r2, #0
 80009ce:	701a      	strb	r2, [r3, #0]

	// Check if reversing
	if (throttle < MOTOR_OFF) {
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	da05      	bge.n	80009e2 <MOTOR_M1_Update+0x22>
		reverse = true;
 80009d6:	187b      	adds	r3, r7, r1
 80009d8:	2201      	movs	r2, #1
 80009da:	701a      	strb	r2, [r3, #0]
		throttle = -throttle;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	425b      	negs	r3, r3
 80009e0:	607b      	str	r3, [r7, #4]
	}

	// Clamp maximum speed
	if (throttle > MOTOR_MAX) {
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	2380      	movs	r3, #128	; 0x80
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	429a      	cmp	r2, r3
 80009ea:	dd02      	ble.n	80009f2 <MOTOR_M1_Update+0x32>
		throttle = MOTOR_MAX;
 80009ec:	2380      	movs	r3, #128	; 0x80
 80009ee:	005b      	lsls	r3, r3, #1
 80009f0:	607b      	str	r3, [r7, #4]
	}

	if ( throttle <= ( MOTOR_OFF + MOTOR_STALL ) ) {
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2b0a      	cmp	r3, #10
 80009f6:	dc02      	bgt.n	80009fe <MOTOR_M1_Update+0x3e>
		if (MOTOR_BRAKE) {
			MOTOR_M1_Brake();
 80009f8:	f7ff ffa4 	bl	8000944 <MOTOR_M1_Brake>
		} else {
			TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM1_CH, throttle);
			TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM2_CH, 0);
		}
	}
}
 80009fc:	e027      	b.n	8000a4e <MOTOR_M1_Update+0x8e>
		if ( throttle >= (MOTOR_MAX - MOTOR_MAX_THRESH ) ) {
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2bf5      	cmp	r3, #245	; 0xf5
 8000a02:	dd02      	ble.n	8000a0a <MOTOR_M1_Update+0x4a>
			throttle = MOTOR_MAX;
 8000a04:	2380      	movs	r3, #128	; 0x80
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	607b      	str	r3, [r7, #4]
		if (reverse) {
 8000a0a:	230f      	movs	r3, #15
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d00e      	beq.n	8000a32 <MOTOR_M1_Update+0x72>
			TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM1_CH, 0);
 8000a14:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <MOTOR_M1_Update+0x98>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f003 fd8d 	bl	800453c <TIM_SetPulse>
			TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM2_CH, throttle);
 8000a22:	4b0d      	ldr	r3, [pc, #52]	; (8000a58 <MOTOR_M1_Update+0x98>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	687a      	ldr	r2, [r7, #4]
 8000a28:	2101      	movs	r1, #1
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f003 fd86 	bl	800453c <TIM_SetPulse>
}
 8000a30:	e00d      	b.n	8000a4e <MOTOR_M1_Update+0x8e>
			TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM1_CH, throttle);
 8000a32:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <MOTOR_M1_Update+0x98>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	687a      	ldr	r2, [r7, #4]
 8000a38:	2100      	movs	r1, #0
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f003 fd7e 	bl	800453c <TIM_SetPulse>
			TIM_SetPulse(TIM_MOTOR, MOTOR_LPWM2_CH, 0);
 8000a40:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <MOTOR_M1_Update+0x98>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2200      	movs	r2, #0
 8000a46:	2101      	movs	r1, #1
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f003 fd77 	bl	800453c <TIM_SetPulse>
}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	46bd      	mov	sp, r7
 8000a52:	b004      	add	sp, #16
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	20000020 	.word	0x20000020

08000a5c <MOTOR_M2_Update>:

void MOTOR_M2_Update (int32_t throttle)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	bool reverse = false;
 8000a64:	210f      	movs	r1, #15
 8000a66:	187b      	adds	r3, r7, r1
 8000a68:	2200      	movs	r2, #0
 8000a6a:	701a      	strb	r2, [r3, #0]

	// Check if reversing
	if (throttle < 0) {
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	da05      	bge.n	8000a7e <MOTOR_M2_Update+0x22>
		reverse = true;
 8000a72:	187b      	adds	r3, r7, r1
 8000a74:	2201      	movs	r2, #1
 8000a76:	701a      	strb	r2, [r3, #0]
		throttle = -throttle;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	425b      	negs	r3, r3
 8000a7c:	607b      	str	r3, [r7, #4]
	}

	// Clamp maximum speed
	if (throttle > MOTOR_MAX) {
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	2380      	movs	r3, #128	; 0x80
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	429a      	cmp	r2, r3
 8000a86:	dd02      	ble.n	8000a8e <MOTOR_M2_Update+0x32>
		throttle = MOTOR_MAX;
 8000a88:	2380      	movs	r3, #128	; 0x80
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	607b      	str	r3, [r7, #4]
	}

	if (throttle <= MOTOR_OFF + MOTOR_STALL) {
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2b0a      	cmp	r3, #10
 8000a92:	dc02      	bgt.n	8000a9a <MOTOR_M2_Update+0x3e>
		if (MOTOR_BRAKE) {
			MOTOR_M2_Brake();
 8000a94:	f7ff ff76 	bl	8000984 <MOTOR_M2_Brake>
		} else {
			TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM1_CH, throttle);
			TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM2_CH, 0);
		}
	}
}
 8000a98:	e027      	b.n	8000aea <MOTOR_M2_Update+0x8e>
		if ( throttle >= (MOTOR_MAX - MOTOR_MAX_THRESH ) ) {
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2bf5      	cmp	r3, #245	; 0xf5
 8000a9e:	dd02      	ble.n	8000aa6 <MOTOR_M2_Update+0x4a>
			throttle = MOTOR_MAX;
 8000aa0:	2380      	movs	r3, #128	; 0x80
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	607b      	str	r3, [r7, #4]
		if (reverse) {
 8000aa6:	230f      	movs	r3, #15
 8000aa8:	18fb      	adds	r3, r7, r3
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d00e      	beq.n	8000ace <MOTOR_M2_Update+0x72>
			TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM1_CH, 0);
 8000ab0:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <MOTOR_M2_Update+0x98>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2102      	movs	r1, #2
 8000ab8:	0018      	movs	r0, r3
 8000aba:	f003 fd3f 	bl	800453c <TIM_SetPulse>
			TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM2_CH, throttle);
 8000abe:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <MOTOR_M2_Update+0x98>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	2103      	movs	r1, #3
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f003 fd38 	bl	800453c <TIM_SetPulse>
}
 8000acc:	e00d      	b.n	8000aea <MOTOR_M2_Update+0x8e>
			TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM1_CH, throttle);
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <MOTOR_M2_Update+0x98>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	2102      	movs	r1, #2
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f003 fd30 	bl	800453c <TIM_SetPulse>
			TIM_SetPulse(TIM_MOTOR, MOTOR_RPWM2_CH, 0);
 8000adc:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <MOTOR_M2_Update+0x98>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2103      	movs	r1, #3
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f003 fd29 	bl	800453c <TIM_SetPulse>
}
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	46bd      	mov	sp, r7
 8000aee:	b004      	add	sp, #16
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	20000020 	.word	0x20000020

08000af8 <GPIO_EnableOutput>:
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	1dfb      	adds	r3, r7, #7
 8000b04:	701a      	strb	r2, [r3, #0]
	GPIO_Write(gpio, pin, state);
 8000b06:	1dfb      	adds	r3, r7, #7
 8000b08:	781a      	ldrb	r2, [r3, #0]
 8000b0a:	68b9      	ldr	r1, [r7, #8]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f003 fa36 	bl	8003f80 <GPIO_Write>
	GPIO_Init(gpio, pin, GPIO_Mode_Output);
 8000b14:	68b9      	ldr	r1, [r7, #8]
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	2201      	movs	r2, #1
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f003 fa96 	bl	800404c <GPIO_Init>
}
 8000b20:	46c0      	nop			; (mov r8, r8)
 8000b22:	46bd      	mov	sp, r7
 8000b24:	b004      	add	sp, #16
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <GPIO_Set>:
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	6039      	str	r1, [r7, #0]
	gpio->BSRR = (uint32_t)pin;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	683a      	ldr	r2, [r7, #0]
 8000b36:	619a      	str	r2, [r3, #24]
}
 8000b38:	46c0      	nop			; (mov r8, r8)
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	b002      	add	sp, #8
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <GPIO_Reset>:
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	6039      	str	r1, [r7, #0]
	gpio->BRR = (uint32_t)pin;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	683a      	ldr	r2, [r7, #0]
 8000b4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b50:	46c0      	nop			; (mov r8, r8)
 8000b52:	46bd      	mov	sp, r7
 8000b54:	b002      	add	sp, #8
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <SERVO_Init>:
/*
 * PUBLIC FUNCTIONS
 */

void SERVO_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
	GPIO_EnableOutput(SERVO1_GPIO, SERVO1_PIN, GPIO_PIN_RESET);
 8000b5c:	2380      	movs	r3, #128	; 0x80
 8000b5e:	015b      	lsls	r3, r3, #5
 8000b60:	4824      	ldr	r0, [pc, #144]	; (8000bf4 <SERVO_Init+0x9c>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	0019      	movs	r1, r3
 8000b66:	f7ff ffc7 	bl	8000af8 <GPIO_EnableOutput>
	TIM_Init(TIM_SERVO1, TIM_SERVO1_FREQ, TIM_SERVO1_RELOAD);
 8000b6a:	4b23      	ldr	r3, [pc, #140]	; (8000bf8 <SERVO_Init+0xa0>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a23      	ldr	r2, [pc, #140]	; (8000bfc <SERVO_Init+0xa4>)
 8000b70:	4923      	ldr	r1, [pc, #140]	; (8000c00 <SERVO_Init+0xa8>)
 8000b72:	0018      	movs	r0, r3
 8000b74:	f003 fc3c 	bl	80043f0 <TIM_Init>
	TIM_OnReload(TIM_SERVO1, SERVO1_TimerReloadISR);
 8000b78:	4b1f      	ldr	r3, [pc, #124]	; (8000bf8 <SERVO_Init+0xa0>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a21      	ldr	r2, [pc, #132]	; (8000c04 <SERVO_Init+0xac>)
 8000b7e:	0011      	movs	r1, r2
 8000b80:	0018      	movs	r0, r3
 8000b82:	f003 fc85 	bl	8004490 <TIM_OnReload>
	TIM_OnPulse(TIM_SERVO1, 0, SERVO1_TimerPulseISR);
 8000b86:	4b1c      	ldr	r3, [pc, #112]	; (8000bf8 <SERVO_Init+0xa0>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a1f      	ldr	r2, [pc, #124]	; (8000c08 <SERVO_Init+0xb0>)
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	0018      	movs	r0, r3
 8000b90:	f003 fc92 	bl	80044b8 <TIM_OnPulse>
	SERVO_S1_Update(0);
 8000b94:	2000      	movs	r0, #0
 8000b96:	f000 f885 	bl	8000ca4 <SERVO_S1_Update>
	TIM_Start(TIM_SERVO1);
 8000b9a:	4b17      	ldr	r3, [pc, #92]	; (8000bf8 <SERVO_Init+0xa0>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f003 fcfa 	bl	8004598 <TIM_Start>

	GPIO_EnableOutput(SERVO2_GPIO, SERVO2_PIN, GPIO_PIN_RESET);
 8000ba4:	2380      	movs	r3, #128	; 0x80
 8000ba6:	0219      	lsls	r1, r3, #8
 8000ba8:	23a0      	movs	r3, #160	; 0xa0
 8000baa:	05db      	lsls	r3, r3, #23
 8000bac:	2200      	movs	r2, #0
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f7ff ffa2 	bl	8000af8 <GPIO_EnableOutput>
	TIM_Init(TIM_SERVO2, TIM_SERVO2_FREQ, TIM_SERVO2_RELOAD);
 8000bb4:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <SERVO_Init+0xb4>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a10      	ldr	r2, [pc, #64]	; (8000bfc <SERVO_Init+0xa4>)
 8000bba:	4911      	ldr	r1, [pc, #68]	; (8000c00 <SERVO_Init+0xa8>)
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f003 fc17 	bl	80043f0 <TIM_Init>
	TIM_OnReload(TIM_SERVO2, SERVO2_TimerReloadISR);
 8000bc2:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <SERVO_Init+0xb4>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a12      	ldr	r2, [pc, #72]	; (8000c10 <SERVO_Init+0xb8>)
 8000bc8:	0011      	movs	r1, r2
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f003 fc60 	bl	8004490 <TIM_OnReload>
	TIM_OnPulse(TIM_SERVO2, 0, SERVO2_TimerPulseISR);
 8000bd0:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <SERVO_Init+0xb4>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a0f      	ldr	r2, [pc, #60]	; (8000c14 <SERVO_Init+0xbc>)
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f003 fc6d 	bl	80044b8 <TIM_OnPulse>
	SERVO_S2_Update(0);
 8000bde:	2000      	movs	r0, #0
 8000be0:	f000 f874 	bl	8000ccc <SERVO_S2_Update>
	TIM_Start(TIM_SERVO2);
 8000be4:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <SERVO_Init+0xb4>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	0018      	movs	r0, r3
 8000bea:	f003 fcd5 	bl	8004598 <TIM_Start>
}
 8000bee:	46c0      	nop			; (mov r8, r8)
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	50000400 	.word	0x50000400
 8000bf8:	20000058 	.word	0x20000058
 8000bfc:	00002710 	.word	0x00002710
 8000c00:	000f4240 	.word	0x000f4240
 8000c04:	08000cf5 	.word	0x08000cf5
 8000c08:	08000d11 	.word	0x08000d11
 8000c0c:	20000074 	.word	0x20000074
 8000c10:	08000d2d 	.word	0x08000d2d
 8000c14:	08000d47 	.word	0x08000d47

08000c18 <SERVO_Deinit>:

void SERVO_Deinit(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
	TIM_Stop(TIM_SERVO1);
 8000c1c:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <SERVO_Deinit+0x50>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	0018      	movs	r0, r3
 8000c22:	f003 fccd 	bl	80045c0 <TIM_Stop>
	TIM_Deinit(TIM_SERVO1);
 8000c26:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <SERVO_Deinit+0x50>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f003 fce0 	bl	80045f0 <TIM_Deinit>
	GPIO_Write(SERVO1_GPIO, SERVO1_PIN, GPIO_PIN_RESET);
 8000c30:	2380      	movs	r3, #128	; 0x80
 8000c32:	015b      	lsls	r3, r3, #5
 8000c34:	480d      	ldr	r0, [pc, #52]	; (8000c6c <SERVO_Deinit+0x54>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	0019      	movs	r1, r3
 8000c3a:	f003 f9a1 	bl	8003f80 <GPIO_Write>

	TIM_Stop(TIM_SERVO2);
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <SERVO_Deinit+0x58>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	0018      	movs	r0, r3
 8000c44:	f003 fcbc 	bl	80045c0 <TIM_Stop>
	TIM_Deinit(TIM_SERVO2);
 8000c48:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <SERVO_Deinit+0x58>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	f003 fccf 	bl	80045f0 <TIM_Deinit>
	GPIO_Write(SERVO2_GPIO, SERVO2_PIN, GPIO_PIN_RESET);
 8000c52:	2380      	movs	r3, #128	; 0x80
 8000c54:	0219      	lsls	r1, r3, #8
 8000c56:	23a0      	movs	r3, #160	; 0xa0
 8000c58:	05db      	lsls	r3, r3, #23
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	f003 f98f 	bl	8003f80 <GPIO_Write>
}
 8000c62:	46c0      	nop			; (mov r8, r8)
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20000058 	.word	0x20000058
 8000c6c:	50000400 	.word	0x50000400
 8000c70:	20000074 	.word	0x20000074

08000c74 <SERVO_Update>:

void SERVO_Update(uint16_t S1, uint16_t S2)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	0002      	movs	r2, r0
 8000c7c:	1dbb      	adds	r3, r7, #6
 8000c7e:	801a      	strh	r2, [r3, #0]
 8000c80:	1d3b      	adds	r3, r7, #4
 8000c82:	1c0a      	adds	r2, r1, #0
 8000c84:	801a      	strh	r2, [r3, #0]
	SERVO_S1_Update(S1);
 8000c86:	1dbb      	adds	r3, r7, #6
 8000c88:	881b      	ldrh	r3, [r3, #0]
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f000 f80a 	bl	8000ca4 <SERVO_S1_Update>
	SERVO_S2_Update(S2);
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	881b      	ldrh	r3, [r3, #0]
 8000c94:	0018      	movs	r0, r3
 8000c96:	f000 f819 	bl	8000ccc <SERVO_S2_Update>
}
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	b002      	add	sp, #8
 8000ca0:	bd80      	pop	{r7, pc}
	...

08000ca4 <SERVO_S1_Update>:
/*
 * PRIVATE FUNCTIONS
 */

void SERVO_S1_Update(uint16_t pulse)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	0002      	movs	r2, r0
 8000cac:	1dbb      	adds	r3, r7, #6
 8000cae:	801a      	strh	r2, [r3, #0]
	TIM_SetPulse(TIM_SERVO1, 0, pulse);
 8000cb0:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <SERVO_S1_Update+0x24>)
 8000cb2:	6818      	ldr	r0, [r3, #0]
 8000cb4:	1dbb      	adds	r3, r7, #6
 8000cb6:	881b      	ldrh	r3, [r3, #0]
 8000cb8:	001a      	movs	r2, r3
 8000cba:	2100      	movs	r1, #0
 8000cbc:	f003 fc3e 	bl	800453c <TIM_SetPulse>
}
 8000cc0:	46c0      	nop			; (mov r8, r8)
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	b002      	add	sp, #8
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000058 	.word	0x20000058

08000ccc <SERVO_S2_Update>:

void SERVO_S2_Update(uint16_t pulse)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	0002      	movs	r2, r0
 8000cd4:	1dbb      	adds	r3, r7, #6
 8000cd6:	801a      	strh	r2, [r3, #0]
	TIM_SetPulse(TIM_SERVO2, 0, pulse);
 8000cd8:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <SERVO_S2_Update+0x24>)
 8000cda:	6818      	ldr	r0, [r3, #0]
 8000cdc:	1dbb      	adds	r3, r7, #6
 8000cde:	881b      	ldrh	r3, [r3, #0]
 8000ce0:	001a      	movs	r2, r3
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	f003 fc2a 	bl	800453c <TIM_SetPulse>
}
 8000ce8:	46c0      	nop			; (mov r8, r8)
 8000cea:	46bd      	mov	sp, r7
 8000cec:	b002      	add	sp, #8
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20000074 	.word	0x20000074

08000cf4 <SERVO1_TimerReloadISR>:
/*
 * INTERRUPT ROUTINES
 */

static void SERVO1_TimerReloadISR(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
	GPIO_Set(SERVO1_GPIO, SERVO1_PIN);
 8000cf8:	2380      	movs	r3, #128	; 0x80
 8000cfa:	015b      	lsls	r3, r3, #5
 8000cfc:	4a03      	ldr	r2, [pc, #12]	; (8000d0c <SERVO1_TimerReloadISR+0x18>)
 8000cfe:	0019      	movs	r1, r3
 8000d00:	0010      	movs	r0, r2
 8000d02:	f7ff ff11 	bl	8000b28 <GPIO_Set>
}
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	50000400 	.word	0x50000400

08000d10 <SERVO1_TimerPulseISR>:

static void SERVO1_TimerPulseISR(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
	GPIO_Reset(SERVO1_GPIO, SERVO1_PIN);
 8000d14:	2380      	movs	r3, #128	; 0x80
 8000d16:	015b      	lsls	r3, r3, #5
 8000d18:	4a03      	ldr	r2, [pc, #12]	; (8000d28 <SERVO1_TimerPulseISR+0x18>)
 8000d1a:	0019      	movs	r1, r3
 8000d1c:	0010      	movs	r0, r2
 8000d1e:	f7ff ff0f 	bl	8000b40 <GPIO_Reset>
}
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	50000400 	.word	0x50000400

08000d2c <SERVO2_TimerReloadISR>:

static void SERVO2_TimerReloadISR(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
	GPIO_Set(SERVO2_GPIO, SERVO2_PIN);
 8000d30:	2380      	movs	r3, #128	; 0x80
 8000d32:	021a      	lsls	r2, r3, #8
 8000d34:	23a0      	movs	r3, #160	; 0xa0
 8000d36:	05db      	lsls	r3, r3, #23
 8000d38:	0011      	movs	r1, r2
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f7ff fef4 	bl	8000b28 <GPIO_Set>
}
 8000d40:	46c0      	nop			; (mov r8, r8)
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <SERVO2_TimerPulseISR>:

static void SERVO2_TimerPulseISR(void)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	af00      	add	r7, sp, #0
	GPIO_Reset(SERVO2_GPIO, SERVO2_PIN);
 8000d4a:	2380      	movs	r3, #128	; 0x80
 8000d4c:	021a      	lsls	r2, r3, #8
 8000d4e:	23a0      	movs	r3, #160	; 0xa0
 8000d50:	05db      	lsls	r3, r3, #23
 8000d52:	0011      	movs	r1, r2
 8000d54:	0018      	movs	r0, r3
 8000d56:	f7ff fef3 	bl	8000b40 <GPIO_Reset>
}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <CORE_GetTick>:
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
	return gTicks;
 8000d64:	4b02      	ldr	r3, [pc, #8]	; (8000d70 <CORE_GetTick+0x10>)
 8000d66:	681b      	ldr	r3, [r3, #0]
}
 8000d68:	0018      	movs	r0, r3
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	46c0      	nop			; (mov r8, r8)
 8000d70:	20000560 	.word	0x20000560

08000d74 <GPIO_EnableInput>:
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	1dfb      	adds	r3, r7, #7
 8000d80:	701a      	strb	r2, [r3, #0]
	GPIO_Init(gpio, pin, GPIO_Mode_Input | pull);
 8000d82:	1dfb      	adds	r3, r7, #7
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	b29a      	uxth	r2, r3
 8000d88:	68b9      	ldr	r1, [r7, #8]
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f003 f95d 	bl	800404c <GPIO_Init>
}
 8000d92:	46c0      	nop			; (mov r8, r8)
 8000d94:	46bd      	mov	sp, r7
 8000d96:	b004      	add	sp, #16
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <GPIO_Read>:
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b082      	sub	sp, #8
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
 8000da2:	6039      	str	r1, [r7, #0]
	return ((gpio->IDR & pin) > 0);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	691b      	ldr	r3, [r3, #16]
 8000da8:	683a      	ldr	r2, [r7, #0]
 8000daa:	4013      	ands	r3, r2
 8000dac:	1e5a      	subs	r2, r3, #1
 8000dae:	4193      	sbcs	r3, r2
 8000db0:	b2db      	uxtb	r3, r3
}
 8000db2:	0018      	movs	r0, r3
 8000db4:	46bd      	mov	sp, r7
 8000db6:	b002      	add	sp, #8
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <SYSTEM_Init>:
 *
 * INPUTS:
 * OUTPUTS:
 */
void SYSTEM_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
	// INIT ADC, USED FOR BATTERY VOLTAGE AND TEMPERATURE DETECTION
	ADC_Init();
 8000dc0:	f002 fda2 	bl	8003908 <ADC_Init>

	// INIT BATTERY VOLTAGE DETECT INPUT AND DETERMINE IF 1S OR 2S INPUT
	GPIO_Init(BATTERY_GPIO, BATTERY_PIN, GPIO_Mode_Analog);
 8000dc4:	23a0      	movs	r3, #160	; 0xa0
 8000dc6:	05db      	lsls	r3, r3, #23
 8000dc8:	2203      	movs	r2, #3
 8000dca:	2180      	movs	r1, #128	; 0x80
 8000dcc:	0018      	movs	r0, r3
 8000dce:	f003 f93d 	bl	800404c <GPIO_Init>
	if (SYSTEM_GetBatteryVoltage() >= BATT_2S_LOW) {
 8000dd2:	f000 facf 	bl	8001374 <SYSTEM_GetBatteryVoltage>
 8000dd6:	0003      	movs	r3, r0
 8000dd8:	4a12      	ldr	r2, [pc, #72]	; (8000e24 <SYSTEM_Init+0x68>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d903      	bls.n	8000de6 <SYSTEM_Init+0x2a>
		fault.faultVoltage = BATT_2S_LOW;
 8000dde:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <SYSTEM_Init+0x6c>)
 8000de0:	4a12      	ldr	r2, [pc, #72]	; (8000e2c <SYSTEM_Init+0x70>)
 8000de2:	605a      	str	r2, [r3, #4]
 8000de4:	e003      	b.n	8000dee <SYSTEM_Init+0x32>
	} else {
		fault.faultVoltage = BATT_1S_LOW;
 8000de6:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <SYSTEM_Init+0x6c>)
 8000de8:	22c8      	movs	r2, #200	; 0xc8
 8000dea:	0112      	lsls	r2, r2, #4
 8000dec:	605a      	str	r2, [r3, #4]
	}

	// INIT THE CALIBRATION INPUT
	GPIO_EnableInput(CALIBRATE_GPIO, CALIBRATE_PIN, GPIO_Pull_Up);
 8000dee:	2380      	movs	r3, #128	; 0x80
 8000df0:	00db      	lsls	r3, r3, #3
 8000df2:	480f      	ldr	r0, [pc, #60]	; (8000e30 <SYSTEM_Init+0x74>)
 8000df4:	2210      	movs	r2, #16
 8000df6:	0019      	movs	r1, r3
 8000df8:	f7ff ffbc 	bl	8000d74 <GPIO_EnableInput>

	// INIT STATUS LEDs
	LED_Init();
 8000dfc:	f7ff fc42 	bl	8000684 <LED_Init>

	// READ CONFIGURATION FROM EEPROM
	EEPROM_Read(EEPROM_OFFSET, &config, sizeof(config));
 8000e00:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <SYSTEM_Init+0x78>)
 8000e02:	221c      	movs	r2, #28
 8000e04:	0019      	movs	r1, r3
 8000e06:	2000      	movs	r0, #0
 8000e08:	f003 f844 	bl	8003e94 <EEPROM_Read>

	// CHECK FOR VALID CONFIG
	SYSTEM_VerifyConfig();
 8000e0c:	f000 fa6e 	bl	80012ec <SYSTEM_VerifyConfig>

	// INIT RADIO BASED ON EXISTING CONFIG
	ptrRadioData = RADIO_GetDataPtr();
 8000e10:	f002 f94a 	bl	80030a8 <RADIO_GetDataPtr>
 8000e14:	0002      	movs	r2, r0
 8000e16:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <SYSTEM_Init+0x7c>)
 8000e18:	601a      	str	r2, [r3, #0]
	SYSTEM_InitRadio();
 8000e1a:	f000 f81f 	bl	8000e5c <SYSTEM_InitRadio>
}
 8000e1e:	46c0      	nop			; (mov r8, r8)
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	00001837 	.word	0x00001837
 8000e28:	200002ac 	.word	0x200002ac
 8000e2c:	00001838 	.word	0x00001838
 8000e30:	50000400 	.word	0x50000400
 8000e34:	200002b4 	.word	0x200002b4
 8000e38:	200002d0 	.word	0x200002d0

08000e3c <SYSTEM_Update>:
 *
 * INPUTS:
 * OUTPUTS:
 */
void SYSTEM_Update (void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
	// Update Inputs
	RADIO_Update();
 8000e40:	f002 f896 	bl	8002f70 <RADIO_Update>

	// Check For Fault Conditions
	SYSTEM_HandleFaultStatus();
 8000e44:	f000 f85a 	bl	8000efc <SYSTEM_HandleFaultStatus>

	// Update LED's Based on Current Fault Status
	SYSTEM_HandleLEDs();
 8000e48:	f000 f8e0 	bl	800100c <SYSTEM_HandleLEDs>

	// Handle System Calibration
	SYSTEM_HandleCalibration();
 8000e4c:	f000 f8ba 	bl	8000fc4 <SYSTEM_HandleCalibration>

	//
	SYSTEM_HandleOutputs();
 8000e50:	f000 f92a 	bl	80010a8 <SYSTEM_HandleOutputs>
}
 8000e54:	46c0      	nop			; (mov r8, r8)
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
	...

08000e5c <SYSTEM_InitRadio>:
 *
 * INPUTS:
 * OUTPUTS:
 */
void SYSTEM_InitRadio (void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
	// INIT FUNCTION VARIABLES
	uint32_t now = CORE_GetTick();
 8000e62:	f7ff ff7d 	bl	8000d60 <CORE_GetTick>
 8000e66:	0003      	movs	r3, r0
 8000e68:	607b      	str	r3, [r7, #4]
	uint32_t tick = now;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	603b      	str	r3, [r7, #0]

	// INIT RADIO MODULE
	RADIO_Init(&config.radio);
 8000e6e:	4b1f      	ldr	r3, [pc, #124]	; (8000eec <SYSTEM_InitRadio+0x90>)
 8000e70:	0018      	movs	r0, r3
 8000e72:	f002 f821 	bl	8002eb8 <RADIO_Init>

	// ALLOW TIME FOR DETECTION OF EXISTING RADIO CONFIG
	while ( STARTUP_RADIO_TIMEOUT >= (now - tick) )
 8000e76:	e00f      	b.n	8000e98 <SYSTEM_InitRadio+0x3c>
	{
		// UPDATE LOOP VARIABLES
		now = CORE_GetTick();
 8000e78:	f7ff ff72 	bl	8000d60 <CORE_GetTick>
 8000e7c:	0003      	movs	r3, r0
 8000e7e:	607b      	str	r3, [r7, #4]
		// UPDATE RADIO DATA
		RADIO_Update();
 8000e80:	f002 f876 	bl	8002f70 <RADIO_Update>
		// NO NEED TO PROGRESS IF RADIO SUCCESSFULLY CONNECTED
		if ( !ptrRadioData->inputLost )
 8000e84:	4b1a      	ldr	r3, [pc, #104]	; (8000ef0 <SYSTEM_InitRadio+0x94>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	4053      	eors	r3, r2
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d109      	bne.n	8000ea8 <SYSTEM_InitRadio+0x4c>
		{
			break;
		}
		// LOOP PACING
		CORE_Idle();
 8000e94:	f002 ff26 	bl	8003ce4 <CORE_Idle>
	while ( STARTUP_RADIO_TIMEOUT >= (now - tick) )
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	1ad2      	subs	r2, r2, r3
 8000e9e:	23c8      	movs	r3, #200	; 0xc8
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	429a      	cmp	r2, r3
 8000ea4:	d9e8      	bls.n	8000e78 <SYSTEM_InitRadio+0x1c>
 8000ea6:	e000      	b.n	8000eaa <SYSTEM_InitRadio+0x4e>
			break;
 8000ea8:	46c0      	nop			; (mov r8, r8)
	}

	// IF NO RADIO WAS DETECTED ON EXISTING CONFIG
	if ( ptrRadioData->inputLost )
 8000eaa:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <SYSTEM_InitRadio+0x94>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d00b      	beq.n	8000ecc <SYSTEM_InitRadio+0x70>
	{
		// IF A NEW RADIO IS DETECTED
		if ( RADIO_DetInit(&config.radio) )
 8000eb4:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <SYSTEM_InitRadio+0x90>)
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	f001 ff58 	bl	8002d6c <RADIO_DetInit>
 8000ebc:	1e03      	subs	r3, r0, #0
 8000ebe:	d005      	beq.n	8000ecc <SYSTEM_InitRadio+0x70>
		{
			// WRITE NEW CONFIG TO EEPROM
			EEPROM_Write(EEPROM_OFFSET, &config, sizeof(config));
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <SYSTEM_InitRadio+0x98>)
 8000ec2:	221c      	movs	r2, #28
 8000ec4:	0019      	movs	r1, r3
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	f002 ffae 	bl	8003e28 <EEPROM_Write>
		}
	}

	// CHECK IF VALID RADIO IS WAS DETECTED, EXISTING OR NEW
	if ( !ptrRadioData->inputLost )
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <SYSTEM_InitRadio+0x94>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	4053      	eors	r3, r2
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d002      	beq.n	8000ee2 <SYSTEM_InitRadio+0x86>
	{
		// ENABLE POSSIBILITY OF CALIBRATION AT LATER DATE
		calibrateWindow = true;
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <SYSTEM_InitRadio+0x9c>)
 8000ede:	2201      	movs	r2, #1
 8000ee0:	701a      	strb	r2, [r3, #0]
	}
}
 8000ee2:	46c0      	nop			; (mov r8, r8)
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	b002      	add	sp, #8
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	46c0      	nop			; (mov r8, r8)
 8000eec:	200002c4 	.word	0x200002c4
 8000ef0:	200002d0 	.word	0x200002d0
 8000ef4:	200002b4 	.word	0x200002b4
 8000ef8:	200002d4 	.word	0x200002d4

08000efc <SYSTEM_HandleFaultStatus>:
 *
 * INPUTS:
 * OUTPUTS:
 */
void SYSTEM_HandleFaultStatus (void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
	static bool faultVoltage = false;
	static uint32_t tickVolt = 0;
	uint32_t SystemVolt = SYSTEM_GetBatteryVoltage();
 8000f02:	f000 fa37 	bl	8001374 <SYSTEM_GetBatteryVoltage>
 8000f06:	0003      	movs	r3, r0
 8000f08:	607b      	str	r3, [r7, #4]
	int32_t SystemTemp = ADC_ReadDieTemp();
 8000f0a:	f002 fdab 	bl	8003a64 <ADC_ReadDieTemp>
 8000f0e:	0003      	movs	r3, r0
 8000f10:	603b      	str	r3, [r7, #0]

	//
	if (!faultVoltage) {
 8000f12:	4b28      	ldr	r3, [pc, #160]	; (8000fb4 <SYSTEM_HandleFaultStatus+0xb8>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	2201      	movs	r2, #1
 8000f18:	4053      	eors	r3, r2
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d00d      	beq.n	8000f3c <SYSTEM_HandleFaultStatus+0x40>
		if (SystemVolt <= fault.faultVoltage) {
 8000f20:	4b25      	ldr	r3, [pc, #148]	; (8000fb8 <SYSTEM_HandleFaultStatus+0xbc>)
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d820      	bhi.n	8000f6c <SYSTEM_HandleFaultStatus+0x70>
			faultVoltage = true;
 8000f2a:	4b22      	ldr	r3, [pc, #136]	; (8000fb4 <SYSTEM_HandleFaultStatus+0xb8>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	701a      	strb	r2, [r3, #0]
			tickVolt = CORE_GetTick();
 8000f30:	f7ff ff16 	bl	8000d60 <CORE_GetTick>
 8000f34:	0002      	movs	r2, r0
 8000f36:	4b21      	ldr	r3, [pc, #132]	; (8000fbc <SYSTEM_HandleFaultStatus+0xc0>)
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	e017      	b.n	8000f6c <SYSTEM_HandleFaultStatus+0x70>
		}
	} else {
		if (SystemVolt >= (fault.faultVoltage + BATT_HYST)) {
 8000f3c:	4b1e      	ldr	r3, [pc, #120]	; (8000fb8 <SYSTEM_HandleFaultStatus+0xbc>)
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	3364      	adds	r3, #100	; 0x64
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d306      	bcc.n	8000f56 <SYSTEM_HandleFaultStatus+0x5a>
			faultVoltage = false;
 8000f48:	4b1a      	ldr	r3, [pc, #104]	; (8000fb4 <SYSTEM_HandleFaultStatus+0xb8>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
			fault.inputVoltage = false;
 8000f4e:	4b1a      	ldr	r3, [pc, #104]	; (8000fb8 <SYSTEM_HandleFaultStatus+0xbc>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	705a      	strb	r2, [r3, #1]
 8000f54:	e00a      	b.n	8000f6c <SYSTEM_HandleFaultStatus+0x70>
		} else if (FAULT_VOLTAGE_TRIP <= (CORE_GetTick() - tickVolt)) {
 8000f56:	f7ff ff03 	bl	8000d60 <CORE_GetTick>
 8000f5a:	0002      	movs	r2, r0
 8000f5c:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <SYSTEM_HandleFaultStatus+0xc0>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	2b63      	cmp	r3, #99	; 0x63
 8000f64:	d902      	bls.n	8000f6c <SYSTEM_HandleFaultStatus+0x70>
			fault.inputVoltage = true;
 8000f66:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <SYSTEM_HandleFaultStatus+0xbc>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	705a      	strb	r2, [r3, #1]
		}
	}

	//
	if (!fault.overTemperature)
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <SYSTEM_HandleFaultStatus+0xbc>)
 8000f6e:	789b      	ldrb	r3, [r3, #2]
 8000f70:	2201      	movs	r2, #1
 8000f72:	4053      	eors	r3, r2
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d006      	beq.n	8000f88 <SYSTEM_HandleFaultStatus+0x8c>
	{
		if (SystemTemp >= TEMP_HIGH) {
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	2b63      	cmp	r3, #99	; 0x63
 8000f7e:	dd09      	ble.n	8000f94 <SYSTEM_HandleFaultStatus+0x98>
			fault.overTemperature = true;
 8000f80:	4b0d      	ldr	r3, [pc, #52]	; (8000fb8 <SYSTEM_HandleFaultStatus+0xbc>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	709a      	strb	r2, [r3, #2]
 8000f86:	e005      	b.n	8000f94 <SYSTEM_HandleFaultStatus+0x98>
		}
	}
	else
	{
		if (SystemTemp <= (TEMP_HIGH - TEMP_HYST)) {
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	2b5a      	cmp	r3, #90	; 0x5a
 8000f8c:	dc02      	bgt.n	8000f94 <SYSTEM_HandleFaultStatus+0x98>
			fault.overTemperature = false;
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <SYSTEM_HandleFaultStatus+0xbc>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	709a      	strb	r2, [r3, #2]
		}
	}

	//
	if (ptrRadioData->inputLost) {
 8000f94:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <SYSTEM_HandleFaultStatus+0xc4>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d003      	beq.n	8000fa6 <SYSTEM_HandleFaultStatus+0xaa>
		fault.signalLost = true;
 8000f9e:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <SYSTEM_HandleFaultStatus+0xbc>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	701a      	strb	r2, [r3, #0]
	} else {
		fault.signalLost = false;
	}
}
 8000fa4:	e002      	b.n	8000fac <SYSTEM_HandleFaultStatus+0xb0>
		fault.signalLost = false;
 8000fa6:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <SYSTEM_HandleFaultStatus+0xbc>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	701a      	strb	r2, [r3, #0]
}
 8000fac:	46c0      	nop			; (mov r8, r8)
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	b002      	add	sp, #8
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	200002d5 	.word	0x200002d5
 8000fb8:	200002ac 	.word	0x200002ac
 8000fbc:	200002d8 	.word	0x200002d8
 8000fc0:	200002d0 	.word	0x200002d0

08000fc4 <SYSTEM_HandleCalibration>:
 *
 * INPUTS:
 * OUTPUTS:
 */
void SYSTEM_HandleCalibration (void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
	// INIT LOOP VARIABLES
	uint32_t now = CORE_GetTick();
 8000fca:	f7ff fec9 	bl	8000d60 <CORE_GetTick>
 8000fce:	0003      	movs	r3, r0
 8000fd0:	607b      	str	r3, [r7, #4]

	// IF STILL WITHIN BOOT CALIBRATION WINDOW
	if (calibrateWindow)
 8000fd2:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <SYSTEM_HandleCalibration+0x40>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d00f      	beq.n	8000ffa <SYSTEM_HandleCalibration+0x36>
	{
		// HAS THE USER INDICATED THEY WANT TO CALIBRATE DEVICE
		if ( SYSTEM_InitiateCalibration() )
 8000fda:	f000 fa1f 	bl	800141c <SYSTEM_InitiateCalibration>
 8000fde:	1e03      	subs	r3, r0, #0
 8000fe0:	d004      	beq.n	8000fec <SYSTEM_HandleCalibration+0x28>
		{
			// RUN CALIBRATION SEQUENCE
			SYSTEM_UpdateCalibration();
 8000fe2:	f000 fa95 	bl	8001510 <SYSTEM_UpdateCalibration>
			calibrateWindow = false;
 8000fe6:	4b07      	ldr	r3, [pc, #28]	; (8001004 <SYSTEM_HandleCalibration+0x40>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	701a      	strb	r2, [r3, #0]
		}
		// HAS THE WINDOW ELAPSED
		if ( now >= CALIBRATE_TIMEOUT )
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a06      	ldr	r2, [pc, #24]	; (8001008 <SYSTEM_HandleCalibration+0x44>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d902      	bls.n	8000ffa <SYSTEM_HandleCalibration+0x36>
		{
			calibrateWindow = false;
 8000ff4:	4b03      	ldr	r3, [pc, #12]	; (8001004 <SYSTEM_HandleCalibration+0x40>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	b002      	add	sp, #8
 8001000:	bd80      	pop	{r7, pc}
 8001002:	46c0      	nop			; (mov r8, r8)
 8001004:	200002d4 	.word	0x200002d4
 8001008:	0000270f 	.word	0x0000270f

0800100c <SYSTEM_HandleLEDs>:
 *
 * INPUTS:
 * OUTPUTS:
 */
void SYSTEM_HandleLEDs (void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
	// INIT LOOP VARIABLES
	uint32_t now = CORE_GetTick();
 8001012:	f7ff fea5 	bl	8000d60 <CORE_GetTick>
 8001016:	0003      	movs	r3, r0
 8001018:	607b      	str	r3, [r7, #4]
	static uint32_t tick = 0;

	// UPDATE LED BASED ON FAULT STATES
	if (fault.overTemperature)
 800101a:	4b21      	ldr	r3, [pc, #132]	; (80010a0 <SYSTEM_HandleLEDs+0x94>)
 800101c:	789b      	ldrb	r3, [r3, #2]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d00d      	beq.n	800103e <SYSTEM_HandleLEDs+0x32>
	{
		LED_GreenOFF();
 8001022:	f7ff fb7b 	bl	800071c <LED_GreenOFF>
		if (LED_FAULT_TEMPFLASH <= (now - tick))
 8001026:	4b1f      	ldr	r3, [pc, #124]	; (80010a4 <SYSTEM_HandleLEDs+0x98>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	2b63      	cmp	r3, #99	; 0x63
 8001030:	d931      	bls.n	8001096 <SYSTEM_HandleLEDs+0x8a>
		{
			LED_RedToggle();
 8001032:	f7ff fb9d 	bl	8000770 <LED_RedToggle>
			tick = now;
 8001036:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <SYSTEM_HandleLEDs+0x98>)
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	601a      	str	r2, [r3, #0]
	else
	{
		LED_RedOFF();
		LED_GreenON();
	}
}
 800103c:	e02b      	b.n	8001096 <SYSTEM_HandleLEDs+0x8a>
	else if (fault.inputVoltage)
 800103e:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <SYSTEM_HandleLEDs+0x94>)
 8001040:	785b      	ldrb	r3, [r3, #1]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d00f      	beq.n	8001066 <SYSTEM_HandleLEDs+0x5a>
		LED_GreenOFF();
 8001046:	f7ff fb69 	bl	800071c <LED_GreenOFF>
		if (LED_FAULT_VOLTAGEFLASH <= (now - tick))
 800104a:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <SYSTEM_HandleLEDs+0x98>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	1ad2      	subs	r2, r2, r3
 8001052:	23fa      	movs	r3, #250	; 0xfa
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	429a      	cmp	r2, r3
 8001058:	d31d      	bcc.n	8001096 <SYSTEM_HandleLEDs+0x8a>
			LED_RedToggle();
 800105a:	f7ff fb89 	bl	8000770 <LED_RedToggle>
			tick = now;
 800105e:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <SYSTEM_HandleLEDs+0x98>)
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	601a      	str	r2, [r3, #0]
}
 8001064:	e017      	b.n	8001096 <SYSTEM_HandleLEDs+0x8a>
	else if (fault.signalLost)
 8001066:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <SYSTEM_HandleLEDs+0x94>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d00f      	beq.n	800108e <SYSTEM_HandleLEDs+0x82>
		LED_RedOFF();
 800106e:	f7ff fb63 	bl	8000738 <LED_RedOFF>
		if (LED_FAULT_SIGNALFLASH <= (now - tick))
 8001072:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <SYSTEM_HandleLEDs+0x98>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	1ad2      	subs	r2, r2, r3
 800107a:	23fa      	movs	r3, #250	; 0xfa
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	429a      	cmp	r2, r3
 8001080:	d309      	bcc.n	8001096 <SYSTEM_HandleLEDs+0x8a>
			LED_GreenToggle();
 8001082:	f7ff fb67 	bl	8000754 <LED_GreenToggle>
			tick = now;
 8001086:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <SYSTEM_HandleLEDs+0x98>)
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	601a      	str	r2, [r3, #0]
}
 800108c:	e003      	b.n	8001096 <SYSTEM_HandleLEDs+0x8a>
		LED_RedOFF();
 800108e:	f7ff fb53 	bl	8000738 <LED_RedOFF>
		LED_GreenON();
 8001092:	f7ff fb27 	bl	80006e4 <LED_GreenON>
}
 8001096:	46c0      	nop			; (mov r8, r8)
 8001098:	46bd      	mov	sp, r7
 800109a:	b002      	add	sp, #8
 800109c:	bd80      	pop	{r7, pc}
 800109e:	46c0      	nop			; (mov r8, r8)
 80010a0:	200002ac 	.word	0x200002ac
 80010a4:	200002dc 	.word	0x200002dc

080010a8 <SYSTEM_HandleOutputs>:
 *
 * INPUTS:
 * OUTPUTS:
 */
void SYSTEM_HandleOutputs (void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
	// Initialize Loop Variables
	bool f = (fault.overTemperature || fault.inputVoltage || fault.signalLost);
 80010ae:	4b23      	ldr	r3, [pc, #140]	; (800113c <SYSTEM_HandleOutputs+0x94>)
 80010b0:	789b      	ldrb	r3, [r3, #2]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d107      	bne.n	80010c6 <SYSTEM_HandleOutputs+0x1e>
 80010b6:	4b21      	ldr	r3, [pc, #132]	; (800113c <SYSTEM_HandleOutputs+0x94>)
 80010b8:	785b      	ldrb	r3, [r3, #1]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d103      	bne.n	80010c6 <SYSTEM_HandleOutputs+0x1e>
 80010be:	4b1f      	ldr	r3, [pc, #124]	; (800113c <SYSTEM_HandleOutputs+0x94>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <SYSTEM_HandleOutputs+0x22>
 80010c6:	2201      	movs	r2, #1
 80010c8:	e000      	b.n	80010cc <SYSTEM_HandleOutputs+0x24>
 80010ca:	2200      	movs	r2, #0
 80010cc:	1dfb      	adds	r3, r7, #7
 80010ce:	701a      	strb	r2, [r3, #0]
 80010d0:	781a      	ldrb	r2, [r3, #0]
 80010d2:	2101      	movs	r1, #1
 80010d4:	400a      	ands	r2, r1
 80010d6:	701a      	strb	r2, [r3, #0]
	static bool f_p = true; // Init servo on first loop

	// FAULT CONDITION - RISING EDGE
	if (f && !f_p)
 80010d8:	1dfb      	adds	r3, r7, #7
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d00c      	beq.n	80010fa <SYSTEM_HandleOutputs+0x52>
 80010e0:	4b17      	ldr	r3, [pc, #92]	; (8001140 <SYSTEM_HandleOutputs+0x98>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2201      	movs	r2, #1
 80010e6:	4053      	eors	r3, r2
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d005      	beq.n	80010fa <SYSTEM_HandleOutputs+0x52>
	{
  		MOTOR_Update(MOTOR_OFF, MOTOR_OFF);
 80010ee:	2100      	movs	r1, #0
 80010f0:	2000      	movs	r0, #0
 80010f2:	f7ff fc15 	bl	8000920 <MOTOR_Update>
		SERVO_Deinit();
 80010f6:	f7ff fd8f 	bl	8000c18 <SERVO_Deinit>
	}

	// FAULT CONDITION - FALLING EDGE
	if (!f && f_p )
 80010fa:	1dfb      	adds	r3, r7, #7
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2201      	movs	r2, #1
 8001100:	4053      	eors	r3, r2
 8001102:	b2db      	uxtb	r3, r3
 8001104:	2b00      	cmp	r3, #0
 8001106:	d005      	beq.n	8001114 <SYSTEM_HandleOutputs+0x6c>
 8001108:	4b0d      	ldr	r3, [pc, #52]	; (8001140 <SYSTEM_HandleOutputs+0x98>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <SYSTEM_HandleOutputs+0x6c>
	{
		SERVO_Init();
 8001110:	f7ff fd22 	bl	8000b58 <SERVO_Init>
	}

	// NO FAULT
	if (!f)
 8001114:	1dfb      	adds	r3, r7, #7
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2201      	movs	r2, #1
 800111a:	4053      	eors	r3, r2
 800111c:	b2db      	uxtb	r3, r3
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <SYSTEM_HandleOutputs+0x82>
	{
		SYSTEM_UpdateServo();
 8001122:	f000 f80f 	bl	8001144 <SYSTEM_UpdateServo>
		SYSTEM_UpdateMotors();
 8001126:	f000 f84d 	bl	80011c4 <SYSTEM_UpdateMotors>
	}

	//
	f_p = f;
 800112a:	4b05      	ldr	r3, [pc, #20]	; (8001140 <SYSTEM_HandleOutputs+0x98>)
 800112c:	1dfa      	adds	r2, r7, #7
 800112e:	7812      	ldrb	r2, [r2, #0]
 8001130:	701a      	strb	r2, [r3, #0]
}
 8001132:	46c0      	nop			; (mov r8, r8)
 8001134:	46bd      	mov	sp, r7
 8001136:	b002      	add	sp, #8
 8001138:	bd80      	pop	{r7, pc}
 800113a:	46c0      	nop			; (mov r8, r8)
 800113c:	200002ac 	.word	0x200002ac
 8001140:	20000000 	.word	0x20000000

08001144 <SYSTEM_UpdateServo>:
 *
 * INPUTS:
 * OUTPUTS:
 */
void SYSTEM_UpdateServo (void)
{
 8001144:	b590      	push	{r4, r7, lr}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
	// Extract appropriate data for servo
	uint16_t servoA = ptrRadioData->ch[config.chServoA];
 800114a:	4b1c      	ldr	r3, [pc, #112]	; (80011bc <SYSTEM_UpdateServo+0x78>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	4b1c      	ldr	r3, [pc, #112]	; (80011c0 <SYSTEM_UpdateServo+0x7c>)
 8001150:	79db      	ldrb	r3, [r3, #7]
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	18d3      	adds	r3, r2, r3
 8001156:	3304      	adds	r3, #4
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	1dbb      	adds	r3, r7, #6
 800115c:	801a      	strh	r2, [r3, #0]
	uint16_t servoB = ptrRadioData->ch[config.chServoB];
 800115e:	4b17      	ldr	r3, [pc, #92]	; (80011bc <SYSTEM_UpdateServo+0x78>)
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	4b17      	ldr	r3, [pc, #92]	; (80011c0 <SYSTEM_UpdateServo+0x7c>)
 8001164:	7a1b      	ldrb	r3, [r3, #8]
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	18d3      	adds	r3, r2, r3
 800116a:	3304      	adds	r3, #4
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	1d3b      	adds	r3, r7, #4
 8001170:	801a      	strh	r2, [r3, #0]

	// Check for channel reverse
	if (config.chServoArev) { servoA = SYSTEM_ReverseRadio(servoA); }
 8001172:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <SYSTEM_UpdateServo+0x7c>)
 8001174:	7adb      	ldrb	r3, [r3, #11]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d007      	beq.n	800118a <SYSTEM_UpdateServo+0x46>
 800117a:	1dbc      	adds	r4, r7, #6
 800117c:	1dbb      	adds	r3, r7, #6
 800117e:	881b      	ldrh	r3, [r3, #0]
 8001180:	0018      	movs	r0, r3
 8001182:	f000 f939 	bl	80013f8 <SYSTEM_ReverseRadio>
 8001186:	0003      	movs	r3, r0
 8001188:	8023      	strh	r3, [r4, #0]
	if (config.chServoBrev) { servoB = SYSTEM_ReverseRadio(servoB); }
 800118a:	4b0d      	ldr	r3, [pc, #52]	; (80011c0 <SYSTEM_UpdateServo+0x7c>)
 800118c:	7b1b      	ldrb	r3, [r3, #12]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d007      	beq.n	80011a2 <SYSTEM_UpdateServo+0x5e>
 8001192:	1d3c      	adds	r4, r7, #4
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	881b      	ldrh	r3, [r3, #0]
 8001198:	0018      	movs	r0, r3
 800119a:	f000 f92d 	bl	80013f8 <SYSTEM_ReverseRadio>
 800119e:	0003      	movs	r3, r0
 80011a0:	8023      	strh	r3, [r4, #0]

	// Update Servos
	SERVO_Update(servoA, servoB);
 80011a2:	1d3b      	adds	r3, r7, #4
 80011a4:	881a      	ldrh	r2, [r3, #0]
 80011a6:	1dbb      	adds	r3, r7, #6
 80011a8:	881b      	ldrh	r3, [r3, #0]
 80011aa:	0011      	movs	r1, r2
 80011ac:	0018      	movs	r0, r3
 80011ae:	f7ff fd61 	bl	8000c74 <SERVO_Update>
}
 80011b2:	46c0      	nop			; (mov r8, r8)
 80011b4:	46bd      	mov	sp, r7
 80011b6:	b003      	add	sp, #12
 80011b8:	bd90      	pop	{r4, r7, pc}
 80011ba:	46c0      	nop			; (mov r8, r8)
 80011bc:	200002d0 	.word	0x200002d0
 80011c0:	200002b4 	.word	0x200002b4

080011c4 <SYSTEM_UpdateMotors>:
 *
 * INPUTS:
 * OUTPUTS:
 */
void SYSTEM_UpdateMotors (void)
{
 80011c4:	b590      	push	{r4, r7, lr}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
	// Extract appropriate data for motors
	uint16_t driveA = ptrRadioData->ch[config.chDriveA];
 80011ca:	4b45      	ldr	r3, [pc, #276]	; (80012e0 <SYSTEM_UpdateMotors+0x11c>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	4b45      	ldr	r3, [pc, #276]	; (80012e4 <SYSTEM_UpdateMotors+0x120>)
 80011d0:	795b      	ldrb	r3, [r3, #5]
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	18d3      	adds	r3, r2, r3
 80011d6:	3304      	adds	r3, #4
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	210e      	movs	r1, #14
 80011dc:	187b      	adds	r3, r7, r1
 80011de:	801a      	strh	r2, [r3, #0]
	uint16_t driveB = ptrRadioData->ch[config.chDriveB];
 80011e0:	4b3f      	ldr	r3, [pc, #252]	; (80012e0 <SYSTEM_UpdateMotors+0x11c>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4b3f      	ldr	r3, [pc, #252]	; (80012e4 <SYSTEM_UpdateMotors+0x120>)
 80011e6:	799b      	ldrb	r3, [r3, #6]
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	18d3      	adds	r3, r2, r3
 80011ec:	3304      	adds	r3, #4
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	230c      	movs	r3, #12
 80011f2:	18fb      	adds	r3, r7, r3
 80011f4:	801a      	strh	r2, [r3, #0]

	// Check for channel reverse
	if (config.chDriveArev) { driveA = SYSTEM_ReverseRadio(driveA); }
 80011f6:	4b3b      	ldr	r3, [pc, #236]	; (80012e4 <SYSTEM_UpdateMotors+0x120>)
 80011f8:	7a5b      	ldrb	r3, [r3, #9]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d007      	beq.n	800120e <SYSTEM_UpdateMotors+0x4a>
 80011fe:	187c      	adds	r4, r7, r1
 8001200:	187b      	adds	r3, r7, r1
 8001202:	881b      	ldrh	r3, [r3, #0]
 8001204:	0018      	movs	r0, r3
 8001206:	f000 f8f7 	bl	80013f8 <SYSTEM_ReverseRadio>
 800120a:	0003      	movs	r3, r0
 800120c:	8023      	strh	r3, [r4, #0]
	if (config.chDriveBrev) { driveB = SYSTEM_ReverseRadio(driveB); }
 800120e:	4b35      	ldr	r3, [pc, #212]	; (80012e4 <SYSTEM_UpdateMotors+0x120>)
 8001210:	7a9b      	ldrb	r3, [r3, #10]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d008      	beq.n	8001228 <SYSTEM_UpdateMotors+0x64>
 8001216:	230c      	movs	r3, #12
 8001218:	18fc      	adds	r4, r7, r3
 800121a:	18fb      	adds	r3, r7, r3
 800121c:	881b      	ldrh	r3, [r3, #0]
 800121e:	0018      	movs	r0, r3
 8001220:	f000 f8ea 	bl	80013f8 <SYSTEM_ReverseRadio>
 8001224:	0003      	movs	r3, r0
 8001226:	8023      	strh	r3, [r4, #0]

	if (driveA && driveB)
 8001228:	220e      	movs	r2, #14
 800122a:	18bb      	adds	r3, r7, r2
 800122c:	881b      	ldrh	r3, [r3, #0]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d04c      	beq.n	80012cc <SYSTEM_UpdateMotors+0x108>
 8001232:	230c      	movs	r3, #12
 8001234:	18fb      	adds	r3, r7, r3
 8001236:	881b      	ldrh	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d047      	beq.n	80012cc <SYSTEM_UpdateMotors+0x108>
	{
		// Check for channel reverse
		if (config.chDriveArev) { driveA = SYSTEM_ReverseRadio(driveA); }
 800123c:	4b29      	ldr	r3, [pc, #164]	; (80012e4 <SYSTEM_UpdateMotors+0x120>)
 800123e:	7a5b      	ldrb	r3, [r3, #9]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d007      	beq.n	8001254 <SYSTEM_UpdateMotors+0x90>
 8001244:	18bc      	adds	r4, r7, r2
 8001246:	18bb      	adds	r3, r7, r2
 8001248:	881b      	ldrh	r3, [r3, #0]
 800124a:	0018      	movs	r0, r3
 800124c:	f000 f8d4 	bl	80013f8 <SYSTEM_ReverseRadio>
 8001250:	0003      	movs	r3, r0
 8001252:	8023      	strh	r3, [r4, #0]
		if (config.chDriveBrev) { driveB = SYSTEM_ReverseRadio(driveB); }
 8001254:	4b23      	ldr	r3, [pc, #140]	; (80012e4 <SYSTEM_UpdateMotors+0x120>)
 8001256:	7a9b      	ldrb	r3, [r3, #10]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d008      	beq.n	800126e <SYSTEM_UpdateMotors+0xaa>
 800125c:	230c      	movs	r3, #12
 800125e:	18fc      	adds	r4, r7, r3
 8001260:	18fb      	adds	r3, r7, r3
 8001262:	881b      	ldrh	r3, [r3, #0]
 8001264:	0018      	movs	r0, r3
 8001266:	f000 f8c7 	bl	80013f8 <SYSTEM_ReverseRadio>
 800126a:	0003      	movs	r3, r0
 800126c:	8023      	strh	r3, [r4, #0]

		// Mix channels for Arcade drive mode
		if (config.mode == ARCADE)
 800126e:	4b1d      	ldr	r3, [pc, #116]	; (80012e4 <SYSTEM_UpdateMotors+0x120>)
 8001270:	791b      	ldrb	r3, [r3, #4]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d117      	bne.n	80012a6 <SYSTEM_UpdateMotors+0xe2>
		{
			int32_t dA = driveA - (RADIO_CH_CENTER - driveB);
 8001276:	200e      	movs	r0, #14
 8001278:	183b      	adds	r3, r7, r0
 800127a:	881a      	ldrh	r2, [r3, #0]
 800127c:	240c      	movs	r4, #12
 800127e:	193b      	adds	r3, r7, r4
 8001280:	881b      	ldrh	r3, [r3, #0]
 8001282:	4919      	ldr	r1, [pc, #100]	; (80012e8 <SYSTEM_UpdateMotors+0x124>)
 8001284:	1acb      	subs	r3, r1, r3
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	60bb      	str	r3, [r7, #8]
			int32_t dB = driveA + (RADIO_CH_CENTER - driveB);
 800128a:	183b      	adds	r3, r7, r0
 800128c:	881a      	ldrh	r2, [r3, #0]
 800128e:	193b      	adds	r3, r7, r4
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	4915      	ldr	r1, [pc, #84]	; (80012e8 <SYSTEM_UpdateMotors+0x124>)
 8001294:	1acb      	subs	r3, r1, r3
 8001296:	18d3      	adds	r3, r2, r3
 8001298:	607b      	str	r3, [r7, #4]
			driveA = (uint16_t)dA;
 800129a:	183b      	adds	r3, r7, r0
 800129c:	68ba      	ldr	r2, [r7, #8]
 800129e:	801a      	strh	r2, [r3, #0]
			driveB = (uint16_t)dB;
 80012a0:	193b      	adds	r3, r7, r4
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	801a      	strh	r2, [r3, #0]
		}
		MOTOR_Update( SYSTEM_RadioToMotor(driveA), SYSTEM_RadioToMotor(driveB) );
 80012a6:	230e      	movs	r3, #14
 80012a8:	18fb      	adds	r3, r7, r3
 80012aa:	881b      	ldrh	r3, [r3, #0]
 80012ac:	0018      	movs	r0, r3
 80012ae:	f000 f875 	bl	800139c <SYSTEM_RadioToMotor>
 80012b2:	0004      	movs	r4, r0
 80012b4:	230c      	movs	r3, #12
 80012b6:	18fb      	adds	r3, r7, r3
 80012b8:	881b      	ldrh	r3, [r3, #0]
 80012ba:	0018      	movs	r0, r3
 80012bc:	f000 f86e 	bl	800139c <SYSTEM_RadioToMotor>
 80012c0:	0003      	movs	r3, r0
 80012c2:	0019      	movs	r1, r3
 80012c4:	0020      	movs	r0, r4
 80012c6:	f7ff fb2b 	bl	8000920 <MOTOR_Update>
 80012ca:	e004      	b.n	80012d6 <SYSTEM_UpdateMotors+0x112>
	}
	else
	{
		MOTOR_Update(MOTOR_OFF, MOTOR_OFF);
 80012cc:	2100      	movs	r1, #0
 80012ce:	2000      	movs	r0, #0
 80012d0:	f7ff fb26 	bl	8000920 <MOTOR_Update>
	}
}
 80012d4:	46c0      	nop			; (mov r8, r8)
 80012d6:	46c0      	nop			; (mov r8, r8)
 80012d8:	46bd      	mov	sp, r7
 80012da:	b005      	add	sp, #20
 80012dc:	bd90      	pop	{r4, r7, pc}
 80012de:	46c0      	nop			; (mov r8, r8)
 80012e0:	200002d0 	.word	0x200002d0
 80012e4:	200002b4 	.word	0x200002b4
 80012e8:	000005dc 	.word	0x000005dc

080012ec <SYSTEM_VerifyConfig>:
 *
 * INPUTS:
 * OUTPUTS:
 */
void SYSTEM_VerifyConfig (void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
	// CHECK FOR CORRECT CONFIG HASH VALUES - CALIBRATION WRITTEN TO EEPROM
	if ((config.hashA != CONFIG_HASH_A) || (config.hashB != CONFIG_HASH_B))
 80012f0:	4b1c      	ldr	r3, [pc, #112]	; (8001364 <SYSTEM_VerifyConfig+0x78>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a1c      	ldr	r2, [pc, #112]	; (8001368 <SYSTEM_VerifyConfig+0x7c>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d104      	bne.n	8001304 <SYSTEM_VerifyConfig+0x18>
 80012fa:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <SYSTEM_VerifyConfig+0x78>)
 80012fc:	699b      	ldr	r3, [r3, #24]
 80012fe:	4a1b      	ldr	r2, [pc, #108]	; (800136c <SYSTEM_VerifyConfig+0x80>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d02c      	beq.n	800135e <SYSTEM_VerifyConfig+0x72>
	{
		// FRESH DEVICE USED SO WRITE DEFAULT CONFIG TO EEPROM
		config.hashA = 				CONFIG_HASH_A;
 8001304:	4b17      	ldr	r3, [pc, #92]	; (8001364 <SYSTEM_VerifyConfig+0x78>)
 8001306:	4a18      	ldr	r2, [pc, #96]	; (8001368 <SYSTEM_VerifyConfig+0x7c>)
 8001308:	601a      	str	r2, [r3, #0]
		config.mode = 				TANK;
 800130a:	4b16      	ldr	r3, [pc, #88]	; (8001364 <SYSTEM_VerifyConfig+0x78>)
 800130c:	2200      	movs	r2, #0
 800130e:	711a      	strb	r2, [r3, #4]
		config.chDriveA = 			IP1;
 8001310:	4b14      	ldr	r3, [pc, #80]	; (8001364 <SYSTEM_VerifyConfig+0x78>)
 8001312:	2200      	movs	r2, #0
 8001314:	715a      	strb	r2, [r3, #5]
		config.chDriveArev = 		false;
 8001316:	4b13      	ldr	r3, [pc, #76]	; (8001364 <SYSTEM_VerifyConfig+0x78>)
 8001318:	2200      	movs	r2, #0
 800131a:	725a      	strb	r2, [r3, #9]
		config.chDriveB = 			IP2;
 800131c:	4b11      	ldr	r3, [pc, #68]	; (8001364 <SYSTEM_VerifyConfig+0x78>)
 800131e:	2201      	movs	r2, #1
 8001320:	719a      	strb	r2, [r3, #6]
		config.chDriveBrev = 		false;
 8001322:	4b10      	ldr	r3, [pc, #64]	; (8001364 <SYSTEM_VerifyConfig+0x78>)
 8001324:	2200      	movs	r2, #0
 8001326:	729a      	strb	r2, [r3, #10]
		config.chServoA = 			IP3;
 8001328:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <SYSTEM_VerifyConfig+0x78>)
 800132a:	2202      	movs	r2, #2
 800132c:	71da      	strb	r2, [r3, #7]
		config.chServoArev =		false;
 800132e:	4b0d      	ldr	r3, [pc, #52]	; (8001364 <SYSTEM_VerifyConfig+0x78>)
 8001330:	2200      	movs	r2, #0
 8001332:	72da      	strb	r2, [r3, #11]
		config.chServoB = 			IP4;
 8001334:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <SYSTEM_VerifyConfig+0x78>)
 8001336:	2203      	movs	r2, #3
 8001338:	721a      	strb	r2, [r3, #8]
		config.chServoBrev = 		false;
 800133a:	4b0a      	ldr	r3, [pc, #40]	; (8001364 <SYSTEM_VerifyConfig+0x78>)
 800133c:	2200      	movs	r2, #0
 800133e:	731a      	strb	r2, [r3, #12]
		config.radio.Baud_SBUS = 	SBUS_BAUD;
 8001340:	4b08      	ldr	r3, [pc, #32]	; (8001364 <SYSTEM_VerifyConfig+0x78>)
 8001342:	4a0b      	ldr	r2, [pc, #44]	; (8001370 <SYSTEM_VerifyConfig+0x84>)
 8001344:	611a      	str	r2, [r3, #16]
		config.radio.Protocol =		SBUS;
 8001346:	4b07      	ldr	r3, [pc, #28]	; (8001364 <SYSTEM_VerifyConfig+0x78>)
 8001348:	2201      	movs	r2, #1
 800134a:	751a      	strb	r2, [r3, #20]
		config.hashB = 				CONFIG_HASH_B;
 800134c:	4b05      	ldr	r3, [pc, #20]	; (8001364 <SYSTEM_VerifyConfig+0x78>)
 800134e:	4a07      	ldr	r2, [pc, #28]	; (800136c <SYSTEM_VerifyConfig+0x80>)
 8001350:	619a      	str	r2, [r3, #24]
		EEPROM_Write(EEPROM_OFFSET, &config, sizeof(config));
 8001352:	4b04      	ldr	r3, [pc, #16]	; (8001364 <SYSTEM_VerifyConfig+0x78>)
 8001354:	221c      	movs	r2, #28
 8001356:	0019      	movs	r1, r3
 8001358:	2000      	movs	r0, #0
 800135a:	f002 fd65 	bl	8003e28 <EEPROM_Write>
	}
}
 800135e:	46c0      	nop			; (mov r8, r8)
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	200002b4 	.word	0x200002b4
 8001368:	8ce74359 	.word	0x8ce74359
 800136c:	8761d60e 	.word	0x8761d60e
 8001370:	000186a0 	.word	0x000186a0

08001374 <SYSTEM_GetBatteryVoltage>:
 *
 * INPUTS:
 * OUTPUTS:
 */
uint32_t SYSTEM_GetBatteryVoltage (void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
	uint32_t ain = ADC_Read(BATTERY_CHANNEL);
 800137a:	2080      	movs	r0, #128	; 0x80
 800137c:	f002 fb20 	bl	80039c0 <ADC_Read>
 8001380:	0003      	movs	r3, r0
 8001382:	607b      	str	r3, [r7, #4]
	return AIN_AinToDivider(ain, BATTERY_DET_RLOW, BATTERY_DET_RHIGH);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2264      	movs	r2, #100	; 0x64
 8001388:	2112      	movs	r1, #18
 800138a:	0018      	movs	r0, r3
 800138c:	f002 fb3e 	bl	8003a0c <AIN_AinToDivider>
 8001390:	0003      	movs	r3, r0
}
 8001392:	0018      	movs	r0, r3
 8001394:	46bd      	mov	sp, r7
 8001396:	b002      	add	sp, #8
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <SYSTEM_RadioToMotor>:
 *
 * INPUTS:
 * OUTPUTS:
 */
int32_t SYSTEM_RadioToMotor (uint16_t radio)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	0002      	movs	r2, r0
 80013a4:	1dbb      	adds	r3, r7, #6
 80013a6:	801a      	strh	r2, [r3, #0]
	if (radio > RADIO_CH_MAX) {
 80013a8:	1dbb      	adds	r3, r7, #6
 80013aa:	881a      	ldrh	r2, [r3, #0]
 80013ac:	23fa      	movs	r3, #250	; 0xfa
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d904      	bls.n	80013be <SYSTEM_RadioToMotor+0x22>
		radio = RADIO_CH_MAX;
 80013b4:	1dbb      	adds	r3, r7, #6
 80013b6:	22fa      	movs	r2, #250	; 0xfa
 80013b8:	00d2      	lsls	r2, r2, #3
 80013ba:	801a      	strh	r2, [r3, #0]
 80013bc:	e009      	b.n	80013d2 <SYSTEM_RadioToMotor+0x36>
	} else if (radio < RADIO_CH_MIN) {
 80013be:	1dbb      	adds	r3, r7, #6
 80013c0:	881a      	ldrh	r2, [r3, #0]
 80013c2:	23fa      	movs	r3, #250	; 0xfa
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d203      	bcs.n	80013d2 <SYSTEM_RadioToMotor+0x36>
		radio = RADIO_CH_MIN;
 80013ca:	1dbb      	adds	r3, r7, #6
 80013cc:	22fa      	movs	r2, #250	; 0xfa
 80013ce:	0092      	lsls	r2, r2, #2
 80013d0:	801a      	strh	r2, [r3, #0]
	}

	return (((int32_t)radio - RADIO_CH_CENTER) * MOTOR_MAX) / RADIO_CH_HALFSCALE;
 80013d2:	1dbb      	adds	r3, r7, #6
 80013d4:	881b      	ldrh	r3, [r3, #0]
 80013d6:	4a07      	ldr	r2, [pc, #28]	; (80013f4 <SYSTEM_RadioToMotor+0x58>)
 80013d8:	4694      	mov	ip, r2
 80013da:	4463      	add	r3, ip
 80013dc:	021b      	lsls	r3, r3, #8
 80013de:	22fa      	movs	r2, #250	; 0xfa
 80013e0:	0051      	lsls	r1, r2, #1
 80013e2:	0018      	movs	r0, r3
 80013e4:	f7fe ff1a 	bl	800021c <__divsi3>
 80013e8:	0003      	movs	r3, r0
}
 80013ea:	0018      	movs	r0, r3
 80013ec:	46bd      	mov	sp, r7
 80013ee:	b002      	add	sp, #8
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	46c0      	nop			; (mov r8, r8)
 80013f4:	fffffa24 	.word	0xfffffa24

080013f8 <SYSTEM_ReverseRadio>:
 *
 * INPUTS:
 * OUTPUTS:
 */
uint16_t SYSTEM_ReverseRadio (uint16_t radio)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	0002      	movs	r2, r0
 8001400:	1dbb      	adds	r3, r7, #6
 8001402:	801a      	strh	r2, [r3, #0]
	return ((2 * RADIO_CH_CENTER) - radio);
 8001404:	1dbb      	adds	r3, r7, #6
 8001406:	881b      	ldrh	r3, [r3, #0]
 8001408:	4a03      	ldr	r2, [pc, #12]	; (8001418 <SYSTEM_ReverseRadio+0x20>)
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	b29b      	uxth	r3, r3
}
 800140e:	0018      	movs	r0, r3
 8001410:	46bd      	mov	sp, r7
 8001412:	b002      	add	sp, #8
 8001414:	bd80      	pop	{r7, pc}
 8001416:	46c0      	nop			; (mov r8, r8)
 8001418:	00000bb8 	.word	0x00000bb8

0800141c <SYSTEM_InitiateCalibration>:
 *
 * INPUTS:
 * OUTPUTS:
 */
bool SYSTEM_InitiateCalibration (void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
	// INIT LOOP VARIABLES
	static RADIO_ChannelActiveFlags	chActive_p[RADIO_NUM_CHANNELS]	= {chActive_False};
	static uint8_t 					chCounter[RADIO_NUM_CHANNELS] 	= {0};
	bool 							retVal 							= false;
 8001422:	1dfb      	adds	r3, r7, #7
 8001424:	2200      	movs	r2, #0
 8001426:	701a      	strb	r2, [r3, #0]

	// ONLY PROCEED IF THERE IS A RADIO DETECTED AND CHANNEL NEUTRAL/ZERO POSITION ARRAY SET
	if ( ptrRadioData->chZeroSet && !ptrRadioData->inputLost )
 8001428:	4b35      	ldr	r3, [pc, #212]	; (8001500 <SYSTEM_InitiateCalibration+0xe4>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2244      	movs	r2, #68	; 0x44
 800142e:	5c9b      	ldrb	r3, [r3, r2]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d05e      	beq.n	80014f2 <SYSTEM_InitiateCalibration+0xd6>
 8001434:	4b32      	ldr	r3, [pc, #200]	; (8001500 <SYSTEM_InitiateCalibration+0xe4>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	2201      	movs	r2, #1
 800143c:	4053      	eors	r3, r2
 800143e:	b2db      	uxtb	r3, r3
 8001440:	2b00      	cmp	r3, #0
 8001442:	d056      	beq.n	80014f2 <SYSTEM_InitiateCalibration+0xd6>
	{
		// DETECT METHOD 1: STICK WIGGLE
		// ITTERATE THROUGH EACH AVALIBLE RADIO CHANNEL
		for (uint8_t ch = 0; ch < ptrRadioData->ch_num; ch++)
 8001444:	1dbb      	adds	r3, r7, #6
 8001446:	2200      	movs	r2, #0
 8001448:	701a      	strb	r2, [r3, #0]
 800144a:	e03a      	b.n	80014c2 <SYSTEM_InitiateCalibration+0xa6>
		{
			// IF THE CHANNEL IS NOW INACTIVE BUT WAS PREVIOUSLY ACTIVE
			if ( (ptrRadioData->chActive[ch] == chActive_False) &&
 800144c:	4b2c      	ldr	r3, [pc, #176]	; (8001500 <SYSTEM_InitiateCalibration+0xe4>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	1dbb      	adds	r3, r7, #6
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2188      	movs	r1, #136	; 0x88
 8001456:	18d3      	adds	r3, r2, r3
 8001458:	185b      	adds	r3, r3, r1
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d115      	bne.n	800148c <SYSTEM_InitiateCalibration+0x70>
			   ( (chActive_p[ch] == chActive_True) ||
 8001460:	1dbb      	adds	r3, r7, #6
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	4a27      	ldr	r2, [pc, #156]	; (8001504 <SYSTEM_InitiateCalibration+0xe8>)
 8001466:	5cd3      	ldrb	r3, [r2, r3]
			if ( (ptrRadioData->chActive[ch] == chActive_False) &&
 8001468:	2b01      	cmp	r3, #1
 800146a:	d005      	beq.n	8001478 <SYSTEM_InitiateCalibration+0x5c>
				 (chActive_p[ch] == chActive_TrueRev ) ) )
 800146c:	1dbb      	adds	r3, r7, #6
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	4a24      	ldr	r2, [pc, #144]	; (8001504 <SYSTEM_InitiateCalibration+0xe8>)
 8001472:	5cd3      	ldrb	r3, [r2, r3]
			   ( (chActive_p[ch] == chActive_True) ||
 8001474:	2b02      	cmp	r3, #2
 8001476:	d109      	bne.n	800148c <SYSTEM_InitiateCalibration+0x70>
			{
				// INCREMENT THE COUNTER
				chCounter[ch] += 1;
 8001478:	1dbb      	adds	r3, r7, #6
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	4a22      	ldr	r2, [pc, #136]	; (8001508 <SYSTEM_InitiateCalibration+0xec>)
 800147e:	5cd2      	ldrb	r2, [r2, r3]
 8001480:	1dbb      	adds	r3, r7, #6
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	3201      	adds	r2, #1
 8001486:	b2d1      	uxtb	r1, r2
 8001488:	4a1f      	ldr	r2, [pc, #124]	; (8001508 <SYSTEM_InitiateCalibration+0xec>)
 800148a:	54d1      	strb	r1, [r2, r3]
			}

			// CHECK IF ENOUGH INPUT WIGGLES HAVE BEEN DONE
			if (chCounter[ch] > CALIBRATION_INPUT_WIGGLE)
 800148c:	1dbb      	adds	r3, r7, #6
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	4a1d      	ldr	r2, [pc, #116]	; (8001508 <SYSTEM_InitiateCalibration+0xec>)
 8001492:	5cd3      	ldrb	r3, [r2, r3]
 8001494:	2b14      	cmp	r3, #20
 8001496:	d903      	bls.n	80014a0 <SYSTEM_InitiateCalibration+0x84>
			{
				retVal = true;
 8001498:	1dfb      	adds	r3, r7, #7
 800149a:	2201      	movs	r2, #1
 800149c:	701a      	strb	r2, [r3, #0]
				break;
 800149e:	e017      	b.n	80014d0 <SYSTEM_InitiateCalibration+0xb4>
			}

			// UPDATE VARIABLES FOR NEXT LOOP
			chActive_p[ch] = ptrRadioData->chActive[ch];
 80014a0:	4b17      	ldr	r3, [pc, #92]	; (8001500 <SYSTEM_InitiateCalibration+0xe4>)
 80014a2:	6819      	ldr	r1, [r3, #0]
 80014a4:	1dbb      	adds	r3, r7, #6
 80014a6:	781a      	ldrb	r2, [r3, #0]
 80014a8:	1dbb      	adds	r3, r7, #6
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2088      	movs	r0, #136	; 0x88
 80014ae:	188a      	adds	r2, r1, r2
 80014b0:	1812      	adds	r2, r2, r0
 80014b2:	7811      	ldrb	r1, [r2, #0]
 80014b4:	4a13      	ldr	r2, [pc, #76]	; (8001504 <SYSTEM_InitiateCalibration+0xe8>)
 80014b6:	54d1      	strb	r1, [r2, r3]
		for (uint8_t ch = 0; ch < ptrRadioData->ch_num; ch++)
 80014b8:	1dbb      	adds	r3, r7, #6
 80014ba:	781a      	ldrb	r2, [r3, #0]
 80014bc:	1dbb      	adds	r3, r7, #6
 80014be:	3201      	adds	r2, #1
 80014c0:	701a      	strb	r2, [r3, #0]
 80014c2:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <SYSTEM_InitiateCalibration+0xe4>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	785b      	ldrb	r3, [r3, #1]
 80014c8:	1dba      	adds	r2, r7, #6
 80014ca:	7812      	ldrb	r2, [r2, #0]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d3bd      	bcc.n	800144c <SYSTEM_InitiateCalibration+0x30>
		}

		// DETECT METHOD 2: CALIBRATE PADS SHORTED ON BACK OF DEVICE
		if (!GPIO_Read(CALIBRATE_GPIO, CALIBRATE_PIN))
 80014d0:	2380      	movs	r3, #128	; 0x80
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	4a0d      	ldr	r2, [pc, #52]	; (800150c <SYSTEM_InitiateCalibration+0xf0>)
 80014d6:	0019      	movs	r1, r3
 80014d8:	0010      	movs	r0, r2
 80014da:	f7ff fc5e 	bl	8000d9a <GPIO_Read>
 80014de:	0003      	movs	r3, r0
 80014e0:	001a      	movs	r2, r3
 80014e2:	2301      	movs	r3, #1
 80014e4:	4053      	eors	r3, r2
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d002      	beq.n	80014f2 <SYSTEM_InitiateCalibration+0xd6>
		{
			retVal = true;
 80014ec:	1dfb      	adds	r3, r7, #7
 80014ee:	2201      	movs	r2, #1
 80014f0:	701a      	strb	r2, [r3, #0]
		}
	}

	return retVal;
 80014f2:	1dfb      	adds	r3, r7, #7
 80014f4:	781b      	ldrb	r3, [r3, #0]
}
 80014f6:	0018      	movs	r0, r3
 80014f8:	46bd      	mov	sp, r7
 80014fa:	b002      	add	sp, #8
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	46c0      	nop			; (mov r8, r8)
 8001500:	200002d0 	.word	0x200002d0
 8001504:	200002e0 	.word	0x200002e0
 8001508:	200002f0 	.word	0x200002f0
 800150c:	50000400 	.word	0x50000400

08001510 <SYSTEM_UpdateCalibration>:
 *
 * INPUTS:
 * OUTPUTS:
 */
void SYSTEM_UpdateCalibration (void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b088      	sub	sp, #32
 8001514:	af00      	add	r7, sp, #0
	// DISABLE ALL OUTPUTS
	MOTOR_Update(MOTOR_OFF, MOTOR_OFF);
 8001516:	2100      	movs	r1, #0
 8001518:	2000      	movs	r0, #0
 800151a:	f7ff fa01 	bl	8000920 <MOTOR_Update>
	SERVO_Deinit();
 800151e:	f7ff fb7b 	bl	8000c18 <SERVO_Deinit>

	// TURN ON LEDS TO TELL OPERATOR CALIBRATION IS STARTING
	LED_nPulse(10);
 8001522:	200a      	movs	r0, #10
 8001524:	f7ff f94f 	bl	80007c6 <LED_nPulse>
	LED_GreenON();
 8001528:	f7ff f8dc 	bl	80006e4 <LED_GreenON>
	LED_RedON();
 800152c:	f7ff f8e8 	bl	8000700 <LED_RedON>

	// CREATE LOCAL VARIABLE TO ASSIST IN CALIBRATION
	SYSTEM_Config c;
	c.radio = config.radio;
 8001530:	1d3b      	adds	r3, r7, #4
 8001532:	4a6d      	ldr	r2, [pc, #436]	; (80016e8 <SYSTEM_UpdateCalibration+0x1d8>)
 8001534:	3310      	adds	r3, #16
 8001536:	3210      	adds	r2, #16
 8001538:	ca03      	ldmia	r2!, {r0, r1}
 800153a:	c303      	stmia	r3!, {r0, r1}

	// WAIT FOR USER TO PRESS A STICK TO INITATE CALIBRATION SEQUENCE
	SYSTEM_WaitForActiveInput();
 800153c:	f000 fb24 	bl	8001b88 <SYSTEM_WaitForActiveInput>
	SYSTEM_WaitForResetInputs();
 8001540:	f000 fb31 	bl	8001ba6 <SYSTEM_WaitForResetInputs>
//	CORE_Delay(CALIBRATION_TEST_DELAY);

	// START OF TEST

	LED_GreenOFF();
 8001544:	f7ff f8ea 	bl	800071c <LED_GreenOFF>
	LED_RedOFF();
 8001548:	f7ff f8f6 	bl	8000738 <LED_RedOFF>
	CORE_Delay(CALIBRATION_TEST_DELAY);
 800154c:	23fa      	movs	r3, #250	; 0xfa
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	0018      	movs	r0, r3
 8001552:	f002 fbcd 	bl	8003cf0 <CORE_Delay>
	MOTOR_Update(MOTOR_MAX, MOTOR_MAX);
 8001556:	2380      	movs	r3, #128	; 0x80
 8001558:	005a      	lsls	r2, r3, #1
 800155a:	2380      	movs	r3, #128	; 0x80
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	0011      	movs	r1, r2
 8001560:	0018      	movs	r0, r3
 8001562:	f7ff f9dd 	bl	8000920 <MOTOR_Update>
	CORE_Delay(CALIBRATE_MOTORJERK_PERIOD);
 8001566:	23fa      	movs	r3, #250	; 0xfa
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	0018      	movs	r0, r3
 800156c:	f002 fbc0 	bl	8003cf0 <CORE_Delay>
	MOTOR_Update(MOTOR_OFF, MOTOR_OFF);
 8001570:	2100      	movs	r1, #0
 8001572:	2000      	movs	r0, #0
 8001574:	f7ff f9d4 	bl	8000920 <MOTOR_Update>
	CORE_Delay(CALIBRATE_MOTORJERK_PERIOD);
 8001578:	23fa      	movs	r3, #250	; 0xfa
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	0018      	movs	r0, r3
 800157e:	f002 fbb7 	bl	8003cf0 <CORE_Delay>
	LED_RedON();
 8001582:	f7ff f8bd 	bl	8000700 <LED_RedON>
	SYSTEM_CalibrateMotorSameDirection(&c);
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	0018      	movs	r0, r3
 800158a:	f000 f8b5 	bl	80016f8 <SYSTEM_CalibrateMotorSameDirection>
	LED_GreenON();
 800158e:	f7ff f8a9 	bl	80006e4 <LED_GreenON>
	SYSTEM_WaitForResetInputs();
 8001592:	f000 fb08 	bl	8001ba6 <SYSTEM_WaitForResetInputs>
	LED_nPulse(3);
 8001596:	2003      	movs	r0, #3
 8001598:	f7ff f915 	bl	80007c6 <LED_nPulse>

	LED_RedOFF();
 800159c:	f7ff f8cc 	bl	8000738 <LED_RedOFF>
	LED_GreenOFF();
 80015a0:	f7ff f8bc 	bl	800071c <LED_GreenOFF>
	CORE_Delay(CALIBRATION_TEST_DELAY);
 80015a4:	23fa      	movs	r3, #250	; 0xfa
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	0018      	movs	r0, r3
 80015aa:	f002 fba1 	bl	8003cf0 <CORE_Delay>
	MOTOR_Update(-MOTOR_MAX, MOTOR_MAX);
 80015ae:	2380      	movs	r3, #128	; 0x80
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	4a4e      	ldr	r2, [pc, #312]	; (80016ec <SYSTEM_UpdateCalibration+0x1dc>)
 80015b4:	0019      	movs	r1, r3
 80015b6:	0010      	movs	r0, r2
 80015b8:	f7ff f9b2 	bl	8000920 <MOTOR_Update>
	CORE_Delay(CALIBRATE_MOTORJERK_PERIOD);
 80015bc:	23fa      	movs	r3, #250	; 0xfa
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	0018      	movs	r0, r3
 80015c2:	f002 fb95 	bl	8003cf0 <CORE_Delay>
	MOTOR_Update(MOTOR_OFF, MOTOR_OFF);
 80015c6:	2100      	movs	r1, #0
 80015c8:	2000      	movs	r0, #0
 80015ca:	f7ff f9a9 	bl	8000920 <MOTOR_Update>
	CORE_Delay(CALIBRATE_MOTORJERK_PERIOD);
 80015ce:	23fa      	movs	r3, #250	; 0xfa
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	0018      	movs	r0, r3
 80015d4:	f002 fb8c 	bl	8003cf0 <CORE_Delay>
	LED_RedON();
 80015d8:	f7ff f892 	bl	8000700 <LED_RedON>
	SYSTEM_CalibrateMotorOppositeDirection(&c);
 80015dc:	1d3b      	adds	r3, r7, #4
 80015de:	0018      	movs	r0, r3
 80015e0:	f000 f930 	bl	8001844 <SYSTEM_CalibrateMotorOppositeDirection>
	LED_GreenON();
 80015e4:	f7ff f87e 	bl	80006e4 <LED_GreenON>
	SYSTEM_WaitForResetInputs();
 80015e8:	f000 fadd 	bl	8001ba6 <SYSTEM_WaitForResetInputs>
	LED_nPulse(3);
 80015ec:	2003      	movs	r0, #3
 80015ee:	f7ff f8ea 	bl	80007c6 <LED_nPulse>

	LED_RedOFF();
 80015f2:	f7ff f8a1 	bl	8000738 <LED_RedOFF>
	LED_GreenOFF();
 80015f6:	f7ff f891 	bl	800071c <LED_GreenOFF>
	CORE_Delay(CALIBRATE_MOTORJERK_PERIOD);
 80015fa:	23fa      	movs	r3, #250	; 0xfa
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	0018      	movs	r0, r3
 8001600:	f002 fb76 	bl	8003cf0 <CORE_Delay>
	LED_RedON();
 8001604:	f7ff f87c 	bl	8000700 <LED_RedON>
	SYSTEM_CalibrateServoA(&c);
 8001608:	1d3b      	adds	r3, r7, #4
 800160a:	0018      	movs	r0, r3
 800160c:	f000 fa04 	bl	8001a18 <SYSTEM_CalibrateServoA>
	LED_GreenON();
 8001610:	f7ff f868 	bl	80006e4 <LED_GreenON>
	SYSTEM_WaitForResetInputsServo(&c);
 8001614:	1d3b      	adds	r3, r7, #4
 8001616:	0018      	movs	r0, r3
 8001618:	f000 fad4 	bl	8001bc4 <SYSTEM_WaitForResetInputsServo>
	LED_nPulse(3);
 800161c:	2003      	movs	r0, #3
 800161e:	f7ff f8d2 	bl	80007c6 <LED_nPulse>
	CORE_Delay(CALIBRATION_TEST_DELAY);
 8001622:	23fa      	movs	r3, #250	; 0xfa
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	0018      	movs	r0, r3
 8001628:	f002 fb62 	bl	8003cf0 <CORE_Delay>

	LED_RedOFF();
 800162c:	f7ff f884 	bl	8000738 <LED_RedOFF>
	LED_GreenOFF();
 8001630:	f7ff f874 	bl	800071c <LED_GreenOFF>
	CORE_Delay(CALIBRATE_MOTORJERK_PERIOD);
 8001634:	23fa      	movs	r3, #250	; 0xfa
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	0018      	movs	r0, r3
 800163a:	f002 fb59 	bl	8003cf0 <CORE_Delay>
	LED_RedON();
 800163e:	f7ff f85f 	bl	8000700 <LED_RedON>
	SYSTEM_CalibrateServoB(&c);
 8001642:	1d3b      	adds	r3, r7, #4
 8001644:	0018      	movs	r0, r3
 8001646:	f000 fa43 	bl	8001ad0 <SYSTEM_CalibrateServoB>
	LED_GreenON();
 800164a:	f7ff f84b 	bl	80006e4 <LED_GreenON>
	SYSTEM_WaitForResetInputsServo(&c);
 800164e:	1d3b      	adds	r3, r7, #4
 8001650:	0018      	movs	r0, r3
 8001652:	f000 fab7 	bl	8001bc4 <SYSTEM_WaitForResetInputsServo>

	// WRITE NEW CONFIG TO EEPROM
	config.chDriveA 		= c.chDriveA;
 8001656:	1d3b      	adds	r3, r7, #4
 8001658:	795a      	ldrb	r2, [r3, #5]
 800165a:	4b23      	ldr	r3, [pc, #140]	; (80016e8 <SYSTEM_UpdateCalibration+0x1d8>)
 800165c:	715a      	strb	r2, [r3, #5]
	config.chDriveArev 		= c.chDriveArev;
 800165e:	1d3b      	adds	r3, r7, #4
 8001660:	7a5a      	ldrb	r2, [r3, #9]
 8001662:	4b21      	ldr	r3, [pc, #132]	; (80016e8 <SYSTEM_UpdateCalibration+0x1d8>)
 8001664:	725a      	strb	r2, [r3, #9]
	config.chDriveB 		= c.chDriveB;
 8001666:	1d3b      	adds	r3, r7, #4
 8001668:	799a      	ldrb	r2, [r3, #6]
 800166a:	4b1f      	ldr	r3, [pc, #124]	; (80016e8 <SYSTEM_UpdateCalibration+0x1d8>)
 800166c:	719a      	strb	r2, [r3, #6]
	config.chDriveBrev 		= c.chDriveBrev;
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	7a9a      	ldrb	r2, [r3, #10]
 8001672:	4b1d      	ldr	r3, [pc, #116]	; (80016e8 <SYSTEM_UpdateCalibration+0x1d8>)
 8001674:	729a      	strb	r2, [r3, #10]
	config.chServoA 		= c.chServoA;
 8001676:	1d3b      	adds	r3, r7, #4
 8001678:	79da      	ldrb	r2, [r3, #7]
 800167a:	4b1b      	ldr	r3, [pc, #108]	; (80016e8 <SYSTEM_UpdateCalibration+0x1d8>)
 800167c:	71da      	strb	r2, [r3, #7]
	config.chServoArev 		= c.chServoArev;
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	7ada      	ldrb	r2, [r3, #11]
 8001682:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <SYSTEM_UpdateCalibration+0x1d8>)
 8001684:	72da      	strb	r2, [r3, #11]
	config.chServoB 		= c.chServoB;
 8001686:	1d3b      	adds	r3, r7, #4
 8001688:	7a1a      	ldrb	r2, [r3, #8]
 800168a:	4b17      	ldr	r3, [pc, #92]	; (80016e8 <SYSTEM_UpdateCalibration+0x1d8>)
 800168c:	721a      	strb	r2, [r3, #8]
	config.chServoBrev 		= c.chServoBrev;
 800168e:	1d3b      	adds	r3, r7, #4
 8001690:	7b1a      	ldrb	r2, [r3, #12]
 8001692:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <SYSTEM_UpdateCalibration+0x1d8>)
 8001694:	731a      	strb	r2, [r3, #12]
	config.mode 			= c.mode;
 8001696:	1d3b      	adds	r3, r7, #4
 8001698:	791a      	ldrb	r2, [r3, #4]
 800169a:	4b13      	ldr	r3, [pc, #76]	; (80016e8 <SYSTEM_UpdateCalibration+0x1d8>)
 800169c:	711a      	strb	r2, [r3, #4]
	config.radio.Protocol 	= c.radio.Protocol;
 800169e:	1d3b      	adds	r3, r7, #4
 80016a0:	7d1a      	ldrb	r2, [r3, #20]
 80016a2:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <SYSTEM_UpdateCalibration+0x1d8>)
 80016a4:	751a      	strb	r2, [r3, #20]
	config.radio.Baud_SBUS	= c.radio.Baud_SBUS;
 80016a6:	1d3b      	adds	r3, r7, #4
 80016a8:	691a      	ldr	r2, [r3, #16]
 80016aa:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <SYSTEM_UpdateCalibration+0x1d8>)
 80016ac:	611a      	str	r2, [r3, #16]
	config.hashA 			= CONFIG_HASH_A;
 80016ae:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <SYSTEM_UpdateCalibration+0x1d8>)
 80016b0:	4a0f      	ldr	r2, [pc, #60]	; (80016f0 <SYSTEM_UpdateCalibration+0x1e0>)
 80016b2:	601a      	str	r2, [r3, #0]
	config.hashB 			= CONFIG_HASH_B;
 80016b4:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <SYSTEM_UpdateCalibration+0x1d8>)
 80016b6:	4a0f      	ldr	r2, [pc, #60]	; (80016f4 <SYSTEM_UpdateCalibration+0x1e4>)
 80016b8:	619a      	str	r2, [r3, #24]
	EEPROM_Write(EEPROM_OFFSET, &config, sizeof(config));
 80016ba:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <SYSTEM_UpdateCalibration+0x1d8>)
 80016bc:	221c      	movs	r2, #28
 80016be:	0019      	movs	r1, r3
 80016c0:	2000      	movs	r0, #0
 80016c2:	f002 fbb1 	bl	8003e28 <EEPROM_Write>

	// PULSE LED TO LET USER KNOW SUCCESSFUL
	LED_nPulse (10);
 80016c6:	200a      	movs	r0, #10
 80016c8:	f7ff f87d 	bl	80007c6 <LED_nPulse>
	LED_RedOFF();
 80016cc:	f7ff f834 	bl	8000738 <LED_RedOFF>
	LED_GreenOFF();
 80016d0:	f7ff f824 	bl	800071c <LED_GreenOFF>

	// Reinitialize Outputs
	MOTOR_Update(MOTOR_OFF, MOTOR_OFF);
 80016d4:	2100      	movs	r1, #0
 80016d6:	2000      	movs	r0, #0
 80016d8:	f7ff f922 	bl	8000920 <MOTOR_Update>
	SERVO_Init();
 80016dc:	f7ff fa3c 	bl	8000b58 <SERVO_Init>
}
 80016e0:	46c0      	nop			; (mov r8, r8)
 80016e2:	46bd      	mov	sp, r7
 80016e4:	b008      	add	sp, #32
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	200002b4 	.word	0x200002b4
 80016ec:	ffffff00 	.word	0xffffff00
 80016f0:	8ce74359 	.word	0x8ce74359
 80016f4:	8761d60e 	.word	0x8761d60e

080016f8 <SYSTEM_CalibrateMotorSameDirection>:
 *
 * INPUTS:
 * OUTPUTS:
 */
void SYSTEM_CalibrateMotorSameDirection (SYSTEM_Config* c)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
	// LOOP UNTIL BREAK CONDITION REACHED
	while (1)
	{
		// INIT LOOP VARIABLES
		uint32_t tick = CORE_GetTick();
 8001700:	f7ff fb2e 	bl	8000d60 <CORE_GetTick>
 8001704:	0003      	movs	r3, r0
 8001706:	613b      	str	r3, [r7, #16]

		// UPDATE RADIO DATA AND COUNT ACTIVE INPUTS
		RADIO_Update();
 8001708:	f001 fc32 	bl	8002f70 <RADIO_Update>
		uint32_t chActive = SYSTEM_CountActiveInputs();
 800170c:	f000 fa6e 	bl	8001bec <SYSTEM_CountActiveInputs>
 8001710:	0003      	movs	r3, r0
 8001712:	60fb      	str	r3, [r7, #12]

		// START BREAK SEQUENCE FOR ARCADE INPUT DRIVE STYLE
		if (chActive == 1)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d103      	bne.n	8001722 <SYSTEM_CalibrateMotorSameDirection+0x2a>
		{
			c->mode = ARCADE;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2201      	movs	r2, #1
 800171e:	711a      	strb	r2, [r3, #4]
			break;
 8001720:	e012      	b.n	8001748 <SYSTEM_CalibrateMotorSameDirection+0x50>
		}
		// START BREAK SEQUENCE FOR TANK INPUT DRIVE STYLE
		else if (chActive == 2)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	2b02      	cmp	r3, #2
 8001726:	d107      	bne.n	8001738 <SYSTEM_CalibrateMotorSameDirection+0x40>
		{
			c->mode = TANK;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	711a      	strb	r2, [r3, #4]
			break;
 800172e:	e00b      	b.n	8001748 <SYSTEM_CalibrateMotorSameDirection+0x50>
		}

		// LOOP PACING
		while (CALIBRATE_DRIVEINPUT_PERIOD >= (CORE_GetTick() - tick))
		{
			RADIO_Update();
 8001730:	f001 fc1e 	bl	8002f70 <RADIO_Update>
			CORE_Idle();
 8001734:	f002 fad6 	bl	8003ce4 <CORE_Idle>
		while (CALIBRATE_DRIVEINPUT_PERIOD >= (CORE_GetTick() - tick))
 8001738:	f7ff fb12 	bl	8000d60 <CORE_GetTick>
 800173c:	0002      	movs	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2bc8      	cmp	r3, #200	; 0xc8
 8001744:	d9f4      	bls.n	8001730 <SYSTEM_CalibrateMotorSameDirection+0x38>
	{
 8001746:	e7db      	b.n	8001700 <SYSTEM_CalibrateMotorSameDirection+0x8>
		}
	}

	// ITTERATE THROUGH EACH CHANNEL TO FIND THE PUSHED STICK
	for (uint8_t ch = 0; ch < ptrRadioData->ch_num; ch++)
 8001748:	2317      	movs	r3, #23
 800174a:	18fb      	adds	r3, r7, r3
 800174c:	2200      	movs	r2, #0
 800174e:	701a      	strb	r2, [r3, #0]
 8001750:	e02b      	b.n	80017aa <SYSTEM_CalibrateMotorSameDirection+0xb2>
	{
		// IF STICK IS ACTIVE IN POSITIVE DIRECTION
		if (ptrRadioData->chActive[ch] == chActive_True)
 8001752:	4b3b      	ldr	r3, [pc, #236]	; (8001840 <SYSTEM_CalibrateMotorSameDirection+0x148>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	2017      	movs	r0, #23
 8001758:	183b      	adds	r3, r7, r0
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2188      	movs	r1, #136	; 0x88
 800175e:	18d3      	adds	r3, r2, r3
 8001760:	185b      	adds	r3, r3, r1
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d107      	bne.n	8001778 <SYSTEM_CalibrateMotorSameDirection+0x80>
		{
			c->chDriveA = ch;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	183a      	adds	r2, r7, r0
 800176c:	7812      	ldrb	r2, [r2, #0]
 800176e:	715a      	strb	r2, [r3, #5]
			c->chDriveArev = false;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	725a      	strb	r2, [r3, #9]
			break;
 8001776:	e020      	b.n	80017ba <SYSTEM_CalibrateMotorSameDirection+0xc2>
		}
		// IF STICK IS ACTIVE IN NEGATIVE DIRECTION
		else if (ptrRadioData->chActive[ch] == chActive_TrueRev)
 8001778:	4b31      	ldr	r3, [pc, #196]	; (8001840 <SYSTEM_CalibrateMotorSameDirection+0x148>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	2017      	movs	r0, #23
 800177e:	183b      	adds	r3, r7, r0
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2188      	movs	r1, #136	; 0x88
 8001784:	18d3      	adds	r3, r2, r3
 8001786:	185b      	adds	r3, r3, r1
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b02      	cmp	r3, #2
 800178c:	d107      	bne.n	800179e <SYSTEM_CalibrateMotorSameDirection+0xa6>
		{
			c->chDriveA = ch;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	183a      	adds	r2, r7, r0
 8001792:	7812      	ldrb	r2, [r2, #0]
 8001794:	715a      	strb	r2, [r3, #5]
			c->chDriveArev = true;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2201      	movs	r2, #1
 800179a:	725a      	strb	r2, [r3, #9]
			break;
 800179c:	e00d      	b.n	80017ba <SYSTEM_CalibrateMotorSameDirection+0xc2>
	for (uint8_t ch = 0; ch < ptrRadioData->ch_num; ch++)
 800179e:	2117      	movs	r1, #23
 80017a0:	187b      	adds	r3, r7, r1
 80017a2:	781a      	ldrb	r2, [r3, #0]
 80017a4:	187b      	adds	r3, r7, r1
 80017a6:	3201      	adds	r2, #1
 80017a8:	701a      	strb	r2, [r3, #0]
 80017aa:	4b25      	ldr	r3, [pc, #148]	; (8001840 <SYSTEM_CalibrateMotorSameDirection+0x148>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	785b      	ldrb	r3, [r3, #1]
 80017b0:	2217      	movs	r2, #23
 80017b2:	18ba      	adds	r2, r7, r2
 80017b4:	7812      	ldrb	r2, [r2, #0]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d3cb      	bcc.n	8001752 <SYSTEM_CalibrateMotorSameDirection+0x5a>
		}
	}

	// IF TANK MODE WAS SELECTED
	if (c->mode == TANK)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	791b      	ldrb	r3, [r3, #4]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d13a      	bne.n	8001838 <SYSTEM_CalibrateMotorSameDirection+0x140>
	{
		// CONTINUE ITTERATING THROUGH EACH CHANNEL TO FIND THE SECOND PUSHED STICK
		for (uint8_t ch = c->chDriveA; ch < ptrRadioData->ch_num; ch++)
 80017c2:	2316      	movs	r3, #22
 80017c4:	18fb      	adds	r3, r7, r3
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	7952      	ldrb	r2, [r2, #5]
 80017ca:	701a      	strb	r2, [r3, #0]
 80017cc:	e02b      	b.n	8001826 <SYSTEM_CalibrateMotorSameDirection+0x12e>
		{
			// IF STICK IS ACTIVE IN POSITIVE DIRECTION
			if (ptrRadioData->chActive[ch] == chActive_True)
 80017ce:	4b1c      	ldr	r3, [pc, #112]	; (8001840 <SYSTEM_CalibrateMotorSameDirection+0x148>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	2016      	movs	r0, #22
 80017d4:	183b      	adds	r3, r7, r0
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2188      	movs	r1, #136	; 0x88
 80017da:	18d3      	adds	r3, r2, r3
 80017dc:	185b      	adds	r3, r3, r1
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d107      	bne.n	80017f4 <SYSTEM_CalibrateMotorSameDirection+0xfc>
			{
				c->chDriveB = ch;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	183a      	adds	r2, r7, r0
 80017e8:	7812      	ldrb	r2, [r2, #0]
 80017ea:	719a      	strb	r2, [r3, #6]
				c->chDriveBrev = false;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	729a      	strb	r2, [r3, #10]
				break;
 80017f2:	e021      	b.n	8001838 <SYSTEM_CalibrateMotorSameDirection+0x140>
			}
			// IF STICK IS ACTIVE IN NEGATIVE DIRECTION
			else if (ptrRadioData->chActive[ch] == chActive_TrueRev)
 80017f4:	4b12      	ldr	r3, [pc, #72]	; (8001840 <SYSTEM_CalibrateMotorSameDirection+0x148>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	2016      	movs	r0, #22
 80017fa:	183b      	adds	r3, r7, r0
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2188      	movs	r1, #136	; 0x88
 8001800:	18d3      	adds	r3, r2, r3
 8001802:	185b      	adds	r3, r3, r1
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2b02      	cmp	r3, #2
 8001808:	d107      	bne.n	800181a <SYSTEM_CalibrateMotorSameDirection+0x122>
			{
				c->chDriveB = ch;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	183a      	adds	r2, r7, r0
 800180e:	7812      	ldrb	r2, [r2, #0]
 8001810:	719a      	strb	r2, [r3, #6]
				c->chDriveBrev = true;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2201      	movs	r2, #1
 8001816:	729a      	strb	r2, [r3, #10]
				break;
 8001818:	e00e      	b.n	8001838 <SYSTEM_CalibrateMotorSameDirection+0x140>
		for (uint8_t ch = c->chDriveA; ch < ptrRadioData->ch_num; ch++)
 800181a:	2116      	movs	r1, #22
 800181c:	187b      	adds	r3, r7, r1
 800181e:	781a      	ldrb	r2, [r3, #0]
 8001820:	187b      	adds	r3, r7, r1
 8001822:	3201      	adds	r2, #1
 8001824:	701a      	strb	r2, [r3, #0]
 8001826:	4b06      	ldr	r3, [pc, #24]	; (8001840 <SYSTEM_CalibrateMotorSameDirection+0x148>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	785b      	ldrb	r3, [r3, #1]
 800182c:	2216      	movs	r2, #22
 800182e:	18ba      	adds	r2, r7, r2
 8001830:	7812      	ldrb	r2, [r2, #0]
 8001832:	429a      	cmp	r2, r3
 8001834:	d3cb      	bcc.n	80017ce <SYSTEM_CalibrateMotorSameDirection+0xd6>
			}
		}
	}
}
 8001836:	e7ff      	b.n	8001838 <SYSTEM_CalibrateMotorSameDirection+0x140>
 8001838:	46c0      	nop			; (mov r8, r8)
 800183a:	46bd      	mov	sp, r7
 800183c:	b006      	add	sp, #24
 800183e:	bd80      	pop	{r7, pc}
 8001840:	200002d0 	.word	0x200002d0

08001844 <SYSTEM_CalibrateMotorOppositeDirection>:
 *
 * INPUTS:
 * OUTPUTS:
 */
void SYSTEM_CalibrateMotorOppositeDirection (SYSTEM_Config* c)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08e      	sub	sp, #56	; 0x38
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
	// LOOP UNTIL BREAK CONDITION REACHED
	while (1)
	{
		// INIT LOOP VARIABLES
		uint32_t tick = CORE_GetTick();
 800184c:	f7ff fa88 	bl	8000d60 <CORE_GetTick>
 8001850:	0003      	movs	r3, r0
 8001852:	633b      	str	r3, [r7, #48]	; 0x30

		// UPDATE RADIO DATA AND COUNT ACTIVE INPUTS
		RADIO_Update();
 8001854:	f001 fb8c 	bl	8002f70 <RADIO_Update>
		uint32_t chActive = SYSTEM_CountActiveInputs();
 8001858:	f000 f9c8 	bl	8001bec <SYSTEM_CountActiveInputs>
 800185c:	0003      	movs	r3, r0
 800185e:	62fb      	str	r3, [r7, #44]	; 0x2c

		// DO SOME PRECHECKS BEFORE BREAK SEQUENCE
		bool chRevDriveA = false;
 8001860:	2037      	movs	r0, #55	; 0x37
 8001862:	183b      	adds	r3, r7, r0
 8001864:	2200      	movs	r2, #0
 8001866:	701a      	strb	r2, [r3, #0]
		if (ptrRadioData->chActive[c->chDriveA] == chActive_TrueRev)
 8001868:	4b6a      	ldr	r3, [pc, #424]	; (8001a14 <SYSTEM_CalibrateMotorOppositeDirection+0x1d0>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	7952      	ldrb	r2, [r2, #5]
 8001870:	0011      	movs	r1, r2
 8001872:	2288      	movs	r2, #136	; 0x88
 8001874:	185b      	adds	r3, r3, r1
 8001876:	189b      	adds	r3, r3, r2
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	2b02      	cmp	r3, #2
 800187c:	d102      	bne.n	8001884 <SYSTEM_CalibrateMotorOppositeDirection+0x40>
		{
			chRevDriveA = true;
 800187e:	183b      	adds	r3, r7, r0
 8001880:	2201      	movs	r2, #1
 8001882:	701a      	strb	r2, [r3, #0]
		}
		bool chRevDriveB = false;
 8001884:	232b      	movs	r3, #43	; 0x2b
 8001886:	18fb      	adds	r3, r7, r3
 8001888:	2200      	movs	r2, #0
 800188a:	701a      	strb	r2, [r3, #0]
		if (ptrRadioData->chActive[c->chDriveA] == chActive_TrueRev)
 800188c:	4b61      	ldr	r3, [pc, #388]	; (8001a14 <SYSTEM_CalibrateMotorOppositeDirection+0x1d0>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	7952      	ldrb	r2, [r2, #5]
 8001894:	0011      	movs	r1, r2
 8001896:	2288      	movs	r2, #136	; 0x88
 8001898:	185b      	adds	r3, r3, r1
 800189a:	189b      	adds	r3, r3, r2
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d103      	bne.n	80018aa <SYSTEM_CalibrateMotorOppositeDirection+0x66>
		{
			chRevDriveA = true;
 80018a2:	2337      	movs	r3, #55	; 0x37
 80018a4:	18fb      	adds	r3, r7, r3
 80018a6:	2201      	movs	r2, #1
 80018a8:	701a      	strb	r2, [r3, #0]
		}

		// START BREAK SEQUENCE FOR ARCADE INPUT DRIVE STYLE
		if (c->mode == ARCADE && 											// Arcade mode chosen from previous detection
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	791b      	ldrb	r3, [r3, #4]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d10d      	bne.n	80018ce <SYSTEM_CalibrateMotorOppositeDirection+0x8a>
 80018b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d10a      	bne.n	80018ce <SYSTEM_CalibrateMotorOppositeDirection+0x8a>
			chActive == 1 && 												// Only one channel is active
			ptrRadioData->chActive[c->chDriveA] == chActive_False )			// DriveA channel is not active channel
 80018b8:	4b56      	ldr	r3, [pc, #344]	; (8001a14 <SYSTEM_CalibrateMotorOppositeDirection+0x1d0>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	7952      	ldrb	r2, [r2, #5]
 80018c0:	0011      	movs	r1, r2
 80018c2:	2288      	movs	r2, #136	; 0x88
 80018c4:	185b      	adds	r3, r3, r1
 80018c6:	189b      	adds	r3, r3, r2
 80018c8:	781b      	ldrb	r3, [r3, #0]
			chActive == 1 && 												// Only one channel is active
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d05f      	beq.n	800198e <SYSTEM_CalibrateMotorOppositeDirection+0x14a>
		{
			break;
		}
		// START BREAK SEQUENCE FOR TANK INPUT DRIVE STYLE
		else if (c->mode == TANK && 													// Tank mode chosen from previous detection
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	791b      	ldrb	r3, [r3, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d152      	bne.n	800197c <SYSTEM_CalibrateMotorOppositeDirection+0x138>
 80018d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d14f      	bne.n	800197c <SYSTEM_CalibrateMotorOppositeDirection+0x138>
				 chActive == 2 &&														// Only two active channels
				 ptrRadioData->chActive[c->chDriveA] != chActive_False &&				// DriveA channel was one of the two active channels
 80018dc:	4b4d      	ldr	r3, [pc, #308]	; (8001a14 <SYSTEM_CalibrateMotorOppositeDirection+0x1d0>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	7952      	ldrb	r2, [r2, #5]
 80018e4:	0011      	movs	r1, r2
 80018e6:	2288      	movs	r2, #136	; 0x88
 80018e8:	185b      	adds	r3, r3, r1
 80018ea:	189b      	adds	r3, r3, r2
 80018ec:	781b      	ldrb	r3, [r3, #0]
				 chActive == 2 &&														// Only two active channels
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d044      	beq.n	800197c <SYSTEM_CalibrateMotorOppositeDirection+0x138>
				 ptrRadioData->chActive[c->chDriveB] != chActive_False &&				// DriveB channel was one of the two active channels
 80018f2:	4b48      	ldr	r3, [pc, #288]	; (8001a14 <SYSTEM_CalibrateMotorOppositeDirection+0x1d0>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	7992      	ldrb	r2, [r2, #6]
 80018fa:	0011      	movs	r1, r2
 80018fc:	2288      	movs	r2, #136	; 0x88
 80018fe:	185b      	adds	r3, r3, r1
 8001900:	189b      	adds	r3, r3, r2
 8001902:	781b      	ldrb	r3, [r3, #0]
				 ptrRadioData->chActive[c->chDriveA] != chActive_False &&				// DriveA channel was one of the two active channels
 8001904:	2b00      	cmp	r3, #0
 8001906:	d039      	beq.n	800197c <SYSTEM_CalibrateMotorOppositeDirection+0x138>
				 ((chRevDriveA == c->chDriveArev) != (chRevDriveB == c->chDriveBrev)) ) // Check only one of the changed directions
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	7a5b      	ldrb	r3, [r3, #9]
 800190c:	2237      	movs	r2, #55	; 0x37
 800190e:	18ba      	adds	r2, r7, r2
 8001910:	7812      	ldrb	r2, [r2, #0]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	425a      	negs	r2, r3
 8001916:	4153      	adcs	r3, r2
 8001918:	b2da      	uxtb	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	7a9b      	ldrb	r3, [r3, #10]
 800191e:	202b      	movs	r0, #43	; 0x2b
 8001920:	1839      	adds	r1, r7, r0
 8001922:	7809      	ldrb	r1, [r1, #0]
 8001924:	1acb      	subs	r3, r1, r3
 8001926:	4259      	negs	r1, r3
 8001928:	414b      	adcs	r3, r1
 800192a:	b2db      	uxtb	r3, r3
 800192c:	4053      	eors	r3, r2
 800192e:	b2db      	uxtb	r3, r3
				 ptrRadioData->chActive[c->chDriveB] != chActive_False &&				// DriveB channel was one of the two active channels
 8001930:	2b00      	cmp	r3, #0
 8001932:	d023      	beq.n	800197c <SYSTEM_CalibrateMotorOppositeDirection+0x138>
		{
			// IF DRIVEB HAS BEEN REVERSED THEN CHANNELS A AND B NEED TO BE SWAPPED
			if (chRevDriveB != c->chDriveBrev) {
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	7a9b      	ldrb	r3, [r3, #10]
 8001938:	183a      	adds	r2, r7, r0
 800193a:	7812      	ldrb	r2, [r2, #0]
 800193c:	429a      	cmp	r2, r3
 800193e:	d025      	beq.n	800198c <SYSTEM_CalibrateMotorOppositeDirection+0x148>
				SYSTEM_Config cInt;
				cInt.chDriveA 		= c->chDriveA;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	795a      	ldrb	r2, [r3, #5]
 8001944:	210c      	movs	r1, #12
 8001946:	187b      	adds	r3, r7, r1
 8001948:	715a      	strb	r2, [r3, #5]
				cInt.chDriveArev 	= c->chDriveArev;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	7a5a      	ldrb	r2, [r3, #9]
 800194e:	187b      	adds	r3, r7, r1
 8001950:	725a      	strb	r2, [r3, #9]
				c->chDriveA 		= c->chDriveB;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	799a      	ldrb	r2, [r3, #6]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	715a      	strb	r2, [r3, #5]
				c->chDriveArev 		= c->chDriveBrev;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	7a9a      	ldrb	r2, [r3, #10]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	725a      	strb	r2, [r3, #9]
				c->chDriveB 		= cInt.chDriveA;
 8001962:	187b      	adds	r3, r7, r1
 8001964:	795a      	ldrb	r2, [r3, #5]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	719a      	strb	r2, [r3, #6]
				c->chDriveBrev 		= cInt.chDriveArev;
 800196a:	187b      	adds	r3, r7, r1
 800196c:	7a5a      	ldrb	r2, [r3, #9]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	729a      	strb	r2, [r3, #10]
			}
			break;
 8001972:	e00b      	b.n	800198c <SYSTEM_CalibrateMotorOppositeDirection+0x148>
		}

		// LOOP PACING
		while (CALIBRATE_DRIVEINPUT_PERIOD >= (CORE_GetTick() - tick))
		{
			RADIO_Update();
 8001974:	f001 fafc 	bl	8002f70 <RADIO_Update>
			CORE_Idle();
 8001978:	f002 f9b4 	bl	8003ce4 <CORE_Idle>
		while (CALIBRATE_DRIVEINPUT_PERIOD >= (CORE_GetTick() - tick))
 800197c:	f7ff f9f0 	bl	8000d60 <CORE_GetTick>
 8001980:	0002      	movs	r2, r0
 8001982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2bc8      	cmp	r3, #200	; 0xc8
 8001988:	d9f4      	bls.n	8001974 <SYSTEM_CalibrateMotorOppositeDirection+0x130>
	{
 800198a:	e75f      	b.n	800184c <SYSTEM_CalibrateMotorOppositeDirection+0x8>
			break;
 800198c:	46c0      	nop			; (mov r8, r8)
		}
	}

	// EXTRACT REMAINING ARCADE DRIVE DATA
	if (c->mode == ARCADE)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	791b      	ldrb	r3, [r3, #4]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d139      	bne.n	8001a0a <SYSTEM_CalibrateMotorOppositeDirection+0x1c6>
	{
		// ITTERATE THROUGH EVERY INPUT
		for (uint8_t ch = 0; ch < ptrRadioData->ch_num; ch++)
 8001996:	2336      	movs	r3, #54	; 0x36
 8001998:	18fb      	adds	r3, r7, r3
 800199a:	2200      	movs	r2, #0
 800199c:	701a      	strb	r2, [r3, #0]
 800199e:	e02b      	b.n	80019f8 <SYSTEM_CalibrateMotorOppositeDirection+0x1b4>
		{
			// IF STICK IS ACTIVE IN POSITIVE DIRECTION
			if (ptrRadioData->chActive[ch] == chActive_True)
 80019a0:	4b1c      	ldr	r3, [pc, #112]	; (8001a14 <SYSTEM_CalibrateMotorOppositeDirection+0x1d0>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	2036      	movs	r0, #54	; 0x36
 80019a6:	183b      	adds	r3, r7, r0
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2188      	movs	r1, #136	; 0x88
 80019ac:	18d3      	adds	r3, r2, r3
 80019ae:	185b      	adds	r3, r3, r1
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d107      	bne.n	80019c6 <SYSTEM_CalibrateMotorOppositeDirection+0x182>
			{
				c->chDriveB = ch;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	183a      	adds	r2, r7, r0
 80019ba:	7812      	ldrb	r2, [r2, #0]
 80019bc:	719a      	strb	r2, [r3, #6]
				c->chDriveBrev = true;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2201      	movs	r2, #1
 80019c2:	729a      	strb	r2, [r3, #10]
				break;
 80019c4:	e021      	b.n	8001a0a <SYSTEM_CalibrateMotorOppositeDirection+0x1c6>
			}
			// IF STICK IS ACTIVE IN NEGATIVE DIRECTION
			else if (ptrRadioData->chActive[ch] == chActive_TrueRev)
 80019c6:	4b13      	ldr	r3, [pc, #76]	; (8001a14 <SYSTEM_CalibrateMotorOppositeDirection+0x1d0>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	2036      	movs	r0, #54	; 0x36
 80019cc:	183b      	adds	r3, r7, r0
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2188      	movs	r1, #136	; 0x88
 80019d2:	18d3      	adds	r3, r2, r3
 80019d4:	185b      	adds	r3, r3, r1
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d107      	bne.n	80019ec <SYSTEM_CalibrateMotorOppositeDirection+0x1a8>
			{
				c->chDriveB = ch;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	183a      	adds	r2, r7, r0
 80019e0:	7812      	ldrb	r2, [r2, #0]
 80019e2:	719a      	strb	r2, [r3, #6]
				c->chDriveBrev = false;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	729a      	strb	r2, [r3, #10]
				break;
 80019ea:	e00e      	b.n	8001a0a <SYSTEM_CalibrateMotorOppositeDirection+0x1c6>
		for (uint8_t ch = 0; ch < ptrRadioData->ch_num; ch++)
 80019ec:	2136      	movs	r1, #54	; 0x36
 80019ee:	187b      	adds	r3, r7, r1
 80019f0:	781a      	ldrb	r2, [r3, #0]
 80019f2:	187b      	adds	r3, r7, r1
 80019f4:	3201      	adds	r2, #1
 80019f6:	701a      	strb	r2, [r3, #0]
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <SYSTEM_CalibrateMotorOppositeDirection+0x1d0>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	785b      	ldrb	r3, [r3, #1]
 80019fe:	2236      	movs	r2, #54	; 0x36
 8001a00:	18ba      	adds	r2, r7, r2
 8001a02:	7812      	ldrb	r2, [r2, #0]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d3cb      	bcc.n	80019a0 <SYSTEM_CalibrateMotorOppositeDirection+0x15c>
			}
		}
	}
}
 8001a08:	e7ff      	b.n	8001a0a <SYSTEM_CalibrateMotorOppositeDirection+0x1c6>
 8001a0a:	46c0      	nop			; (mov r8, r8)
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	b00e      	add	sp, #56	; 0x38
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	46c0      	nop			; (mov r8, r8)
 8001a14:	200002d0 	.word	0x200002d0

08001a18 <SYSTEM_CalibrateServoA>:
 *
 * INPUTS:
 * OUTPUTS:
 */
void SYSTEM_CalibrateServoA (SYSTEM_Config* c)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
	// LOOP UNTIL BREAK CONDITION REACHED
	while (1)
	{
		// UPDATE RADIO INPUTS
		RADIO_Update();
 8001a20:	f001 faa6 	bl	8002f70 <RADIO_Update>
		// START BREAK SEQUENCE WHEN ANY STICK IS PUSHED (EXCL DRIVE INPUTS)
		if ( SYSTEM_CountActiveInputsServo(c) == 1)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	0018      	movs	r0, r3
 8001a28:	f000 f914 	bl	8001c54 <SYSTEM_CountActiveInputsServo>
 8001a2c:	0003      	movs	r3, r0
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d002      	beq.n	8001a38 <SYSTEM_CalibrateServoA+0x20>
		{
			break;
		}
		// LOOP PACING
		CORE_Idle();
 8001a32:	f002 f957 	bl	8003ce4 <CORE_Idle>
		RADIO_Update();
 8001a36:	e7f3      	b.n	8001a20 <SYSTEM_CalibrateServoA+0x8>
			break;
 8001a38:	46c0      	nop			; (mov r8, r8)
	}

	// ITTERATE THROUGH EACH CHANNEL TO FIND PUSHED STICK
	for (uint8_t ch = 0; ch < ptrRadioData->ch_num; ch++)
 8001a3a:	230f      	movs	r3, #15
 8001a3c:	18fb      	adds	r3, r7, r3
 8001a3e:	2200      	movs	r2, #0
 8001a40:	701a      	strb	r2, [r3, #0]
 8001a42:	e036      	b.n	8001ab2 <SYSTEM_CalibrateServoA+0x9a>
	{
		// IGNROE DRIVE INPUTS
		if (ch != c->chDriveA && ch != c->chDriveB)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	795b      	ldrb	r3, [r3, #5]
 8001a48:	200f      	movs	r0, #15
 8001a4a:	183a      	adds	r2, r7, r0
 8001a4c:	7812      	ldrb	r2, [r2, #0]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d029      	beq.n	8001aa6 <SYSTEM_CalibrateServoA+0x8e>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	799b      	ldrb	r3, [r3, #6]
 8001a56:	183a      	adds	r2, r7, r0
 8001a58:	7812      	ldrb	r2, [r2, #0]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d023      	beq.n	8001aa6 <SYSTEM_CalibrateServoA+0x8e>
		{
			// IF STICK IS ACTIVE IN POSITIVE DIRECTION
			if (ptrRadioData->chActive[ch] == chActive_True)
 8001a5e:	4b1b      	ldr	r3, [pc, #108]	; (8001acc <SYSTEM_CalibrateServoA+0xb4>)
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	183b      	adds	r3, r7, r0
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2188      	movs	r1, #136	; 0x88
 8001a68:	18d3      	adds	r3, r2, r3
 8001a6a:	185b      	adds	r3, r3, r1
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d107      	bne.n	8001a82 <SYSTEM_CalibrateServoA+0x6a>
			{
				c->chServoA = ch;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	183a      	adds	r2, r7, r0
 8001a76:	7812      	ldrb	r2, [r2, #0]
 8001a78:	71da      	strb	r2, [r3, #7]
				c->chServoArev = false;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	72da      	strb	r2, [r3, #11]
 8001a80:	e011      	b.n	8001aa6 <SYSTEM_CalibrateServoA+0x8e>
			}
			// IF STICK IS ACTIVE IN NEGATIVE DIRECTION
			else if (ptrRadioData->chActive[ch] == chActive_TrueRev)
 8001a82:	4b12      	ldr	r3, [pc, #72]	; (8001acc <SYSTEM_CalibrateServoA+0xb4>)
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	200f      	movs	r0, #15
 8001a88:	183b      	adds	r3, r7, r0
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2188      	movs	r1, #136	; 0x88
 8001a8e:	18d3      	adds	r3, r2, r3
 8001a90:	185b      	adds	r3, r3, r1
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d106      	bne.n	8001aa6 <SYSTEM_CalibrateServoA+0x8e>
			{
				c->chServoA = ch;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	183a      	adds	r2, r7, r0
 8001a9c:	7812      	ldrb	r2, [r2, #0]
 8001a9e:	71da      	strb	r2, [r3, #7]
				c->chServoArev = true;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	72da      	strb	r2, [r3, #11]
	for (uint8_t ch = 0; ch < ptrRadioData->ch_num; ch++)
 8001aa6:	210f      	movs	r1, #15
 8001aa8:	187b      	adds	r3, r7, r1
 8001aaa:	781a      	ldrb	r2, [r3, #0]
 8001aac:	187b      	adds	r3, r7, r1
 8001aae:	3201      	adds	r2, #1
 8001ab0:	701a      	strb	r2, [r3, #0]
 8001ab2:	4b06      	ldr	r3, [pc, #24]	; (8001acc <SYSTEM_CalibrateServoA+0xb4>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	785b      	ldrb	r3, [r3, #1]
 8001ab8:	220f      	movs	r2, #15
 8001aba:	18ba      	adds	r2, r7, r2
 8001abc:	7812      	ldrb	r2, [r2, #0]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d3c0      	bcc.n	8001a44 <SYSTEM_CalibrateServoA+0x2c>
			}
		}
	}
}
 8001ac2:	46c0      	nop			; (mov r8, r8)
 8001ac4:	46c0      	nop			; (mov r8, r8)
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	b004      	add	sp, #16
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	200002d0 	.word	0x200002d0

08001ad0 <SYSTEM_CalibrateServoB>:
 *
 * INPUTS:
 * OUTPUTS:
 */
void SYSTEM_CalibrateServoB (SYSTEM_Config* c)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
	// LOOP UNTIL BREAK CONDITION REACHED
	while (1)
	{
		// UPDATE RADIO INPUTS
		RADIO_Update();
 8001ad8:	f001 fa4a 	bl	8002f70 <RADIO_Update>
		// START BREAK SEQUENCE WHEN ANY STICK IS PUSHED (EXCL DRIVE INPUTS)
		if ( SYSTEM_CountActiveInputsServo(c) == 1)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	0018      	movs	r0, r3
 8001ae0:	f000 f8b8 	bl	8001c54 <SYSTEM_CountActiveInputsServo>
 8001ae4:	0003      	movs	r3, r0
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d002      	beq.n	8001af0 <SYSTEM_CalibrateServoB+0x20>
		{
			break;
		}
		// LOOP PACING
		CORE_Idle();
 8001aea:	f002 f8fb 	bl	8003ce4 <CORE_Idle>
		RADIO_Update();
 8001aee:	e7f3      	b.n	8001ad8 <SYSTEM_CalibrateServoB+0x8>
			break;
 8001af0:	46c0      	nop			; (mov r8, r8)
	}

	// ITTERATE THROUGH EACH CHANNEL TO FIND PUSHED STICK
	for (uint8_t ch = 0; ch < ptrRadioData->ch_num; ch++)
 8001af2:	230f      	movs	r3, #15
 8001af4:	18fb      	adds	r3, r7, r3
 8001af6:	2200      	movs	r2, #0
 8001af8:	701a      	strb	r2, [r3, #0]
 8001afa:	e036      	b.n	8001b6a <SYSTEM_CalibrateServoB+0x9a>
	{
		// IGNROE DRIVE INPUTS
		if (ch != c->chDriveA && ch != c->chDriveB)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	795b      	ldrb	r3, [r3, #5]
 8001b00:	200f      	movs	r0, #15
 8001b02:	183a      	adds	r2, r7, r0
 8001b04:	7812      	ldrb	r2, [r2, #0]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d029      	beq.n	8001b5e <SYSTEM_CalibrateServoB+0x8e>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	799b      	ldrb	r3, [r3, #6]
 8001b0e:	183a      	adds	r2, r7, r0
 8001b10:	7812      	ldrb	r2, [r2, #0]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d023      	beq.n	8001b5e <SYSTEM_CalibrateServoB+0x8e>
		{
			// IF STICK IS ACTIVE IN POSITIVE DIRECTION
			if (ptrRadioData->chActive[ch] == chActive_True)
 8001b16:	4b1b      	ldr	r3, [pc, #108]	; (8001b84 <SYSTEM_CalibrateServoB+0xb4>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	183b      	adds	r3, r7, r0
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	2188      	movs	r1, #136	; 0x88
 8001b20:	18d3      	adds	r3, r2, r3
 8001b22:	185b      	adds	r3, r3, r1
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d107      	bne.n	8001b3a <SYSTEM_CalibrateServoB+0x6a>
			{
				c->chServoB = ch;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	183a      	adds	r2, r7, r0
 8001b2e:	7812      	ldrb	r2, [r2, #0]
 8001b30:	721a      	strb	r2, [r3, #8]
				c->chServoBrev = false;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	731a      	strb	r2, [r3, #12]
 8001b38:	e011      	b.n	8001b5e <SYSTEM_CalibrateServoB+0x8e>
			}
			// IF STICK IS ACTIVE IN NEGATIVE DIRECTION
			else if (ptrRadioData->chActive[ch] == chActive_TrueRev)
 8001b3a:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <SYSTEM_CalibrateServoB+0xb4>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	200f      	movs	r0, #15
 8001b40:	183b      	adds	r3, r7, r0
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	2188      	movs	r1, #136	; 0x88
 8001b46:	18d3      	adds	r3, r2, r3
 8001b48:	185b      	adds	r3, r3, r1
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d106      	bne.n	8001b5e <SYSTEM_CalibrateServoB+0x8e>
			{
				c->chServoB = ch;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	183a      	adds	r2, r7, r0
 8001b54:	7812      	ldrb	r2, [r2, #0]
 8001b56:	721a      	strb	r2, [r3, #8]
				c->chServoBrev = true;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	731a      	strb	r2, [r3, #12]
	for (uint8_t ch = 0; ch < ptrRadioData->ch_num; ch++)
 8001b5e:	210f      	movs	r1, #15
 8001b60:	187b      	adds	r3, r7, r1
 8001b62:	781a      	ldrb	r2, [r3, #0]
 8001b64:	187b      	adds	r3, r7, r1
 8001b66:	3201      	adds	r2, #1
 8001b68:	701a      	strb	r2, [r3, #0]
 8001b6a:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <SYSTEM_CalibrateServoB+0xb4>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	785b      	ldrb	r3, [r3, #1]
 8001b70:	220f      	movs	r2, #15
 8001b72:	18ba      	adds	r2, r7, r2
 8001b74:	7812      	ldrb	r2, [r2, #0]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d3c0      	bcc.n	8001afc <SYSTEM_CalibrateServoB+0x2c>
			}
		}
	}
}
 8001b7a:	46c0      	nop			; (mov r8, r8)
 8001b7c:	46c0      	nop			; (mov r8, r8)
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	b004      	add	sp, #16
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	200002d0 	.word	0x200002d0

08001b88 <SYSTEM_WaitForActiveInput>:
 *
 * INPUTS: 	N/A
 * OUTPUTS: N/A
 */
void SYSTEM_WaitForActiveInput (void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
	// LOOP UNTIL BREAK CONDITION REACHED
	while (1)
	{
		// UPDATE RADIO DATA
		RADIO_Update();
 8001b8c:	f001 f9f0 	bl	8002f70 <RADIO_Update>

		// BREAK IF ANY STICKS ARE PUSHED
		if (SYSTEM_CountActiveInputs() > 0) {
 8001b90:	f000 f82c 	bl	8001bec <SYSTEM_CountActiveInputs>
 8001b94:	1e03      	subs	r3, r0, #0
 8001b96:	d102      	bne.n	8001b9e <SYSTEM_WaitForActiveInput+0x16>
			break;
		}

		// LOOP PACING
		CORE_Idle();
 8001b98:	f002 f8a4 	bl	8003ce4 <CORE_Idle>
		RADIO_Update();
 8001b9c:	e7f6      	b.n	8001b8c <SYSTEM_WaitForActiveInput+0x4>
			break;
 8001b9e:	46c0      	nop			; (mov r8, r8)
	}
}
 8001ba0:	46c0      	nop			; (mov r8, r8)
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <SYSTEM_WaitForResetInputs>:
 *
 * INPUTS: 	N/A
 * OUTPUTS: N/A
 */
void SYSTEM_WaitForResetInputs (void)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	af00      	add	r7, sp, #0
	// LOOP UNTIL BREAK CONDITION REACHED
	while (1)
	{
		// UPDATE RADIO DATA
		RADIO_Update();
 8001baa:	f001 f9e1 	bl	8002f70 <RADIO_Update>

		// BREAK WHEN ALL STICKS HAVE RETURNED BACK TO ZERO POSITION
		if ( SYSTEM_CountActiveInputs() == 0) {
 8001bae:	f000 f81d 	bl	8001bec <SYSTEM_CountActiveInputs>
 8001bb2:	1e03      	subs	r3, r0, #0
 8001bb4:	d002      	beq.n	8001bbc <SYSTEM_WaitForResetInputs+0x16>
			break;
		}

		// LOOP PACING
		CORE_Idle();
 8001bb6:	f002 f895 	bl	8003ce4 <CORE_Idle>
		RADIO_Update();
 8001bba:	e7f6      	b.n	8001baa <SYSTEM_WaitForResetInputs+0x4>
			break;
 8001bbc:	46c0      	nop			; (mov r8, r8)
	}
}
 8001bbe:	46c0      	nop			; (mov r8, r8)
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <SYSTEM_WaitForResetInputsServo>:
 *
 * INPUTS: 	POINTER TO SYSTEM_Config STRUCT CONTAINING DRIVE INPUTS TO IGNORE
 * OUTPUTS: N/A
 */
void SYSTEM_WaitForResetInputsServo (SYSTEM_Config* c)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
	// LOOP UNTIL BREAK CONDITION REACHED
	while (1)
	{
		// UPDATE RADIO DATA
		RADIO_Update();
 8001bcc:	f001 f9d0 	bl	8002f70 <RADIO_Update>

		// BREAK WHEN ALL STICKS HAVE RETURNED BACK TO ZERO POSITION (EXCL DRIVE INPUTS)
		if ( SYSTEM_CountActiveInputsServo(c) == 0) {
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	0018      	movs	r0, r3
 8001bd4:	f000 f83e 	bl	8001c54 <SYSTEM_CountActiveInputsServo>
 8001bd8:	1e03      	subs	r3, r0, #0
 8001bda:	d002      	beq.n	8001be2 <SYSTEM_WaitForResetInputsServo+0x1e>
			break;
		}

		// LOOP PACING
		CORE_Idle();
 8001bdc:	f002 f882 	bl	8003ce4 <CORE_Idle>
		RADIO_Update();
 8001be0:	e7f4      	b.n	8001bcc <SYSTEM_WaitForResetInputsServo+0x8>
			break;
 8001be2:	46c0      	nop			; (mov r8, r8)
	}
}
 8001be4:	46c0      	nop			; (mov r8, r8)
 8001be6:	46bd      	mov	sp, r7
 8001be8:	b002      	add	sp, #8
 8001bea:	bd80      	pop	{r7, pc}

08001bec <SYSTEM_CountActiveInputs>:
 *
 * INPUTS: 	N/A
 * OUTPUTS: NUMBER OF ACTIVE RADIO CHANNELS
 */
uint32_t SYSTEM_CountActiveInputs (void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
	// INIT FUNCTION VARIABLES
	uint32_t retVal = 0;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	607b      	str	r3, [r7, #4]

	// ITTERATE THROUGH EACH RADIO INPUT
	for (uint8_t ch = 0; ch < ptrRadioData->ch_num; ch++)
 8001bf6:	1cfb      	adds	r3, r7, #3
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	701a      	strb	r2, [r3, #0]
 8001bfc:	e01b      	b.n	8001c36 <SYSTEM_CountActiveInputs+0x4a>
	{
		if ( (ptrRadioData->chActive[ch] == chActive_True) ||
 8001bfe:	4b14      	ldr	r3, [pc, #80]	; (8001c50 <SYSTEM_CountActiveInputs+0x64>)
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	1cfb      	adds	r3, r7, #3
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	2188      	movs	r1, #136	; 0x88
 8001c08:	18d3      	adds	r3, r2, r3
 8001c0a:	185b      	adds	r3, r3, r1
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d009      	beq.n	8001c26 <SYSTEM_CountActiveInputs+0x3a>
			 (ptrRadioData->chActive[ch] == chActive_TrueRev) )
 8001c12:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <SYSTEM_CountActiveInputs+0x64>)
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	1cfb      	adds	r3, r7, #3
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	2188      	movs	r1, #136	; 0x88
 8001c1c:	18d3      	adds	r3, r2, r3
 8001c1e:	185b      	adds	r3, r3, r1
 8001c20:	781b      	ldrb	r3, [r3, #0]
		if ( (ptrRadioData->chActive[ch] == chActive_True) ||
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d102      	bne.n	8001c2c <SYSTEM_CountActiveInputs+0x40>
		{
			retVal += 1;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	607b      	str	r3, [r7, #4]
	for (uint8_t ch = 0; ch < ptrRadioData->ch_num; ch++)
 8001c2c:	1cfb      	adds	r3, r7, #3
 8001c2e:	781a      	ldrb	r2, [r3, #0]
 8001c30:	1cfb      	adds	r3, r7, #3
 8001c32:	3201      	adds	r2, #1
 8001c34:	701a      	strb	r2, [r3, #0]
 8001c36:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <SYSTEM_CountActiveInputs+0x64>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	785b      	ldrb	r3, [r3, #1]
 8001c3c:	1cfa      	adds	r2, r7, #3
 8001c3e:	7812      	ldrb	r2, [r2, #0]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d3dc      	bcc.n	8001bfe <SYSTEM_CountActiveInputs+0x12>
		}
	}

	// RETURN NUMBER OF ACTIVE INPUTS
	return retVal;
 8001c44:	687b      	ldr	r3, [r7, #4]
}
 8001c46:	0018      	movs	r0, r3
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	b002      	add	sp, #8
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	46c0      	nop			; (mov r8, r8)
 8001c50:	200002d0 	.word	0x200002d0

08001c54 <SYSTEM_CountActiveInputsServo>:
 *
 * INPUTS: 	POINTER TO SYSTEM_Config STRUCT CONTAINING DRIVE INPUTS TO IGNORE
 * OUTPUTS: NUMBER OF ACTIVE RADIO CHANNELS (EXCL DRIVE INPUTS)
 */
uint32_t SYSTEM_CountActiveInputsServo (SYSTEM_Config* c)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
	// INIT FUNCTION VARIABLES
	uint32_t retVal = 0;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60fb      	str	r3, [r7, #12]

	// ITTERATE THROUGH EACH RADIO INPUT
	for (uint8_t ch = 0; ch < ptrRadioData->ch_num; ch++)
 8001c60:	230b      	movs	r3, #11
 8001c62:	18fb      	adds	r3, r7, r3
 8001c64:	2200      	movs	r2, #0
 8001c66:	701a      	strb	r2, [r3, #0]
 8001c68:	e02a      	b.n	8001cc0 <SYSTEM_CountActiveInputsServo+0x6c>
	{
		if ( ( (ptrRadioData->chActive[ch] == chActive_True) ||
 8001c6a:	4b1c      	ldr	r3, [pc, #112]	; (8001cdc <SYSTEM_CountActiveInputsServo+0x88>)
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	200b      	movs	r0, #11
 8001c70:	183b      	adds	r3, r7, r0
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2188      	movs	r1, #136	; 0x88
 8001c76:	18d3      	adds	r3, r2, r3
 8001c78:	185b      	adds	r3, r3, r1
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d009      	beq.n	8001c94 <SYSTEM_CountActiveInputsServo+0x40>
			   (ptrRadioData->chActive[ch] == chActive_TrueRev) ) &&
 8001c80:	4b16      	ldr	r3, [pc, #88]	; (8001cdc <SYSTEM_CountActiveInputsServo+0x88>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	183b      	adds	r3, r7, r0
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2188      	movs	r1, #136	; 0x88
 8001c8a:	18d3      	adds	r3, r2, r3
 8001c8c:	185b      	adds	r3, r3, r1
 8001c8e:	781b      	ldrb	r3, [r3, #0]
		if ( ( (ptrRadioData->chActive[ch] == chActive_True) ||
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d10f      	bne.n	8001cb4 <SYSTEM_CountActiveInputsServo+0x60>
			 (ch != c->chDriveA && ch != c->chDriveB) )
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	795b      	ldrb	r3, [r3, #5]
			   (ptrRadioData->chActive[ch] == chActive_TrueRev) ) &&
 8001c98:	210b      	movs	r1, #11
 8001c9a:	187a      	adds	r2, r7, r1
 8001c9c:	7812      	ldrb	r2, [r2, #0]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d008      	beq.n	8001cb4 <SYSTEM_CountActiveInputsServo+0x60>
			 (ch != c->chDriveA && ch != c->chDriveB) )
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	799b      	ldrb	r3, [r3, #6]
 8001ca6:	187a      	adds	r2, r7, r1
 8001ca8:	7812      	ldrb	r2, [r2, #0]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d002      	beq.n	8001cb4 <SYSTEM_CountActiveInputsServo+0x60>
		{
			retVal += 1;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	60fb      	str	r3, [r7, #12]
	for (uint8_t ch = 0; ch < ptrRadioData->ch_num; ch++)
 8001cb4:	210b      	movs	r1, #11
 8001cb6:	187b      	adds	r3, r7, r1
 8001cb8:	781a      	ldrb	r2, [r3, #0]
 8001cba:	187b      	adds	r3, r7, r1
 8001cbc:	3201      	adds	r2, #1
 8001cbe:	701a      	strb	r2, [r3, #0]
 8001cc0:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <SYSTEM_CountActiveInputsServo+0x88>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	785b      	ldrb	r3, [r3, #1]
 8001cc6:	220b      	movs	r2, #11
 8001cc8:	18ba      	adds	r2, r7, r2
 8001cca:	7812      	ldrb	r2, [r2, #0]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d3cc      	bcc.n	8001c6a <SYSTEM_CountActiveInputsServo+0x16>
		}
	}

	// RETURN NUMBER OF ACTIVE INPUTS
	return retVal;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
}
 8001cd2:	0018      	movs	r0, r3
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	b004      	add	sp, #16
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	46c0      	nop			; (mov r8, r8)
 8001cdc:	200002d0 	.word	0x200002d0

08001ce0 <main>:
/*
 * PUBLIC FUNCTIONS
 */

int main (void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
 	CORE_Init();
 8001ce4:	f001 ffce 	bl	8003c84 <CORE_Init>
	SYSTEM_Init();
 8001ce8:	f7ff f868 	bl	8000dbc <SYSTEM_Init>
	MOTOR_Init();
 8001cec:	f7fe fdc6 	bl	800087c <MOTOR_Init>

	CORE_Idle();
 8001cf0:	f001 fff8 	bl	8003ce4 <CORE_Idle>

	while (1)
	{
		SYSTEM_Update();
 8001cf4:	f7ff f8a2 	bl	8000e3c <SYSTEM_Update>

		CORE_Idle();
 8001cf8:	f001 fff4 	bl	8003ce4 <CORE_Idle>
		SYSTEM_Update();
 8001cfc:	e7fa      	b.n	8001cf4 <main+0x14>

08001cfe <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d02:	46c0      	nop			; (mov r8, r8)
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
k   ldr   r0, =_estack
 8001d08:	480d      	ldr	r0, [pc, #52]	; (8001d40 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001d0a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d0c:	480d      	ldr	r0, [pc, #52]	; (8001d44 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d0e:	490e      	ldr	r1, [pc, #56]	; (8001d48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d10:	4a0e      	ldr	r2, [pc, #56]	; (8001d4c <LoopForever+0xe>)
  movs r3, #0
 8001d12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d14:	e002      	b.n	8001d1c <LoopCopyDataInit>

08001d16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d1a:	3304      	adds	r3, #4

08001d1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d20:	d3f9      	bcc.n	8001d16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d22:	4a0b      	ldr	r2, [pc, #44]	; (8001d50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d24:	4c0b      	ldr	r4, [pc, #44]	; (8001d54 <LoopForever+0x16>)
  movs r3, #0
 8001d26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d28:	e001      	b.n	8001d2e <LoopFillZerobss>

08001d2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d2c:	3204      	adds	r2, #4

08001d2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d30:	d3fb      	bcc.n	8001d2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001d32:	f7ff ffe4 	bl	8001cfe <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d36:	f003 f905 	bl	8004f44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d3a:	f7ff ffd1 	bl	8001ce0 <main>

08001d3e <LoopForever>:

LoopForever:
    b LoopForever
 8001d3e:	e7fe      	b.n	8001d3e <LoopForever>
k   ldr   r0, =_estack
 8001d40:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d48:	20000290 	.word	0x20000290
  ldr r2, =_sidata
 8001d4c:	08004fe0 	.word	0x08004fe0
  ldr r2, =_sbss
 8001d50:	20000290 	.word	0x20000290
  ldr r4, =_ebss
 8001d54:	200005a4 	.word	0x200005a4

08001d58 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d58:	e7fe      	b.n	8001d58 <ADC1_COMP_IRQHandler>
	...

08001d5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	0002      	movs	r2, r0
 8001d64:	1dfb      	adds	r3, r7, #7
 8001d66:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d68:	1dfb      	adds	r3, r7, #7
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	2b7f      	cmp	r3, #127	; 0x7f
 8001d6e:	d809      	bhi.n	8001d84 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d70:	1dfb      	adds	r3, r7, #7
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	001a      	movs	r2, r3
 8001d76:	231f      	movs	r3, #31
 8001d78:	401a      	ands	r2, r3
 8001d7a:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <__NVIC_EnableIRQ+0x30>)
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	4091      	lsls	r1, r2
 8001d80:	000a      	movs	r2, r1
 8001d82:	601a      	str	r2, [r3, #0]
  }
}
 8001d84:	46c0      	nop			; (mov r8, r8)
 8001d86:	46bd      	mov	sp, r7
 8001d88:	b002      	add	sp, #8
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	e000e100 	.word	0xe000e100

08001d90 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	0002      	movs	r2, r0
 8001d98:	1dfb      	adds	r3, r7, #7
 8001d9a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d9c:	1dfb      	adds	r3, r7, #7
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b7f      	cmp	r3, #127	; 0x7f
 8001da2:	d810      	bhi.n	8001dc6 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001da4:	1dfb      	adds	r3, r7, #7
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	001a      	movs	r2, r3
 8001daa:	231f      	movs	r3, #31
 8001dac:	4013      	ands	r3, r2
 8001dae:	4908      	ldr	r1, [pc, #32]	; (8001dd0 <__NVIC_DisableIRQ+0x40>)
 8001db0:	2201      	movs	r2, #1
 8001db2:	409a      	lsls	r2, r3
 8001db4:	0013      	movs	r3, r2
 8001db6:	2280      	movs	r2, #128	; 0x80
 8001db8:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001dba:	f3bf 8f4f 	dsb	sy
}
 8001dbe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8001dc0:	f3bf 8f6f 	isb	sy
}
 8001dc4:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8001dc6:	46c0      	nop			; (mov r8, r8)
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	b002      	add	sp, #8
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	46c0      	nop			; (mov r8, r8)
 8001dd0:	e000e100 	.word	0xe000e100

08001dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dd4:	b590      	push	{r4, r7, lr}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	0002      	movs	r2, r0
 8001ddc:	6039      	str	r1, [r7, #0]
 8001dde:	1dfb      	adds	r3, r7, #7
 8001de0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001de2:	1dfb      	adds	r3, r7, #7
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	2b7f      	cmp	r3, #127	; 0x7f
 8001de8:	d828      	bhi.n	8001e3c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001dea:	4a2f      	ldr	r2, [pc, #188]	; (8001ea8 <__NVIC_SetPriority+0xd4>)
 8001dec:	1dfb      	adds	r3, r7, #7
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	b25b      	sxtb	r3, r3
 8001df2:	089b      	lsrs	r3, r3, #2
 8001df4:	33c0      	adds	r3, #192	; 0xc0
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	589b      	ldr	r3, [r3, r2]
 8001dfa:	1dfa      	adds	r2, r7, #7
 8001dfc:	7812      	ldrb	r2, [r2, #0]
 8001dfe:	0011      	movs	r1, r2
 8001e00:	2203      	movs	r2, #3
 8001e02:	400a      	ands	r2, r1
 8001e04:	00d2      	lsls	r2, r2, #3
 8001e06:	21ff      	movs	r1, #255	; 0xff
 8001e08:	4091      	lsls	r1, r2
 8001e0a:	000a      	movs	r2, r1
 8001e0c:	43d2      	mvns	r2, r2
 8001e0e:	401a      	ands	r2, r3
 8001e10:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	019b      	lsls	r3, r3, #6
 8001e16:	22ff      	movs	r2, #255	; 0xff
 8001e18:	401a      	ands	r2, r3
 8001e1a:	1dfb      	adds	r3, r7, #7
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	0018      	movs	r0, r3
 8001e20:	2303      	movs	r3, #3
 8001e22:	4003      	ands	r3, r0
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e28:	481f      	ldr	r0, [pc, #124]	; (8001ea8 <__NVIC_SetPriority+0xd4>)
 8001e2a:	1dfb      	adds	r3, r7, #7
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	b25b      	sxtb	r3, r3
 8001e30:	089b      	lsrs	r3, r3, #2
 8001e32:	430a      	orrs	r2, r1
 8001e34:	33c0      	adds	r3, #192	; 0xc0
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001e3a:	e031      	b.n	8001ea0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e3c:	4a1b      	ldr	r2, [pc, #108]	; (8001eac <__NVIC_SetPriority+0xd8>)
 8001e3e:	1dfb      	adds	r3, r7, #7
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	0019      	movs	r1, r3
 8001e44:	230f      	movs	r3, #15
 8001e46:	400b      	ands	r3, r1
 8001e48:	3b08      	subs	r3, #8
 8001e4a:	089b      	lsrs	r3, r3, #2
 8001e4c:	3306      	adds	r3, #6
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	18d3      	adds	r3, r2, r3
 8001e52:	3304      	adds	r3, #4
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	1dfa      	adds	r2, r7, #7
 8001e58:	7812      	ldrb	r2, [r2, #0]
 8001e5a:	0011      	movs	r1, r2
 8001e5c:	2203      	movs	r2, #3
 8001e5e:	400a      	ands	r2, r1
 8001e60:	00d2      	lsls	r2, r2, #3
 8001e62:	21ff      	movs	r1, #255	; 0xff
 8001e64:	4091      	lsls	r1, r2
 8001e66:	000a      	movs	r2, r1
 8001e68:	43d2      	mvns	r2, r2
 8001e6a:	401a      	ands	r2, r3
 8001e6c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	019b      	lsls	r3, r3, #6
 8001e72:	22ff      	movs	r2, #255	; 0xff
 8001e74:	401a      	ands	r2, r3
 8001e76:	1dfb      	adds	r3, r7, #7
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	0018      	movs	r0, r3
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	4003      	ands	r3, r0
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e84:	4809      	ldr	r0, [pc, #36]	; (8001eac <__NVIC_SetPriority+0xd8>)
 8001e86:	1dfb      	adds	r3, r7, #7
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	001c      	movs	r4, r3
 8001e8c:	230f      	movs	r3, #15
 8001e8e:	4023      	ands	r3, r4
 8001e90:	3b08      	subs	r3, #8
 8001e92:	089b      	lsrs	r3, r3, #2
 8001e94:	430a      	orrs	r2, r1
 8001e96:	3306      	adds	r3, #6
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	18c3      	adds	r3, r0, r3
 8001e9c:	3304      	adds	r3, #4
 8001e9e:	601a      	str	r2, [r3, #0]
}
 8001ea0:	46c0      	nop			; (mov r8, r8)
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	b003      	add	sp, #12
 8001ea6:	bd90      	pop	{r4, r7, pc}
 8001ea8:	e000e100 	.word	0xe000e100
 8001eac:	e000ed00 	.word	0xe000ed00

08001eb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	1e5a      	subs	r2, r3, #1
 8001ebc:	2380      	movs	r3, #128	; 0x80
 8001ebe:	045b      	lsls	r3, r3, #17
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d301      	bcc.n	8001ec8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e010      	b.n	8001eea <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ec8:	4b0a      	ldr	r3, [pc, #40]	; (8001ef4 <SysTick_Config+0x44>)
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	3a01      	subs	r2, #1
 8001ece:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	425b      	negs	r3, r3
 8001ed4:	2103      	movs	r1, #3
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	f7ff ff7c 	bl	8001dd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001edc:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <SysTick_Config+0x44>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ee2:	4b04      	ldr	r3, [pc, #16]	; (8001ef4 <SysTick_Config+0x44>)
 8001ee4:	2207      	movs	r2, #7
 8001ee6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	0018      	movs	r0, r3
 8001eec:	46bd      	mov	sp, r7
 8001eee:	b002      	add	sp, #8
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	46c0      	nop			; (mov r8, r8)
 8001ef4:	e000e010 	.word	0xe000e010

08001ef8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60b9      	str	r1, [r7, #8]
 8001f00:	607a      	str	r2, [r7, #4]
 8001f02:	210f      	movs	r1, #15
 8001f04:	187b      	adds	r3, r7, r1
 8001f06:	1c02      	adds	r2, r0, #0
 8001f08:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001f0a:	68ba      	ldr	r2, [r7, #8]
 8001f0c:	187b      	adds	r3, r7, r1
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	b25b      	sxtb	r3, r3
 8001f12:	0011      	movs	r1, r2
 8001f14:	0018      	movs	r0, r3
 8001f16:	f7ff ff5d 	bl	8001dd4 <__NVIC_SetPriority>
}
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	b004      	add	sp, #16
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b082      	sub	sp, #8
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	0002      	movs	r2, r0
 8001f2a:	1dfb      	adds	r3, r7, #7
 8001f2c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f2e:	1dfb      	adds	r3, r7, #7
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	b25b      	sxtb	r3, r3
 8001f34:	0018      	movs	r0, r3
 8001f36:	f7ff ff11 	bl	8001d5c <__NVIC_EnableIRQ>
}
 8001f3a:	46c0      	nop			; (mov r8, r8)
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	b002      	add	sp, #8
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b082      	sub	sp, #8
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	0002      	movs	r2, r0
 8001f4a:	1dfb      	adds	r3, r7, #7
 8001f4c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001f4e:	1dfb      	adds	r3, r7, #7
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	b25b      	sxtb	r3, r3
 8001f54:	0018      	movs	r0, r3
 8001f56:	f7ff ff1b 	bl	8001d90 <__NVIC_DisableIRQ>
}
 8001f5a:	46c0      	nop			; (mov r8, r8)
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	b002      	add	sp, #8
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b082      	sub	sp, #8
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	f7ff ff9f 	bl	8001eb0 <SysTick_Config>
 8001f72:	0003      	movs	r3, r0
}
 8001f74:	0018      	movs	r0, r3
 8001f76:	46bd      	mov	sp, r7
 8001f78:	b002      	add	sp, #8
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <CORE_GetTick>:
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
	return gTicks;
 8001f80:	4b02      	ldr	r3, [pc, #8]	; (8001f8c <CORE_GetTick+0x10>)
 8001f82:	681b      	ldr	r3, [r3, #0]
}
 8001f84:	0018      	movs	r0, r3
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	46c0      	nop			; (mov r8, r8)
 8001f8c:	20000560 	.word	0x20000560

08001f90 <IBUS_Init>:

	return !dataIBUS.inputLost;
}

void IBUS_Init (void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
	memset(rxIBUS, 0, sizeof(rxIBUS));
 8001f94:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <IBUS_Init+0x34>)
 8001f96:	2220      	movs	r2, #32
 8001f98:	2100      	movs	r1, #0
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	f002 ffff 	bl	8004f9e <memset>
	rxHeartbeatIBUS = false;
 8001fa0:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <IBUS_Init+0x38>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	701a      	strb	r2, [r3, #0]
	dataIBUS.inputLost = true;
 8001fa6:	4b09      	ldr	r3, [pc, #36]	; (8001fcc <IBUS_Init+0x3c>)
 8001fa8:	2201      	movs	r2, #1
 8001faa:	701a      	strb	r2, [r3, #0]

	UART_Init(IBUS_UART, IBUS_BAUD, UART_Mode_Default);
 8001fac:	4b08      	ldr	r3, [pc, #32]	; (8001fd0 <IBUS_Init+0x40>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	22e1      	movs	r2, #225	; 0xe1
 8001fb2:	0251      	lsls	r1, r2, #9
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	0018      	movs	r0, r3
 8001fb8:	f002 fd12 	bl	80049e0 <UART_Init>
}
 8001fbc:	46c0      	nop			; (mov r8, r8)
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	46c0      	nop			; (mov r8, r8)
 8001fc4:	20000300 	.word	0x20000300
 8001fc8:	20000320 	.word	0x20000320
 8001fcc:	20000324 	.word	0x20000324
 8001fd0:	2000028c 	.word	0x2000028c

08001fd4 <IBUS_Deinit>:

void IBUS_Deinit (void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
	UART_Deinit(IBUS_UART);
 8001fd8:	4b03      	ldr	r3, [pc, #12]	; (8001fe8 <IBUS_Deinit+0x14>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	0018      	movs	r0, r3
 8001fde:	f002 fde7 	bl	8004bb0 <UART_Deinit>
}
 8001fe2:	46c0      	nop			; (mov r8, r8)
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	2000028c 	.word	0x2000028c

08001fec <IBUS_Update>:

void IBUS_Update (void)
{
 8001fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
	// Update Rx Data
	IBUS_HandleUART();
 8001ff2:	f000 f8e5 	bl	80021c0 <IBUS_HandleUART>

	// Update Loop Variables
	uint32_t now = CORE_GetTick();
 8001ff6:	f7ff ffc1 	bl	8001f7c <CORE_GetTick>
 8001ffa:	0003      	movs	r3, r0
 8001ffc:	60bb      	str	r3, [r7, #8]
	static uint32_t tick = 0;

	// Check for New Input Data
	if (rxHeartbeatIBUS)
 8001ffe:	4b2d      	ldr	r3, [pc, #180]	; (80020b4 <IBUS_Update+0xc8>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d03b      	beq.n	800207e <IBUS_Update+0x92>
	{
		// Assign Input to data Struct
		uint8_t ch = 0;
 8002006:	230f      	movs	r3, #15
 8002008:	18fb      	adds	r3, r7, r3
 800200a:	2200      	movs	r2, #0
 800200c:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = IBUS_DATA_INDEX; i < (IBUS_PAYLOAD_LEN - IBUS_CHECKSUM_LEN); i += 2)
 800200e:	230e      	movs	r3, #14
 8002010:	18fb      	adds	r3, r7, r3
 8002012:	2202      	movs	r2, #2
 8002014:	701a      	strb	r2, [r3, #0]
 8002016:	e024      	b.n	8002062 <IBUS_Update+0x76>
		{
			uint32_t trunc = (int32_t)(rxIBUS[i] | rxIBUS[i+1] << 8);
 8002018:	250e      	movs	r5, #14
 800201a:	197b      	adds	r3, r7, r5
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	4a26      	ldr	r2, [pc, #152]	; (80020b8 <IBUS_Update+0xcc>)
 8002020:	5cd3      	ldrb	r3, [r2, r3]
 8002022:	0019      	movs	r1, r3
 8002024:	197b      	adds	r3, r7, r5
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	3301      	adds	r3, #1
 800202a:	4a23      	ldr	r2, [pc, #140]	; (80020b8 <IBUS_Update+0xcc>)
 800202c:	5cd3      	ldrb	r3, [r2, r3]
 800202e:	021b      	lsls	r3, r3, #8
 8002030:	430b      	orrs	r3, r1
 8002032:	607b      	str	r3, [r7, #4]
			dataIBUS.ch[ch] = IBUS_Truncate(trunc);
 8002034:	260f      	movs	r6, #15
 8002036:	19bb      	adds	r3, r7, r6
 8002038:	781c      	ldrb	r4, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	0018      	movs	r0, r3
 800203e:	f000 f849 	bl	80020d4 <IBUS_Truncate>
 8002042:	0001      	movs	r1, r0
 8002044:	4a1d      	ldr	r2, [pc, #116]	; (80020bc <IBUS_Update+0xd0>)
 8002046:	00a3      	lsls	r3, r4, #2
 8002048:	18d3      	adds	r3, r2, r3
 800204a:	3304      	adds	r3, #4
 800204c:	6019      	str	r1, [r3, #0]
			ch += 1;
 800204e:	19bb      	adds	r3, r7, r6
 8002050:	19ba      	adds	r2, r7, r6
 8002052:	7812      	ldrb	r2, [r2, #0]
 8002054:	3201      	adds	r2, #1
 8002056:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = IBUS_DATA_INDEX; i < (IBUS_PAYLOAD_LEN - IBUS_CHECKSUM_LEN); i += 2)
 8002058:	197b      	adds	r3, r7, r5
 800205a:	197a      	adds	r2, r7, r5
 800205c:	7812      	ldrb	r2, [r2, #0]
 800205e:	3202      	adds	r2, #2
 8002060:	701a      	strb	r2, [r3, #0]
 8002062:	230e      	movs	r3, #14
 8002064:	18fb      	adds	r3, r7, r3
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b1d      	cmp	r3, #29
 800206a:	d9d5      	bls.n	8002018 <IBUS_Update+0x2c>
		}
		// Reset Flags
		rxHeartbeatIBUS = false;
 800206c:	4b11      	ldr	r3, [pc, #68]	; (80020b4 <IBUS_Update+0xc8>)
 800206e:	2200      	movs	r2, #0
 8002070:	701a      	strb	r2, [r3, #0]
		dataIBUS.inputLost = false;
 8002072:	4b12      	ldr	r3, [pc, #72]	; (80020bc <IBUS_Update+0xd0>)
 8002074:	2200      	movs	r2, #0
 8002076:	701a      	strb	r2, [r3, #0]
		tick = now;
 8002078:	4b11      	ldr	r3, [pc, #68]	; (80020c0 <IBUS_Update+0xd4>)
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	601a      	str	r2, [r3, #0]
	}

	// Check for Input Failsafe
	if (!dataIBUS.inputLost && IBUS_TIMEOUT_FS <= (now - tick)) { // If not receiving data and inputLost flag not set
 800207e:	4b0f      	ldr	r3, [pc, #60]	; (80020bc <IBUS_Update+0xd0>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	2201      	movs	r2, #1
 8002084:	4053      	eors	r3, r2
 8002086:	b2db      	uxtb	r3, r3
 8002088:	2b00      	cmp	r3, #0
 800208a:	d00e      	beq.n	80020aa <IBUS_Update+0xbe>
 800208c:	4b0c      	ldr	r3, [pc, #48]	; (80020c0 <IBUS_Update+0xd4>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68ba      	ldr	r2, [r7, #8]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b14      	cmp	r3, #20
 8002096:	d908      	bls.n	80020aa <IBUS_Update+0xbe>
		dataIBUS.inputLost = true;
 8002098:	4b08      	ldr	r3, [pc, #32]	; (80020bc <IBUS_Update+0xd0>)
 800209a:	2201      	movs	r2, #1
 800209c:	701a      	strb	r2, [r3, #0]
		memset(rxIBUS, 0, sizeof(rxIBUS));
 800209e:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <IBUS_Update+0xcc>)
 80020a0:	2220      	movs	r2, #32
 80020a2:	2100      	movs	r1, #0
 80020a4:	0018      	movs	r0, r3
 80020a6:	f002 ff7a 	bl	8004f9e <memset>
	}
}
 80020aa:	46c0      	nop			; (mov r8, r8)
 80020ac:	46bd      	mov	sp, r7
 80020ae:	b005      	add	sp, #20
 80020b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020b2:	46c0      	nop			; (mov r8, r8)
 80020b4:	20000320 	.word	0x20000320
 80020b8:	20000300 	.word	0x20000300
 80020bc:	20000324 	.word	0x20000324
 80020c0:	20000360 	.word	0x20000360

080020c4 <IBUS_GetDataPtr>:

IBUS_Data* IBUS_GetDataPtr (void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
	return &dataIBUS;
 80020c8:	4b01      	ldr	r3, [pc, #4]	; (80020d0 <IBUS_GetDataPtr+0xc>)
}
 80020ca:	0018      	movs	r0, r3
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	20000324 	.word	0x20000324

080020d4 <IBUS_Truncate>:
/*
 * PRIVATE FUNCTIONS
 */

uint32_t IBUS_Truncate (uint32_t r)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
	uint32_t retVal = 0;
 80020dc:	2300      	movs	r3, #0
 80020de:	60fb      	str	r3, [r7, #12]

	if (r == 0) {
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d102      	bne.n	80020ec <IBUS_Truncate+0x18>
		retVal = 0;
 80020e6:	2300      	movs	r3, #0
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	e022      	b.n	8002132 <IBUS_Truncate+0x5e>
	} else if (r < (IBUS_MIN - IBUS_THRESHOLD)) {
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	23fa      	movs	r3, #250	; 0xfa
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d202      	bcs.n	80020fc <IBUS_Truncate+0x28>
		retVal = 0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	e01a      	b.n	8002132 <IBUS_Truncate+0x5e>
	} else if (r < IBUS_MIN) {
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	23fa      	movs	r3, #250	; 0xfa
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	429a      	cmp	r2, r3
 8002104:	d203      	bcs.n	800210e <IBUS_Truncate+0x3a>
		retVal = IBUS_MIN;
 8002106:	23fa      	movs	r3, #250	; 0xfa
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	e011      	b.n	8002132 <IBUS_Truncate+0x5e>
	} else if (r <= IBUS_MAX) {
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	23fa      	movs	r3, #250	; 0xfa
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	429a      	cmp	r2, r3
 8002116:	d802      	bhi.n	800211e <IBUS_Truncate+0x4a>
		retVal = r;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	e009      	b.n	8002132 <IBUS_Truncate+0x5e>
	} else if (r < (IBUS_MAX + IBUS_THRESHOLD))	{
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a06      	ldr	r2, [pc, #24]	; (800213c <IBUS_Truncate+0x68>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d803      	bhi.n	800212e <IBUS_Truncate+0x5a>
		retVal = IBUS_MAX;
 8002126:	23fa      	movs	r3, #250	; 0xfa
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	e001      	b.n	8002132 <IBUS_Truncate+0x5e>
	} else {
		retVal = 0;
 800212e:	2300      	movs	r3, #0
 8002130:	60fb      	str	r3, [r7, #12]
	}

	return retVal;
 8002132:	68fb      	ldr	r3, [r7, #12]
}
 8002134:	0018      	movs	r0, r3
 8002136:	46bd      	mov	sp, r7
 8002138:	b004      	add	sp, #16
 800213a:	bd80      	pop	{r7, pc}
 800213c:	000009c3 	.word	0x000009c3

08002140 <IBUS_Checksum>:

bool IBUS_Checksum ( void )
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
	bool retVal = false;
 8002146:	230f      	movs	r3, #15
 8002148:	18fb      	adds	r3, r7, r3
 800214a:	2200      	movs	r2, #0
 800214c:	701a      	strb	r2, [r3, #0]

	uint32_t cs = (int32_t)(rxIBUS[IBUS_CHECKSUM_INDEX] | (int32_t)rxIBUS[IBUS_CHECKSUM_INDEX + 1] << 8);
 800214e:	4b1a      	ldr	r3, [pc, #104]	; (80021b8 <IBUS_Checksum+0x78>)
 8002150:	7f9b      	ldrb	r3, [r3, #30]
 8002152:	001a      	movs	r2, r3
 8002154:	4b18      	ldr	r3, [pc, #96]	; (80021b8 <IBUS_Checksum+0x78>)
 8002156:	7fdb      	ldrb	r3, [r3, #31]
 8002158:	021b      	lsls	r3, r3, #8
 800215a:	4313      	orrs	r3, r2
 800215c:	603b      	str	r3, [r7, #0]
	uint32_t check = IBUS_CHECKSUM_START;
 800215e:	4b17      	ldr	r3, [pc, #92]	; (80021bc <IBUS_Checksum+0x7c>)
 8002160:	60bb      	str	r3, [r7, #8]
	check -= IBUS_HEADER1;
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	3b20      	subs	r3, #32
 8002166:	60bb      	str	r3, [r7, #8]
	check -= IBUS_HEADER2;
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	3b40      	subs	r3, #64	; 0x40
 800216c:	60bb      	str	r3, [r7, #8]
	for (uint8_t i = IBUS_DATA_INDEX; i < IBUS_CHECKSUM_INDEX; i++)
 800216e:	1dfb      	adds	r3, r7, #7
 8002170:	2202      	movs	r2, #2
 8002172:	701a      	strb	r2, [r3, #0]
 8002174:	e00c      	b.n	8002190 <IBUS_Checksum+0x50>
	{
		check -= rxIBUS[i];
 8002176:	1dfb      	adds	r3, r7, #7
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	4a0f      	ldr	r2, [pc, #60]	; (80021b8 <IBUS_Checksum+0x78>)
 800217c:	5cd3      	ldrb	r3, [r2, r3]
 800217e:	001a      	movs	r2, r3
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	1a9b      	subs	r3, r3, r2
 8002184:	60bb      	str	r3, [r7, #8]
	for (uint8_t i = IBUS_DATA_INDEX; i < IBUS_CHECKSUM_INDEX; i++)
 8002186:	1dfb      	adds	r3, r7, #7
 8002188:	781a      	ldrb	r2, [r3, #0]
 800218a:	1dfb      	adds	r3, r7, #7
 800218c:	3201      	adds	r2, #1
 800218e:	701a      	strb	r2, [r3, #0]
 8002190:	1dfb      	adds	r3, r7, #7
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b1d      	cmp	r3, #29
 8002196:	d9ee      	bls.n	8002176 <IBUS_Checksum+0x36>
	}

	if (cs == check)
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	429a      	cmp	r2, r3
 800219e:	d103      	bne.n	80021a8 <IBUS_Checksum+0x68>
	{
		retVal = true;
 80021a0:	230f      	movs	r3, #15
 80021a2:	18fb      	adds	r3, r7, r3
 80021a4:	2201      	movs	r2, #1
 80021a6:	701a      	strb	r2, [r3, #0]
	}

	return retVal;
 80021a8:	230f      	movs	r3, #15
 80021aa:	18fb      	adds	r3, r7, r3
 80021ac:	781b      	ldrb	r3, [r3, #0]
}
 80021ae:	0018      	movs	r0, r3
 80021b0:	46bd      	mov	sp, r7
 80021b2:	b004      	add	sp, #16
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	46c0      	nop			; (mov r8, r8)
 80021b8:	20000300 	.word	0x20000300
 80021bc:	0000ffff 	.word	0x0000ffff

080021c0 <IBUS_HandleUART>:

void IBUS_HandleUART (void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
	// Init Loop Variables
	uint32_t now = CORE_GetTick();
 80021c6:	f7ff fed9 	bl	8001f7c <CORE_GetTick>
 80021ca:	0003      	movs	r3, r0
 80021cc:	607b      	str	r3, [r7, #4]
	static uint32_t timeout = 0;
	static bool detH1 = false;
	static bool detH2 = false;

	// Check for Start of transmission (Header1)
	if ( !detH1 )
 80021ce:	4b46      	ldr	r3, [pc, #280]	; (80022e8 <IBUS_HandleUART+0x128>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2201      	movs	r2, #1
 80021d4:	4053      	eors	r3, r2
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d01a      	beq.n	8002212 <IBUS_HandleUART+0x52>
	{
		// Process All Available Bytes in Buffer Until Header1 Detected
		while ( UART_ReadCount(IBUS_UART) >= IBUS_HEADER1_LEN)
 80021dc:	e012      	b.n	8002204 <IBUS_HandleUART+0x44>
		{
			// Read in Next Byte
			UART_Read(IBUS_UART, &rxIBUS[IBUS_HEADER1_INDEX], IBUS_HEADER1_LEN);
 80021de:	4b43      	ldr	r3, [pc, #268]	; (80022ec <IBUS_HandleUART+0x12c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4943      	ldr	r1, [pc, #268]	; (80022f0 <IBUS_HandleUART+0x130>)
 80021e4:	2201      	movs	r2, #1
 80021e6:	0018      	movs	r0, r3
 80021e8:	f002 fd51 	bl	8004c8e <UART_Read>
			// Check if the Byte is the Message Header1
			if (rxIBUS[IBUS_HEADER1_INDEX] == IBUS_HEADER1) {
 80021ec:	4b40      	ldr	r3, [pc, #256]	; (80022f0 <IBUS_HandleUART+0x130>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b20      	cmp	r3, #32
 80021f2:	d107      	bne.n	8002204 <IBUS_HandleUART+0x44>
				detH1 = true;
 80021f4:	4b3c      	ldr	r3, [pc, #240]	; (80022e8 <IBUS_HandleUART+0x128>)
 80021f6:	2201      	movs	r2, #1
 80021f8:	701a      	strb	r2, [r3, #0]
				timeout = now + IBUS_TIMEOUT_IP;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	1d1a      	adds	r2, r3, #4
 80021fe:	4b3d      	ldr	r3, [pc, #244]	; (80022f4 <IBUS_HandleUART+0x134>)
 8002200:	601a      	str	r2, [r3, #0]
				break;
 8002202:	e006      	b.n	8002212 <IBUS_HandleUART+0x52>
		while ( UART_ReadCount(IBUS_UART) >= IBUS_HEADER1_LEN)
 8002204:	4b39      	ldr	r3, [pc, #228]	; (80022ec <IBUS_HandleUART+0x12c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	0018      	movs	r0, r3
 800220a:	f002 fd13 	bl	8004c34 <UART_ReadCount>
 800220e:	1e03      	subs	r3, r0, #0
 8002210:	d1e5      	bne.n	80021de <IBUS_HandleUART+0x1e>
			}
		}
	}

	// Header1 Detected, Check for Header2
	if ( detH1 && !detH2)
 8002212:	4b35      	ldr	r3, [pc, #212]	; (80022e8 <IBUS_HandleUART+0x128>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d032      	beq.n	8002280 <IBUS_HandleUART+0xc0>
 800221a:	4b37      	ldr	r3, [pc, #220]	; (80022f8 <IBUS_HandleUART+0x138>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	2201      	movs	r2, #1
 8002220:	4053      	eors	r3, r2
 8002222:	b2db      	uxtb	r3, r3
 8002224:	2b00      	cmp	r3, #0
 8002226:	d02b      	beq.n	8002280 <IBUS_HandleUART+0xc0>
	{
		// Only Proceed When Byte in Buffer
		if ( UART_ReadCount(IBUS_UART) >= IBUS_HEADER2_LEN )
 8002228:	4b30      	ldr	r3, [pc, #192]	; (80022ec <IBUS_HandleUART+0x12c>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	0018      	movs	r0, r3
 800222e:	f002 fd01 	bl	8004c34 <UART_ReadCount>
 8002232:	1e03      	subs	r3, r0, #0
 8002234:	d019      	beq.n	800226a <IBUS_HandleUART+0xaa>
		{
			// Read in Next Byte
			UART_Read(IBUS_UART, &rxIBUS[IBUS_HEADER2_INDEX], IBUS_HEADER2_LEN);
 8002236:	4b2d      	ldr	r3, [pc, #180]	; (80022ec <IBUS_HandleUART+0x12c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4930      	ldr	r1, [pc, #192]	; (80022fc <IBUS_HandleUART+0x13c>)
 800223c:	2201      	movs	r2, #1
 800223e:	0018      	movs	r0, r3
 8002240:	f002 fd25 	bl	8004c8e <UART_Read>
			// Check if the Byte is the Message Header1
			if (rxIBUS[IBUS_HEADER2_INDEX] == IBUS_HEADER2) {
 8002244:	4b2a      	ldr	r3, [pc, #168]	; (80022f0 <IBUS_HandleUART+0x130>)
 8002246:	785b      	ldrb	r3, [r3, #1]
 8002248:	2b40      	cmp	r3, #64	; 0x40
 800224a:	d107      	bne.n	800225c <IBUS_HandleUART+0x9c>
				detH2 = true;
 800224c:	4b2a      	ldr	r3, [pc, #168]	; (80022f8 <IBUS_HandleUART+0x138>)
 800224e:	2201      	movs	r2, #1
 8002250:	701a      	strb	r2, [r3, #0]
				timeout = now + IBUS_TIMEOUT_IP;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	1d1a      	adds	r2, r3, #4
 8002256:	4b27      	ldr	r3, [pc, #156]	; (80022f4 <IBUS_HandleUART+0x134>)
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	e006      	b.n	800226a <IBUS_HandleUART+0xaa>
			} else if (rxIBUS[IBUS_HEADER2_INDEX] == IBUS_HEADER1) { // Case for 2 sequential 0x20 bytes
 800225c:	4b24      	ldr	r3, [pc, #144]	; (80022f0 <IBUS_HandleUART+0x130>)
 800225e:	785b      	ldrb	r3, [r3, #1]
 8002260:	2b20      	cmp	r3, #32
 8002262:	d002      	beq.n	800226a <IBUS_HandleUART+0xaa>
				// Do nothing. Next loop will re-check for Header2
			} else {
				detH1 = false;
 8002264:	4b20      	ldr	r3, [pc, #128]	; (80022e8 <IBUS_HandleUART+0x128>)
 8002266:	2200      	movs	r2, #0
 8002268:	701a      	strb	r2, [r3, #0]
			}
		}

		// Check for a timeout
		if ( now > timeout )
 800226a:	4b22      	ldr	r3, [pc, #136]	; (80022f4 <IBUS_HandleUART+0x134>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	429a      	cmp	r2, r3
 8002272:	d905      	bls.n	8002280 <IBUS_HandleUART+0xc0>
		{
			detH1 = false;
 8002274:	4b1c      	ldr	r3, [pc, #112]	; (80022e8 <IBUS_HandleUART+0x128>)
 8002276:	2200      	movs	r2, #0
 8002278:	701a      	strb	r2, [r3, #0]
			detH2 = false;
 800227a:	4b1f      	ldr	r3, [pc, #124]	; (80022f8 <IBUS_HandleUART+0x138>)
 800227c:	2200      	movs	r2, #0
 800227e:	701a      	strb	r2, [r3, #0]
		}
	}

	// Both Headers Detected, Read Remaining Transmission
	if ( detH1 && detH2 )
 8002280:	4b19      	ldr	r3, [pc, #100]	; (80022e8 <IBUS_HandleUART+0x128>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d02a      	beq.n	80022de <IBUS_HandleUART+0x11e>
 8002288:	4b1b      	ldr	r3, [pc, #108]	; (80022f8 <IBUS_HandleUART+0x138>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d026      	beq.n	80022de <IBUS_HandleUART+0x11e>
	{
		// Only Proceed When Full Message is Ready
		if ( UART_ReadCount(IBUS_UART) >= (IBUS_PAYLOAD_LEN - IBUS_HEADER1_LEN - IBUS_HEADER2_LEN) )
 8002290:	4b16      	ldr	r3, [pc, #88]	; (80022ec <IBUS_HandleUART+0x12c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	0018      	movs	r0, r3
 8002296:	f002 fccd 	bl	8004c34 <UART_ReadCount>
 800229a:	0003      	movs	r3, r0
 800229c:	2b1d      	cmp	r3, #29
 800229e:	d913      	bls.n	80022c8 <IBUS_HandleUART+0x108>
		{
			// Read in Remaining Message
			UART_Read(IBUS_UART, &rxIBUS[IBUS_DATA_INDEX], (IBUS_PAYLOAD_LEN - IBUS_HEADER1_LEN - IBUS_HEADER2_LEN));
 80022a0:	4b12      	ldr	r3, [pc, #72]	; (80022ec <IBUS_HandleUART+0x12c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4916      	ldr	r1, [pc, #88]	; (8002300 <IBUS_HandleUART+0x140>)
 80022a6:	221e      	movs	r2, #30
 80022a8:	0018      	movs	r0, r3
 80022aa:	f002 fcf0 	bl	8004c8e <UART_Read>
			// Verify the Checksum
			if (IBUS_Checksum()) {
 80022ae:	f7ff ff47 	bl	8002140 <IBUS_Checksum>
 80022b2:	1e03      	subs	r3, r0, #0
 80022b4:	d002      	beq.n	80022bc <IBUS_HandleUART+0xfc>
				rxHeartbeatIBUS = true;
 80022b6:	4b13      	ldr	r3, [pc, #76]	; (8002304 <IBUS_HandleUART+0x144>)
 80022b8:	2201      	movs	r2, #1
 80022ba:	701a      	strb	r2, [r3, #0]
			}
			// Reset detect for next read weather or not CS is correct
			detH1 = false;
 80022bc:	4b0a      	ldr	r3, [pc, #40]	; (80022e8 <IBUS_HandleUART+0x128>)
 80022be:	2200      	movs	r2, #0
 80022c0:	701a      	strb	r2, [r3, #0]
			detH2 = false;
 80022c2:	4b0d      	ldr	r3, [pc, #52]	; (80022f8 <IBUS_HandleUART+0x138>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	701a      	strb	r2, [r3, #0]
		}

		// Check for a timeout
		if ( now > timeout)
 80022c8:	4b0a      	ldr	r3, [pc, #40]	; (80022f4 <IBUS_HandleUART+0x134>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d905      	bls.n	80022de <IBUS_HandleUART+0x11e>
		{
			detH1 = false;
 80022d2:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <IBUS_HandleUART+0x128>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	701a      	strb	r2, [r3, #0]
			detH2 = false;
 80022d8:	4b07      	ldr	r3, [pc, #28]	; (80022f8 <IBUS_HandleUART+0x138>)
 80022da:	2200      	movs	r2, #0
 80022dc:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80022de:	46c0      	nop			; (mov r8, r8)
 80022e0:	46bd      	mov	sp, r7
 80022e2:	b002      	add	sp, #8
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	46c0      	nop			; (mov r8, r8)
 80022e8:	20000364 	.word	0x20000364
 80022ec:	2000028c 	.word	0x2000028c
 80022f0:	20000300 	.word	0x20000300
 80022f4:	20000368 	.word	0x20000368
 80022f8:	2000036c 	.word	0x2000036c
 80022fc:	20000301 	.word	0x20000301
 8002300:	20000302 	.word	0x20000302
 8002304:	20000320 	.word	0x20000320

08002308 <CORE_GetTick>:
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
	return gTicks;
 800230c:	4b02      	ldr	r3, [pc, #8]	; (8002318 <CORE_GetTick+0x10>)
 800230e:	681b      	ldr	r3, [r3, #0]
}
 8002310:	0018      	movs	r0, r3
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	46c0      	nop			; (mov r8, r8)
 8002318:	20000560 	.word	0x20000560

0800231c <GPIO_EnableInput>:
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	1dfb      	adds	r3, r7, #7
 8002328:	701a      	strb	r2, [r3, #0]
	GPIO_Init(gpio, pin, GPIO_Mode_Input | pull);
 800232a:	1dfb      	adds	r3, r7, #7
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	b29a      	uxth	r2, r3
 8002330:	68b9      	ldr	r1, [r7, #8]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	0018      	movs	r0, r3
 8002336:	f001 fe89 	bl	800404c <GPIO_Init>
}
 800233a:	46c0      	nop			; (mov r8, r8)
 800233c:	46bd      	mov	sp, r7
 800233e:	b004      	add	sp, #16
 8002340:	bd80      	pop	{r7, pc}

08002342 <GPIO_Deinit>:
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b082      	sub	sp, #8
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
 800234a:	6039      	str	r1, [r7, #0]
	GPIO_Init(gpio, pin, GPIO_Mode_Analog);
 800234c:	6839      	ldr	r1, [r7, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2203      	movs	r2, #3
 8002352:	0018      	movs	r0, r3
 8002354:	f001 fe7a 	bl	800404c <GPIO_Init>
}
 8002358:	46c0      	nop			; (mov r8, r8)
 800235a:	46bd      	mov	sp, r7
 800235c:	b002      	add	sp, #8
 800235e:	bd80      	pop	{r7, pc}

08002360 <TIM_Read>:
/*
 * INLINE FUNCTION DEFINITIONS
 */

static inline uint32_t TIM_Read(TIM_t * tim)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
	return tim->Instance->CNT;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800236e:	0018      	movs	r0, r3
 8002370:	46bd      	mov	sp, r7
 8002372:	b002      	add	sp, #8
 8002374:	bd80      	pop	{r7, pc}
	...

08002378 <PPM_Init>:

	return rxHeartbeatPPM;
}

void PPM_Init (void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
	PPM_memset();
 800237c:	f000 f93c 	bl	80025f8 <PPM_memset>
	rxHeartbeatPPM = false;
 8002380:	4b11      	ldr	r3, [pc, #68]	; (80023c8 <PPM_Init+0x50>)
 8002382:	2200      	movs	r2, #0
 8002384:	701a      	strb	r2, [r3, #0]
	dataPPM.inputLost = true;
 8002386:	4b11      	ldr	r3, [pc, #68]	; (80023cc <PPM_Init+0x54>)
 8002388:	2201      	movs	r2, #1
 800238a:	701a      	strb	r2, [r3, #0]

	TIM_Init(PPM_TIM, PPM_TIM_FREQ, PPM_TIM_RELOAD);
 800238c:	4b10      	ldr	r3, [pc, #64]	; (80023d0 <PPM_Init+0x58>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a10      	ldr	r2, [pc, #64]	; (80023d4 <PPM_Init+0x5c>)
 8002392:	4911      	ldr	r1, [pc, #68]	; (80023d8 <PPM_Init+0x60>)
 8002394:	0018      	movs	r0, r3
 8002396:	f002 f82b 	bl	80043f0 <TIM_Init>
	TIM_Start(PPM_TIM);
 800239a:	4b0d      	ldr	r3, [pc, #52]	; (80023d0 <PPM_Init+0x58>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	0018      	movs	r0, r3
 80023a0:	f002 f8fa 	bl	8004598 <TIM_Start>

	GPIO_EnableInput(PPM_GPIO, PPM_PIN, GPIO_Pull_Down);
 80023a4:	2380      	movs	r3, #128	; 0x80
 80023a6:	011b      	lsls	r3, r3, #4
 80023a8:	480c      	ldr	r0, [pc, #48]	; (80023dc <PPM_Init+0x64>)
 80023aa:	2220      	movs	r2, #32
 80023ac:	0019      	movs	r1, r3
 80023ae:	f7ff ffb5 	bl	800231c <GPIO_EnableInput>
	GPIO_OnChange(PPM_GPIO, PPM_PIN, GPIO_IT_Rising, PPM_IRQ);
 80023b2:	4b0b      	ldr	r3, [pc, #44]	; (80023e0 <PPM_Init+0x68>)
 80023b4:	2280      	movs	r2, #128	; 0x80
 80023b6:	0111      	lsls	r1, r2, #4
 80023b8:	4808      	ldr	r0, [pc, #32]	; (80023dc <PPM_Init+0x64>)
 80023ba:	2201      	movs	r2, #1
 80023bc:	f001 fe1a 	bl	8003ff4 <GPIO_OnChange>
}
 80023c0:	46c0      	nop			; (mov r8, r8)
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	46c0      	nop			; (mov r8, r8)
 80023c8:	20000380 	.word	0x20000380
 80023cc:	20000384 	.word	0x20000384
 80023d0:	2000003c 	.word	0x2000003c
 80023d4:	0000ffff 	.word	0x0000ffff
 80023d8:	000f4240 	.word	0x000f4240
 80023dc:	50000400 	.word	0x50000400
 80023e0:	08002635 	.word	0x08002635

080023e4 <PPM_Deinit>:

void PPM_Deinit (void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
	TIM_Deinit(PPM_TIM);
 80023e8:	4b0a      	ldr	r3, [pc, #40]	; (8002414 <PPM_Deinit+0x30>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	0018      	movs	r0, r3
 80023ee:	f002 f8ff 	bl	80045f0 <TIM_Deinit>

	GPIO_OnChange(PPM_GPIO, PPM_PIN, GPIO_IT_None, NULL);
 80023f2:	2380      	movs	r3, #128	; 0x80
 80023f4:	0119      	lsls	r1, r3, #4
 80023f6:	4808      	ldr	r0, [pc, #32]	; (8002418 <PPM_Deinit+0x34>)
 80023f8:	2300      	movs	r3, #0
 80023fa:	2200      	movs	r2, #0
 80023fc:	f001 fdfa 	bl	8003ff4 <GPIO_OnChange>
	GPIO_Deinit(PPM_GPIO, PPM_PIN);
 8002400:	2380      	movs	r3, #128	; 0x80
 8002402:	011b      	lsls	r3, r3, #4
 8002404:	4a04      	ldr	r2, [pc, #16]	; (8002418 <PPM_Deinit+0x34>)
 8002406:	0019      	movs	r1, r3
 8002408:	0010      	movs	r0, r2
 800240a:	f7ff ff9a 	bl	8002342 <GPIO_Deinit>
}
 800240e:	46c0      	nop			; (mov r8, r8)
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	2000003c 	.word	0x2000003c
 8002418:	50000400 	.word	0x50000400

0800241c <PPM_Update>:

void PPM_Update (void)
{
 800241c:	b5b0      	push	{r4, r5, r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
	// Init Loop Variables
	uint32_t now = CORE_GetTick();
 8002422:	f7ff ff71 	bl	8002308 <CORE_GetTick>
 8002426:	0003      	movs	r3, r0
 8002428:	60bb      	str	r3, [r7, #8]
	static uint32_t prev = 0;
	static uint32_t ch_p[PPM_NUM_CHANNELS];
	// Check for New Input Data
	if (rxHeartbeatPPM)
 800242a:	4b4f      	ldr	r3, [pc, #316]	; (8002568 <PPM_Update+0x14c>)
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b00      	cmp	r3, #0
 8002432:	d037      	beq.n	80024a4 <PPM_Update+0x88>
	{
		// Assign Input to data Struct
		for (uint8_t i = 0; i < PPM_NUM_CHANNELS; i++)
 8002434:	230f      	movs	r3, #15
 8002436:	18fb      	adds	r3, r7, r3
 8002438:	2200      	movs	r2, #0
 800243a:	701a      	strb	r2, [r3, #0]
 800243c:	e024      	b.n	8002488 <PPM_Update+0x6c>
		{
			ch_p[i] = dataPPM.ch[i];
 800243e:	200f      	movs	r0, #15
 8002440:	183b      	adds	r3, r7, r0
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	183a      	adds	r2, r7, r0
 8002446:	7812      	ldrb	r2, [r2, #0]
 8002448:	4948      	ldr	r1, [pc, #288]	; (800256c <PPM_Update+0x150>)
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	18cb      	adds	r3, r1, r3
 800244e:	3304      	adds	r3, #4
 8002450:	6819      	ldr	r1, [r3, #0]
 8002452:	4b47      	ldr	r3, [pc, #284]	; (8002570 <PPM_Update+0x154>)
 8002454:	0092      	lsls	r2, r2, #2
 8002456:	50d1      	str	r1, [r2, r3]
			dataPPM.ch[i] = PPM_Truncate(rxPPM[i]);
 8002458:	183b      	adds	r3, r7, r0
 800245a:	781a      	ldrb	r2, [r3, #0]
 800245c:	4b45      	ldr	r3, [pc, #276]	; (8002574 <PPM_Update+0x158>)
 800245e:	0052      	lsls	r2, r2, #1
 8002460:	5ad3      	ldrh	r3, [r2, r3]
 8002462:	b29b      	uxth	r3, r3
 8002464:	001a      	movs	r2, r3
 8002466:	0005      	movs	r5, r0
 8002468:	183b      	adds	r3, r7, r0
 800246a:	781c      	ldrb	r4, [r3, #0]
 800246c:	0010      	movs	r0, r2
 800246e:	f000 f88d 	bl	800258c <PPM_Truncate>
 8002472:	0001      	movs	r1, r0
 8002474:	4a3d      	ldr	r2, [pc, #244]	; (800256c <PPM_Update+0x150>)
 8002476:	00a3      	lsls	r3, r4, #2
 8002478:	18d3      	adds	r3, r2, r3
 800247a:	3304      	adds	r3, #4
 800247c:	6019      	str	r1, [r3, #0]
		for (uint8_t i = 0; i < PPM_NUM_CHANNELS; i++)
 800247e:	197b      	adds	r3, r7, r5
 8002480:	781a      	ldrb	r2, [r3, #0]
 8002482:	197b      	adds	r3, r7, r5
 8002484:	3201      	adds	r2, #1
 8002486:	701a      	strb	r2, [r3, #0]
 8002488:	230f      	movs	r3, #15
 800248a:	18fb      	adds	r3, r7, r3
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	2b07      	cmp	r3, #7
 8002490:	d9d5      	bls.n	800243e <PPM_Update+0x22>
		}

		// Reset Flags
		rxHeartbeatPPM = false;
 8002492:	4b35      	ldr	r3, [pc, #212]	; (8002568 <PPM_Update+0x14c>)
 8002494:	2200      	movs	r2, #0
 8002496:	701a      	strb	r2, [r3, #0]
		dataPPM.inputLost = false;
 8002498:	4b34      	ldr	r3, [pc, #208]	; (800256c <PPM_Update+0x150>)
 800249a:	2200      	movs	r2, #0
 800249c:	701a      	strb	r2, [r3, #0]
		prev = now;
 800249e:	4b36      	ldr	r3, [pc, #216]	; (8002578 <PPM_Update+0x15c>)
 80024a0:	68ba      	ldr	r2, [r7, #8]
 80024a2:	601a      	str	r2, [r3, #0]
	}

	// Assign Input to data Struct
	for (uint8_t i = 0; i < PPM_NUM_CHANNELS; i++)
 80024a4:	230e      	movs	r3, #14
 80024a6:	18fb      	adds	r3, r7, r3
 80024a8:	2200      	movs	r2, #0
 80024aa:	701a      	strb	r2, [r3, #0]
 80024ac:	e041      	b.n	8002532 <PPM_Update+0x116>
	{
		if ( dataPPM.ch[i] != 0 &&
 80024ae:	210e      	movs	r1, #14
 80024b0:	187b      	adds	r3, r7, r1
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	4a2d      	ldr	r2, [pc, #180]	; (800256c <PPM_Update+0x150>)
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	18d3      	adds	r3, r2, r3
 80024ba:	3304      	adds	r3, #4
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d031      	beq.n	8002526 <PPM_Update+0x10a>
			 ((dataPPM.ch[i] >= (ch_p[i] + 20)) ||
 80024c2:	187b      	adds	r3, r7, r1
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	4a29      	ldr	r2, [pc, #164]	; (800256c <PPM_Update+0x150>)
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	18d3      	adds	r3, r2, r3
 80024cc:	3304      	adds	r3, #4
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	0008      	movs	r0, r1
 80024d2:	187b      	adds	r3, r7, r1
 80024d4:	7819      	ldrb	r1, [r3, #0]
 80024d6:	4b26      	ldr	r3, [pc, #152]	; (8002570 <PPM_Update+0x154>)
 80024d8:	0089      	lsls	r1, r1, #2
 80024da:	58cb      	ldr	r3, [r1, r3]
 80024dc:	3314      	adds	r3, #20
		if ( dataPPM.ch[i] != 0 &&
 80024de:	429a      	cmp	r2, r3
 80024e0:	d20f      	bcs.n	8002502 <PPM_Update+0xe6>
			 (dataPPM.ch[i] <= (ch_p[i] - 20))))
 80024e2:	0001      	movs	r1, r0
 80024e4:	187b      	adds	r3, r7, r1
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	4a20      	ldr	r2, [pc, #128]	; (800256c <PPM_Update+0x150>)
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	18d3      	adds	r3, r2, r3
 80024ee:	3304      	adds	r3, #4
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	187b      	adds	r3, r7, r1
 80024f4:	7819      	ldrb	r1, [r3, #0]
 80024f6:	4b1e      	ldr	r3, [pc, #120]	; (8002570 <PPM_Update+0x154>)
 80024f8:	0089      	lsls	r1, r1, #2
 80024fa:	58cb      	ldr	r3, [r1, r3]
 80024fc:	3b14      	subs	r3, #20
			 ((dataPPM.ch[i] >= (ch_p[i] + 20)) ||
 80024fe:	429a      	cmp	r2, r3
 8002500:	d811      	bhi.n	8002526 <PPM_Update+0x10a>
		{
 			int32_t a = dataPPM.ch[i] - ch_p[i];
 8002502:	210e      	movs	r1, #14
 8002504:	187b      	adds	r3, r7, r1
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	4a18      	ldr	r2, [pc, #96]	; (800256c <PPM_Update+0x150>)
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	18d3      	adds	r3, r2, r3
 800250e:	3304      	adds	r3, #4
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	187b      	adds	r3, r7, r1
 8002514:	7819      	ldrb	r1, [r3, #0]
 8002516:	4b16      	ldr	r3, [pc, #88]	; (8002570 <PPM_Update+0x154>)
 8002518:	0089      	lsls	r1, r1, #2
 800251a:	58cb      	ldr	r3, [r1, r3]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	607b      	str	r3, [r7, #4]
			rxHeartbeatPPM = false;
 8002520:	4b11      	ldr	r3, [pc, #68]	; (8002568 <PPM_Update+0x14c>)
 8002522:	2200      	movs	r2, #0
 8002524:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < PPM_NUM_CHANNELS; i++)
 8002526:	210e      	movs	r1, #14
 8002528:	187b      	adds	r3, r7, r1
 800252a:	781a      	ldrb	r2, [r3, #0]
 800252c:	187b      	adds	r3, r7, r1
 800252e:	3201      	adds	r2, #1
 8002530:	701a      	strb	r2, [r3, #0]
 8002532:	230e      	movs	r3, #14
 8002534:	18fb      	adds	r3, r7, r3
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b07      	cmp	r3, #7
 800253a:	d9b8      	bls.n	80024ae <PPM_Update+0x92>
		}
	}

	// Check for Input Failsafe
	if (!dataPPM.inputLost && PPM_TIMEOUT <= (now - prev)) {
 800253c:	4b0b      	ldr	r3, [pc, #44]	; (800256c <PPM_Update+0x150>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	2201      	movs	r2, #1
 8002542:	4053      	eors	r3, r2
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00a      	beq.n	8002560 <PPM_Update+0x144>
 800254a:	4b0b      	ldr	r3, [pc, #44]	; (8002578 <PPM_Update+0x15c>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68ba      	ldr	r2, [r7, #8]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b3b      	cmp	r3, #59	; 0x3b
 8002554:	d904      	bls.n	8002560 <PPM_Update+0x144>
		dataPPM.inputLost = true;
 8002556:	4b05      	ldr	r3, [pc, #20]	; (800256c <PPM_Update+0x150>)
 8002558:	2201      	movs	r2, #1
 800255a:	701a      	strb	r2, [r3, #0]
		PPM_memset();
 800255c:	f000 f84c 	bl	80025f8 <PPM_memset>
	}
}
 8002560:	46c0      	nop			; (mov r8, r8)
 8002562:	46bd      	mov	sp, r7
 8002564:	b004      	add	sp, #16
 8002566:	bdb0      	pop	{r4, r5, r7, pc}
 8002568:	20000380 	.word	0x20000380
 800256c:	20000384 	.word	0x20000384
 8002570:	200003a8 	.word	0x200003a8
 8002574:	20000370 	.word	0x20000370
 8002578:	200003c8 	.word	0x200003c8

0800257c <PPM_GetDataPtr>:

PPM_Data* PPM_GetDataPtr (void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
	return &dataPPM;
 8002580:	4b01      	ldr	r3, [pc, #4]	; (8002588 <PPM_GetDataPtr+0xc>)
}
 8002582:	0018      	movs	r0, r3
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	20000384 	.word	0x20000384

0800258c <PPM_Truncate>:
/*
 * PRIVATE FUNCTIONS
 */

uint32_t PPM_Truncate (uint32_t r)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
	uint32_t retVal = 0;
 8002594:	2300      	movs	r3, #0
 8002596:	60fb      	str	r3, [r7, #12]

	if (r == 0) {
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d102      	bne.n	80025a4 <PPM_Truncate+0x18>
		retVal = 0;
 800259e:	2300      	movs	r3, #0
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	e022      	b.n	80025ea <PPM_Truncate+0x5e>
	} else if (r < (PPM_MIN - PPM_THRESHOLD)) {
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	23e1      	movs	r3, #225	; 0xe1
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d202      	bcs.n	80025b4 <PPM_Truncate+0x28>
		retVal = 0;
 80025ae:	2300      	movs	r3, #0
 80025b0:	60fb      	str	r3, [r7, #12]
 80025b2:	e01a      	b.n	80025ea <PPM_Truncate+0x5e>
	} else if (r < PPM_MIN) {
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	23fa      	movs	r3, #250	; 0xfa
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d203      	bcs.n	80025c6 <PPM_Truncate+0x3a>
		retVal = PPM_MIN;
 80025be:	23fa      	movs	r3, #250	; 0xfa
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	e011      	b.n	80025ea <PPM_Truncate+0x5e>
	} else if (r <= PPM_MAX) {
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	23fa      	movs	r3, #250	; 0xfa
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d802      	bhi.n	80025d6 <PPM_Truncate+0x4a>
		retVal = r;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	e009      	b.n	80025ea <PPM_Truncate+0x5e>
	} else if (r < (PPM_MAX + PPM_THRESHOLD))	{
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a06      	ldr	r2, [pc, #24]	; (80025f4 <PPM_Truncate+0x68>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d803      	bhi.n	80025e6 <PPM_Truncate+0x5a>
		retVal = PPM_MAX;
 80025de:	23fa      	movs	r3, #250	; 0xfa
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	e001      	b.n	80025ea <PPM_Truncate+0x5e>
	} else {
		retVal = 0;
 80025e6:	2300      	movs	r3, #0
 80025e8:	60fb      	str	r3, [r7, #12]
	}

	return retVal;
 80025ea:	68fb      	ldr	r3, [r7, #12]
}
 80025ec:	0018      	movs	r0, r3
 80025ee:	46bd      	mov	sp, r7
 80025f0:	b004      	add	sp, #16
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	00000833 	.word	0x00000833

080025f8 <PPM_memset>:

void PPM_memset (void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < PPM_NUM_CHANNELS; i++)
 80025fe:	1dfb      	adds	r3, r7, #7
 8002600:	2200      	movs	r2, #0
 8002602:	701a      	strb	r2, [r3, #0]
 8002604:	e00a      	b.n	800261c <PPM_memset+0x24>
	{
		rxPPM[i] = 0;
 8002606:	1dfb      	adds	r3, r7, #7
 8002608:	781a      	ldrb	r2, [r3, #0]
 800260a:	4b09      	ldr	r3, [pc, #36]	; (8002630 <PPM_memset+0x38>)
 800260c:	0052      	lsls	r2, r2, #1
 800260e:	2100      	movs	r1, #0
 8002610:	52d1      	strh	r1, [r2, r3]
	for (uint8_t i = 0; i < PPM_NUM_CHANNELS; i++)
 8002612:	1dfb      	adds	r3, r7, #7
 8002614:	781a      	ldrb	r2, [r3, #0]
 8002616:	1dfb      	adds	r3, r7, #7
 8002618:	3201      	adds	r2, #1
 800261a:	701a      	strb	r2, [r3, #0]
 800261c:	1dfb      	adds	r3, r7, #7
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	2b07      	cmp	r3, #7
 8002622:	d9f0      	bls.n	8002606 <PPM_memset+0xe>
	}
}
 8002624:	46c0      	nop			; (mov r8, r8)
 8002626:	46c0      	nop			; (mov r8, r8)
 8002628:	46bd      	mov	sp, r7
 800262a:	b002      	add	sp, #8
 800262c:	bd80      	pop	{r7, pc}
 800262e:	46c0      	nop			; (mov r8, r8)
 8002630:	20000370 	.word	0x20000370

08002634 <PPM_IRQ>:
/*
 * INTERRUPT ROUTINES
 */

void PPM_IRQ (void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
	uint32_t now = TIM_Read(PPM_TIM);	// Current IRQ Loop Time
 800263a:	4b25      	ldr	r3, [pc, #148]	; (80026d0 <PPM_IRQ+0x9c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	0018      	movs	r0, r3
 8002640:	f7ff fe8e 	bl	8002360 <TIM_Read>
 8002644:	0003      	movs	r3, r0
 8002646:	607b      	str	r3, [r7, #4]
	uint32_t pulse = 0;					// Pulse Width
 8002648:	2300      	movs	r3, #0
 800264a:	603b      	str	r3, [r7, #0]
	static uint32_t tick = 0;			// Previous IRQ Loop Time
	static uint8_t ch = 0;				// Channel Index
	static bool sync = false;			// Sync Flag to Indicate Start of Transmission

	// Calculate the Pulse Width
	pulse = now - tick;
 800264c:	4b21      	ldr	r3, [pc, #132]	; (80026d4 <PPM_IRQ+0xa0>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	603b      	str	r3, [r7, #0]

	// Check for Channel 1 Synchronization
	if (pulse > PPM_EOF_TIME)
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	23fa      	movs	r3, #250	; 0xfa
 800265a:	011b      	lsls	r3, r3, #4
 800265c:	429a      	cmp	r2, r3
 800265e:	d906      	bls.n	800266e <PPM_IRQ+0x3a>
	{
		ch = 0;
 8002660:	4b1d      	ldr	r3, [pc, #116]	; (80026d8 <PPM_IRQ+0xa4>)
 8002662:	2200      	movs	r2, #0
 8002664:	701a      	strb	r2, [r3, #0]
		sync = true;
 8002666:	4b1d      	ldr	r3, [pc, #116]	; (80026dc <PPM_IRQ+0xa8>)
 8002668:	2201      	movs	r2, #1
 800266a:	701a      	strb	r2, [r3, #0]
 800266c:	e028      	b.n	80026c0 <PPM_IRQ+0x8c>
	}
	// Assign Pulse to Channel
	else if (sync)
 800266e:	4b1b      	ldr	r3, [pc, #108]	; (80026dc <PPM_IRQ+0xa8>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d024      	beq.n	80026c0 <PPM_IRQ+0x8c>
	{
		// Check for valid pulse
		if (pulse <= (PPM_MAX + PPM_THRESHOLD) && pulse >= (PPM_MIN - PPM_THRESHOLD)) {
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	4a19      	ldr	r2, [pc, #100]	; (80026e0 <PPM_IRQ+0xac>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d813      	bhi.n	80026a6 <PPM_IRQ+0x72>
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	23e1      	movs	r3, #225	; 0xe1
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	429a      	cmp	r2, r3
 8002686:	d30e      	bcc.n	80026a6 <PPM_IRQ+0x72>
			rxPPM[ch] = pulse;
 8002688:	4b13      	ldr	r3, [pc, #76]	; (80026d8 <PPM_IRQ+0xa4>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	001a      	movs	r2, r3
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	b299      	uxth	r1, r3
 8002692:	4b14      	ldr	r3, [pc, #80]	; (80026e4 <PPM_IRQ+0xb0>)
 8002694:	0052      	lsls	r2, r2, #1
 8002696:	52d1      	strh	r1, [r2, r3]
			ch += 1;
 8002698:	4b0f      	ldr	r3, [pc, #60]	; (80026d8 <PPM_IRQ+0xa4>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	3301      	adds	r3, #1
 800269e:	b2da      	uxtb	r2, r3
 80026a0:	4b0d      	ldr	r3, [pc, #52]	; (80026d8 <PPM_IRQ+0xa4>)
 80026a2:	701a      	strb	r2, [r3, #0]
 80026a4:	e002      	b.n	80026ac <PPM_IRQ+0x78>
		} else { // Pulse train is corrupted. Abort transmission.
			sync = false;
 80026a6:	4b0d      	ldr	r3, [pc, #52]	; (80026dc <PPM_IRQ+0xa8>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	701a      	strb	r2, [r3, #0]
		}
		// If on Last Channel
		if (ch >= PPM_NUM_CHANNELS)
 80026ac:	4b0a      	ldr	r3, [pc, #40]	; (80026d8 <PPM_IRQ+0xa4>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	2b07      	cmp	r3, #7
 80026b2:	d905      	bls.n	80026c0 <PPM_IRQ+0x8c>
		{
			rxHeartbeatPPM = true;
 80026b4:	4b0c      	ldr	r3, [pc, #48]	; (80026e8 <PPM_IRQ+0xb4>)
 80026b6:	2201      	movs	r2, #1
 80026b8:	701a      	strb	r2, [r3, #0]
			sync = false;
 80026ba:	4b08      	ldr	r3, [pc, #32]	; (80026dc <PPM_IRQ+0xa8>)
 80026bc:	2200      	movs	r2, #0
 80026be:	701a      	strb	r2, [r3, #0]
		}

	}

	// Set variables for next loop
	tick = now;
 80026c0:	4b04      	ldr	r3, [pc, #16]	; (80026d4 <PPM_IRQ+0xa0>)
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	601a      	str	r2, [r3, #0]

}
 80026c6:	46c0      	nop			; (mov r8, r8)
 80026c8:	46bd      	mov	sp, r7
 80026ca:	b002      	add	sp, #8
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	46c0      	nop			; (mov r8, r8)
 80026d0:	2000003c 	.word	0x2000003c
 80026d4:	200003cc 	.word	0x200003cc
 80026d8:	200003d0 	.word	0x200003d0
 80026dc:	200003d1 	.word	0x200003d1
 80026e0:	00000834 	.word	0x00000834
 80026e4:	20000370 	.word	0x20000370
 80026e8:	20000380 	.word	0x20000380

080026ec <CORE_GetTick>:
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
	return gTicks;
 80026f0:	4b02      	ldr	r3, [pc, #8]	; (80026fc <CORE_GetTick+0x10>)
 80026f2:	681b      	ldr	r3, [r3, #0]
}
 80026f4:	0018      	movs	r0, r3
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	46c0      	nop			; (mov r8, r8)
 80026fc:	20000560 	.word	0x20000560

08002700 <GPIO_EnableInput>:
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	1dfb      	adds	r3, r7, #7
 800270c:	701a      	strb	r2, [r3, #0]
	GPIO_Init(gpio, pin, GPIO_Mode_Input | pull);
 800270e:	1dfb      	adds	r3, r7, #7
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	b29a      	uxth	r2, r3
 8002714:	68b9      	ldr	r1, [r7, #8]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	0018      	movs	r0, r3
 800271a:	f001 fc97 	bl	800404c <GPIO_Init>
}
 800271e:	46c0      	nop			; (mov r8, r8)
 8002720:	46bd      	mov	sp, r7
 8002722:	b004      	add	sp, #16
 8002724:	bd80      	pop	{r7, pc}

08002726 <GPIO_Deinit>:
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b082      	sub	sp, #8
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
 800272e:	6039      	str	r1, [r7, #0]
	GPIO_Init(gpio, pin, GPIO_Mode_Analog);
 8002730:	6839      	ldr	r1, [r7, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2203      	movs	r2, #3
 8002736:	0018      	movs	r0, r3
 8002738:	f001 fc88 	bl	800404c <GPIO_Init>
}
 800273c:	46c0      	nop			; (mov r8, r8)
 800273e:	46bd      	mov	sp, r7
 8002740:	b002      	add	sp, #8
 8002742:	bd80      	pop	{r7, pc}

08002744 <GPIO_Read>:
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
	return ((gpio->IDR & pin) > 0);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	4013      	ands	r3, r2
 8002756:	1e5a      	subs	r2, r3, #1
 8002758:	4193      	sbcs	r3, r2
 800275a:	b2db      	uxtb	r3, r3
}
 800275c:	0018      	movs	r0, r3
 800275e:	46bd      	mov	sp, r7
 8002760:	b002      	add	sp, #8
 8002762:	bd80      	pop	{r7, pc}

08002764 <TIM_Read>:
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
	return tim->Instance->CNT;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002772:	0018      	movs	r0, r3
 8002774:	46bd      	mov	sp, r7
 8002776:	b002      	add	sp, #8
 8002778:	bd80      	pop	{r7, pc}
	...

0800277c <PWM_Init>:

	return retVal;
}

void PWM_Init ()
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
	// Zero Channel Data Array
	PWM_memset();
 8002782:	f000 f97d 	bl	8002a80 <PWM_memset>
	// Assume No Radio Signal on Init
	dataPWM.inputLost = true;
 8002786:	4b30      	ldr	r3, [pc, #192]	; (8002848 <PWM_Init+0xcc>)
 8002788:	2201      	movs	r2, #1
 800278a:	701a      	strb	r2, [r3, #0]
	for (uint8_t ch = 0; ch < PWM_NUM_CHANNELS; ch++) {
 800278c:	1dfb      	adds	r3, r7, #7
 800278e:	2200      	movs	r2, #0
 8002790:	701a      	strb	r2, [r3, #0]
 8002792:	e00f      	b.n	80027b4 <PWM_Init+0x38>
		rxHeartbeatPWM[ch] = false;
 8002794:	1dfb      	adds	r3, r7, #7
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	4a2c      	ldr	r2, [pc, #176]	; (800284c <PWM_Init+0xd0>)
 800279a:	2100      	movs	r1, #0
 800279c:	54d1      	strb	r1, [r2, r3]
		dataPWM.inputLostCh[ch] = true;
 800279e:	1dfb      	adds	r3, r7, #7
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	4a29      	ldr	r2, [pc, #164]	; (8002848 <PWM_Init+0xcc>)
 80027a4:	18d3      	adds	r3, r2, r3
 80027a6:	2201      	movs	r2, #1
 80027a8:	705a      	strb	r2, [r3, #1]
	for (uint8_t ch = 0; ch < PWM_NUM_CHANNELS; ch++) {
 80027aa:	1dfb      	adds	r3, r7, #7
 80027ac:	781a      	ldrb	r2, [r3, #0]
 80027ae:	1dfb      	adds	r3, r7, #7
 80027b0:	3201      	adds	r2, #1
 80027b2:	701a      	strb	r2, [r3, #0]
 80027b4:	1dfb      	adds	r3, r7, #7
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	2b03      	cmp	r3, #3
 80027ba:	d9eb      	bls.n	8002794 <PWM_Init+0x18>
	}

	// Start Timer to Measure Pulsewidths
	TIM_Init(PWM_TIM, PWM_TIM_FREQ, PWM_TIM_RELOAD);
 80027bc:	4b24      	ldr	r3, [pc, #144]	; (8002850 <PWM_Init+0xd4>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a24      	ldr	r2, [pc, #144]	; (8002854 <PWM_Init+0xd8>)
 80027c2:	4925      	ldr	r1, [pc, #148]	; (8002858 <PWM_Init+0xdc>)
 80027c4:	0018      	movs	r0, r3
 80027c6:	f001 fe13 	bl	80043f0 <TIM_Init>
	TIM_Start(PWM_TIM);
 80027ca:	4b21      	ldr	r3, [pc, #132]	; (8002850 <PWM_Init+0xd4>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	0018      	movs	r0, r3
 80027d0:	f001 fee2 	bl	8004598 <TIM_Start>
	// Enable All Radio GPIO As Inputs
	GPIO_EnableInput(PWM_S1_GPIO, PWM_S1_PIN, GPIO_Pull_Down);
 80027d4:	2380      	movs	r3, #128	; 0x80
 80027d6:	011b      	lsls	r3, r3, #4
 80027d8:	4820      	ldr	r0, [pc, #128]	; (800285c <PWM_Init+0xe0>)
 80027da:	2220      	movs	r2, #32
 80027dc:	0019      	movs	r1, r3
 80027de:	f7ff ff8f 	bl	8002700 <GPIO_EnableInput>
	GPIO_EnableInput(PWM_S2_GPIO, PWM_S2_PIN, GPIO_Pull_Down);
 80027e2:	4b1e      	ldr	r3, [pc, #120]	; (800285c <PWM_Init+0xe0>)
 80027e4:	2220      	movs	r2, #32
 80027e6:	2104      	movs	r1, #4
 80027e8:	0018      	movs	r0, r3
 80027ea:	f7ff ff89 	bl	8002700 <GPIO_EnableInput>
	GPIO_EnableInput(PWM_S3_GPIO, PWM_S3_PIN, GPIO_Pull_Down);
 80027ee:	23a0      	movs	r3, #160	; 0xa0
 80027f0:	05db      	lsls	r3, r3, #23
 80027f2:	2220      	movs	r2, #32
 80027f4:	2140      	movs	r1, #64	; 0x40
 80027f6:	0018      	movs	r0, r3
 80027f8:	f7ff ff82 	bl	8002700 <GPIO_EnableInput>
	GPIO_EnableInput(PWM_S4_GPIO, PWM_S4_PIN, GPIO_Pull_Down);
 80027fc:	23a0      	movs	r3, #160	; 0xa0
 80027fe:	05db      	lsls	r3, r3, #23
 8002800:	2220      	movs	r2, #32
 8002802:	2120      	movs	r1, #32
 8002804:	0018      	movs	r0, r3
 8002806:	f7ff ff7b 	bl	8002700 <GPIO_EnableInput>
	// Assign IRQ For Each Input
	GPIO_OnChange(PWM_S1_GPIO, PWM_S1_PIN, GPIO_IT_Both, PWM1_IRQ);
 800280a:	4b15      	ldr	r3, [pc, #84]	; (8002860 <PWM_Init+0xe4>)
 800280c:	2280      	movs	r2, #128	; 0x80
 800280e:	0111      	lsls	r1, r2, #4
 8002810:	4812      	ldr	r0, [pc, #72]	; (800285c <PWM_Init+0xe0>)
 8002812:	2203      	movs	r2, #3
 8002814:	f001 fbee 	bl	8003ff4 <GPIO_OnChange>
	GPIO_OnChange(PWM_S2_GPIO, PWM_S2_PIN, GPIO_IT_Both, PWM2_IRQ);
 8002818:	4b12      	ldr	r3, [pc, #72]	; (8002864 <PWM_Init+0xe8>)
 800281a:	4810      	ldr	r0, [pc, #64]	; (800285c <PWM_Init+0xe0>)
 800281c:	2203      	movs	r2, #3
 800281e:	2104      	movs	r1, #4
 8002820:	f001 fbe8 	bl	8003ff4 <GPIO_OnChange>
	GPIO_OnChange(PWM_S3_GPIO, PWM_S3_PIN, GPIO_IT_Both, PWM3_IRQ);
 8002824:	4b10      	ldr	r3, [pc, #64]	; (8002868 <PWM_Init+0xec>)
 8002826:	22a0      	movs	r2, #160	; 0xa0
 8002828:	05d0      	lsls	r0, r2, #23
 800282a:	2203      	movs	r2, #3
 800282c:	2140      	movs	r1, #64	; 0x40
 800282e:	f001 fbe1 	bl	8003ff4 <GPIO_OnChange>
	GPIO_OnChange(PWM_S4_GPIO, PWM_S4_PIN, GPIO_IT_Both, PWM4_IRQ);
 8002832:	4b0e      	ldr	r3, [pc, #56]	; (800286c <PWM_Init+0xf0>)
 8002834:	22a0      	movs	r2, #160	; 0xa0
 8002836:	05d0      	lsls	r0, r2, #23
 8002838:	2203      	movs	r2, #3
 800283a:	2120      	movs	r1, #32
 800283c:	f001 fbda 	bl	8003ff4 <GPIO_OnChange>
}
 8002840:	46c0      	nop			; (mov r8, r8)
 8002842:	46bd      	mov	sp, r7
 8002844:	b002      	add	sp, #8
 8002846:	bd80      	pop	{r7, pc}
 8002848:	200003e8 	.word	0x200003e8
 800284c:	200003e4 	.word	0x200003e4
 8002850:	2000003c 	.word	0x2000003c
 8002854:	0000ffff 	.word	0x0000ffff
 8002858:	000f4240 	.word	0x000f4240
 800285c:	50000400 	.word	0x50000400
 8002860:	08002abd 	.word	0x08002abd
 8002864:	08002b69 	.word	0x08002b69
 8002868:	08002c11 	.word	0x08002c11
 800286c:	08002cb5 	.word	0x08002cb5

08002870 <PWM_Deinit>:

void PWM_Deinit (void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
	// Stop and Deinitialise the Radio Timer
	TIM_Deinit(TIM_RADIO);
 8002874:	4b1d      	ldr	r3, [pc, #116]	; (80028ec <PWM_Deinit+0x7c>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	0018      	movs	r0, r3
 800287a:	f001 feb9 	bl	80045f0 <TIM_Deinit>
	// Unassign IRQ for Each Radio Input
	GPIO_OnChange(PWM_S1_GPIO, PWM_S1_PIN, GPIO_IT_None, NULL);
 800287e:	2380      	movs	r3, #128	; 0x80
 8002880:	0119      	lsls	r1, r3, #4
 8002882:	481b      	ldr	r0, [pc, #108]	; (80028f0 <PWM_Deinit+0x80>)
 8002884:	2300      	movs	r3, #0
 8002886:	2200      	movs	r2, #0
 8002888:	f001 fbb4 	bl	8003ff4 <GPIO_OnChange>
	GPIO_OnChange(PWM_S2_GPIO, PWM_S2_PIN, GPIO_IT_None, NULL);
 800288c:	4818      	ldr	r0, [pc, #96]	; (80028f0 <PWM_Deinit+0x80>)
 800288e:	2300      	movs	r3, #0
 8002890:	2200      	movs	r2, #0
 8002892:	2104      	movs	r1, #4
 8002894:	f001 fbae 	bl	8003ff4 <GPIO_OnChange>
	GPIO_OnChange(PWM_S3_GPIO, PWM_S3_PIN, GPIO_IT_None, NULL);
 8002898:	23a0      	movs	r3, #160	; 0xa0
 800289a:	05d8      	lsls	r0, r3, #23
 800289c:	2300      	movs	r3, #0
 800289e:	2200      	movs	r2, #0
 80028a0:	2140      	movs	r1, #64	; 0x40
 80028a2:	f001 fba7 	bl	8003ff4 <GPIO_OnChange>
	GPIO_OnChange(PWM_S4_GPIO, PWM_S4_PIN, GPIO_IT_None, NULL);
 80028a6:	23a0      	movs	r3, #160	; 0xa0
 80028a8:	05d8      	lsls	r0, r3, #23
 80028aa:	2300      	movs	r3, #0
 80028ac:	2200      	movs	r2, #0
 80028ae:	2120      	movs	r1, #32
 80028b0:	f001 fba0 	bl	8003ff4 <GPIO_OnChange>
	// De-Initialise Radio Input GPIO
	GPIO_Deinit(PWM_S1_GPIO, PWM_S1_PIN);
 80028b4:	2380      	movs	r3, #128	; 0x80
 80028b6:	011b      	lsls	r3, r3, #4
 80028b8:	4a0d      	ldr	r2, [pc, #52]	; (80028f0 <PWM_Deinit+0x80>)
 80028ba:	0019      	movs	r1, r3
 80028bc:	0010      	movs	r0, r2
 80028be:	f7ff ff32 	bl	8002726 <GPIO_Deinit>
	GPIO_Deinit(PWM_S2_GPIO, PWM_S2_PIN);
 80028c2:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <PWM_Deinit+0x80>)
 80028c4:	2104      	movs	r1, #4
 80028c6:	0018      	movs	r0, r3
 80028c8:	f7ff ff2d 	bl	8002726 <GPIO_Deinit>
	GPIO_Deinit(PWM_S3_GPIO, PWM_S3_PIN);
 80028cc:	23a0      	movs	r3, #160	; 0xa0
 80028ce:	05db      	lsls	r3, r3, #23
 80028d0:	2140      	movs	r1, #64	; 0x40
 80028d2:	0018      	movs	r0, r3
 80028d4:	f7ff ff27 	bl	8002726 <GPIO_Deinit>
	GPIO_Deinit(PWM_S4_GPIO, PWM_S4_PIN);
 80028d8:	23a0      	movs	r3, #160	; 0xa0
 80028da:	05db      	lsls	r3, r3, #23
 80028dc:	2120      	movs	r1, #32
 80028de:	0018      	movs	r0, r3
 80028e0:	f7ff ff21 	bl	8002726 <GPIO_Deinit>
}
 80028e4:	46c0      	nop			; (mov r8, r8)
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	46c0      	nop			; (mov r8, r8)
 80028ec:	2000003c 	.word	0x2000003c
 80028f0:	50000400 	.word	0x50000400

080028f4 <PWM_Update>:

void PWM_Update (void)
{
 80028f4:	b590      	push	{r4, r7, lr}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
	// Init Loop Variables
	uint32_t now = CORE_GetTick();
 80028fa:	f7ff fef7 	bl	80026ec <CORE_GetTick>
 80028fe:	0003      	movs	r3, r0
 8002900:	603b      	str	r3, [r7, #0]
	static uint32_t tick[PWM_NUM_CHANNELS] = {0};

	// Iterate through each input
	for (uint8_t ch = 0; ch < PWM_NUM_CHANNELS; ch++)
 8002902:	1dfb      	adds	r3, r7, #7
 8002904:	2200      	movs	r2, #0
 8002906:	701a      	strb	r2, [r3, #0]
 8002908:	e04b      	b.n	80029a2 <PWM_Update+0xae>
	{

		if (rxHeartbeatPWM[ch])
 800290a:	1dfb      	adds	r3, r7, #7
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	4a39      	ldr	r2, [pc, #228]	; (80029f4 <PWM_Update+0x100>)
 8002910:	5cd3      	ldrb	r3, [r2, r3]
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b00      	cmp	r3, #0
 8002916:	d01f      	beq.n	8002958 <PWM_Update+0x64>
		{
			// Assign Data to Array
			dataPWM.ch[ch] = PWM_Truncate(rxPWM[ch]);
 8002918:	1dfb      	adds	r3, r7, #7
 800291a:	781a      	ldrb	r2, [r3, #0]
 800291c:	4b36      	ldr	r3, [pc, #216]	; (80029f8 <PWM_Update+0x104>)
 800291e:	0092      	lsls	r2, r2, #2
 8002920:	58d2      	ldr	r2, [r2, r3]
 8002922:	1dfb      	adds	r3, r7, #7
 8002924:	781c      	ldrb	r4, [r3, #0]
 8002926:	0010      	movs	r0, r2
 8002928:	f000 f874 	bl	8002a14 <PWM_Truncate>
 800292c:	0001      	movs	r1, r0
 800292e:	4b33      	ldr	r3, [pc, #204]	; (80029fc <PWM_Update+0x108>)
 8002930:	1ca2      	adds	r2, r4, #2
 8002932:	0092      	lsls	r2, r2, #2
 8002934:	50d1      	str	r1, [r2, r3]
			// Reset Flags
			rxHeartbeatPWM[ch] = false;
 8002936:	1dfb      	adds	r3, r7, #7
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	4a2e      	ldr	r2, [pc, #184]	; (80029f4 <PWM_Update+0x100>)
 800293c:	2100      	movs	r1, #0
 800293e:	54d1      	strb	r1, [r2, r3]
			dataPWM.inputLostCh[ch] = false;
 8002940:	1dfb      	adds	r3, r7, #7
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	4a2d      	ldr	r2, [pc, #180]	; (80029fc <PWM_Update+0x108>)
 8002946:	18d3      	adds	r3, r2, r3
 8002948:	2200      	movs	r2, #0
 800294a:	705a      	strb	r2, [r3, #1]
			tick[ch] = now;
 800294c:	1dfb      	adds	r3, r7, #7
 800294e:	781a      	ldrb	r2, [r3, #0]
 8002950:	4b2b      	ldr	r3, [pc, #172]	; (8002a00 <PWM_Update+0x10c>)
 8002952:	0092      	lsls	r2, r2, #2
 8002954:	6839      	ldr	r1, [r7, #0]
 8002956:	50d1      	str	r1, [r2, r3]
		}

		if (!dataPWM.inputLostCh[ch] && PWM_TIMEOUT <= (now - tick[ch]))
 8002958:	1dfb      	adds	r3, r7, #7
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	4a27      	ldr	r2, [pc, #156]	; (80029fc <PWM_Update+0x108>)
 800295e:	18d3      	adds	r3, r2, r3
 8002960:	785b      	ldrb	r3, [r3, #1]
 8002962:	2201      	movs	r2, #1
 8002964:	4053      	eors	r3, r2
 8002966:	b2db      	uxtb	r3, r3
 8002968:	2b00      	cmp	r3, #0
 800296a:	d015      	beq.n	8002998 <PWM_Update+0xa4>
 800296c:	1dfb      	adds	r3, r7, #7
 800296e:	781a      	ldrb	r2, [r3, #0]
 8002970:	4b23      	ldr	r3, [pc, #140]	; (8002a00 <PWM_Update+0x10c>)
 8002972:	0092      	lsls	r2, r2, #2
 8002974:	58d3      	ldr	r3, [r2, r3]
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b3b      	cmp	r3, #59	; 0x3b
 800297c:	d90c      	bls.n	8002998 <PWM_Update+0xa4>
		{
			// Trigger InputLost Flag
			dataPWM.inputLostCh[ch] = true;
 800297e:	1dfb      	adds	r3, r7, #7
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	4a1e      	ldr	r2, [pc, #120]	; (80029fc <PWM_Update+0x108>)
 8002984:	18d3      	adds	r3, r2, r3
 8002986:	2201      	movs	r2, #1
 8002988:	705a      	strb	r2, [r3, #1]
			//Reset Channel Data
			dataPWM.ch[ch] = 0;
 800298a:	1dfb      	adds	r3, r7, #7
 800298c:	781a      	ldrb	r2, [r3, #0]
 800298e:	4b1b      	ldr	r3, [pc, #108]	; (80029fc <PWM_Update+0x108>)
 8002990:	3202      	adds	r2, #2
 8002992:	0092      	lsls	r2, r2, #2
 8002994:	2100      	movs	r1, #0
 8002996:	50d1      	str	r1, [r2, r3]
	for (uint8_t ch = 0; ch < PWM_NUM_CHANNELS; ch++)
 8002998:	1dfb      	adds	r3, r7, #7
 800299a:	781a      	ldrb	r2, [r3, #0]
 800299c:	1dfb      	adds	r3, r7, #7
 800299e:	3201      	adds	r2, #1
 80029a0:	701a      	strb	r2, [r3, #0]
 80029a2:	1dfb      	adds	r3, r7, #7
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	2b03      	cmp	r3, #3
 80029a8:	d9af      	bls.n	800290a <PWM_Update+0x16>
		}
	}

	//
	for (uint8_t ch = 0; ch < PWM_NUM_CHANNELS; ch++)
 80029aa:	1dbb      	adds	r3, r7, #6
 80029ac:	2200      	movs	r2, #0
 80029ae:	701a      	strb	r2, [r3, #0]
 80029b0:	e016      	b.n	80029e0 <PWM_Update+0xec>
	{
		if (dataPWM.inputLostCh[ch]) {
 80029b2:	1dbb      	adds	r3, r7, #6
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	4a11      	ldr	r2, [pc, #68]	; (80029fc <PWM_Update+0x108>)
 80029b8:	18d3      	adds	r3, r2, r3
 80029ba:	785b      	ldrb	r3, [r3, #1]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d003      	beq.n	80029c8 <PWM_Update+0xd4>
			dataPWM.inputLost = true;
 80029c0:	4b0e      	ldr	r3, [pc, #56]	; (80029fc <PWM_Update+0x108>)
 80029c2:	2201      	movs	r2, #1
 80029c4:	701a      	strb	r2, [r3, #0]
			break;
 80029c6:	e010      	b.n	80029ea <PWM_Update+0xf6>
		}
		if (ch == (PWM_NUM_CHANNELS - 1)) {
 80029c8:	1dbb      	adds	r3, r7, #6
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	2b03      	cmp	r3, #3
 80029ce:	d102      	bne.n	80029d6 <PWM_Update+0xe2>
			dataPWM.inputLost = false;
 80029d0:	4b0a      	ldr	r3, [pc, #40]	; (80029fc <PWM_Update+0x108>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	701a      	strb	r2, [r3, #0]
	for (uint8_t ch = 0; ch < PWM_NUM_CHANNELS; ch++)
 80029d6:	1dbb      	adds	r3, r7, #6
 80029d8:	781a      	ldrb	r2, [r3, #0]
 80029da:	1dbb      	adds	r3, r7, #6
 80029dc:	3201      	adds	r2, #1
 80029de:	701a      	strb	r2, [r3, #0]
 80029e0:	1dbb      	adds	r3, r7, #6
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	2b03      	cmp	r3, #3
 80029e6:	d9e4      	bls.n	80029b2 <PWM_Update+0xbe>
		}
	}
}
 80029e8:	46c0      	nop			; (mov r8, r8)
 80029ea:	46c0      	nop			; (mov r8, r8)
 80029ec:	46bd      	mov	sp, r7
 80029ee:	b003      	add	sp, #12
 80029f0:	bd90      	pop	{r4, r7, pc}
 80029f2:	46c0      	nop			; (mov r8, r8)
 80029f4:	200003e4 	.word	0x200003e4
 80029f8:	200003d4 	.word	0x200003d4
 80029fc:	200003e8 	.word	0x200003e8
 8002a00:	20000400 	.word	0x20000400

08002a04 <PWM_GetDataPtr>:

PWM_Data* PWM_GetDataPtr (void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
	return &dataPWM;
 8002a08:	4b01      	ldr	r3, [pc, #4]	; (8002a10 <PWM_GetDataPtr+0xc>)
}
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	200003e8 	.word	0x200003e8

08002a14 <PWM_Truncate>:
/*
 * PRIVATE FUNCTIONS
 */

uint32_t PWM_Truncate (uint32_t r)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
	uint32_t retVal = 0;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	60fb      	str	r3, [r7, #12]

	if (r == 0) {
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d102      	bne.n	8002a2c <PWM_Truncate+0x18>
		retVal = 0;
 8002a26:	2300      	movs	r3, #0
 8002a28:	60fb      	str	r3, [r7, #12]
 8002a2a:	e022      	b.n	8002a72 <PWM_Truncate+0x5e>
	} else if (r < (PWM_MIN - PWM_THRESHOLD_PULSE)) {
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	23e1      	movs	r3, #225	; 0xe1
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d202      	bcs.n	8002a3c <PWM_Truncate+0x28>
		retVal = 0;
 8002a36:	2300      	movs	r3, #0
 8002a38:	60fb      	str	r3, [r7, #12]
 8002a3a:	e01a      	b.n	8002a72 <PWM_Truncate+0x5e>
	} else if (r < PWM_MIN) {
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	23fa      	movs	r3, #250	; 0xfa
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d203      	bcs.n	8002a4e <PWM_Truncate+0x3a>
		retVal = PWM_MIN;
 8002a46:	23fa      	movs	r3, #250	; 0xfa
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	60fb      	str	r3, [r7, #12]
 8002a4c:	e011      	b.n	8002a72 <PWM_Truncate+0x5e>
	} else if (r <= PWM_MAX) {
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	23fa      	movs	r3, #250	; 0xfa
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d802      	bhi.n	8002a5e <PWM_Truncate+0x4a>
		retVal = r;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	e009      	b.n	8002a72 <PWM_Truncate+0x5e>
	} else if (r < (PWM_MAX + PWM_THRESHOLD_PULSE))	{
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a06      	ldr	r2, [pc, #24]	; (8002a7c <PWM_Truncate+0x68>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d803      	bhi.n	8002a6e <PWM_Truncate+0x5a>
		retVal = PWM_MAX;
 8002a66:	23fa      	movs	r3, #250	; 0xfa
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	e001      	b.n	8002a72 <PWM_Truncate+0x5e>
	} else {
		retVal = 0;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	60fb      	str	r3, [r7, #12]
	}

	return retVal;
 8002a72:	68fb      	ldr	r3, [r7, #12]
}
 8002a74:	0018      	movs	r0, r3
 8002a76:	46bd      	mov	sp, r7
 8002a78:	b004      	add	sp, #16
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	00000833 	.word	0x00000833

08002a80 <PWM_memset>:

void PWM_memset (void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
	for (uint8_t ch = 0; ch < PWM_NUM_CHANNELS; ch++)
 8002a86:	1dfb      	adds	r3, r7, #7
 8002a88:	2200      	movs	r2, #0
 8002a8a:	701a      	strb	r2, [r3, #0]
 8002a8c:	e00a      	b.n	8002aa4 <PWM_memset+0x24>
	{
		rxPWM[ch] = 0;
 8002a8e:	1dfb      	adds	r3, r7, #7
 8002a90:	781a      	ldrb	r2, [r3, #0]
 8002a92:	4b09      	ldr	r3, [pc, #36]	; (8002ab8 <PWM_memset+0x38>)
 8002a94:	0092      	lsls	r2, r2, #2
 8002a96:	2100      	movs	r1, #0
 8002a98:	50d1      	str	r1, [r2, r3]
	for (uint8_t ch = 0; ch < PWM_NUM_CHANNELS; ch++)
 8002a9a:	1dfb      	adds	r3, r7, #7
 8002a9c:	781a      	ldrb	r2, [r3, #0]
 8002a9e:	1dfb      	adds	r3, r7, #7
 8002aa0:	3201      	adds	r2, #1
 8002aa2:	701a      	strb	r2, [r3, #0]
 8002aa4:	1dfb      	adds	r3, r7, #7
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	2b03      	cmp	r3, #3
 8002aaa:	d9f0      	bls.n	8002a8e <PWM_memset+0xe>
	}
}
 8002aac:	46c0      	nop			; (mov r8, r8)
 8002aae:	46c0      	nop			; (mov r8, r8)
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	b002      	add	sp, #8
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	46c0      	nop			; (mov r8, r8)
 8002ab8:	200003d4 	.word	0x200003d4

08002abc <PWM1_IRQ>:
/*
 * INTERRUPT ROUTINES
 */

void PWM1_IRQ (void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
	// Init Loop Variables
	uint32_t now = TIM_Read(TIM_RADIO);
 8002ac2:	4b20      	ldr	r3, [pc, #128]	; (8002b44 <PWM1_IRQ+0x88>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	f7ff fe4c 	bl	8002764 <TIM_Read>
 8002acc:	0003      	movs	r3, r0
 8002ace:	60fb      	str	r3, [r7, #12]
	uint32_t pulse = 0;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	60bb      	str	r3, [r7, #8]
	uint32_t period = 0;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	607b      	str	r3, [r7, #4]
	static uint32_t tickHigh = 0;
	static uint32_t tickLow = 0;

	if (GPIO_Read(PWM_S1_GPIO, PWM_S1_PIN))
 8002ad8:	2380      	movs	r3, #128	; 0x80
 8002ada:	011b      	lsls	r3, r3, #4
 8002adc:	4a1a      	ldr	r2, [pc, #104]	; (8002b48 <PWM1_IRQ+0x8c>)
 8002ade:	0019      	movs	r1, r3
 8002ae0:	0010      	movs	r0, r2
 8002ae2:	f7ff fe2f 	bl	8002744 <GPIO_Read>
 8002ae6:	1e03      	subs	r3, r0, #0
 8002ae8:	d003      	beq.n	8002af2 <PWM1_IRQ+0x36>
	{
		// Assign Variables for Next Loop
		tickHigh = now;
 8002aea:	4b18      	ldr	r3, [pc, #96]	; (8002b4c <PWM1_IRQ+0x90>)
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	601a      	str	r2, [r3, #0]
			rxPWM[PWM_CH1] = pulse;
			// Trigger New Data Flag
			rxHeartbeatPWM[PWM_CH1] = true;
		}
	}
}
 8002af0:	e023      	b.n	8002b3a <PWM1_IRQ+0x7e>
		period = now - tickLow;
 8002af2:	4b17      	ldr	r3, [pc, #92]	; (8002b50 <PWM1_IRQ+0x94>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	607b      	str	r3, [r7, #4]
		tickLow = now;
 8002afc:	4b14      	ldr	r3, [pc, #80]	; (8002b50 <PWM1_IRQ+0x94>)
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	601a      	str	r2, [r3, #0]
		pulse = now - tickHigh;
 8002b02:	4b12      	ldr	r3, [pc, #72]	; (8002b4c <PWM1_IRQ+0x90>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	60bb      	str	r3, [r7, #8]
		if ( pulse <= (PWM_MAX + PWM_THRESHOLD_PULSE) &&
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	4a11      	ldr	r2, [pc, #68]	; (8002b54 <PWM1_IRQ+0x98>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d812      	bhi.n	8002b3a <PWM1_IRQ+0x7e>
 8002b14:	68ba      	ldr	r2, [r7, #8]
 8002b16:	23e1      	movs	r3, #225	; 0xe1
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d30d      	bcc.n	8002b3a <PWM1_IRQ+0x7e>
			 pulse >= (PWM_MIN - PWM_THRESHOLD_PULSE) &&
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a0d      	ldr	r2, [pc, #52]	; (8002b58 <PWM1_IRQ+0x9c>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d809      	bhi.n	8002b3a <PWM1_IRQ+0x7e>
			 period <= (PWM_PERIOD_US + PWM_THRESHOLD_PERIOD) &&
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a0c      	ldr	r2, [pc, #48]	; (8002b5c <PWM1_IRQ+0xa0>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d905      	bls.n	8002b3a <PWM1_IRQ+0x7e>
			rxPWM[PWM_CH1] = pulse;
 8002b2e:	4b0c      	ldr	r3, [pc, #48]	; (8002b60 <PWM1_IRQ+0xa4>)
 8002b30:	68ba      	ldr	r2, [r7, #8]
 8002b32:	601a      	str	r2, [r3, #0]
			rxHeartbeatPWM[PWM_CH1] = true;
 8002b34:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <PWM1_IRQ+0xa8>)
 8002b36:	2201      	movs	r2, #1
 8002b38:	701a      	strb	r2, [r3, #0]
}
 8002b3a:	46c0      	nop			; (mov r8, r8)
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	b004      	add	sp, #16
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	46c0      	nop			; (mov r8, r8)
 8002b44:	2000003c 	.word	0x2000003c
 8002b48:	50000400 	.word	0x50000400
 8002b4c:	20000410 	.word	0x20000410
 8002b50:	20000414 	.word	0x20000414
 8002b54:	00000834 	.word	0x00000834
 8002b58:	00005208 	.word	0x00005208
 8002b5c:	00004a37 	.word	0x00004a37
 8002b60:	200003d4 	.word	0x200003d4
 8002b64:	200003e4 	.word	0x200003e4

08002b68 <PWM2_IRQ>:

void PWM2_IRQ (void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
	// Init Loop Variables
	uint32_t now = TIM_Read(TIM_RADIO);
 8002b6e:	4b1f      	ldr	r3, [pc, #124]	; (8002bec <PWM2_IRQ+0x84>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	0018      	movs	r0, r3
 8002b74:	f7ff fdf6 	bl	8002764 <TIM_Read>
 8002b78:	0003      	movs	r3, r0
 8002b7a:	60fb      	str	r3, [r7, #12]
	uint32_t pulse = 0;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	60bb      	str	r3, [r7, #8]
	uint32_t period = 0;
 8002b80:	2300      	movs	r3, #0
 8002b82:	607b      	str	r3, [r7, #4]
	static uint32_t tickHigh = 0;
	static uint32_t tickLow = 0;

	if (GPIO_Read(PWM_S2_GPIO, PWM_S2_PIN))
 8002b84:	4b1a      	ldr	r3, [pc, #104]	; (8002bf0 <PWM2_IRQ+0x88>)
 8002b86:	2104      	movs	r1, #4
 8002b88:	0018      	movs	r0, r3
 8002b8a:	f7ff fddb 	bl	8002744 <GPIO_Read>
 8002b8e:	1e03      	subs	r3, r0, #0
 8002b90:	d003      	beq.n	8002b9a <PWM2_IRQ+0x32>
	{
		// Assign Variables for Next Loop
		tickHigh = now;
 8002b92:	4b18      	ldr	r3, [pc, #96]	; (8002bf4 <PWM2_IRQ+0x8c>)
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	601a      	str	r2, [r3, #0]
			rxPWM[PWM_CH2] = pulse;
			// Trigger New Data Flag
			rxHeartbeatPWM[PWM_CH2] = true;
		}
	}
}
 8002b98:	e023      	b.n	8002be2 <PWM2_IRQ+0x7a>
		period = now - tickLow;
 8002b9a:	4b17      	ldr	r3, [pc, #92]	; (8002bf8 <PWM2_IRQ+0x90>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	607b      	str	r3, [r7, #4]
		tickLow = now;
 8002ba4:	4b14      	ldr	r3, [pc, #80]	; (8002bf8 <PWM2_IRQ+0x90>)
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	601a      	str	r2, [r3, #0]
		pulse = now - tickHigh;
 8002baa:	4b12      	ldr	r3, [pc, #72]	; (8002bf4 <PWM2_IRQ+0x8c>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	60bb      	str	r3, [r7, #8]
		if ( pulse <= (PWM_MAX + PWM_THRESHOLD_PULSE) &&
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	4a11      	ldr	r2, [pc, #68]	; (8002bfc <PWM2_IRQ+0x94>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d812      	bhi.n	8002be2 <PWM2_IRQ+0x7a>
 8002bbc:	68ba      	ldr	r2, [r7, #8]
 8002bbe:	23e1      	movs	r3, #225	; 0xe1
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d30d      	bcc.n	8002be2 <PWM2_IRQ+0x7a>
			 pulse >= (PWM_MIN - PWM_THRESHOLD_PULSE) &&
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a0d      	ldr	r2, [pc, #52]	; (8002c00 <PWM2_IRQ+0x98>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d809      	bhi.n	8002be2 <PWM2_IRQ+0x7a>
			 period <= (PWM_PERIOD_US + PWM_THRESHOLD_PERIOD) &&
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a0c      	ldr	r2, [pc, #48]	; (8002c04 <PWM2_IRQ+0x9c>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d905      	bls.n	8002be2 <PWM2_IRQ+0x7a>
			rxPWM[PWM_CH2] = pulse;
 8002bd6:	4b0c      	ldr	r3, [pc, #48]	; (8002c08 <PWM2_IRQ+0xa0>)
 8002bd8:	68ba      	ldr	r2, [r7, #8]
 8002bda:	605a      	str	r2, [r3, #4]
			rxHeartbeatPWM[PWM_CH2] = true;
 8002bdc:	4b0b      	ldr	r3, [pc, #44]	; (8002c0c <PWM2_IRQ+0xa4>)
 8002bde:	2201      	movs	r2, #1
 8002be0:	705a      	strb	r2, [r3, #1]
}
 8002be2:	46c0      	nop			; (mov r8, r8)
 8002be4:	46bd      	mov	sp, r7
 8002be6:	b004      	add	sp, #16
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	46c0      	nop			; (mov r8, r8)
 8002bec:	2000003c 	.word	0x2000003c
 8002bf0:	50000400 	.word	0x50000400
 8002bf4:	20000418 	.word	0x20000418
 8002bf8:	2000041c 	.word	0x2000041c
 8002bfc:	00000834 	.word	0x00000834
 8002c00:	00005208 	.word	0x00005208
 8002c04:	00004a37 	.word	0x00004a37
 8002c08:	200003d4 	.word	0x200003d4
 8002c0c:	200003e4 	.word	0x200003e4

08002c10 <PWM3_IRQ>:

void PWM3_IRQ (void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
	// Init Loop Variables
	uint32_t now = TIM_Read(TIM_RADIO);
 8002c16:	4b1f      	ldr	r3, [pc, #124]	; (8002c94 <PWM3_IRQ+0x84>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	0018      	movs	r0, r3
 8002c1c:	f7ff fda2 	bl	8002764 <TIM_Read>
 8002c20:	0003      	movs	r3, r0
 8002c22:	60fb      	str	r3, [r7, #12]
	uint32_t pulse = 0;
 8002c24:	2300      	movs	r3, #0
 8002c26:	60bb      	str	r3, [r7, #8]
	uint32_t period = 0;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	607b      	str	r3, [r7, #4]
	static uint32_t tickHigh = 0;
	static uint32_t tickLow = 0;

	if (GPIO_Read(PWM_S3_GPIO, PWM_S3_PIN))
 8002c2c:	23a0      	movs	r3, #160	; 0xa0
 8002c2e:	05db      	lsls	r3, r3, #23
 8002c30:	2140      	movs	r1, #64	; 0x40
 8002c32:	0018      	movs	r0, r3
 8002c34:	f7ff fd86 	bl	8002744 <GPIO_Read>
 8002c38:	1e03      	subs	r3, r0, #0
 8002c3a:	d003      	beq.n	8002c44 <PWM3_IRQ+0x34>
	{
		// Assign Variables for Next Loop
		tickHigh = now;
 8002c3c:	4b16      	ldr	r3, [pc, #88]	; (8002c98 <PWM3_IRQ+0x88>)
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	601a      	str	r2, [r3, #0]
			rxPWM[PWM_CH3] = pulse;
			// Trigger New Data Flag
			rxHeartbeatPWM[PWM_CH3] = true;
		}
	}
}
 8002c42:	e023      	b.n	8002c8c <PWM3_IRQ+0x7c>
		period = now - tickLow;
 8002c44:	4b15      	ldr	r3, [pc, #84]	; (8002c9c <PWM3_IRQ+0x8c>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	607b      	str	r3, [r7, #4]
		tickLow = now;
 8002c4e:	4b13      	ldr	r3, [pc, #76]	; (8002c9c <PWM3_IRQ+0x8c>)
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	601a      	str	r2, [r3, #0]
		pulse = now - tickHigh;
 8002c54:	4b10      	ldr	r3, [pc, #64]	; (8002c98 <PWM3_IRQ+0x88>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	60bb      	str	r3, [r7, #8]
		if ( pulse <= (PWM_MAX + PWM_THRESHOLD_PULSE) &&
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	4a0f      	ldr	r2, [pc, #60]	; (8002ca0 <PWM3_IRQ+0x90>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d812      	bhi.n	8002c8c <PWM3_IRQ+0x7c>
 8002c66:	68ba      	ldr	r2, [r7, #8]
 8002c68:	23e1      	movs	r3, #225	; 0xe1
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d30d      	bcc.n	8002c8c <PWM3_IRQ+0x7c>
			 pulse >= (PWM_MIN - PWM_THRESHOLD_PULSE) &&
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a0c      	ldr	r2, [pc, #48]	; (8002ca4 <PWM3_IRQ+0x94>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d809      	bhi.n	8002c8c <PWM3_IRQ+0x7c>
			 period <= (PWM_PERIOD_US + PWM_THRESHOLD_PERIOD) &&
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a0b      	ldr	r2, [pc, #44]	; (8002ca8 <PWM3_IRQ+0x98>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d905      	bls.n	8002c8c <PWM3_IRQ+0x7c>
			rxPWM[PWM_CH3] = pulse;
 8002c80:	4b0a      	ldr	r3, [pc, #40]	; (8002cac <PWM3_IRQ+0x9c>)
 8002c82:	68ba      	ldr	r2, [r7, #8]
 8002c84:	609a      	str	r2, [r3, #8]
			rxHeartbeatPWM[PWM_CH3] = true;
 8002c86:	4b0a      	ldr	r3, [pc, #40]	; (8002cb0 <PWM3_IRQ+0xa0>)
 8002c88:	2201      	movs	r2, #1
 8002c8a:	709a      	strb	r2, [r3, #2]
}
 8002c8c:	46c0      	nop			; (mov r8, r8)
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	b004      	add	sp, #16
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	2000003c 	.word	0x2000003c
 8002c98:	20000420 	.word	0x20000420
 8002c9c:	20000424 	.word	0x20000424
 8002ca0:	00000834 	.word	0x00000834
 8002ca4:	00005208 	.word	0x00005208
 8002ca8:	00004a37 	.word	0x00004a37
 8002cac:	200003d4 	.word	0x200003d4
 8002cb0:	200003e4 	.word	0x200003e4

08002cb4 <PWM4_IRQ>:

void PWM4_IRQ (void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
	// Init Loop Variables
	uint32_t now = TIM_Read(TIM_RADIO);
 8002cba:	4b1f      	ldr	r3, [pc, #124]	; (8002d38 <PWM4_IRQ+0x84>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	0018      	movs	r0, r3
 8002cc0:	f7ff fd50 	bl	8002764 <TIM_Read>
 8002cc4:	0003      	movs	r3, r0
 8002cc6:	60fb      	str	r3, [r7, #12]
	uint32_t pulse = 0;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	60bb      	str	r3, [r7, #8]
	uint32_t period = 0;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	607b      	str	r3, [r7, #4]
	static uint32_t tickHigh = 0;
	static uint32_t tickLow = 0;

	if (GPIO_Read(PWM_S4_GPIO, PWM_S4_PIN))
 8002cd0:	23a0      	movs	r3, #160	; 0xa0
 8002cd2:	05db      	lsls	r3, r3, #23
 8002cd4:	2120      	movs	r1, #32
 8002cd6:	0018      	movs	r0, r3
 8002cd8:	f7ff fd34 	bl	8002744 <GPIO_Read>
 8002cdc:	1e03      	subs	r3, r0, #0
 8002cde:	d003      	beq.n	8002ce8 <PWM4_IRQ+0x34>
	{
		// Assign Variables for Next Loop
		tickHigh = now;
 8002ce0:	4b16      	ldr	r3, [pc, #88]	; (8002d3c <PWM4_IRQ+0x88>)
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	601a      	str	r2, [r3, #0]
			rxPWM[PWM_CH4] = pulse;
			// Trigger New Data Flag
			rxHeartbeatPWM[PWM_CH4] = true;
		}
	}
}
 8002ce6:	e023      	b.n	8002d30 <PWM4_IRQ+0x7c>
		period = now - tickLow;
 8002ce8:	4b15      	ldr	r3, [pc, #84]	; (8002d40 <PWM4_IRQ+0x8c>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	607b      	str	r3, [r7, #4]
		tickLow = now;
 8002cf2:	4b13      	ldr	r3, [pc, #76]	; (8002d40 <PWM4_IRQ+0x8c>)
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	601a      	str	r2, [r3, #0]
		pulse = now - tickHigh;
 8002cf8:	4b10      	ldr	r3, [pc, #64]	; (8002d3c <PWM4_IRQ+0x88>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	60bb      	str	r3, [r7, #8]
		if ( pulse <= (PWM_MAX + PWM_THRESHOLD_PULSE) &&
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	4a0f      	ldr	r2, [pc, #60]	; (8002d44 <PWM4_IRQ+0x90>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d812      	bhi.n	8002d30 <PWM4_IRQ+0x7c>
 8002d0a:	68ba      	ldr	r2, [r7, #8]
 8002d0c:	23e1      	movs	r3, #225	; 0xe1
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d30d      	bcc.n	8002d30 <PWM4_IRQ+0x7c>
			 pulse >= (PWM_MIN - PWM_THRESHOLD_PULSE) &&
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a0c      	ldr	r2, [pc, #48]	; (8002d48 <PWM4_IRQ+0x94>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d809      	bhi.n	8002d30 <PWM4_IRQ+0x7c>
			 period <= (PWM_PERIOD_US + PWM_THRESHOLD_PERIOD) &&
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a0b      	ldr	r2, [pc, #44]	; (8002d4c <PWM4_IRQ+0x98>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d905      	bls.n	8002d30 <PWM4_IRQ+0x7c>
			rxPWM[PWM_CH4] = pulse;
 8002d24:	4b0a      	ldr	r3, [pc, #40]	; (8002d50 <PWM4_IRQ+0x9c>)
 8002d26:	68ba      	ldr	r2, [r7, #8]
 8002d28:	60da      	str	r2, [r3, #12]
			rxHeartbeatPWM[PWM_CH4] = true;
 8002d2a:	4b0a      	ldr	r3, [pc, #40]	; (8002d54 <PWM4_IRQ+0xa0>)
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	70da      	strb	r2, [r3, #3]
}
 8002d30:	46c0      	nop			; (mov r8, r8)
 8002d32:	46bd      	mov	sp, r7
 8002d34:	b004      	add	sp, #16
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	2000003c 	.word	0x2000003c
 8002d3c:	20000428 	.word	0x20000428
 8002d40:	2000042c 	.word	0x2000042c
 8002d44:	00000834 	.word	0x00000834
 8002d48:	00005208 	.word	0x00005208
 8002d4c:	00004a37 	.word	0x00004a37
 8002d50:	200003d4 	.word	0x200003d4
 8002d54:	200003e4 	.word	0x200003e4

08002d58 <CORE_GetTick>:
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
	return gTicks;
 8002d5c:	4b02      	ldr	r3, [pc, #8]	; (8002d68 <CORE_GetTick+0x10>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
}
 8002d60:	0018      	movs	r0, r3
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	46c0      	nop			; (mov r8, r8)
 8002d68:	20000560 	.word	0x20000560

08002d6c <RADIO_DetInit>:
 * RETURNS: TRUE	- IF A RADIO IS DETECTED AND THE PROTOCOL IS DIFFERENT TO CURRENT CONFIG
 * 					  NOTE: RADIO_Properties STRUCT WILL BE UPDATED WITH NEW RADIO CONFIG
 * 			FALSE	- NO RADIO IS DETECTED OR ITS THE SAME AS CURRENT CONFIG
 */
bool RADIO_DetInit (RADIO_Properties * r)
{
 8002d6c:	b5b0      	push	{r4, r5, r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
	// INIT FUNCTION VARIABLES
	bool retVal = false;
 8002d74:	2517      	movs	r5, #23
 8002d76:	197b      	adds	r3, r7, r5
 8002d78:	2200      	movs	r2, #0
 8002d7a:	701a      	strb	r2, [r3, #0]
	RADIO_Properties detProperties = {SBUS_BAUD, PWM};
 8002d7c:	240c      	movs	r4, #12
 8002d7e:	193b      	adds	r3, r7, r4
 8002d80:	4a4a      	ldr	r2, [pc, #296]	; (8002eac <RADIO_DetInit+0x140>)
 8002d82:	ca03      	ldmia	r2!, {r0, r1}
 8002d84:	c303      	stmia	r3!, {r0, r1}

	// DEINIT ALL PROTOCOLS IRRELEVANT OF CURRENT CONFIG, JUST TO BE SAFE
	PWM_Deinit();
 8002d86:	f7ff fd73 	bl	8002870 <PWM_Deinit>
	PPM_Deinit();
 8002d8a:	f7ff fb2b 	bl	80023e4 <PPM_Deinit>
	SBUS_Deinit();
 8002d8e:	f000 fb1d 	bl	80033cc <SBUS_Deinit>
	IBUS_Deinit();
 8002d92:	f7ff f91f 	bl	8001fd4 <IBUS_Deinit>

	// TEST ALL PROTOCOLS
	while (1)
	{
		// TEST FOR PPM RADIO
		detProperties.Protocol = PPM;
 8002d96:	193b      	adds	r3, r7, r4
 8002d98:	2200      	movs	r2, #0
 8002d9a:	711a      	strb	r2, [r3, #4]
		RADIO_Init(&detProperties);
 8002d9c:	193b      	adds	r3, r7, r4
 8002d9e:	0018      	movs	r0, r3
 8002da0:	f000 f88a 	bl	8002eb8 <RADIO_Init>
		if ( SYSTEM_DetectRadio() )
 8002da4:	f000 f9b6 	bl	8003114 <SYSTEM_DetectRadio>
 8002da8:	1e03      	subs	r3, r0, #0
 8002daa:	d006      	beq.n	8002dba <RADIO_DetInit+0x4e>
		{
			r->Protocol = PPM;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	711a      	strb	r2, [r3, #4]
			retVal = true;
 8002db2:	197b      	adds	r3, r7, r5
 8002db4:	2201      	movs	r2, #1
 8002db6:	701a      	strb	r2, [r3, #0]
			break;
 8002db8:	e06e      	b.n	8002e98 <RADIO_DetInit+0x12c>
		}
		PPM_Deinit();
 8002dba:	f7ff fb13 	bl	80023e4 <PPM_Deinit>

		// TEST FOR SBUS RADIO AT STANDARD BAUD
		detProperties.Protocol = SBUS;
 8002dbe:	210c      	movs	r1, #12
 8002dc0:	187b      	adds	r3, r7, r1
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	711a      	strb	r2, [r3, #4]
		detProperties.Baud_SBUS = SBUS_BAUD;
 8002dc6:	187b      	adds	r3, r7, r1
 8002dc8:	4a39      	ldr	r2, [pc, #228]	; (8002eb0 <RADIO_DetInit+0x144>)
 8002dca:	601a      	str	r2, [r3, #0]
		RADIO_Init(&detProperties);
 8002dcc:	187b      	adds	r3, r7, r1
 8002dce:	0018      	movs	r0, r3
 8002dd0:	f000 f872 	bl	8002eb8 <RADIO_Init>
		if ( SYSTEM_DetectRadio() )
 8002dd4:	f000 f99e 	bl	8003114 <SYSTEM_DetectRadio>
 8002dd8:	1e03      	subs	r3, r0, #0
 8002dda:	d00a      	beq.n	8002df2 <RADIO_DetInit+0x86>
		{
			r->Protocol = SBUS;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	711a      	strb	r2, [r3, #4]
			r->Baud_SBUS = SBUS_BAUD;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a32      	ldr	r2, [pc, #200]	; (8002eb0 <RADIO_DetInit+0x144>)
 8002de6:	601a      	str	r2, [r3, #0]
			retVal = true;
 8002de8:	2317      	movs	r3, #23
 8002dea:	18fb      	adds	r3, r7, r3
 8002dec:	2201      	movs	r2, #1
 8002dee:	701a      	strb	r2, [r3, #0]
			break;
 8002df0:	e052      	b.n	8002e98 <RADIO_DetInit+0x12c>
		}
		SBUS_Deinit();
 8002df2:	f000 faeb 	bl	80033cc <SBUS_Deinit>

		// TEST FOR SBUS RADIO AT FAST BAUD
		detProperties.Protocol = SBUS;
 8002df6:	210c      	movs	r1, #12
 8002df8:	187b      	adds	r3, r7, r1
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	711a      	strb	r2, [r3, #4]
		detProperties.Baud_SBUS = SBUS_BAUD_FAST;
 8002dfe:	187b      	adds	r3, r7, r1
 8002e00:	4a2c      	ldr	r2, [pc, #176]	; (8002eb4 <RADIO_DetInit+0x148>)
 8002e02:	601a      	str	r2, [r3, #0]
		RADIO_Init(&detProperties);
 8002e04:	187b      	adds	r3, r7, r1
 8002e06:	0018      	movs	r0, r3
 8002e08:	f000 f856 	bl	8002eb8 <RADIO_Init>
		if ( SYSTEM_DetectRadio() )
 8002e0c:	f000 f982 	bl	8003114 <SYSTEM_DetectRadio>
 8002e10:	1e03      	subs	r3, r0, #0
 8002e12:	d00a      	beq.n	8002e2a <RADIO_DetInit+0xbe>
		{
			r->Protocol = SBUS;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	711a      	strb	r2, [r3, #4]
			r->Baud_SBUS = SBUS_BAUD_FAST;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a25      	ldr	r2, [pc, #148]	; (8002eb4 <RADIO_DetInit+0x148>)
 8002e1e:	601a      	str	r2, [r3, #0]
			retVal = true;
 8002e20:	2317      	movs	r3, #23
 8002e22:	18fb      	adds	r3, r7, r3
 8002e24:	2201      	movs	r2, #1
 8002e26:	701a      	strb	r2, [r3, #0]
			break;
 8002e28:	e036      	b.n	8002e98 <RADIO_DetInit+0x12c>
		}
		SBUS_Deinit();
 8002e2a:	f000 facf 	bl	80033cc <SBUS_Deinit>

		// TEST FOR IBUS RADIO
		detProperties.Protocol = IBUS;
 8002e2e:	210c      	movs	r1, #12
 8002e30:	187b      	adds	r3, r7, r1
 8002e32:	2202      	movs	r2, #2
 8002e34:	711a      	strb	r2, [r3, #4]
		RADIO_Init(&detProperties);
 8002e36:	187b      	adds	r3, r7, r1
 8002e38:	0018      	movs	r0, r3
 8002e3a:	f000 f83d 	bl	8002eb8 <RADIO_Init>
		if ( SYSTEM_DetectRadio() )
 8002e3e:	f000 f969 	bl	8003114 <SYSTEM_DetectRadio>
 8002e42:	1e03      	subs	r3, r0, #0
 8002e44:	d007      	beq.n	8002e56 <RADIO_DetInit+0xea>
		{
			r->Protocol = IBUS;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2202      	movs	r2, #2
 8002e4a:	711a      	strb	r2, [r3, #4]
			retVal = true;
 8002e4c:	2317      	movs	r3, #23
 8002e4e:	18fb      	adds	r3, r7, r3
 8002e50:	2201      	movs	r2, #1
 8002e52:	701a      	strb	r2, [r3, #0]
			break;
 8002e54:	e020      	b.n	8002e98 <RADIO_DetInit+0x12c>
		}
		IBUS_Deinit();
 8002e56:	f7ff f8bd 	bl	8001fd4 <IBUS_Deinit>

		// TEST FOR PWM RADIO
		detProperties.Protocol = PWM;
 8002e5a:	210c      	movs	r1, #12
 8002e5c:	187b      	adds	r3, r7, r1
 8002e5e:	2203      	movs	r2, #3
 8002e60:	711a      	strb	r2, [r3, #4]
		RADIO_Init(&detProperties);
 8002e62:	187b      	adds	r3, r7, r1
 8002e64:	0018      	movs	r0, r3
 8002e66:	f000 f827 	bl	8002eb8 <RADIO_Init>
		if ( SYSTEM_DetectRadio() )
 8002e6a:	f000 f953 	bl	8003114 <SYSTEM_DetectRadio>
 8002e6e:	1e03      	subs	r3, r0, #0
 8002e70:	d007      	beq.n	8002e82 <RADIO_DetInit+0x116>
		{
			r->Protocol = PWM;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2203      	movs	r2, #3
 8002e76:	711a      	strb	r2, [r3, #4]
			retVal = true;
 8002e78:	2317      	movs	r3, #23
 8002e7a:	18fb      	adds	r3, r7, r3
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	701a      	strb	r2, [r3, #0]
			break;
 8002e80:	e00a      	b.n	8002e98 <RADIO_DetInit+0x12c>
		}
		PWM_Deinit();
 8002e82:	f7ff fcf5 	bl	8002870 <PWM_Deinit>

		// NO NEW RADIO DETECTED, REINIT INITIAL CONFIG
		RADIO_Init(r);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	0018      	movs	r0, r3
 8002e8a:	f000 f815 	bl	8002eb8 <RADIO_Init>
		retVal = false;
 8002e8e:	2317      	movs	r3, #23
 8002e90:	18fb      	adds	r3, r7, r3
 8002e92:	2200      	movs	r2, #0
 8002e94:	701a      	strb	r2, [r3, #0]
		break;
 8002e96:	46c0      	nop			; (mov r8, r8)
//			retVal = true;
//		}
//	}

	// RUN A RADIO DATA UPDATE BEFORE PROGRESSING
	RADIO_Update();
 8002e98:	f000 f86a 	bl	8002f70 <RADIO_Update>

	return retVal;
 8002e9c:	2317      	movs	r3, #23
 8002e9e:	18fb      	adds	r3, r7, r3
 8002ea0:	781b      	ldrb	r3, [r3, #0]
}
 8002ea2:	0018      	movs	r0, r3
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	b006      	add	sp, #24
 8002ea8:	bdb0      	pop	{r4, r5, r7, pc}
 8002eaa:	46c0      	nop			; (mov r8, r8)
 8002eac:	08004fc8 	.word	0x08004fc8
 8002eb0:	000186a0 	.word	0x000186a0
 8002eb4:	00030d40 	.word	0x00030d40

08002eb8 <RADIO_Init>:
 *
 * INPUTS: 	POINTER TO RADIO_Properties STRUCT DETAILING WHAT PROTOCOL TO INITIALISE
 * RETURNS: N/A
 */
void RADIO_Init (RADIO_Properties *r)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
	// RESET RADIO DATA STRUCT VARIABLES
	data.inputLost = true;
 8002ec0:	4b28      	ldr	r3, [pc, #160]	; (8002f64 <RADIO_Init+0xac>)
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	701a      	strb	r2, [r3, #0]
	RADIO_ResetChannelData();
 8002ec6:	f000 f94f 	bl	8003168 <RADIO_ResetChannelData>
	RADIO_ResetChannelZeroData();
 8002eca:	f000 f96d 	bl	80031a8 <RADIO_ResetChannelZeroData>
	RADIO_ResetActiveChannelFlags();
 8002ece:	f000 f98d 	bl	80031ec <RADIO_ResetActiveChannelFlags>

	// SAVE INIT PROPERTIES TO THE RADIO PROPERTIES STRUCT
	radio.Baud_SBUS = r->Baud_SBUS;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	4b24      	ldr	r3, [pc, #144]	; (8002f68 <RADIO_Init+0xb0>)
 8002ed8:	601a      	str	r2, [r3, #0]
	radio.Protocol = r->Protocol;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	791a      	ldrb	r2, [r3, #4]
 8002ede:	4b22      	ldr	r3, [pc, #136]	; (8002f68 <RADIO_Init+0xb0>)
 8002ee0:	711a      	strb	r2, [r3, #4]

	// INIT PROTOCOL SPECIFIC INFO
	if (radio.Protocol == PPM)
 8002ee2:	4b21      	ldr	r3, [pc, #132]	; (8002f68 <RADIO_Init+0xb0>)
 8002ee4:	791b      	ldrb	r3, [r3, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10a      	bne.n	8002f00 <RADIO_Init+0x48>
	{
		// SAVE PROTOCOL SPECIFIC CHANNEL NUMBERS
		data.ch_num = PPM_NUM_CHANNELS;
 8002eea:	4b1e      	ldr	r3, [pc, #120]	; (8002f64 <RADIO_Init+0xac>)
 8002eec:	2208      	movs	r2, #8
 8002eee:	705a      	strb	r2, [r3, #1]
		// RUN PROTOCOL SPECIFIC UPDATES
		PPM_Init();
 8002ef0:	f7ff fa42 	bl	8002378 <PPM_Init>
		// GET POINTER TO THE PROTOCOL SPECIFIC STAT STRUCTURE
		ptrModuleData.ppm = PPM_GetDataPtr();
 8002ef4:	f7ff fb42 	bl	800257c <PPM_GetDataPtr>
 8002ef8:	0002      	movs	r2, r0
 8002efa:	4b1c      	ldr	r3, [pc, #112]	; (8002f6c <RADIO_Init+0xb4>)
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	e02a      	b.n	8002f56 <RADIO_Init+0x9e>
	}
	else if (radio.Protocol == SBUS)
 8002f00:	4b19      	ldr	r3, [pc, #100]	; (8002f68 <RADIO_Init+0xb0>)
 8002f02:	791b      	ldrb	r3, [r3, #4]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d10d      	bne.n	8002f24 <RADIO_Init+0x6c>
	{
		data.ch_num = SBUS_NUM_CHANNELS;
 8002f08:	4b16      	ldr	r3, [pc, #88]	; (8002f64 <RADIO_Init+0xac>)
 8002f0a:	2210      	movs	r2, #16
 8002f0c:	705a      	strb	r2, [r3, #1]
		SBUS_Init(radio.Baud_SBUS);
 8002f0e:	4b16      	ldr	r3, [pc, #88]	; (8002f68 <RADIO_Init+0xb0>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	0018      	movs	r0, r3
 8002f14:	f000 fa32 	bl	800337c <SBUS_Init>
		ptrModuleData.sbus = SBUS_GetDataPtr();
 8002f18:	f000 fc40 	bl	800379c <SBUS_GetDataPtr>
 8002f1c:	0002      	movs	r2, r0
 8002f1e:	4b13      	ldr	r3, [pc, #76]	; (8002f6c <RADIO_Init+0xb4>)
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	e018      	b.n	8002f56 <RADIO_Init+0x9e>
	}
	else if (radio.Protocol == IBUS)
 8002f24:	4b10      	ldr	r3, [pc, #64]	; (8002f68 <RADIO_Init+0xb0>)
 8002f26:	791b      	ldrb	r3, [r3, #4]
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d10a      	bne.n	8002f42 <RADIO_Init+0x8a>
	{
		data.ch_num = IBUS_NUM_CHANNELS;
 8002f2c:	4b0d      	ldr	r3, [pc, #52]	; (8002f64 <RADIO_Init+0xac>)
 8002f2e:	220e      	movs	r2, #14
 8002f30:	705a      	strb	r2, [r3, #1]
		IBUS_Init();
 8002f32:	f7ff f82d 	bl	8001f90 <IBUS_Init>
		ptrModuleData.ibus = IBUS_GetDataPtr();
 8002f36:	f7ff f8c5 	bl	80020c4 <IBUS_GetDataPtr>
 8002f3a:	0002      	movs	r2, r0
 8002f3c:	4b0b      	ldr	r3, [pc, #44]	; (8002f6c <RADIO_Init+0xb4>)
 8002f3e:	601a      	str	r2, [r3, #0]
 8002f40:	e009      	b.n	8002f56 <RADIO_Init+0x9e>
	}
	else // radio.Protocol == PWM
	{
		data.ch_num = PWM_NUM_CHANNELS;
 8002f42:	4b08      	ldr	r3, [pc, #32]	; (8002f64 <RADIO_Init+0xac>)
 8002f44:	2204      	movs	r2, #4
 8002f46:	705a      	strb	r2, [r3, #1]
		PWM_Init();
 8002f48:	f7ff fc18 	bl	800277c <PWM_Init>
		ptrModuleData.pwm = PWM_GetDataPtr();
 8002f4c:	f7ff fd5a 	bl	8002a04 <PWM_GetDataPtr>
 8002f50:	0002      	movs	r2, r0
 8002f52:	4b06      	ldr	r3, [pc, #24]	; (8002f6c <RADIO_Init+0xb4>)
 8002f54:	601a      	str	r2, [r3, #0]
	}

	// RUN A RADIO DATA UPDATE BEFORE PROGRESSING
	RADIO_Update();
 8002f56:	f000 f80b 	bl	8002f70 <RADIO_Update>
}
 8002f5a:	46c0      	nop			; (mov r8, r8)
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	b002      	add	sp, #8
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	46c0      	nop			; (mov r8, r8)
 8002f64:	20000438 	.word	0x20000438
 8002f68:	20000430 	.word	0x20000430
 8002f6c:	200004d0 	.word	0x200004d0

08002f70 <RADIO_Update>:
 *
 * INPUTS: 	N/A
 * RETURNS: N/A
 */
void RADIO_Update (void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
	// CREATE LOOP VARIABLES
	static uint32_t tick = 0;

	// UPDATE AND PULL DATA FROM DEDICATED PROTOCOL MODULES TO GENERIC RADIO DATA STRUCT
	switch (radio.Protocol) {
 8002f74:	4b47      	ldr	r3, [pc, #284]	; (8003094 <RADIO_Update+0x124>)
 8002f76:	791b      	ldrb	r3, [r3, #4]
 8002f78:	2b03      	cmp	r3, #3
 8002f7a:	d008      	beq.n	8002f8e <RADIO_Update+0x1e>
 8002f7c:	dc49      	bgt.n	8003012 <RADIO_Update+0xa2>
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d026      	beq.n	8002fd0 <RADIO_Update+0x60>
 8002f82:	dc46      	bgt.n	8003012 <RADIO_Update+0xa2>
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d013      	beq.n	8002fb0 <RADIO_Update+0x40>
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d031      	beq.n	8002ff0 <RADIO_Update+0x80>
 8002f8c:	e041      	b.n	8003012 <RADIO_Update+0xa2>
	case PWM:
		// UPDATE PROTOCOL SPECIFIC DATA
		PWM_Update();
 8002f8e:	f7ff fcb1 	bl	80028f4 <PWM_Update>
		// PULL 'INPUTLOST' FLAG FROM PROTOCOL MODULE
		data.inputLost = ptrModuleData.pwm->inputLost;
 8002f92:	4b41      	ldr	r3, [pc, #260]	; (8003098 <RADIO_Update+0x128>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	781a      	ldrb	r2, [r3, #0]
 8002f98:	4b40      	ldr	r3, [pc, #256]	; (800309c <RADIO_Update+0x12c>)
 8002f9a:	701a      	strb	r2, [r3, #0]
		// PULL CHANNEL DATA FROM PROTOCOL MODULE
		memcpy(data.ch, ptrModuleData.pwm->ch, sizeof(ptrModuleData.pwm->ch));
 8002f9c:	4b3e      	ldr	r3, [pc, #248]	; (8003098 <RADIO_Update+0x128>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	3308      	adds	r3, #8
 8002fa2:	0019      	movs	r1, r3
 8002fa4:	4b3e      	ldr	r3, [pc, #248]	; (80030a0 <RADIO_Update+0x130>)
 8002fa6:	2210      	movs	r2, #16
 8002fa8:	0018      	movs	r0, r3
 8002faa:	f001 ffef 	bl	8004f8c <memcpy>
		break;
 8002fae:	e039      	b.n	8003024 <RADIO_Update+0xb4>
	case PPM:
		PPM_Update();
 8002fb0:	f7ff fa34 	bl	800241c <PPM_Update>
		data.inputLost = ptrModuleData.ppm->inputLost;
 8002fb4:	4b38      	ldr	r3, [pc, #224]	; (8003098 <RADIO_Update+0x128>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	781a      	ldrb	r2, [r3, #0]
 8002fba:	4b38      	ldr	r3, [pc, #224]	; (800309c <RADIO_Update+0x12c>)
 8002fbc:	701a      	strb	r2, [r3, #0]
		memcpy(data.ch, ptrModuleData.ppm->ch, sizeof(ptrModuleData.ppm->ch));
 8002fbe:	4b36      	ldr	r3, [pc, #216]	; (8003098 <RADIO_Update+0x128>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	1d19      	adds	r1, r3, #4
 8002fc4:	4b36      	ldr	r3, [pc, #216]	; (80030a0 <RADIO_Update+0x130>)
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	0018      	movs	r0, r3
 8002fca:	f001 ffdf 	bl	8004f8c <memcpy>
		break;
 8002fce:	e029      	b.n	8003024 <RADIO_Update+0xb4>
	case IBUS:
		IBUS_Update();
 8002fd0:	f7ff f80c 	bl	8001fec <IBUS_Update>
		data.inputLost = ptrModuleData.ibus->inputLost;
 8002fd4:	4b30      	ldr	r3, [pc, #192]	; (8003098 <RADIO_Update+0x128>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	781a      	ldrb	r2, [r3, #0]
 8002fda:	4b30      	ldr	r3, [pc, #192]	; (800309c <RADIO_Update+0x12c>)
 8002fdc:	701a      	strb	r2, [r3, #0]
		memcpy(data.ch, ptrModuleData.ibus->ch, sizeof(ptrModuleData.ibus->ch));
 8002fde:	4b2e      	ldr	r3, [pc, #184]	; (8003098 <RADIO_Update+0x128>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	1d19      	adds	r1, r3, #4
 8002fe4:	4b2e      	ldr	r3, [pc, #184]	; (80030a0 <RADIO_Update+0x130>)
 8002fe6:	2238      	movs	r2, #56	; 0x38
 8002fe8:	0018      	movs	r0, r3
 8002fea:	f001 ffcf 	bl	8004f8c <memcpy>
		break;
 8002fee:	e019      	b.n	8003024 <RADIO_Update+0xb4>
	case SBUS:
		SBUS_Update();
 8002ff0:	f000 f9f8 	bl	80033e4 <SBUS_Update>
		data.inputLost = ptrModuleData.sbus->inputLost;
 8002ff4:	4b28      	ldr	r3, [pc, #160]	; (8003098 <RADIO_Update+0x128>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	781a      	ldrb	r2, [r3, #0]
 8002ffa:	4b28      	ldr	r3, [pc, #160]	; (800309c <RADIO_Update+0x12c>)
 8002ffc:	701a      	strb	r2, [r3, #0]
		memcpy(data.ch, ptrModuleData.sbus->ch, sizeof(ptrModuleData.sbus->ch));
 8002ffe:	4b26      	ldr	r3, [pc, #152]	; (8003098 <RADIO_Update+0x128>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	3308      	adds	r3, #8
 8003004:	0019      	movs	r1, r3
 8003006:	4b26      	ldr	r3, [pc, #152]	; (80030a0 <RADIO_Update+0x130>)
 8003008:	2240      	movs	r2, #64	; 0x40
 800300a:	0018      	movs	r0, r3
 800300c:	f001 ffbe 	bl	8004f8c <memcpy>
		break;
 8003010:	e008      	b.n	8003024 <RADIO_Update+0xb4>
	default:
		radio.Protocol = PWM;
 8003012:	4b20      	ldr	r3, [pc, #128]	; (8003094 <RADIO_Update+0x124>)
 8003014:	2203      	movs	r2, #3
 8003016:	711a      	strb	r2, [r3, #4]
		ptrModuleData.pwm = PWM_GetDataPtr();
 8003018:	f7ff fcf4 	bl	8002a04 <PWM_GetDataPtr>
 800301c:	0002      	movs	r2, r0
 800301e:	4b1e      	ldr	r3, [pc, #120]	; (8003098 <RADIO_Update+0x128>)
 8003020:	601a      	str	r2, [r3, #0]
		break;
 8003022:	46c0      	nop			; (mov r8, r8)
	}

	// IF THE CHANNEL NEUTRAL/ZERO POSITION ARRAY HAS NOT BEEN SET - ONLY SETS ONCE ON FIRST RADIO CONNECTION
	if ( !data.chZeroSet && !data.inputLost )
 8003024:	4b1d      	ldr	r3, [pc, #116]	; (800309c <RADIO_Update+0x12c>)
 8003026:	2244      	movs	r2, #68	; 0x44
 8003028:	5c9b      	ldrb	r3, [r3, r2]
 800302a:	2201      	movs	r2, #1
 800302c:	4053      	eors	r3, r2
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b00      	cmp	r3, #0
 8003032:	d01e      	beq.n	8003072 <RADIO_Update+0x102>
 8003034:	4b19      	ldr	r3, [pc, #100]	; (800309c <RADIO_Update+0x12c>)
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	2201      	movs	r2, #1
 800303a:	4053      	eors	r3, r2
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d017      	beq.n	8003072 <RADIO_Update+0x102>
	{
		// ON FIRST CHECK ASSIGN VALUE TO TICK
		if ( tick == 0 )
 8003042:	4b18      	ldr	r3, [pc, #96]	; (80030a4 <RADIO_Update+0x134>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d105      	bne.n	8003056 <RADIO_Update+0xe6>
		{
			tick = CORE_GetTick();
 800304a:	f7ff fe85 	bl	8002d58 <CORE_GetTick>
 800304e:	0002      	movs	r2, r0
 8003050:	4b14      	ldr	r3, [pc, #80]	; (80030a4 <RADIO_Update+0x134>)
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	e00d      	b.n	8003072 <RADIO_Update+0x102>
		}
		// ON SUBSEQUENT LOOP CHECK IF DELAY TIME HAS FINISHED - ALLOWING INPUT TO BECOME STABLE
		else if ( RADIO_ZEROARRAY_DELAY < (CORE_GetTick() - tick) )
 8003056:	f7ff fe7f 	bl	8002d58 <CORE_GetTick>
 800305a:	0002      	movs	r2, r0
 800305c:	4b11      	ldr	r3, [pc, #68]	; (80030a4 <RADIO_Update+0x134>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b64      	cmp	r3, #100	; 0x64
 8003064:	d905      	bls.n	8003072 <RADIO_Update+0x102>
		{
			// SET THE CHANNEL ZERO POSITIONS, THIS WILL ALSO RESET CHANNEL ACTIVE FLAGS
			RADIO_SetChannelZeroPosition();
 8003066:	f000 f827 	bl	80030b8 <RADIO_SetChannelZeroPosition>
			// SET FLAG SO DOESNT EVALUATE AGAIN
			data.chZeroSet = true;
 800306a:	4b0c      	ldr	r3, [pc, #48]	; (800309c <RADIO_Update+0x12c>)
 800306c:	2244      	movs	r2, #68	; 0x44
 800306e:	2101      	movs	r1, #1
 8003070:	5499      	strb	r1, [r3, r2]
		}
	}

	// UPDATE CHANNEL ACTIVE FLAGS IF CHANNEL ZERO/NEUTRAL POSITIONS HAVE BEEN RECORDED
	if ( data.chZeroSet && !data.inputLost )
 8003072:	4b0a      	ldr	r3, [pc, #40]	; (800309c <RADIO_Update+0x12c>)
 8003074:	2244      	movs	r2, #68	; 0x44
 8003076:	5c9b      	ldrb	r3, [r3, r2]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d008      	beq.n	800308e <RADIO_Update+0x11e>
 800307c:	4b07      	ldr	r3, [pc, #28]	; (800309c <RADIO_Update+0x12c>)
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	2201      	movs	r2, #1
 8003082:	4053      	eors	r3, r2
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <RADIO_Update+0x11e>
	{
		RADIO_UpdateActiveChannelFlags();
 800308a:	f000 f8cf 	bl	800322c <RADIO_UpdateActiveChannelFlags>
	}
}
 800308e:	46c0      	nop			; (mov r8, r8)
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	20000430 	.word	0x20000430
 8003098:	200004d0 	.word	0x200004d0
 800309c:	20000438 	.word	0x20000438
 80030a0:	2000043c 	.word	0x2000043c
 80030a4:	200004d4 	.word	0x200004d4

080030a8 <RADIO_GetDataPtr>:
 *
 * INPUTS: 	N/A
 * RETURNS: POINTER TO THE RADIO DATA STRUCTURE
 */
RADIO_Data* RADIO_GetDataPtr (void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
	return &data;
 80030ac:	4b01      	ldr	r3, [pc, #4]	; (80030b4 <RADIO_GetDataPtr+0xc>)
}
 80030ae:	0018      	movs	r0, r3
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	20000438 	.word	0x20000438

080030b8 <RADIO_SetChannelZeroPosition>:
 *
 * INPUTS: 	N/A
 * RETURNS: N/A
 */
void RADIO_SetChannelZeroPosition (void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
	// ONLY ASSIGN IF RADIO CONNECTED
	if (!data.inputLost)
 80030be:	4b14      	ldr	r3, [pc, #80]	; (8003110 <RADIO_SetChannelZeroPosition+0x58>)
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	2201      	movs	r2, #1
 80030c4:	4053      	eors	r3, r2
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d01b      	beq.n	8003104 <RADIO_SetChannelZeroPosition+0x4c>
	{
		// ITTERATE THROUGH EACH CHANNEL
		for (uint8_t ch = 0; ch < data.ch_num; ch++)
 80030cc:	1dfb      	adds	r3, r7, #7
 80030ce:	2200      	movs	r2, #0
 80030d0:	701a      	strb	r2, [r3, #0]
 80030d2:	e011      	b.n	80030f8 <RADIO_SetChannelZeroPosition+0x40>
		{
			// RESET CHANNEL ACTIVE FLAG ARRAY
			data.chZero[ch] = data.ch[ch];
 80030d4:	1dfb      	adds	r3, r7, #7
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	1dfa      	adds	r2, r7, #7
 80030da:	7812      	ldrb	r2, [r2, #0]
 80030dc:	490c      	ldr	r1, [pc, #48]	; (8003110 <RADIO_SetChannelZeroPosition+0x58>)
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	18cb      	adds	r3, r1, r3
 80030e2:	3304      	adds	r3, #4
 80030e4:	6819      	ldr	r1, [r3, #0]
 80030e6:	4b0a      	ldr	r3, [pc, #40]	; (8003110 <RADIO_SetChannelZeroPosition+0x58>)
 80030e8:	3212      	adds	r2, #18
 80030ea:	0092      	lsls	r2, r2, #2
 80030ec:	50d1      	str	r1, [r2, r3]
		for (uint8_t ch = 0; ch < data.ch_num; ch++)
 80030ee:	1dfb      	adds	r3, r7, #7
 80030f0:	781a      	ldrb	r2, [r3, #0]
 80030f2:	1dfb      	adds	r3, r7, #7
 80030f4:	3201      	adds	r2, #1
 80030f6:	701a      	strb	r2, [r3, #0]
 80030f8:	4b05      	ldr	r3, [pc, #20]	; (8003110 <RADIO_SetChannelZeroPosition+0x58>)
 80030fa:	785b      	ldrb	r3, [r3, #1]
 80030fc:	1dfa      	adds	r2, r7, #7
 80030fe:	7812      	ldrb	r2, [r2, #0]
 8003100:	429a      	cmp	r2, r3
 8003102:	d3e7      	bcc.n	80030d4 <RADIO_SetChannelZeroPosition+0x1c>
		}
	}
	// RESET CHANNEL ACTIVE FLAGS - CANT BE TRUE IF JUST RESET ZERO POSITION TO CURRENT
	RADIO_ResetActiveChannelFlags();
 8003104:	f000 f872 	bl	80031ec <RADIO_ResetActiveChannelFlags>
}
 8003108:	46c0      	nop			; (mov r8, r8)
 800310a:	46bd      	mov	sp, r7
 800310c:	b002      	add	sp, #8
 800310e:	bd80      	pop	{r7, pc}
 8003110:	20000438 	.word	0x20000438

08003114 <SYSTEM_DetectRadio>:
 * INPUTS: 	N/A
 * RETURNS: TRUE 	- IF RADIO IS CONNECTED AND VALID DATA IS REVIECED
 * 			FALSE 	- NO RADIO OR VALID DATA RECIEVED
 */
bool SYSTEM_DetectRadio (void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
	// INIT FUNCTION VARIABLES
	uint32_t tick = CORE_GetTick();
 800311a:	f7ff fe1d 	bl	8002d58 <CORE_GetTick>
 800311e:	0003      	movs	r3, r0
 8003120:	603b      	str	r3, [r7, #0]
	bool retVal = false;
 8003122:	1dfb      	adds	r3, r7, #7
 8003124:	2200      	movs	r2, #0
 8003126:	701a      	strb	r2, [r3, #0]

	// GIVE TIME FOR RADIO TO CONNECT AND RECIEVE DATA
	while ( RADIO_INPUTDET_DELAY > (CORE_GetTick() - tick) )
 8003128:	e00e      	b.n	8003148 <SYSTEM_DetectRadio+0x34>
	{
		// UPDATE RADIO DATA
		RADIO_Update();
 800312a:	f7ff ff21 	bl	8002f70 <RADIO_Update>
		// IF RADIO CONNECTION VALID
		if ( !data.inputLost )
 800312e:	4b0d      	ldr	r3, [pc, #52]	; (8003164 <SYSTEM_DetectRadio+0x50>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	2201      	movs	r2, #1
 8003134:	4053      	eors	r3, r2
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b00      	cmp	r3, #0
 800313a:	d003      	beq.n	8003144 <SYSTEM_DetectRadio+0x30>
		{
			retVal = true;
 800313c:	1dfb      	adds	r3, r7, #7
 800313e:	2201      	movs	r2, #1
 8003140:	701a      	strb	r2, [r3, #0]
			break;
 8003142:	e008      	b.n	8003156 <SYSTEM_DetectRadio+0x42>
		}
		// LOOP PACING
		CORE_Idle();
 8003144:	f000 fdce 	bl	8003ce4 <CORE_Idle>
	while ( RADIO_INPUTDET_DELAY > (CORE_GetTick() - tick) )
 8003148:	f7ff fe06 	bl	8002d58 <CORE_GetTick>
 800314c:	0002      	movs	r2, r0
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b63      	cmp	r3, #99	; 0x63
 8003154:	d9e9      	bls.n	800312a <SYSTEM_DetectRadio+0x16>
	}

	return retVal;
 8003156:	1dfb      	adds	r3, r7, #7
 8003158:	781b      	ldrb	r3, [r3, #0]
}
 800315a:	0018      	movs	r0, r3
 800315c:	46bd      	mov	sp, r7
 800315e:	b002      	add	sp, #8
 8003160:	bd80      	pop	{r7, pc}
 8003162:	46c0      	nop			; (mov r8, r8)
 8003164:	20000438 	.word	0x20000438

08003168 <RADIO_ResetChannelData>:
 *
 * INPUTS: 	N/A
 * RETURNS: N/A
 */
void RADIO_ResetChannelData (void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
	// ITTERATE THROUGH ENTIRE CHANNEL ARRAY
	for (uint8_t ch = 0; ch < RADIO_NUM_CHANNELS; ch++)
 800316e:	1dfb      	adds	r3, r7, #7
 8003170:	2200      	movs	r2, #0
 8003172:	701a      	strb	r2, [r3, #0]
 8003174:	e00c      	b.n	8003190 <RADIO_ResetChannelData+0x28>
	{
		// RESET CHANNEL DATA
		data.ch[ch] = 0;
 8003176:	1dfb      	adds	r3, r7, #7
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	4a0a      	ldr	r2, [pc, #40]	; (80031a4 <RADIO_ResetChannelData+0x3c>)
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	18d3      	adds	r3, r2, r3
 8003180:	3304      	adds	r3, #4
 8003182:	2200      	movs	r2, #0
 8003184:	601a      	str	r2, [r3, #0]
	for (uint8_t ch = 0; ch < RADIO_NUM_CHANNELS; ch++)
 8003186:	1dfb      	adds	r3, r7, #7
 8003188:	781a      	ldrb	r2, [r3, #0]
 800318a:	1dfb      	adds	r3, r7, #7
 800318c:	3201      	adds	r2, #1
 800318e:	701a      	strb	r2, [r3, #0]
 8003190:	1dfb      	adds	r3, r7, #7
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	2b0f      	cmp	r3, #15
 8003196:	d9ee      	bls.n	8003176 <RADIO_ResetChannelData+0xe>
	}
}
 8003198:	46c0      	nop			; (mov r8, r8)
 800319a:	46c0      	nop			; (mov r8, r8)
 800319c:	46bd      	mov	sp, r7
 800319e:	b002      	add	sp, #8
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	46c0      	nop			; (mov r8, r8)
 80031a4:	20000438 	.word	0x20000438

080031a8 <RADIO_ResetChannelZeroData>:
 *
 * INPUTS: 	N/A
 * RETURNS: N/A
 */
void RADIO_ResetChannelZeroData (void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
	data.chZeroSet = false;
 80031ae:	4b0e      	ldr	r3, [pc, #56]	; (80031e8 <RADIO_ResetChannelZeroData+0x40>)
 80031b0:	2244      	movs	r2, #68	; 0x44
 80031b2:	2100      	movs	r1, #0
 80031b4:	5499      	strb	r1, [r3, r2]
	// ITTERATE THROUGH ENTIRE CHANNEL ARRAY
	for (uint8_t ch = 0; ch < RADIO_NUM_CHANNELS; ch++)
 80031b6:	1dfb      	adds	r3, r7, #7
 80031b8:	2200      	movs	r2, #0
 80031ba:	701a      	strb	r2, [r3, #0]
 80031bc:	e00b      	b.n	80031d6 <RADIO_ResetChannelZeroData+0x2e>
	{
		// RESET CHANNEL ZERO ARRAY
		data.chZero[ch] = 0;
 80031be:	1dfb      	adds	r3, r7, #7
 80031c0:	781a      	ldrb	r2, [r3, #0]
 80031c2:	4b09      	ldr	r3, [pc, #36]	; (80031e8 <RADIO_ResetChannelZeroData+0x40>)
 80031c4:	3212      	adds	r2, #18
 80031c6:	0092      	lsls	r2, r2, #2
 80031c8:	2100      	movs	r1, #0
 80031ca:	50d1      	str	r1, [r2, r3]
	for (uint8_t ch = 0; ch < RADIO_NUM_CHANNELS; ch++)
 80031cc:	1dfb      	adds	r3, r7, #7
 80031ce:	781a      	ldrb	r2, [r3, #0]
 80031d0:	1dfb      	adds	r3, r7, #7
 80031d2:	3201      	adds	r2, #1
 80031d4:	701a      	strb	r2, [r3, #0]
 80031d6:	1dfb      	adds	r3, r7, #7
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	2b0f      	cmp	r3, #15
 80031dc:	d9ef      	bls.n	80031be <RADIO_ResetChannelZeroData+0x16>
	}
}
 80031de:	46c0      	nop			; (mov r8, r8)
 80031e0:	46c0      	nop			; (mov r8, r8)
 80031e2:	46bd      	mov	sp, r7
 80031e4:	b002      	add	sp, #8
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	20000438 	.word	0x20000438

080031ec <RADIO_ResetActiveChannelFlags>:
 *
 * INPUTS: 	N/A
 * RETURNS: N/A
 */
void RADIO_ResetActiveChannelFlags (void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
	// ITTERATE THROUGH ENTIRE CHANNEL ARRAY
	for (uint8_t ch = 0; ch < RADIO_NUM_CHANNELS; ch++)
 80031f2:	1dfb      	adds	r3, r7, #7
 80031f4:	2200      	movs	r2, #0
 80031f6:	701a      	strb	r2, [r3, #0]
 80031f8:	e00c      	b.n	8003214 <RADIO_ResetActiveChannelFlags+0x28>
	{
		// RESET CHANNEL ACTIVE FLAG ARRAY
		data.chActive[ch] = chActive_False;
 80031fa:	1dfb      	adds	r3, r7, #7
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	4a0a      	ldr	r2, [pc, #40]	; (8003228 <RADIO_ResetActiveChannelFlags+0x3c>)
 8003200:	2188      	movs	r1, #136	; 0x88
 8003202:	18d3      	adds	r3, r2, r3
 8003204:	185b      	adds	r3, r3, r1
 8003206:	2200      	movs	r2, #0
 8003208:	701a      	strb	r2, [r3, #0]
	for (uint8_t ch = 0; ch < RADIO_NUM_CHANNELS; ch++)
 800320a:	1dfb      	adds	r3, r7, #7
 800320c:	781a      	ldrb	r2, [r3, #0]
 800320e:	1dfb      	adds	r3, r7, #7
 8003210:	3201      	adds	r2, #1
 8003212:	701a      	strb	r2, [r3, #0]
 8003214:	1dfb      	adds	r3, r7, #7
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	2b0f      	cmp	r3, #15
 800321a:	d9ee      	bls.n	80031fa <RADIO_ResetActiveChannelFlags+0xe>
	}
}
 800321c:	46c0      	nop			; (mov r8, r8)
 800321e:	46c0      	nop			; (mov r8, r8)
 8003220:	46bd      	mov	sp, r7
 8003222:	b002      	add	sp, #8
 8003224:	bd80      	pop	{r7, pc}
 8003226:	46c0      	nop			; (mov r8, r8)
 8003228:	20000438 	.word	0x20000438

0800322c <RADIO_UpdateActiveChannelFlags>:
 *
 * INPUTS: 	N/A
 * RETURNS: N/A
 */
void RADIO_UpdateActiveChannelFlags (void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
	// ITTERATE THROUGH EACH CHANNEL
	for (uint8_t ch = 0; ch < data.ch_num; ch++)
 8003232:	1dfb      	adds	r3, r7, #7
 8003234:	2200      	movs	r2, #0
 8003236:	701a      	strb	r2, [r3, #0]
 8003238:	e085      	b.n	8003346 <RADIO_UpdateActiveChannelFlags+0x11a>
	{
		// CHECK IF CHANNEL DATA IS APPROPRIATE
		if ( (data.ch[ch] == 0) ||
 800323a:	1dfb      	adds	r3, r7, #7
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	4a48      	ldr	r2, [pc, #288]	; (8003360 <RADIO_UpdateActiveChannelFlags+0x134>)
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	18d3      	adds	r3, r2, r3
 8003244:	3304      	adds	r3, #4
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d014      	beq.n	8003276 <RADIO_UpdateActiveChannelFlags+0x4a>
			 (data.ch[ch] < (RADIO_CH_MIN - RADIO_INPUT_THRESHOLD)) ||
 800324c:	1dfb      	adds	r3, r7, #7
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	4a43      	ldr	r2, [pc, #268]	; (8003360 <RADIO_UpdateActiveChannelFlags+0x134>)
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	18d3      	adds	r3, r2, r3
 8003256:	3304      	adds	r3, #4
 8003258:	681a      	ldr	r2, [r3, #0]
		if ( (data.ch[ch] == 0) ||
 800325a:	23c8      	movs	r3, #200	; 0xc8
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	429a      	cmp	r2, r3
 8003260:	d309      	bcc.n	8003276 <RADIO_UpdateActiveChannelFlags+0x4a>
			 (data.ch[ch] > (RADIO_CH_MAX + RADIO_INPUT_THRESHOLD)) )
 8003262:	1dfb      	adds	r3, r7, #7
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	4a3e      	ldr	r2, [pc, #248]	; (8003360 <RADIO_UpdateActiveChannelFlags+0x134>)
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	18d3      	adds	r3, r2, r3
 800326c:	3304      	adds	r3, #4
 800326e:	681b      	ldr	r3, [r3, #0]
			 (data.ch[ch] < (RADIO_CH_MIN - RADIO_INPUT_THRESHOLD)) ||
 8003270:	4a3c      	ldr	r2, [pc, #240]	; (8003364 <RADIO_UpdateActiveChannelFlags+0x138>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d908      	bls.n	8003288 <RADIO_UpdateActiveChannelFlags+0x5c>
		{
			data.chActive[ch] = chActive_False;
 8003276:	1dfb      	adds	r3, r7, #7
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	4a39      	ldr	r2, [pc, #228]	; (8003360 <RADIO_UpdateActiveChannelFlags+0x134>)
 800327c:	2188      	movs	r1, #136	; 0x88
 800327e:	18d3      	adds	r3, r2, r3
 8003280:	185b      	adds	r3, r3, r1
 8003282:	2200      	movs	r2, #0
 8003284:	701a      	strb	r2, [r3, #0]
 8003286:	e059      	b.n	800333c <RADIO_UpdateActiveChannelFlags+0x110>
		}
		// CHECK IF THE INPUT EXCEEDS THE POSITIVE ACTIVE THRESHOLD
		else if (data.ch[ch] >= (data.chZero[ch] + RADIO_INPUT_THRESHOLD))
 8003288:	1dfb      	adds	r3, r7, #7
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	4a34      	ldr	r2, [pc, #208]	; (8003360 <RADIO_UpdateActiveChannelFlags+0x134>)
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	18d3      	adds	r3, r2, r3
 8003292:	3304      	adds	r3, #4
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	1dfb      	adds	r3, r7, #7
 8003298:	7819      	ldrb	r1, [r3, #0]
 800329a:	4b31      	ldr	r3, [pc, #196]	; (8003360 <RADIO_UpdateActiveChannelFlags+0x134>)
 800329c:	3112      	adds	r1, #18
 800329e:	0089      	lsls	r1, r1, #2
 80032a0:	58cb      	ldr	r3, [r1, r3]
 80032a2:	33c8      	adds	r3, #200	; 0xc8
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d308      	bcc.n	80032ba <RADIO_UpdateActiveChannelFlags+0x8e>
		{
			data.chActive[ch] = chActive_True;
 80032a8:	1dfb      	adds	r3, r7, #7
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	4a2c      	ldr	r2, [pc, #176]	; (8003360 <RADIO_UpdateActiveChannelFlags+0x134>)
 80032ae:	2188      	movs	r1, #136	; 0x88
 80032b0:	18d3      	adds	r3, r2, r3
 80032b2:	185b      	adds	r3, r3, r1
 80032b4:	2201      	movs	r2, #1
 80032b6:	701a      	strb	r2, [r3, #0]
 80032b8:	e040      	b.n	800333c <RADIO_UpdateActiveChannelFlags+0x110>
		}
		// CHECK IF THE INPUT EXCEEDS THE NEGATIVE ACTIVE THRESHOLD
		else if (data.ch[ch] <= (data.chZero[ch] - RADIO_INPUT_THRESHOLD))
 80032ba:	1dfb      	adds	r3, r7, #7
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	4a28      	ldr	r2, [pc, #160]	; (8003360 <RADIO_UpdateActiveChannelFlags+0x134>)
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	18d3      	adds	r3, r2, r3
 80032c4:	3304      	adds	r3, #4
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	1dfb      	adds	r3, r7, #7
 80032ca:	7819      	ldrb	r1, [r3, #0]
 80032cc:	4b24      	ldr	r3, [pc, #144]	; (8003360 <RADIO_UpdateActiveChannelFlags+0x134>)
 80032ce:	3112      	adds	r1, #18
 80032d0:	0089      	lsls	r1, r1, #2
 80032d2:	58cb      	ldr	r3, [r1, r3]
 80032d4:	3bc8      	subs	r3, #200	; 0xc8
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d808      	bhi.n	80032ec <RADIO_UpdateActiveChannelFlags+0xc0>
		{
			data.chActive[ch] = chActive_TrueRev;
 80032da:	1dfb      	adds	r3, r7, #7
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	4a20      	ldr	r2, [pc, #128]	; (8003360 <RADIO_UpdateActiveChannelFlags+0x134>)
 80032e0:	2188      	movs	r1, #136	; 0x88
 80032e2:	18d3      	adds	r3, r2, r3
 80032e4:	185b      	adds	r3, r3, r1
 80032e6:	2202      	movs	r2, #2
 80032e8:	701a      	strb	r2, [r3, #0]
 80032ea:	e027      	b.n	800333c <RADIO_UpdateActiveChannelFlags+0x110>
		}
		// CHECK IF THE INPUT IS WITHIN THE NEUTRAL/ZERO BAND
		else if ( (data.ch[ch] <= (data.chZero[ch] + RADIO_ZERO_THRESHOLD)) &&
 80032ec:	1dfb      	adds	r3, r7, #7
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	4a1b      	ldr	r2, [pc, #108]	; (8003360 <RADIO_UpdateActiveChannelFlags+0x134>)
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	18d3      	adds	r3, r2, r3
 80032f6:	3304      	adds	r3, #4
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	1dfb      	adds	r3, r7, #7
 80032fc:	7819      	ldrb	r1, [r3, #0]
 80032fe:	4b18      	ldr	r3, [pc, #96]	; (8003360 <RADIO_UpdateActiveChannelFlags+0x134>)
 8003300:	3112      	adds	r1, #18
 8003302:	0089      	lsls	r1, r1, #2
 8003304:	58cb      	ldr	r3, [r1, r3]
 8003306:	3364      	adds	r3, #100	; 0x64
 8003308:	429a      	cmp	r2, r3
 800330a:	d817      	bhi.n	800333c <RADIO_UpdateActiveChannelFlags+0x110>
				  (data.ch[ch] >= (data.chZero[ch] - RADIO_ZERO_THRESHOLD)) )
 800330c:	1dfb      	adds	r3, r7, #7
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	4a13      	ldr	r2, [pc, #76]	; (8003360 <RADIO_UpdateActiveChannelFlags+0x134>)
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	18d3      	adds	r3, r2, r3
 8003316:	3304      	adds	r3, #4
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	1dfb      	adds	r3, r7, #7
 800331c:	7819      	ldrb	r1, [r3, #0]
 800331e:	4b10      	ldr	r3, [pc, #64]	; (8003360 <RADIO_UpdateActiveChannelFlags+0x134>)
 8003320:	3112      	adds	r1, #18
 8003322:	0089      	lsls	r1, r1, #2
 8003324:	58cb      	ldr	r3, [r1, r3]
 8003326:	3b64      	subs	r3, #100	; 0x64
		else if ( (data.ch[ch] <= (data.chZero[ch] + RADIO_ZERO_THRESHOLD)) &&
 8003328:	429a      	cmp	r2, r3
 800332a:	d307      	bcc.n	800333c <RADIO_UpdateActiveChannelFlags+0x110>
		{
			data.chActive[ch] = chActive_False;
 800332c:	1dfb      	adds	r3, r7, #7
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	4a0b      	ldr	r2, [pc, #44]	; (8003360 <RADIO_UpdateActiveChannelFlags+0x134>)
 8003332:	2188      	movs	r1, #136	; 0x88
 8003334:	18d3      	adds	r3, r2, r3
 8003336:	185b      	adds	r3, r3, r1
 8003338:	2200      	movs	r2, #0
 800333a:	701a      	strb	r2, [r3, #0]
	for (uint8_t ch = 0; ch < data.ch_num; ch++)
 800333c:	1dfb      	adds	r3, r7, #7
 800333e:	781a      	ldrb	r2, [r3, #0]
 8003340:	1dfb      	adds	r3, r7, #7
 8003342:	3201      	adds	r2, #1
 8003344:	701a      	strb	r2, [r3, #0]
 8003346:	4b06      	ldr	r3, [pc, #24]	; (8003360 <RADIO_UpdateActiveChannelFlags+0x134>)
 8003348:	785b      	ldrb	r3, [r3, #1]
 800334a:	1dfa      	adds	r2, r7, #7
 800334c:	7812      	ldrb	r2, [r2, #0]
 800334e:	429a      	cmp	r2, r3
 8003350:	d200      	bcs.n	8003354 <RADIO_UpdateActiveChannelFlags+0x128>
 8003352:	e772      	b.n	800323a <RADIO_UpdateActiveChannelFlags+0xe>
		}
	}
}
 8003354:	46c0      	nop			; (mov r8, r8)
 8003356:	46c0      	nop			; (mov r8, r8)
 8003358:	46bd      	mov	sp, r7
 800335a:	b002      	add	sp, #8
 800335c:	bd80      	pop	{r7, pc}
 800335e:	46c0      	nop			; (mov r8, r8)
 8003360:	20000438 	.word	0x20000438
 8003364:	00000898 	.word	0x00000898

08003368 <CORE_GetTick>:
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
	return gTicks;
 800336c:	4b02      	ldr	r3, [pc, #8]	; (8003378 <CORE_GetTick+0x10>)
 800336e:	681b      	ldr	r3, [r3, #0]
}
 8003370:	0018      	movs	r0, r3
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	46c0      	nop			; (mov r8, r8)
 8003378:	20000560 	.word	0x20000560

0800337c <SBUS_Init>:

	return !dataSBUS.inputLost;
}

void SBUS_Init (uint32_t baud)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
	memset(rxSBUS, 0, sizeof(rxSBUS));
 8003384:	4b0d      	ldr	r3, [pc, #52]	; (80033bc <SBUS_Init+0x40>)
 8003386:	2232      	movs	r2, #50	; 0x32
 8003388:	2100      	movs	r1, #0
 800338a:	0018      	movs	r0, r3
 800338c:	f001 fe07 	bl	8004f9e <memset>
	rxHeartbeatSBUS = false;
 8003390:	4b0b      	ldr	r3, [pc, #44]	; (80033c0 <SBUS_Init+0x44>)
 8003392:	2200      	movs	r2, #0
 8003394:	701a      	strb	r2, [r3, #0]
	dataSBUS.inputLost = true;
 8003396:	4b0b      	ldr	r3, [pc, #44]	; (80033c4 <SBUS_Init+0x48>)
 8003398:	2201      	movs	r2, #1
 800339a:	701a      	strb	r2, [r3, #0]

	UART_Init(SBUS_UART, baud, UART_Mode_Inverted);
 800339c:	4b0a      	ldr	r3, [pc, #40]	; (80033c8 <SBUS_Init+0x4c>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6879      	ldr	r1, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	0018      	movs	r0, r3
 80033a6:	f001 fb1b 	bl	80049e0 <UART_Init>
	UART_ReadFlush(SBUS_UART);
 80033aa:	4b07      	ldr	r3, [pc, #28]	; (80033c8 <SBUS_Init+0x4c>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	0018      	movs	r0, r3
 80033b0:	f001 fca8 	bl	8004d04 <UART_ReadFlush>
}
 80033b4:	46c0      	nop			; (mov r8, r8)
 80033b6:	46bd      	mov	sp, r7
 80033b8:	b002      	add	sp, #8
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	200004d8 	.word	0x200004d8
 80033c0:	2000050a 	.word	0x2000050a
 80033c4:	2000050c 	.word	0x2000050c
 80033c8:	2000028c 	.word	0x2000028c

080033cc <SBUS_Deinit>:

void SBUS_Deinit (void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
	UART_Deinit(SBUS_UART);
 80033d0:	4b03      	ldr	r3, [pc, #12]	; (80033e0 <SBUS_Deinit+0x14>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	0018      	movs	r0, r3
 80033d6:	f001 fbeb 	bl	8004bb0 <UART_Deinit>
}
 80033da:	46c0      	nop			; (mov r8, r8)
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	2000028c 	.word	0x2000028c

080033e4 <SBUS_Update>:

void SBUS_Update (void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
	// Update Rx Data
	SBUS_HandleUART();
 80033ea:	f000 fa2f 	bl	800384c <SBUS_HandleUART>

	// Init Loop Variables
	uint32_t now = CORE_GetTick();
 80033ee:	f7ff ffbb 	bl	8003368 <CORE_GetTick>
 80033f2:	0003      	movs	r3, r0
 80033f4:	607b      	str	r3, [r7, #4]
	static uint32_t prev = 0;

	// Check for New Input Data
	if (rxHeartbeatSBUS)
 80033f6:	4be5      	ldr	r3, [pc, #916]	; (800378c <SBUS_Update+0x3a8>)
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d100      	bne.n	8003400 <SBUS_Update+0x1c>
 80033fe:	e1a3      	b.n	8003748 <SBUS_Update+0x364>
	{
		// Decode SBUS Data
		dataSBUS.ch[0]  = SBUS_Transform( (int16_t)( (rxSBUS[1]	   | rxSBUS[2] << 8 ) 					 & 0x07FF) );
 8003400:	4be3      	ldr	r3, [pc, #908]	; (8003790 <SBUS_Update+0x3ac>)
 8003402:	785b      	ldrb	r3, [r3, #1]
 8003404:	b21a      	sxth	r2, r3
 8003406:	4be2      	ldr	r3, [pc, #904]	; (8003790 <SBUS_Update+0x3ac>)
 8003408:	789b      	ldrb	r3, [r3, #2]
 800340a:	021b      	lsls	r3, r3, #8
 800340c:	b21b      	sxth	r3, r3
 800340e:	4313      	orrs	r3, r2
 8003410:	b21b      	sxth	r3, r3
 8003412:	b29b      	uxth	r3, r3
 8003414:	055b      	lsls	r3, r3, #21
 8003416:	0d5b      	lsrs	r3, r3, #21
 8003418:	b29b      	uxth	r3, r3
 800341a:	0018      	movs	r0, r3
 800341c:	f000 f9c6 	bl	80037ac <SBUS_Transform>
 8003420:	0003      	movs	r3, r0
 8003422:	001a      	movs	r2, r3
 8003424:	4bdb      	ldr	r3, [pc, #876]	; (8003794 <SBUS_Update+0x3b0>)
 8003426:	609a      	str	r2, [r3, #8]
		dataSBUS.ch[1]  = SBUS_Transform( (int16_t)( (rxSBUS[2]  >> 3 | rxSBUS[3] << 5 ) 					 & 0x07FF) );
 8003428:	4bd9      	ldr	r3, [pc, #868]	; (8003790 <SBUS_Update+0x3ac>)
 800342a:	789b      	ldrb	r3, [r3, #2]
 800342c:	08db      	lsrs	r3, r3, #3
 800342e:	b2db      	uxtb	r3, r3
 8003430:	b21a      	sxth	r2, r3
 8003432:	4bd7      	ldr	r3, [pc, #860]	; (8003790 <SBUS_Update+0x3ac>)
 8003434:	78db      	ldrb	r3, [r3, #3]
 8003436:	015b      	lsls	r3, r3, #5
 8003438:	b21b      	sxth	r3, r3
 800343a:	4313      	orrs	r3, r2
 800343c:	b21b      	sxth	r3, r3
 800343e:	b29b      	uxth	r3, r3
 8003440:	055b      	lsls	r3, r3, #21
 8003442:	0d5b      	lsrs	r3, r3, #21
 8003444:	b29b      	uxth	r3, r3
 8003446:	0018      	movs	r0, r3
 8003448:	f000 f9b0 	bl	80037ac <SBUS_Transform>
 800344c:	0003      	movs	r3, r0
 800344e:	001a      	movs	r2, r3
 8003450:	4bd0      	ldr	r3, [pc, #832]	; (8003794 <SBUS_Update+0x3b0>)
 8003452:	60da      	str	r2, [r3, #12]
		dataSBUS.ch[2]  = SBUS_Transform( (int16_t)( (rxSBUS[3]  >> 6 | rxSBUS[4] << 2  | rxSBUS[5] << 10 ) & 0x07FF) );
 8003454:	4bce      	ldr	r3, [pc, #824]	; (8003790 <SBUS_Update+0x3ac>)
 8003456:	78db      	ldrb	r3, [r3, #3]
 8003458:	099b      	lsrs	r3, r3, #6
 800345a:	b2db      	uxtb	r3, r3
 800345c:	b21a      	sxth	r2, r3
 800345e:	4bcc      	ldr	r3, [pc, #816]	; (8003790 <SBUS_Update+0x3ac>)
 8003460:	791b      	ldrb	r3, [r3, #4]
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	b21b      	sxth	r3, r3
 8003466:	4313      	orrs	r3, r2
 8003468:	b21a      	sxth	r2, r3
 800346a:	4bc9      	ldr	r3, [pc, #804]	; (8003790 <SBUS_Update+0x3ac>)
 800346c:	795b      	ldrb	r3, [r3, #5]
 800346e:	029b      	lsls	r3, r3, #10
 8003470:	b21b      	sxth	r3, r3
 8003472:	4313      	orrs	r3, r2
 8003474:	b21b      	sxth	r3, r3
 8003476:	b29b      	uxth	r3, r3
 8003478:	055b      	lsls	r3, r3, #21
 800347a:	0d5b      	lsrs	r3, r3, #21
 800347c:	b29b      	uxth	r3, r3
 800347e:	0018      	movs	r0, r3
 8003480:	f000 f994 	bl	80037ac <SBUS_Transform>
 8003484:	0003      	movs	r3, r0
 8003486:	001a      	movs	r2, r3
 8003488:	4bc2      	ldr	r3, [pc, #776]	; (8003794 <SBUS_Update+0x3b0>)
 800348a:	611a      	str	r2, [r3, #16]
		dataSBUS.ch[3]  = SBUS_Transform( (int16_t)( (rxSBUS[5]  >> 1 | rxSBUS[6] << 7 ) 					 & 0x07FF) );
 800348c:	4bc0      	ldr	r3, [pc, #768]	; (8003790 <SBUS_Update+0x3ac>)
 800348e:	795b      	ldrb	r3, [r3, #5]
 8003490:	085b      	lsrs	r3, r3, #1
 8003492:	b2db      	uxtb	r3, r3
 8003494:	b21a      	sxth	r2, r3
 8003496:	4bbe      	ldr	r3, [pc, #760]	; (8003790 <SBUS_Update+0x3ac>)
 8003498:	799b      	ldrb	r3, [r3, #6]
 800349a:	01db      	lsls	r3, r3, #7
 800349c:	b21b      	sxth	r3, r3
 800349e:	4313      	orrs	r3, r2
 80034a0:	b21b      	sxth	r3, r3
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	055b      	lsls	r3, r3, #21
 80034a6:	0d5b      	lsrs	r3, r3, #21
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	0018      	movs	r0, r3
 80034ac:	f000 f97e 	bl	80037ac <SBUS_Transform>
 80034b0:	0003      	movs	r3, r0
 80034b2:	001a      	movs	r2, r3
 80034b4:	4bb7      	ldr	r3, [pc, #732]	; (8003794 <SBUS_Update+0x3b0>)
 80034b6:	615a      	str	r2, [r3, #20]
		dataSBUS.ch[4]  = SBUS_Transform( (int16_t)( (rxSBUS[6]  >> 4 | rxSBUS[7] << 4 ) 					 & 0x07FF) );
 80034b8:	4bb5      	ldr	r3, [pc, #724]	; (8003790 <SBUS_Update+0x3ac>)
 80034ba:	799b      	ldrb	r3, [r3, #6]
 80034bc:	091b      	lsrs	r3, r3, #4
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	b21a      	sxth	r2, r3
 80034c2:	4bb3      	ldr	r3, [pc, #716]	; (8003790 <SBUS_Update+0x3ac>)
 80034c4:	79db      	ldrb	r3, [r3, #7]
 80034c6:	011b      	lsls	r3, r3, #4
 80034c8:	b21b      	sxth	r3, r3
 80034ca:	4313      	orrs	r3, r2
 80034cc:	b21b      	sxth	r3, r3
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	055b      	lsls	r3, r3, #21
 80034d2:	0d5b      	lsrs	r3, r3, #21
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	0018      	movs	r0, r3
 80034d8:	f000 f968 	bl	80037ac <SBUS_Transform>
 80034dc:	0003      	movs	r3, r0
 80034de:	001a      	movs	r2, r3
 80034e0:	4bac      	ldr	r3, [pc, #688]	; (8003794 <SBUS_Update+0x3b0>)
 80034e2:	619a      	str	r2, [r3, #24]
		dataSBUS.ch[5]  = SBUS_Transform( (int16_t)( (rxSBUS[7]  >> 7 | rxSBUS[8] << 1 | rxSBUS[9] << 9 )   & 0x07FF) );
 80034e4:	4baa      	ldr	r3, [pc, #680]	; (8003790 <SBUS_Update+0x3ac>)
 80034e6:	79db      	ldrb	r3, [r3, #7]
 80034e8:	09db      	lsrs	r3, r3, #7
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	b21a      	sxth	r2, r3
 80034ee:	4ba8      	ldr	r3, [pc, #672]	; (8003790 <SBUS_Update+0x3ac>)
 80034f0:	7a1b      	ldrb	r3, [r3, #8]
 80034f2:	005b      	lsls	r3, r3, #1
 80034f4:	b21b      	sxth	r3, r3
 80034f6:	4313      	orrs	r3, r2
 80034f8:	b21a      	sxth	r2, r3
 80034fa:	4ba5      	ldr	r3, [pc, #660]	; (8003790 <SBUS_Update+0x3ac>)
 80034fc:	7a5b      	ldrb	r3, [r3, #9]
 80034fe:	025b      	lsls	r3, r3, #9
 8003500:	b21b      	sxth	r3, r3
 8003502:	4313      	orrs	r3, r2
 8003504:	b21b      	sxth	r3, r3
 8003506:	b29b      	uxth	r3, r3
 8003508:	055b      	lsls	r3, r3, #21
 800350a:	0d5b      	lsrs	r3, r3, #21
 800350c:	b29b      	uxth	r3, r3
 800350e:	0018      	movs	r0, r3
 8003510:	f000 f94c 	bl	80037ac <SBUS_Transform>
 8003514:	0003      	movs	r3, r0
 8003516:	001a      	movs	r2, r3
 8003518:	4b9e      	ldr	r3, [pc, #632]	; (8003794 <SBUS_Update+0x3b0>)
 800351a:	61da      	str	r2, [r3, #28]
		dataSBUS.ch[6]  = SBUS_Transform( (int16_t)( (rxSBUS[9]  >> 2 | rxSBUS[10] << 6 ) 				     & 0x07FF) );
 800351c:	4b9c      	ldr	r3, [pc, #624]	; (8003790 <SBUS_Update+0x3ac>)
 800351e:	7a5b      	ldrb	r3, [r3, #9]
 8003520:	089b      	lsrs	r3, r3, #2
 8003522:	b2db      	uxtb	r3, r3
 8003524:	b21a      	sxth	r2, r3
 8003526:	4b9a      	ldr	r3, [pc, #616]	; (8003790 <SBUS_Update+0x3ac>)
 8003528:	7a9b      	ldrb	r3, [r3, #10]
 800352a:	019b      	lsls	r3, r3, #6
 800352c:	b21b      	sxth	r3, r3
 800352e:	4313      	orrs	r3, r2
 8003530:	b21b      	sxth	r3, r3
 8003532:	b29b      	uxth	r3, r3
 8003534:	055b      	lsls	r3, r3, #21
 8003536:	0d5b      	lsrs	r3, r3, #21
 8003538:	b29b      	uxth	r3, r3
 800353a:	0018      	movs	r0, r3
 800353c:	f000 f936 	bl	80037ac <SBUS_Transform>
 8003540:	0003      	movs	r3, r0
 8003542:	001a      	movs	r2, r3
 8003544:	4b93      	ldr	r3, [pc, #588]	; (8003794 <SBUS_Update+0x3b0>)
 8003546:	621a      	str	r2, [r3, #32]
		dataSBUS.ch[7]  = SBUS_Transform( (int16_t)( (rxSBUS[10] >> 5 | rxSBUS[11] << 3 ) 				     & 0x07FF) );
 8003548:	4b91      	ldr	r3, [pc, #580]	; (8003790 <SBUS_Update+0x3ac>)
 800354a:	7a9b      	ldrb	r3, [r3, #10]
 800354c:	095b      	lsrs	r3, r3, #5
 800354e:	b2db      	uxtb	r3, r3
 8003550:	b21a      	sxth	r2, r3
 8003552:	4b8f      	ldr	r3, [pc, #572]	; (8003790 <SBUS_Update+0x3ac>)
 8003554:	7adb      	ldrb	r3, [r3, #11]
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	b21b      	sxth	r3, r3
 800355a:	4313      	orrs	r3, r2
 800355c:	b21b      	sxth	r3, r3
 800355e:	b29b      	uxth	r3, r3
 8003560:	055b      	lsls	r3, r3, #21
 8003562:	0d5b      	lsrs	r3, r3, #21
 8003564:	b29b      	uxth	r3, r3
 8003566:	0018      	movs	r0, r3
 8003568:	f000 f920 	bl	80037ac <SBUS_Transform>
 800356c:	0003      	movs	r3, r0
 800356e:	001a      	movs	r2, r3
 8003570:	4b88      	ldr	r3, [pc, #544]	; (8003794 <SBUS_Update+0x3b0>)
 8003572:	625a      	str	r2, [r3, #36]	; 0x24

		dataSBUS.ch[8]  = SBUS_Transform( (int16_t)( (rxSBUS[12]	   | rxSBUS[13] << 8 ) 					   & 0x07FF) );
 8003574:	4b86      	ldr	r3, [pc, #536]	; (8003790 <SBUS_Update+0x3ac>)
 8003576:	7b1b      	ldrb	r3, [r3, #12]
 8003578:	b21a      	sxth	r2, r3
 800357a:	4b85      	ldr	r3, [pc, #532]	; (8003790 <SBUS_Update+0x3ac>)
 800357c:	7b5b      	ldrb	r3, [r3, #13]
 800357e:	021b      	lsls	r3, r3, #8
 8003580:	b21b      	sxth	r3, r3
 8003582:	4313      	orrs	r3, r2
 8003584:	b21b      	sxth	r3, r3
 8003586:	b29b      	uxth	r3, r3
 8003588:	055b      	lsls	r3, r3, #21
 800358a:	0d5b      	lsrs	r3, r3, #21
 800358c:	b29b      	uxth	r3, r3
 800358e:	0018      	movs	r0, r3
 8003590:	f000 f90c 	bl	80037ac <SBUS_Transform>
 8003594:	0003      	movs	r3, r0
 8003596:	001a      	movs	r2, r3
 8003598:	4b7e      	ldr	r3, [pc, #504]	; (8003794 <SBUS_Update+0x3b0>)
 800359a:	629a      	str	r2, [r3, #40]	; 0x28
		dataSBUS.ch[9]  = SBUS_Transform( (int16_t)( (rxSBUS[13] >> 3 | rxSBUS[14] << 5 ) 					   & 0x07FF) );
 800359c:	4b7c      	ldr	r3, [pc, #496]	; (8003790 <SBUS_Update+0x3ac>)
 800359e:	7b5b      	ldrb	r3, [r3, #13]
 80035a0:	08db      	lsrs	r3, r3, #3
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	b21a      	sxth	r2, r3
 80035a6:	4b7a      	ldr	r3, [pc, #488]	; (8003790 <SBUS_Update+0x3ac>)
 80035a8:	7b9b      	ldrb	r3, [r3, #14]
 80035aa:	015b      	lsls	r3, r3, #5
 80035ac:	b21b      	sxth	r3, r3
 80035ae:	4313      	orrs	r3, r2
 80035b0:	b21b      	sxth	r3, r3
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	055b      	lsls	r3, r3, #21
 80035b6:	0d5b      	lsrs	r3, r3, #21
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	0018      	movs	r0, r3
 80035bc:	f000 f8f6 	bl	80037ac <SBUS_Transform>
 80035c0:	0003      	movs	r3, r0
 80035c2:	001a      	movs	r2, r3
 80035c4:	4b73      	ldr	r3, [pc, #460]	; (8003794 <SBUS_Update+0x3b0>)
 80035c6:	62da      	str	r2, [r3, #44]	; 0x2c
		dataSBUS.ch[10] = SBUS_Transform( (int16_t)( (rxSBUS[14] >> 6 | rxSBUS[15] << 2  | rxSBUS[16] << 10 ) & 0x07FF) );
 80035c8:	4b71      	ldr	r3, [pc, #452]	; (8003790 <SBUS_Update+0x3ac>)
 80035ca:	7b9b      	ldrb	r3, [r3, #14]
 80035cc:	099b      	lsrs	r3, r3, #6
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	b21a      	sxth	r2, r3
 80035d2:	4b6f      	ldr	r3, [pc, #444]	; (8003790 <SBUS_Update+0x3ac>)
 80035d4:	7bdb      	ldrb	r3, [r3, #15]
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	b21b      	sxth	r3, r3
 80035da:	4313      	orrs	r3, r2
 80035dc:	b21a      	sxth	r2, r3
 80035de:	4b6c      	ldr	r3, [pc, #432]	; (8003790 <SBUS_Update+0x3ac>)
 80035e0:	7c1b      	ldrb	r3, [r3, #16]
 80035e2:	029b      	lsls	r3, r3, #10
 80035e4:	b21b      	sxth	r3, r3
 80035e6:	4313      	orrs	r3, r2
 80035e8:	b21b      	sxth	r3, r3
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	055b      	lsls	r3, r3, #21
 80035ee:	0d5b      	lsrs	r3, r3, #21
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	0018      	movs	r0, r3
 80035f4:	f000 f8da 	bl	80037ac <SBUS_Transform>
 80035f8:	0003      	movs	r3, r0
 80035fa:	001a      	movs	r2, r3
 80035fc:	4b65      	ldr	r3, [pc, #404]	; (8003794 <SBUS_Update+0x3b0>)
 80035fe:	631a      	str	r2, [r3, #48]	; 0x30
		dataSBUS.ch[11] = SBUS_Transform( (int16_t)( (rxSBUS[16] >> 1 | rxSBUS[17] << 7 ) 					   & 0x07FF) );
 8003600:	4b63      	ldr	r3, [pc, #396]	; (8003790 <SBUS_Update+0x3ac>)
 8003602:	7c1b      	ldrb	r3, [r3, #16]
 8003604:	085b      	lsrs	r3, r3, #1
 8003606:	b2db      	uxtb	r3, r3
 8003608:	b21a      	sxth	r2, r3
 800360a:	4b61      	ldr	r3, [pc, #388]	; (8003790 <SBUS_Update+0x3ac>)
 800360c:	7c5b      	ldrb	r3, [r3, #17]
 800360e:	01db      	lsls	r3, r3, #7
 8003610:	b21b      	sxth	r3, r3
 8003612:	4313      	orrs	r3, r2
 8003614:	b21b      	sxth	r3, r3
 8003616:	b29b      	uxth	r3, r3
 8003618:	055b      	lsls	r3, r3, #21
 800361a:	0d5b      	lsrs	r3, r3, #21
 800361c:	b29b      	uxth	r3, r3
 800361e:	0018      	movs	r0, r3
 8003620:	f000 f8c4 	bl	80037ac <SBUS_Transform>
 8003624:	0003      	movs	r3, r0
 8003626:	001a      	movs	r2, r3
 8003628:	4b5a      	ldr	r3, [pc, #360]	; (8003794 <SBUS_Update+0x3b0>)
 800362a:	635a      	str	r2, [r3, #52]	; 0x34
		dataSBUS.ch[12] = SBUS_Transform( (int16_t)( (rxSBUS[17] >> 4 | rxSBUS[18] << 4 ) 					   & 0x07FF) );
 800362c:	4b58      	ldr	r3, [pc, #352]	; (8003790 <SBUS_Update+0x3ac>)
 800362e:	7c5b      	ldrb	r3, [r3, #17]
 8003630:	091b      	lsrs	r3, r3, #4
 8003632:	b2db      	uxtb	r3, r3
 8003634:	b21a      	sxth	r2, r3
 8003636:	4b56      	ldr	r3, [pc, #344]	; (8003790 <SBUS_Update+0x3ac>)
 8003638:	7c9b      	ldrb	r3, [r3, #18]
 800363a:	011b      	lsls	r3, r3, #4
 800363c:	b21b      	sxth	r3, r3
 800363e:	4313      	orrs	r3, r2
 8003640:	b21b      	sxth	r3, r3
 8003642:	b29b      	uxth	r3, r3
 8003644:	055b      	lsls	r3, r3, #21
 8003646:	0d5b      	lsrs	r3, r3, #21
 8003648:	b29b      	uxth	r3, r3
 800364a:	0018      	movs	r0, r3
 800364c:	f000 f8ae 	bl	80037ac <SBUS_Transform>
 8003650:	0003      	movs	r3, r0
 8003652:	001a      	movs	r2, r3
 8003654:	4b4f      	ldr	r3, [pc, #316]	; (8003794 <SBUS_Update+0x3b0>)
 8003656:	639a      	str	r2, [r3, #56]	; 0x38
		dataSBUS.ch[13] = SBUS_Transform( (int16_t)( (rxSBUS[18] >> 7 | rxSBUS[19] << 1 | rxSBUS[20] ) 	   & 0x07FF) );
 8003658:	4b4d      	ldr	r3, [pc, #308]	; (8003790 <SBUS_Update+0x3ac>)
 800365a:	7c9b      	ldrb	r3, [r3, #18]
 800365c:	09db      	lsrs	r3, r3, #7
 800365e:	b2db      	uxtb	r3, r3
 8003660:	b21a      	sxth	r2, r3
 8003662:	4b4b      	ldr	r3, [pc, #300]	; (8003790 <SBUS_Update+0x3ac>)
 8003664:	7cdb      	ldrb	r3, [r3, #19]
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	b21b      	sxth	r3, r3
 800366a:	4313      	orrs	r3, r2
 800366c:	b21a      	sxth	r2, r3
 800366e:	4b48      	ldr	r3, [pc, #288]	; (8003790 <SBUS_Update+0x3ac>)
 8003670:	7d1b      	ldrb	r3, [r3, #20]
 8003672:	b21b      	sxth	r3, r3
 8003674:	4313      	orrs	r3, r2
 8003676:	b21b      	sxth	r3, r3
 8003678:	b29b      	uxth	r3, r3
 800367a:	055b      	lsls	r3, r3, #21
 800367c:	0d5b      	lsrs	r3, r3, #21
 800367e:	b29b      	uxth	r3, r3
 8003680:	0018      	movs	r0, r3
 8003682:	f000 f893 	bl	80037ac <SBUS_Transform>
 8003686:	0003      	movs	r3, r0
 8003688:	001a      	movs	r2, r3
 800368a:	4b42      	ldr	r3, [pc, #264]	; (8003794 <SBUS_Update+0x3b0>)
 800368c:	63da      	str	r2, [r3, #60]	; 0x3c
		dataSBUS.ch[14] = SBUS_Transform( (int16_t)( (rxSBUS[20] >> 2 | rxSBUS[21] << 6 )   				   & 0x07FF) );
 800368e:	4b40      	ldr	r3, [pc, #256]	; (8003790 <SBUS_Update+0x3ac>)
 8003690:	7d1b      	ldrb	r3, [r3, #20]
 8003692:	089b      	lsrs	r3, r3, #2
 8003694:	b2db      	uxtb	r3, r3
 8003696:	b21a      	sxth	r2, r3
 8003698:	4b3d      	ldr	r3, [pc, #244]	; (8003790 <SBUS_Update+0x3ac>)
 800369a:	7d5b      	ldrb	r3, [r3, #21]
 800369c:	019b      	lsls	r3, r3, #6
 800369e:	b21b      	sxth	r3, r3
 80036a0:	4313      	orrs	r3, r2
 80036a2:	b21b      	sxth	r3, r3
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	055b      	lsls	r3, r3, #21
 80036a8:	0d5b      	lsrs	r3, r3, #21
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	0018      	movs	r0, r3
 80036ae:	f000 f87d 	bl	80037ac <SBUS_Transform>
 80036b2:	0003      	movs	r3, r0
 80036b4:	001a      	movs	r2, r3
 80036b6:	4b37      	ldr	r3, [pc, #220]	; (8003794 <SBUS_Update+0x3b0>)
 80036b8:	641a      	str	r2, [r3, #64]	; 0x40
		dataSBUS.ch[15] = SBUS_Transform( (int16_t)( (rxSBUS[21] >> 5 | rxSBUS[22] << 3 ) 					   & 0x07FF) );
 80036ba:	4b35      	ldr	r3, [pc, #212]	; (8003790 <SBUS_Update+0x3ac>)
 80036bc:	7d5b      	ldrb	r3, [r3, #21]
 80036be:	095b      	lsrs	r3, r3, #5
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	b21a      	sxth	r2, r3
 80036c4:	4b32      	ldr	r3, [pc, #200]	; (8003790 <SBUS_Update+0x3ac>)
 80036c6:	7d9b      	ldrb	r3, [r3, #22]
 80036c8:	00db      	lsls	r3, r3, #3
 80036ca:	b21b      	sxth	r3, r3
 80036cc:	4313      	orrs	r3, r2
 80036ce:	b21b      	sxth	r3, r3
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	055b      	lsls	r3, r3, #21
 80036d4:	0d5b      	lsrs	r3, r3, #21
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	0018      	movs	r0, r3
 80036da:	f000 f867 	bl	80037ac <SBUS_Transform>
 80036de:	0003      	movs	r3, r0
 80036e0:	001a      	movs	r2, r3
 80036e2:	4b2c      	ldr	r3, [pc, #176]	; (8003794 <SBUS_Update+0x3b0>)
 80036e4:	645a      	str	r2, [r3, #68]	; 0x44

		dataSBUS.ch17      = rxSBUS[23] & SBUS_CH17_MASK;
 80036e6:	4b2a      	ldr	r3, [pc, #168]	; (8003790 <SBUS_Update+0x3ac>)
 80036e8:	7ddb      	ldrb	r3, [r3, #23]
 80036ea:	001a      	movs	r2, r3
 80036ec:	2301      	movs	r3, #1
 80036ee:	4013      	ands	r3, r2
 80036f0:	1e5a      	subs	r2, r3, #1
 80036f2:	4193      	sbcs	r3, r2
 80036f4:	b2da      	uxtb	r2, r3
 80036f6:	4b27      	ldr	r3, [pc, #156]	; (8003794 <SBUS_Update+0x3b0>)
 80036f8:	70da      	strb	r2, [r3, #3]
		dataSBUS.ch17      = rxSBUS[23] & SBUS_CH18_MASK;
 80036fa:	4b25      	ldr	r3, [pc, #148]	; (8003790 <SBUS_Update+0x3ac>)
 80036fc:	7ddb      	ldrb	r3, [r3, #23]
 80036fe:	001a      	movs	r2, r3
 8003700:	2302      	movs	r3, #2
 8003702:	4013      	ands	r3, r2
 8003704:	1e5a      	subs	r2, r3, #1
 8003706:	4193      	sbcs	r3, r2
 8003708:	b2da      	uxtb	r2, r3
 800370a:	4b22      	ldr	r3, [pc, #136]	; (8003794 <SBUS_Update+0x3b0>)
 800370c:	70da      	strb	r2, [r3, #3]
		dataSBUS.failsafe  = rxSBUS[23] & SBUS_FAILSAFE_MASK;
 800370e:	4b20      	ldr	r3, [pc, #128]	; (8003790 <SBUS_Update+0x3ac>)
 8003710:	7ddb      	ldrb	r3, [r3, #23]
 8003712:	001a      	movs	r2, r3
 8003714:	2308      	movs	r3, #8
 8003716:	4013      	ands	r3, r2
 8003718:	1e5a      	subs	r2, r3, #1
 800371a:	4193      	sbcs	r3, r2
 800371c:	b2da      	uxtb	r2, r3
 800371e:	4b1d      	ldr	r3, [pc, #116]	; (8003794 <SBUS_Update+0x3b0>)
 8003720:	709a      	strb	r2, [r3, #2]
		dataSBUS.frameLost = rxSBUS[23] & SBUS_LOSTFRAME_MASK;
 8003722:	4b1b      	ldr	r3, [pc, #108]	; (8003790 <SBUS_Update+0x3ac>)
 8003724:	7ddb      	ldrb	r3, [r3, #23]
 8003726:	001a      	movs	r2, r3
 8003728:	2304      	movs	r3, #4
 800372a:	4013      	ands	r3, r2
 800372c:	1e5a      	subs	r2, r3, #1
 800372e:	4193      	sbcs	r3, r2
 8003730:	b2da      	uxtb	r2, r3
 8003732:	4b18      	ldr	r3, [pc, #96]	; (8003794 <SBUS_Update+0x3b0>)
 8003734:	705a      	strb	r2, [r3, #1]

		// Reset Flags
		rxHeartbeatSBUS = false;
 8003736:	4b15      	ldr	r3, [pc, #84]	; (800378c <SBUS_Update+0x3a8>)
 8003738:	2200      	movs	r2, #0
 800373a:	701a      	strb	r2, [r3, #0]
		dataSBUS.inputLost = false;
 800373c:	4b15      	ldr	r3, [pc, #84]	; (8003794 <SBUS_Update+0x3b0>)
 800373e:	2200      	movs	r2, #0
 8003740:	701a      	strb	r2, [r3, #0]
		prev = now;
 8003742:	4b15      	ldr	r3, [pc, #84]	; (8003798 <SBUS_Update+0x3b4>)
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	601a      	str	r2, [r3, #0]
	}

	// Check Failsafe
	if (dataSBUS.failsafe)
 8003748:	4b12      	ldr	r3, [pc, #72]	; (8003794 <SBUS_Update+0x3b0>)
 800374a:	789b      	ldrb	r3, [r3, #2]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d003      	beq.n	8003758 <SBUS_Update+0x374>
	{
		dataSBUS.inputLost = true;
 8003750:	4b10      	ldr	r3, [pc, #64]	; (8003794 <SBUS_Update+0x3b0>)
 8003752:	2201      	movs	r2, #1
 8003754:	701a      	strb	r2, [r3, #0]
	else if (!dataSBUS.inputLost && SBUS_TIMEOUT_FS <= (now - prev))
	{
		dataSBUS.inputLost = true;
		memset(rxSBUS, 0, sizeof(rxSBUS));
	}
}
 8003756:	e015      	b.n	8003784 <SBUS_Update+0x3a0>
	else if (!dataSBUS.inputLost && SBUS_TIMEOUT_FS <= (now - prev))
 8003758:	4b0e      	ldr	r3, [pc, #56]	; (8003794 <SBUS_Update+0x3b0>)
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	2201      	movs	r2, #1
 800375e:	4053      	eors	r3, r2
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00e      	beq.n	8003784 <SBUS_Update+0x3a0>
 8003766:	4b0c      	ldr	r3, [pc, #48]	; (8003798 <SBUS_Update+0x3b4>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b29      	cmp	r3, #41	; 0x29
 8003770:	d908      	bls.n	8003784 <SBUS_Update+0x3a0>
		dataSBUS.inputLost = true;
 8003772:	4b08      	ldr	r3, [pc, #32]	; (8003794 <SBUS_Update+0x3b0>)
 8003774:	2201      	movs	r2, #1
 8003776:	701a      	strb	r2, [r3, #0]
		memset(rxSBUS, 0, sizeof(rxSBUS));
 8003778:	4b05      	ldr	r3, [pc, #20]	; (8003790 <SBUS_Update+0x3ac>)
 800377a:	2232      	movs	r2, #50	; 0x32
 800377c:	2100      	movs	r1, #0
 800377e:	0018      	movs	r0, r3
 8003780:	f001 fc0d 	bl	8004f9e <memset>
}
 8003784:	46c0      	nop			; (mov r8, r8)
 8003786:	46bd      	mov	sp, r7
 8003788:	b002      	add	sp, #8
 800378a:	bd80      	pop	{r7, pc}
 800378c:	2000050a 	.word	0x2000050a
 8003790:	200004d8 	.word	0x200004d8
 8003794:	2000050c 	.word	0x2000050c
 8003798:	20000554 	.word	0x20000554

0800379c <SBUS_GetDataPtr>:

SBUS_Data* SBUS_GetDataPtr (void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
	return &dataSBUS;
 80037a0:	4b01      	ldr	r3, [pc, #4]	; (80037a8 <SBUS_GetDataPtr+0xc>)
}
 80037a2:	0018      	movs	r0, r3
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	2000050c 	.word	0x2000050c

080037ac <SBUS_Transform>:
/*
 * PRIVATE FUNCTIONS
 */

uint16_t SBUS_Transform (uint16_t r)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	0002      	movs	r2, r0
 80037b4:	1dbb      	adds	r3, r7, #6
 80037b6:	801a      	strh	r2, [r3, #0]
	uint32_t retVal = 0;
 80037b8:	2300      	movs	r3, #0
 80037ba:	60fb      	str	r3, [r7, #12]

	if (r == 0) {
 80037bc:	1dbb      	adds	r3, r7, #6
 80037be:	881b      	ldrh	r3, [r3, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d102      	bne.n	80037ca <SBUS_Transform+0x1e>
		retVal = 0;
 80037c4:	2300      	movs	r3, #0
 80037c6:	60fb      	str	r3, [r7, #12]
 80037c8:	e019      	b.n	80037fe <SBUS_Transform+0x52>
	} else if (r < (SBUS_MIN - SBUS_THRESHOLD)) {
		retVal = 0;
	} else if (r < SBUS_MIN) {
 80037ca:	1dbb      	adds	r3, r7, #6
 80037cc:	881b      	ldrh	r3, [r3, #0]
 80037ce:	2bab      	cmp	r3, #171	; 0xab
 80037d0:	d802      	bhi.n	80037d8 <SBUS_Transform+0x2c>
		retVal = SBUS_MIN;
 80037d2:	23ac      	movs	r3, #172	; 0xac
 80037d4:	60fb      	str	r3, [r7, #12]
 80037d6:	e012      	b.n	80037fe <SBUS_Transform+0x52>
	} else if (r <= SBUS_MAX) {
 80037d8:	1dbb      	adds	r3, r7, #6
 80037da:	881b      	ldrh	r3, [r3, #0]
 80037dc:	4a18      	ldr	r2, [pc, #96]	; (8003840 <SBUS_Transform+0x94>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d803      	bhi.n	80037ea <SBUS_Transform+0x3e>
		retVal = r;
 80037e2:	1dbb      	adds	r3, r7, #6
 80037e4:	881b      	ldrh	r3, [r3, #0]
 80037e6:	60fb      	str	r3, [r7, #12]
 80037e8:	e009      	b.n	80037fe <SBUS_Transform+0x52>
	} else if (r < (SBUS_MAX + SBUS_THRESHOLD))	{
 80037ea:	1dbb      	adds	r3, r7, #6
 80037ec:	881b      	ldrh	r3, [r3, #0]
 80037ee:	4a15      	ldr	r2, [pc, #84]	; (8003844 <SBUS_Transform+0x98>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d802      	bhi.n	80037fa <SBUS_Transform+0x4e>
		retVal = SBUS_MAX;
 80037f4:	4b12      	ldr	r3, [pc, #72]	; (8003840 <SBUS_Transform+0x94>)
 80037f6:	60fb      	str	r3, [r7, #12]
 80037f8:	e001      	b.n	80037fe <SBUS_Transform+0x52>
	} else {
		retVal = 0;
 80037fa:	2300      	movs	r3, #0
 80037fc:	60fb      	str	r3, [r7, #12]
	}

	if (retVal)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d017      	beq.n	8003834 <SBUS_Transform+0x88>
	{
		retVal *= SBUS_MAP_RANGE;
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	0013      	movs	r3, r2
 8003808:	015b      	lsls	r3, r3, #5
 800380a:	1a9b      	subs	r3, r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	189b      	adds	r3, r3, r2
 8003810:	00db      	lsls	r3, r3, #3
 8003812:	60fb      	str	r3, [r7, #12]
		retVal /= SBUS_RANGE;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	490c      	ldr	r1, [pc, #48]	; (8003848 <SBUS_Transform+0x9c>)
 8003818:	0018      	movs	r0, r3
 800381a:	f7fc fc75 	bl	8000108 <__udivsi3>
 800381e:	0003      	movs	r3, r0
 8003820:	60fb      	str	r3, [r7, #12]
		retVal += SBUS_MAP_MIN;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	22fa      	movs	r2, #250	; 0xfa
 8003826:	0092      	lsls	r2, r2, #2
 8003828:	4694      	mov	ip, r2
 800382a:	4463      	add	r3, ip
 800382c:	60fb      	str	r3, [r7, #12]
		retVal -= (SBUS_MIN * SBUS_MAP_RANGE / SBUS_RANGE);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	3b68      	subs	r3, #104	; 0x68
 8003832:	60fb      	str	r3, [r7, #12]
	}

	return (uint16_t)retVal;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	b29b      	uxth	r3, r3
}
 8003838:	0018      	movs	r0, r3
 800383a:	46bd      	mov	sp, r7
 800383c:	b004      	add	sp, #16
 800383e:	bd80      	pop	{r7, pc}
 8003840:	00000713 	.word	0x00000713
 8003844:	00000906 	.word	0x00000906
 8003848:	00000667 	.word	0x00000667

0800384c <SBUS_HandleUART>:


void SBUS_HandleUART (void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
	uint32_t now = CORE_GetTick();
 8003852:	f7ff fd89 	bl	8003368 <CORE_GetTick>
 8003856:	0003      	movs	r3, r0
 8003858:	607b      	str	r3, [r7, #4]
	static uint32_t timeout = 0;
	static bool detH = false;

	// Check for Start of transmission (Header)
	if ( !detH )
 800385a:	4b25      	ldr	r3, [pc, #148]	; (80038f0 <SBUS_HandleUART+0xa4>)
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	2201      	movs	r2, #1
 8003860:	4053      	eors	r3, r2
 8003862:	b2db      	uxtb	r3, r3
 8003864:	2b00      	cmp	r3, #0
 8003866:	d01a      	beq.n	800389e <SBUS_HandleUART+0x52>
	{
		// Process All Available Bytes in Buffer Until Header Detected
		while (UART_ReadCount(SBUS_UART) >= SBUS_HEADER_LEN)
 8003868:	e012      	b.n	8003890 <SBUS_HandleUART+0x44>
		{
			// Read in Next Byte
			UART_Read(SBUS_UART, &rxSBUS[SBUS_HEADER_INDEX], SBUS_HEADER_LEN);
 800386a:	4b22      	ldr	r3, [pc, #136]	; (80038f4 <SBUS_HandleUART+0xa8>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4922      	ldr	r1, [pc, #136]	; (80038f8 <SBUS_HandleUART+0xac>)
 8003870:	2201      	movs	r2, #1
 8003872:	0018      	movs	r0, r3
 8003874:	f001 fa0b 	bl	8004c8e <UART_Read>
			// Check if the Byte is the Message Header1
			if ( rxSBUS[SBUS_HEADER_INDEX] == SBUS_HEADER )
 8003878:	4b1f      	ldr	r3, [pc, #124]	; (80038f8 <SBUS_HandleUART+0xac>)
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b0f      	cmp	r3, #15
 800387e:	d107      	bne.n	8003890 <SBUS_HandleUART+0x44>
			{
				detH = true;
 8003880:	4b1b      	ldr	r3, [pc, #108]	; (80038f0 <SBUS_HandleUART+0xa4>)
 8003882:	2201      	movs	r2, #1
 8003884:	701a      	strb	r2, [r3, #0]
				timeout = now + SBUS_TIMEOUT_IP;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	1d1a      	adds	r2, r3, #4
 800388a:	4b1c      	ldr	r3, [pc, #112]	; (80038fc <SBUS_HandleUART+0xb0>)
 800388c:	601a      	str	r2, [r3, #0]
				break;
 800388e:	e006      	b.n	800389e <SBUS_HandleUART+0x52>
		while (UART_ReadCount(SBUS_UART) >= SBUS_HEADER_LEN)
 8003890:	4b18      	ldr	r3, [pc, #96]	; (80038f4 <SBUS_HandleUART+0xa8>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	0018      	movs	r0, r3
 8003896:	f001 f9cd 	bl	8004c34 <UART_ReadCount>
 800389a:	1e03      	subs	r3, r0, #0
 800389c:	d1e5      	bne.n	800386a <SBUS_HandleUART+0x1e>
			}
		}
	}

	// Header Detected, Read Remaining Transmission
	if ( detH )
 800389e:	4b14      	ldr	r3, [pc, #80]	; (80038f0 <SBUS_HandleUART+0xa4>)
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d020      	beq.n	80038e8 <SBUS_HandleUART+0x9c>
	{
		// Only Proceed When Full Message is Ready
		if ( UART_ReadCount(SBUS_UART) >= (SBUS_PAYLOAD_LEN - SBUS_HEADER_LEN) )
 80038a6:	4b13      	ldr	r3, [pc, #76]	; (80038f4 <SBUS_HandleUART+0xa8>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	0018      	movs	r0, r3
 80038ac:	f001 f9c2 	bl	8004c34 <UART_ReadCount>
 80038b0:	0003      	movs	r3, r0
 80038b2:	2b17      	cmp	r3, #23
 80038b4:	d910      	bls.n	80038d8 <SBUS_HandleUART+0x8c>
		{
			// Read in Remaining Message
			UART_Read(SBUS_UART, &rxSBUS[SBUS_DATA_INDEX], (SBUS_PAYLOAD_LEN - SBUS_HEADER_LEN));
 80038b6:	4b0f      	ldr	r3, [pc, #60]	; (80038f4 <SBUS_HandleUART+0xa8>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4911      	ldr	r1, [pc, #68]	; (8003900 <SBUS_HandleUART+0xb4>)
 80038bc:	2218      	movs	r2, #24
 80038be:	0018      	movs	r0, r3
 80038c0:	f001 f9e5 	bl	8004c8e <UART_Read>
			//
			if ( rxSBUS[SBUS_FOOTER_INDEX] == SBUS_FOOTER ) {
 80038c4:	4b0c      	ldr	r3, [pc, #48]	; (80038f8 <SBUS_HandleUART+0xac>)
 80038c6:	7e1b      	ldrb	r3, [r3, #24]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d102      	bne.n	80038d2 <SBUS_HandleUART+0x86>
				rxHeartbeatSBUS = true;
 80038cc:	4b0d      	ldr	r3, [pc, #52]	; (8003904 <SBUS_HandleUART+0xb8>)
 80038ce:	2201      	movs	r2, #1
 80038d0:	701a      	strb	r2, [r3, #0]
			}
			// Reset the detected flag
			detH = false;
 80038d2:	4b07      	ldr	r3, [pc, #28]	; (80038f0 <SBUS_HandleUART+0xa4>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	701a      	strb	r2, [r3, #0]
		}

		// Check for a timeout
		if ( now > timeout)
 80038d8:	4b08      	ldr	r3, [pc, #32]	; (80038fc <SBUS_HandleUART+0xb0>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d902      	bls.n	80038e8 <SBUS_HandleUART+0x9c>
		{
			detH = false;
 80038e2:	4b03      	ldr	r3, [pc, #12]	; (80038f0 <SBUS_HandleUART+0xa4>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80038e8:	46c0      	nop			; (mov r8, r8)
 80038ea:	46bd      	mov	sp, r7
 80038ec:	b002      	add	sp, #8
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	20000558 	.word	0x20000558
 80038f4:	2000028c 	.word	0x2000028c
 80038f8:	200004d8 	.word	0x200004d8
 80038fc:	2000055c 	.word	0x2000055c
 8003900:	200004d9 	.word	0x200004d9
 8003904:	2000050a 	.word	0x2000050a

08003908 <ADC_Init>:
/*
 * PUBLIC FUNCTIONS
 */

void ADC_Init(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	af00      	add	r7, sp, #0
	CLK_EnableADCCLK();
 800390c:	f000 f992 	bl	8003c34 <CLK_EnableADCCLK>
	__HAL_RCC_ADC1_CLK_ENABLE();
 8003910:	4b25      	ldr	r3, [pc, #148]	; (80039a8 <ADC_Init+0xa0>)
 8003912:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003914:	4b24      	ldr	r3, [pc, #144]	; (80039a8 <ADC_Init+0xa0>)
 8003916:	2180      	movs	r1, #128	; 0x80
 8003918:	0089      	lsls	r1, r1, #2
 800391a:	430a      	orrs	r2, r1
 800391c:	635a      	str	r2, [r3, #52]	; 0x34

	_ADC_CLOCK_PRESCALER(ADCx, ADC_CLOCK_PRESCALAR);
 800391e:	4b23      	ldr	r3, [pc, #140]	; (80039ac <ADC_Init+0xa4>)
 8003920:	691a      	ldr	r2, [r3, #16]
 8003922:	4b22      	ldr	r3, [pc, #136]	; (80039ac <ADC_Init+0xa4>)
 8003924:	0092      	lsls	r2, r2, #2
 8003926:	0892      	lsrs	r2, r2, #2
 8003928:	611a      	str	r2, [r3, #16]
 800392a:	4b21      	ldr	r3, [pc, #132]	; (80039b0 <ADC_Init+0xa8>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a21      	ldr	r2, [pc, #132]	; (80039b4 <ADC_Init+0xac>)
 8003930:	401a      	ands	r2, r3
 8003932:	4b1f      	ldr	r3, [pc, #124]	; (80039b0 <ADC_Init+0xa8>)
 8003934:	2180      	movs	r1, #128	; 0x80
 8003936:	0309      	lsls	r1, r1, #12
 8003938:	430a      	orrs	r2, r1
 800393a:	601a      	str	r2, [r3, #0]

#ifdef ADC_CCR_LFMEN
	// Disable the low power mode
	MODIFY_REG(ADC->CCR, ADC_CCR_LFMEN, __HAL_ADC_CCR_LOWFREQUENCY(DISABLE));
 800393c:	4b1c      	ldr	r3, [pc, #112]	; (80039b0 <ADC_Init+0xa8>)
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	4b1b      	ldr	r3, [pc, #108]	; (80039b0 <ADC_Init+0xa8>)
 8003942:	491d      	ldr	r1, [pc, #116]	; (80039b8 <ADC_Init+0xb0>)
 8003944:	400a      	ands	r2, r1
 8003946:	601a      	str	r2, [r3, #0]
#endif
#ifdef ADC_CR_ADVREGEN
	// Enable the voltage regulator
	if (HAL_IS_BIT_CLR(ADCx->CR, ADC_CR_ADVREGEN))
 8003948:	4b18      	ldr	r3, [pc, #96]	; (80039ac <ADC_Init+0xa4>)
 800394a:	689a      	ldr	r2, [r3, #8]
 800394c:	2380      	movs	r3, #128	; 0x80
 800394e:	055b      	lsls	r3, r3, #21
 8003950:	4013      	ands	r3, r2
 8003952:	d109      	bne.n	8003968 <ADC_Init+0x60>
	{
		ADCx->CR |= ADC_CR_ADVREGEN;
 8003954:	4b15      	ldr	r3, [pc, #84]	; (80039ac <ADC_Init+0xa4>)
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	4b14      	ldr	r3, [pc, #80]	; (80039ac <ADC_Init+0xa4>)
 800395a:	2180      	movs	r1, #128	; 0x80
 800395c:	0549      	lsls	r1, r1, #21
 800395e:	430a      	orrs	r2, r1
 8003960:	609a      	str	r2, [r3, #8]
		// Wait for regulator stability.
		US_Delay(20);
 8003962:	2014      	movs	r0, #20
 8003964:	f001 fadc 	bl	8004f20 <US_Delay>
	}
#endif

	ADCx->CFGR1 = ADC_DATAALIGN_RIGHT
 8003968:	4b10      	ldr	r3, [pc, #64]	; (80039ac <ADC_Init+0xa4>)
 800396a:	2200      	movs	r2, #0
 800396c:	60da      	str	r2, [r3, #12]
		| ADC_CFGR1_AUTOWAIT(DISABLE)
		| ADC_CFGR1_AUTOOFF(DISABLE)
		| ADC_OVR_DATA_PRESERVED
		| ADC_RESOLUTION_12B;

	ADCx->CFGR2 = 0;
 800396e:	4b0f      	ldr	r3, [pc, #60]	; (80039ac <ADC_Init+0xa4>)
 8003970:	2200      	movs	r2, #0
 8003972:	611a      	str	r2, [r3, #16]
	// Configure the default sampling rate
	MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMPR, ADC_SMPR_DEFAULT);
 8003974:	4b0d      	ldr	r3, [pc, #52]	; (80039ac <ADC_Init+0xa4>)
 8003976:	695b      	ldr	r3, [r3, #20]
 8003978:	2207      	movs	r2, #7
 800397a:	4393      	bics	r3, r2
 800397c:	001a      	movs	r2, r3
 800397e:	4b0b      	ldr	r3, [pc, #44]	; (80039ac <ADC_Init+0xa4>)
 8003980:	2106      	movs	r1, #6
 8003982:	430a      	orrs	r2, r1
 8003984:	615a      	str	r2, [r3, #20]

	ADC_Calibrate();
 8003986:	f000 f8c7 	bl	8003b18 <ADC_Calibrate>
	__HAL_ADC_ENABLE(&gADC);
 800398a:	4b0c      	ldr	r3, [pc, #48]	; (80039bc <ADC_Init+0xb4>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	4b0a      	ldr	r3, [pc, #40]	; (80039bc <ADC_Init+0xb4>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2101      	movs	r1, #1
 8003996:	430a      	orrs	r2, r1
 8003998:	609a      	str	r2, [r3, #8]
	ADC_WaitForFlag(ADC_FLAG_RDY);
 800399a:	2001      	movs	r0, #1
 800399c:	f000 f8a8 	bl	8003af0 <ADC_WaitForFlag>
}
 80039a0:	46c0      	nop			; (mov r8, r8)
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	46c0      	nop			; (mov r8, r8)
 80039a8:	40021000 	.word	0x40021000
 80039ac:	40012400 	.word	0x40012400
 80039b0:	40012708 	.word	0x40012708
 80039b4:	ffc3ffff 	.word	0xffc3ffff
 80039b8:	fdffffff 	.word	0xfdffffff
 80039bc:	20000004 	.word	0x20000004

080039c0 <ADC_Read>:
	}
}
#endif

uint32_t ADC_Read(ADC_Channel_t channel)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
	__HAL_ADC_CLEAR_FLAG(&gADC, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80039c8:	4b0d      	ldr	r3, [pc, #52]	; (8003a00 <ADC_Read+0x40>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	221c      	movs	r2, #28
 80039ce:	601a      	str	r2, [r3, #0]

	ADCx->CHSELR = channel;
 80039d0:	4b0c      	ldr	r3, [pc, #48]	; (8003a04 <ADC_Read+0x44>)
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	629a      	str	r2, [r3, #40]	; 0x28

	// Put it back in single shot mode.
	MODIFY_REG( ADCx->CFGR1,
 80039d6:	4b0b      	ldr	r3, [pc, #44]	; (8003a04 <ADC_Read+0x44>)
 80039d8:	68da      	ldr	r2, [r3, #12]
 80039da:	4b0a      	ldr	r3, [pc, #40]	; (8003a04 <ADC_Read+0x44>)
 80039dc:	490a      	ldr	r1, [pc, #40]	; (8003a08 <ADC_Read+0x48>)
 80039de:	400a      	ands	r2, r1
 80039e0:	60da      	str	r2, [r3, #12]
				ADC_CFGR1_DMACFG | ADC_CFGR1_CONT | ADC_CFGR1_DMAEN,
				ADC_CFGR1_CONTINUOUS(DISABLE) | ADC_CFGR1_DMACONTREQ(DISABLE)
			);

	ADCx->CR |= ADC_CR_ADSTART;
 80039e2:	4b08      	ldr	r3, [pc, #32]	; (8003a04 <ADC_Read+0x44>)
 80039e4:	689a      	ldr	r2, [r3, #8]
 80039e6:	4b07      	ldr	r3, [pc, #28]	; (8003a04 <ADC_Read+0x44>)
 80039e8:	2104      	movs	r1, #4
 80039ea:	430a      	orrs	r2, r1
 80039ec:	609a      	str	r2, [r3, #8]

	ADC_WaitForFlag(ADC_FLAG_EOC);
 80039ee:	2004      	movs	r0, #4
 80039f0:	f000 f87e 	bl	8003af0 <ADC_WaitForFlag>

	return ADCx->DR;
 80039f4:	4b03      	ldr	r3, [pc, #12]	; (8003a04 <ADC_Read+0x44>)
 80039f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80039f8:	0018      	movs	r0, r3
 80039fa:	46bd      	mov	sp, r7
 80039fc:	b002      	add	sp, #8
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	20000004 	.word	0x20000004
 8003a04:	40012400 	.word	0x40012400
 8003a08:	ffffdffc 	.word	0xffffdffc

08003a0c <AIN_AinToDivider>:
	__HAL_RCC_ADC1_CLK_DISABLE();
	CLK_DisableADCCLK();
}

uint32_t AIN_AinToDivider(uint32_t ain, uint32_t rlow, uint32_t rhigh)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
	return AIN_AinToMv(ain) * (rhigh + rlow) / rlow;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	0018      	movs	r0, r3
 8003a1c:	f000 f80e 	bl	8003a3c <AIN_AinToMv>
 8003a20:	0001      	movs	r1, r0
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	18d3      	adds	r3, r2, r3
 8003a28:	434b      	muls	r3, r1
 8003a2a:	68b9      	ldr	r1, [r7, #8]
 8003a2c:	0018      	movs	r0, r3
 8003a2e:	f7fc fb6b 	bl	8000108 <__udivsi3>
 8003a32:	0003      	movs	r3, r0
}
 8003a34:	0018      	movs	r0, r3
 8003a36:	46bd      	mov	sp, r7
 8003a38:	b004      	add	sp, #16
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <AIN_AinToMv>:

uint32_t AIN_AinToMv(uint32_t ain)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
	return (ain * ADC_VREF) / ADC_MAX;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a05      	ldr	r2, [pc, #20]	; (8003a5c <AIN_AinToMv+0x20>)
 8003a48:	4353      	muls	r3, r2
 8003a4a:	4905      	ldr	r1, [pc, #20]	; (8003a60 <AIN_AinToMv+0x24>)
 8003a4c:	0018      	movs	r0, r3
 8003a4e:	f7fc fb5b 	bl	8000108 <__udivsi3>
 8003a52:	0003      	movs	r3, r0
}
 8003a54:	0018      	movs	r0, r3
 8003a56:	46bd      	mov	sp, r7
 8003a58:	b002      	add	sp, #8
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	00000ce4 	.word	0x00000ce4
 8003a60:	00000fff 	.word	0x00000fff

08003a64 <ADC_ReadDieTemp>:

int32_t ADC_ReadDieTemp(void)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
	ADC->CCR |= ADC_CCR_TSEN;
 8003a6a:	4b1b      	ldr	r3, [pc, #108]	; (8003ad8 <ADC_ReadDieTemp+0x74>)
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	4b1a      	ldr	r3, [pc, #104]	; (8003ad8 <ADC_ReadDieTemp+0x74>)
 8003a70:	2180      	movs	r1, #128	; 0x80
 8003a72:	0409      	lsls	r1, r1, #16
 8003a74:	430a      	orrs	r2, r1
 8003a76:	601a      	str	r2, [r3, #0]
	US_Delay(10);
 8003a78:	200a      	movs	r0, #10
 8003a7a:	f001 fa51 	bl	8004f20 <US_Delay>
	int32_t ain = ADC_Read(ADC_Channel_Temp);
 8003a7e:	2380      	movs	r3, #128	; 0x80
 8003a80:	02db      	lsls	r3, r3, #11
 8003a82:	0018      	movs	r0, r3
 8003a84:	f7ff ff9c 	bl	80039c0 <ADC_Read>
 8003a88:	0003      	movs	r3, r0
 8003a8a:	607b      	str	r3, [r7, #4]
	ADC->CCR &= ~ADC_CCR_TSEN;
 8003a8c:	4b12      	ldr	r3, [pc, #72]	; (8003ad8 <ADC_ReadDieTemp+0x74>)
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	4b11      	ldr	r3, [pc, #68]	; (8003ad8 <ADC_ReadDieTemp+0x74>)
 8003a92:	4912      	ldr	r1, [pc, #72]	; (8003adc <ADC_ReadDieTemp+0x78>)
 8003a94:	400a      	ands	r2, r1
 8003a96:	601a      	str	r2, [r3, #0]

	// The temp sensor is not ratiometric, so the vref must be adjusted for.
	ain = ain * ADC_VREF / TS_CAL_VREF;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a11      	ldr	r2, [pc, #68]	; (8003ae0 <ADC_ReadDieTemp+0x7c>)
 8003a9c:	4353      	muls	r3, r2
 8003a9e:	4911      	ldr	r1, [pc, #68]	; (8003ae4 <ADC_ReadDieTemp+0x80>)
 8003aa0:	0018      	movs	r0, r3
 8003aa2:	f7fc fbbb 	bl	800021c <__divsi3>
 8003aa6:	0003      	movs	r3, r0
 8003aa8:	607b      	str	r3, [r7, #4]
	return ((ain - TS_CAL1_AIN) * (TS_CAL2_DEG - TS_CAL1_DEG) / (TS_CAL2_AIN - TS_CAL1_AIN)) + TS_CAL1_DEG;
 8003aaa:	4b0f      	ldr	r3, [pc, #60]	; (8003ae8 <ADC_ReadDieTemp+0x84>)
 8003aac:	881b      	ldrh	r3, [r3, #0]
 8003aae:	001a      	movs	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	1a9b      	subs	r3, r3, r2
 8003ab4:	2264      	movs	r2, #100	; 0x64
 8003ab6:	4353      	muls	r3, r2
 8003ab8:	4a0c      	ldr	r2, [pc, #48]	; (8003aec <ADC_ReadDieTemp+0x88>)
 8003aba:	8812      	ldrh	r2, [r2, #0]
 8003abc:	0011      	movs	r1, r2
 8003abe:	4a0a      	ldr	r2, [pc, #40]	; (8003ae8 <ADC_ReadDieTemp+0x84>)
 8003ac0:	8812      	ldrh	r2, [r2, #0]
 8003ac2:	1a8a      	subs	r2, r1, r2
 8003ac4:	0011      	movs	r1, r2
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	f7fc fba8 	bl	800021c <__divsi3>
 8003acc:	0003      	movs	r3, r0
 8003ace:	331e      	adds	r3, #30
}
 8003ad0:	0018      	movs	r0, r3
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	b002      	add	sp, #8
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	40012708 	.word	0x40012708
 8003adc:	ff7fffff 	.word	0xff7fffff
 8003ae0:	00000ce4 	.word	0x00000ce4
 8003ae4:	00000bb8 	.word	0x00000bb8
 8003ae8:	1ff8007a 	.word	0x1ff8007a
 8003aec:	1ff8007e 	.word	0x1ff8007e

08003af0 <ADC_WaitForFlag>:
		while(ADCx->CR & ADC_CR_ADSTART);
	}
}

static void ADC_WaitForFlag(uint32_t flag)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
	while (!__HAL_ADC_GET_FLAG(&gADC, flag));
 8003af8:	46c0      	nop			; (mov r8, r8)
 8003afa:	4b06      	ldr	r3, [pc, #24]	; (8003b14 <ADC_WaitForFlag+0x24>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	4013      	ands	r3, r2
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d1f7      	bne.n	8003afa <ADC_WaitForFlag+0xa>
}
 8003b0a:	46c0      	nop			; (mov r8, r8)
 8003b0c:	46c0      	nop			; (mov r8, r8)
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	b002      	add	sp, #8
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	20000004 	.word	0x20000004

08003b18 <ADC_Calibrate>:

static void ADC_Calibrate(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
	// Note, ADC must be disabled for this to occurr
	ADCx->CR |= ADC_CR_ADCAL;
 8003b1c:	4b07      	ldr	r3, [pc, #28]	; (8003b3c <ADC_Calibrate+0x24>)
 8003b1e:	689a      	ldr	r2, [r3, #8]
 8003b20:	4b06      	ldr	r3, [pc, #24]	; (8003b3c <ADC_Calibrate+0x24>)
 8003b22:	2180      	movs	r1, #128	; 0x80
 8003b24:	0609      	lsls	r1, r1, #24
 8003b26:	430a      	orrs	r2, r1
 8003b28:	609a      	str	r2, [r3, #8]
	while(ADCx->CR & ADC_CR_ADCAL);
 8003b2a:	46c0      	nop			; (mov r8, r8)
 8003b2c:	4b03      	ldr	r3, [pc, #12]	; (8003b3c <ADC_Calibrate+0x24>)
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	dbfb      	blt.n	8003b2c <ADC_Calibrate+0x14>
}
 8003b34:	46c0      	nop			; (mov r8, r8)
 8003b36:	46c0      	nop			; (mov r8, r8)
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	40012400 	.word	0x40012400

08003b40 <CLK_InitSYSCLK>:
/*
 * PUBLIC FUNCTIONS
 */

void CLK_InitSYSCLK(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
	__HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 8003b44:	4b33      	ldr	r3, [pc, #204]	; (8003c14 <CLK_InitSYSCLK+0xd4>)
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	4b32      	ldr	r3, [pc, #200]	; (8003c14 <CLK_InitSYSCLK+0xd4>)
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	601a      	str	r2, [r3, #0]
#ifdef CLK_USE_HSE
	__HAL_RCC_HSE_CONFIG(RCC_HSE_ON);
	while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U);
#endif
#ifdef CLK_USE_HSI
	__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_HSICALIBRATION_DEFAULT);
 8003b50:	4b31      	ldr	r3, [pc, #196]	; (8003c18 <CLK_InitSYSCLK+0xd8>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	4a31      	ldr	r2, [pc, #196]	; (8003c1c <CLK_InitSYSCLK+0xdc>)
 8003b56:	401a      	ands	r2, r3
 8003b58:	4b2f      	ldr	r3, [pc, #188]	; (8003c18 <CLK_InitSYSCLK+0xd8>)
 8003b5a:	2180      	movs	r1, #128	; 0x80
 8003b5c:	0149      	lsls	r1, r1, #5
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	605a      	str	r2, [r3, #4]
	__HAL_RCC_HSI_ENABLE();
 8003b62:	4b2d      	ldr	r3, [pc, #180]	; (8003c18 <CLK_InitSYSCLK+0xd8>)
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	4b2c      	ldr	r3, [pc, #176]	; (8003c18 <CLK_InitSYSCLK+0xd8>)
 8003b68:	2101      	movs	r1, #1
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	601a      	str	r2, [r3, #0]
	while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U);
 8003b6e:	46c0      	nop			; (mov r8, r8)
 8003b70:	4b29      	ldr	r3, [pc, #164]	; (8003c18 <CLK_InitSYSCLK+0xd8>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2204      	movs	r2, #4
 8003b76:	4013      	ands	r3, r2
 8003b78:	d0fa      	beq.n	8003b70 <CLK_InitSYSCLK+0x30>
	__HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_MSICALIBRATION_DEFAULT);
#endif

#ifdef CLK_USE_PLL
	// PLL must be disables for configuration.
	__HAL_RCC_PLL_DISABLE();
 8003b7a:	4b27      	ldr	r3, [pc, #156]	; (8003c18 <CLK_InitSYSCLK+0xd8>)
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	4b26      	ldr	r3, [pc, #152]	; (8003c18 <CLK_InitSYSCLK+0xd8>)
 8003b80:	4927      	ldr	r1, [pc, #156]	; (8003c20 <CLK_InitSYSCLK+0xe0>)
 8003b82:	400a      	ands	r2, r1
 8003b84:	601a      	str	r2, [r3, #0]
	while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U);
 8003b86:	46c0      	nop			; (mov r8, r8)
 8003b88:	4b23      	ldr	r3, [pc, #140]	; (8003c18 <CLK_InitSYSCLK+0xd8>)
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	2380      	movs	r3, #128	; 0x80
 8003b8e:	049b      	lsls	r3, r3, #18
 8003b90:	4013      	ands	r3, r2
 8003b92:	d1f9      	bne.n	8003b88 <CLK_InitSYSCLK+0x48>
	__CLK_PLL_CONFIG(CLK_PLL_SRC, CLK_PLL_MUL_CFG, CLK_PLL_DIV_CFG);
 8003b94:	4b20      	ldr	r3, [pc, #128]	; (8003c18 <CLK_InitSYSCLK+0xd8>)
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	4a22      	ldr	r2, [pc, #136]	; (8003c24 <CLK_InitSYSCLK+0xe4>)
 8003b9a:	401a      	ands	r2, r3
 8003b9c:	4b1e      	ldr	r3, [pc, #120]	; (8003c18 <CLK_InitSYSCLK+0xd8>)
 8003b9e:	2188      	movs	r1, #136	; 0x88
 8003ba0:	03c9      	lsls	r1, r1, #15
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	60da      	str	r2, [r3, #12]
	__HAL_RCC_PLL_ENABLE();
 8003ba6:	4b1c      	ldr	r3, [pc, #112]	; (8003c18 <CLK_InitSYSCLK+0xd8>)
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	4b1b      	ldr	r3, [pc, #108]	; (8003c18 <CLK_InitSYSCLK+0xd8>)
 8003bac:	2180      	movs	r1, #128	; 0x80
 8003bae:	0449      	lsls	r1, r1, #17
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	601a      	str	r2, [r3, #0]
	while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U);
 8003bb4:	46c0      	nop			; (mov r8, r8)
 8003bb6:	4b18      	ldr	r3, [pc, #96]	; (8003c18 <CLK_InitSYSCLK+0xd8>)
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	2380      	movs	r3, #128	; 0x80
 8003bbc:	049b      	lsls	r3, r3, #18
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	d0f9      	beq.n	8003bb6 <CLK_InitSYSCLK+0x76>
	 * CONFIGURE CLOCKS
	 * Select the sources and dividers for internal clocks
	 */

	// Configure AHBCLK divider
	MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003bc2:	4b15      	ldr	r3, [pc, #84]	; (8003c18 <CLK_InitSYSCLK+0xd8>)
 8003bc4:	68da      	ldr	r2, [r3, #12]
 8003bc6:	4b14      	ldr	r3, [pc, #80]	; (8003c18 <CLK_InitSYSCLK+0xd8>)
 8003bc8:	21f0      	movs	r1, #240	; 0xf0
 8003bca:	438a      	bics	r2, r1
 8003bcc:	60da      	str	r2, [r3, #12]

	// Apply SYSCLK source
	__HAL_RCC_SYSCLK_CONFIG(CLK_SYSCLK_SRC);
 8003bce:	4b12      	ldr	r3, [pc, #72]	; (8003c18 <CLK_InitSYSCLK+0xd8>)
 8003bd0:	68da      	ldr	r2, [r3, #12]
 8003bd2:	4b11      	ldr	r3, [pc, #68]	; (8003c18 <CLK_InitSYSCLK+0xd8>)
 8003bd4:	2103      	movs	r1, #3
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	60da      	str	r2, [r3, #12]
#elif (CLK_SYSCLK_SRC == RCC_SYSCLKSOURCE_STATUS_HSI)
	while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI);
#elif (CLK_SYSCLK_SRC == RCC_SYSCLKSOURCE_STATUS_HSE)
	while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE);
#elif (CLK_SYSCLK_SRC == RCC_SYSCLKSOURCE_PLLCLK)
	while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK);
 8003bda:	46c0      	nop			; (mov r8, r8)
 8003bdc:	4b0e      	ldr	r3, [pc, #56]	; (8003c18 <CLK_InitSYSCLK+0xd8>)
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	220c      	movs	r2, #12
 8003be2:	4013      	ands	r3, r2
 8003be4:	2b0c      	cmp	r3, #12
 8003be6:	d1f9      	bne.n	8003bdc <CLK_InitSYSCLK+0x9c>
	// Configure PCLK dividers (peripheral clock)


#if defined(STM32L0)
	// STM32L0's have a second PCLK. The shift by 3 is defined like this in the HAL.
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV1);
 8003be8:	4b0b      	ldr	r3, [pc, #44]	; (8003c18 <CLK_InitSYSCLK+0xd8>)
 8003bea:	68da      	ldr	r2, [r3, #12]
 8003bec:	4b0a      	ldr	r3, [pc, #40]	; (8003c18 <CLK_InitSYSCLK+0xd8>)
 8003bee:	490e      	ldr	r1, [pc, #56]	; (8003c28 <CLK_InitSYSCLK+0xe8>)
 8003bf0:	400a      	ands	r2, r1
 8003bf2:	60da      	str	r2, [r3, #12]
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV1 << 3);
 8003bf4:	4b08      	ldr	r3, [pc, #32]	; (8003c18 <CLK_InitSYSCLK+0xd8>)
 8003bf6:	68da      	ldr	r2, [r3, #12]
 8003bf8:	4b07      	ldr	r3, [pc, #28]	; (8003c18 <CLK_InitSYSCLK+0xd8>)
 8003bfa:	490c      	ldr	r1, [pc, #48]	; (8003c2c <CLK_InitSYSCLK+0xec>)
 8003bfc:	400a      	ands	r2, r1
 8003bfe:	60da      	str	r2, [r3, #12]

#ifndef CLK_USE_HSI
	__HAL_RCC_HSI_DISABLE();
#endif
#if (defined(RCC_SYSCLKSOURCE_MSI) && !defined(CLK_USE_MSI))
	__HAL_RCC_MSI_DISABLE();
 8003c00:	4b05      	ldr	r3, [pc, #20]	; (8003c18 <CLK_InitSYSCLK+0xd8>)
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	4b04      	ldr	r3, [pc, #16]	; (8003c18 <CLK_InitSYSCLK+0xd8>)
 8003c06:	490a      	ldr	r1, [pc, #40]	; (8003c30 <CLK_InitSYSCLK+0xf0>)
 8003c08:	400a      	ands	r2, r1
 8003c0a:	601a      	str	r2, [r3, #0]
#endif
}
 8003c0c:	46c0      	nop			; (mov r8, r8)
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	46c0      	nop			; (mov r8, r8)
 8003c14:	40022000 	.word	0x40022000
 8003c18:	40021000 	.word	0x40021000
 8003c1c:	ffffe0ff 	.word	0xffffe0ff
 8003c20:	feffffff 	.word	0xfeffffff
 8003c24:	ff02ffff 	.word	0xff02ffff
 8003c28:	fffff8ff 	.word	0xfffff8ff
 8003c2c:	ffffc7ff 	.word	0xffffc7ff
 8003c30:	fffffeff 	.word	0xfffffeff

08003c34 <CLK_EnableADCCLK>:
	__HAL_RCC_LSI_DISABLE();
#endif
}

void CLK_EnableADCCLK(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
	// ADC CLK is driven off the HSI on STM32L0
#if defined(STM32L0) && !defined(CLK_USE_HSI)
	__HAL_RCC_HSI_ENABLE();
	while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0);
#endif
}
 8003c38:	46c0      	nop			; (mov r8, r8)
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
	...

08003c40 <CORE_GetTick>:
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	af00      	add	r7, sp, #0
	return gTicks;
 8003c44:	4b02      	ldr	r3, [pc, #8]	; (8003c50 <CORE_GetTick+0x10>)
 8003c46:	681b      	ldr	r3, [r3, #0]
}
 8003c48:	0018      	movs	r0, r3
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	46c0      	nop			; (mov r8, r8)
 8003c50:	20000560 	.word	0x20000560

08003c54 <GPIO_Deinit>:
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
	GPIO_Init(gpio, pin, GPIO_Mode_Analog);
 8003c5e:	6839      	ldr	r1, [r7, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2203      	movs	r2, #3
 8003c64:	0018      	movs	r0, r3
 8003c66:	f000 f9f1 	bl	800404c <GPIO_Init>
}
 8003c6a:	46c0      	nop			; (mov r8, r8)
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	b002      	add	sp, #8
 8003c70:	bd80      	pop	{r7, pc}
	...

08003c74 <CLK_GetHCLKFreq>:
/*
 * INLINE FUNCTION DEFINITIONS
 */

static inline uint32_t CLK_GetHCLKFreq(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0
	return CLK_SYSCLK_FREQ;
 8003c78:	4b01      	ldr	r3, [pc, #4]	; (8003c80 <CLK_GetHCLKFreq+0xc>)
}
 8003c7a:	0018      	movs	r0, r3
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	01e84800 	.word	0x01e84800

08003c84 <CORE_Init>:
/*
 * PUBLIC FUNCTIONS
 */

void CORE_Init(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
#if defined(STM32L0)
	__HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003c88:	4b12      	ldr	r3, [pc, #72]	; (8003cd4 <CORE_Init+0x50>)
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	4b11      	ldr	r3, [pc, #68]	; (8003cd4 <CORE_Init+0x50>)
 8003c8e:	2140      	movs	r1, #64	; 0x40
 8003c90:	430a      	orrs	r2, r1
 8003c92:	601a      	str	r2, [r3, #0]

#elif defined(STM32F0)
	__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c94:	4b10      	ldr	r3, [pc, #64]	; (8003cd8 <CORE_Init+0x54>)
 8003c96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c98:	4b0f      	ldr	r3, [pc, #60]	; (8003cd8 <CORE_Init+0x54>)
 8003c9a:	2101      	movs	r1, #1
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_RCC_PWR_CLK_ENABLE();
 8003ca0:	4b0d      	ldr	r3, [pc, #52]	; (8003cd8 <CORE_Init+0x54>)
 8003ca2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ca4:	4b0c      	ldr	r3, [pc, #48]	; (8003cd8 <CORE_Init+0x54>)
 8003ca6:	2180      	movs	r1, #128	; 0x80
 8003ca8:	0549      	lsls	r1, r1, #21
 8003caa:	430a      	orrs	r2, r1
 8003cac:	639a      	str	r2, [r3, #56]	; 0x38
#ifdef STM32L0
	__HAL_PWR_VOLTAGESCALING_CONFIG(CORE_VOLTAGE_RANGE);
 8003cae:	4b0b      	ldr	r3, [pc, #44]	; (8003cdc <CORE_Init+0x58>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a0b      	ldr	r2, [pc, #44]	; (8003ce0 <CORE_Init+0x5c>)
 8003cb4:	401a      	ands	r2, r3
 8003cb6:	4b09      	ldr	r3, [pc, #36]	; (8003cdc <CORE_Init+0x58>)
 8003cb8:	2180      	movs	r1, #128	; 0x80
 8003cba:	0109      	lsls	r1, r1, #4
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	601a      	str	r2, [r3, #0]
#endif

	CLK_InitSYSCLK();
 8003cc0:	f7ff ff3e 	bl	8003b40 <CLK_InitSYSCLK>
	CORE_InitSysTick();
 8003cc4:	f000 f82f 	bl	8003d26 <CORE_InitSysTick>
	CORE_InitGPIO();
 8003cc8:	f000 f846 	bl	8003d58 <CORE_InitGPIO>
#ifdef	US_ENABLE
	US_Init();
#endif
}
 8003ccc:	46c0      	nop			; (mov r8, r8)
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	46c0      	nop			; (mov r8, r8)
 8003cd4:	40022000 	.word	0x40022000
 8003cd8:	40021000 	.word	0x40021000
 8003cdc:	40007000 	.word	0x40007000
 8003ce0:	ffffe7ff 	.word	0xffffe7ff

08003ce4 <CORE_Idle>:

void __attribute__ ((noinline)) CORE_Idle(void)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	af00      	add	r7, sp, #0
	// The push and pop of this function protects r0 from being clobbered during interrupt.
	// I do not understand why this is not preserved by the IRQ's push/pop.
	// If this function is inlined - then the usually pushed registers can get clobbered when returning from WFI.

	// As long as systick is on, this will at least return each millisecond.
	__WFI();
 8003ce8:	bf30      	wfi
}
 8003cea:	46c0      	nop			; (mov r8, r8)
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <CORE_Delay>:
	CLK_InitSYSCLK();
	HAL_ResumeTick();
}

void CORE_Delay(uint32_t ms)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
	ms += MS_PER_SYSTICK; // Add to guarantee a minimum delay
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	607b      	str	r3, [r7, #4]
	uint32_t start = CORE_GetTick();
 8003cfe:	f7ff ff9f 	bl	8003c40 <CORE_GetTick>
 8003d02:	0003      	movs	r3, r0
 8003d04:	60fb      	str	r3, [r7, #12]
	while (CORE_GetTick() - start < ms)
 8003d06:	e001      	b.n	8003d0c <CORE_Delay+0x1c>
	{
		CORE_Idle();
 8003d08:	f7ff ffec 	bl	8003ce4 <CORE_Idle>
	while (CORE_GetTick() - start < ms)
 8003d0c:	f7ff ff98 	bl	8003c40 <CORE_GetTick>
 8003d10:	0002      	movs	r2, r0
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d8f5      	bhi.n	8003d08 <CORE_Delay+0x18>
	}
}
 8003d1c:	46c0      	nop			; (mov r8, r8)
 8003d1e:	46c0      	nop			; (mov r8, r8)
 8003d20:	46bd      	mov	sp, r7
 8003d22:	b004      	add	sp, #16
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <CORE_InitSysTick>:
/*
 * PRIVATE FUNCTIONS
 */

void CORE_InitSysTick(void)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	af00      	add	r7, sp, #0
	HAL_SYSTICK_Config(CLK_GetHCLKFreq() / CORE_SYSTICK_FREQ);
 8003d2a:	f7ff ffa3 	bl	8003c74 <CLK_GetHCLKFreq>
 8003d2e:	0002      	movs	r2, r0
 8003d30:	23fa      	movs	r3, #250	; 0xfa
 8003d32:	0099      	lsls	r1, r3, #2
 8003d34:	0010      	movs	r0, r2
 8003d36:	f7fc f9e7 	bl	8000108 <__udivsi3>
 8003d3a:	0003      	movs	r3, r0
 8003d3c:	0018      	movs	r0, r3
 8003d3e:	f7fe f910 	bl	8001f62 <HAL_SYSTICK_Config>
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003d42:	2301      	movs	r3, #1
 8003d44:	425b      	negs	r3, r3
 8003d46:	2200      	movs	r2, #0
 8003d48:	2100      	movs	r1, #0
 8003d4a:	0018      	movs	r0, r3
 8003d4c:	f7fe f8d4 	bl	8001ef8 <HAL_NVIC_SetPriority>
}
 8003d50:	46c0      	nop			; (mov r8, r8)
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
	...

08003d58 <CORE_InitGPIO>:

void CORE_InitGPIO(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003d5e:	4b26      	ldr	r3, [pc, #152]	; (8003df8 <CORE_InitGPIO+0xa0>)
 8003d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d62:	4b25      	ldr	r3, [pc, #148]	; (8003df8 <CORE_InitGPIO+0xa0>)
 8003d64:	2101      	movs	r1, #1
 8003d66:	430a      	orrs	r2, r1
 8003d68:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d6a:	4b23      	ldr	r3, [pc, #140]	; (8003df8 <CORE_InitGPIO+0xa0>)
 8003d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6e:	2201      	movs	r2, #1
 8003d70:	4013      	ands	r3, r2
 8003d72:	60fb      	str	r3, [r7, #12]
 8003d74:	68fb      	ldr	r3, [r7, #12]
#ifdef DEBUG
	// SWCLK and SWDIO on PA13, PA14
	GPIO_Deinit(GPIOA, GPIO_PIN_All & ~(GPIO_PIN_13 | GPIO_PIN_14));
 8003d76:	4a21      	ldr	r2, [pc, #132]	; (8003dfc <CORE_InitGPIO+0xa4>)
 8003d78:	23a0      	movs	r3, #160	; 0xa0
 8003d7a:	05db      	lsls	r3, r3, #23
 8003d7c:	0011      	movs	r1, r2
 8003d7e:	0018      	movs	r0, r3
 8003d80:	f7ff ff68 	bl	8003c54 <GPIO_Deinit>
#else
	GPIO_Deinit(GPIOA, GPIO_PIN_All);
#endif

	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003d84:	4b1c      	ldr	r3, [pc, #112]	; (8003df8 <CORE_InitGPIO+0xa0>)
 8003d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d88:	4b1b      	ldr	r3, [pc, #108]	; (8003df8 <CORE_InitGPIO+0xa0>)
 8003d8a:	2102      	movs	r1, #2
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d90:	4b19      	ldr	r3, [pc, #100]	; (8003df8 <CORE_InitGPIO+0xa0>)
 8003d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d94:	2202      	movs	r2, #2
 8003d96:	4013      	ands	r3, r2
 8003d98:	60bb      	str	r3, [r7, #8]
 8003d9a:	68bb      	ldr	r3, [r7, #8]
	GPIO_Deinit(GPIOB, GPIO_PIN_All);
 8003d9c:	4a18      	ldr	r2, [pc, #96]	; (8003e00 <CORE_InitGPIO+0xa8>)
 8003d9e:	4b19      	ldr	r3, [pc, #100]	; (8003e04 <CORE_InitGPIO+0xac>)
 8003da0:	0011      	movs	r1, r2
 8003da2:	0018      	movs	r0, r3
 8003da4:	f7ff ff56 	bl	8003c54 <GPIO_Deinit>

	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003da8:	4b13      	ldr	r3, [pc, #76]	; (8003df8 <CORE_InitGPIO+0xa0>)
 8003daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dac:	4b12      	ldr	r3, [pc, #72]	; (8003df8 <CORE_InitGPIO+0xa0>)
 8003dae:	2104      	movs	r1, #4
 8003db0:	430a      	orrs	r2, r1
 8003db2:	62da      	str	r2, [r3, #44]	; 0x2c
 8003db4:	4b10      	ldr	r3, [pc, #64]	; (8003df8 <CORE_InitGPIO+0xa0>)
 8003db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db8:	2204      	movs	r2, #4
 8003dba:	4013      	ands	r3, r2
 8003dbc:	607b      	str	r3, [r7, #4]
 8003dbe:	687b      	ldr	r3, [r7, #4]
	GPIO_Deinit(GPIOC, GPIO_PIN_All);
 8003dc0:	4a0f      	ldr	r2, [pc, #60]	; (8003e00 <CORE_InitGPIO+0xa8>)
 8003dc2:	4b11      	ldr	r3, [pc, #68]	; (8003e08 <CORE_InitGPIO+0xb0>)
 8003dc4:	0011      	movs	r1, r2
 8003dc6:	0018      	movs	r0, r3
 8003dc8:	f7ff ff44 	bl	8003c54 <GPIO_Deinit>

#if defined(GPIOD)
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8003dcc:	4b0a      	ldr	r3, [pc, #40]	; (8003df8 <CORE_InitGPIO+0xa0>)
 8003dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dd0:	4b09      	ldr	r3, [pc, #36]	; (8003df8 <CORE_InitGPIO+0xa0>)
 8003dd2:	2108      	movs	r1, #8
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	62da      	str	r2, [r3, #44]	; 0x2c
 8003dd8:	4b07      	ldr	r3, [pc, #28]	; (8003df8 <CORE_InitGPIO+0xa0>)
 8003dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ddc:	2208      	movs	r2, #8
 8003dde:	4013      	ands	r3, r2
 8003de0:	603b      	str	r3, [r7, #0]
 8003de2:	683b      	ldr	r3, [r7, #0]
	GPIO_Deinit(GPIOD, GPIO_PIN_All);
 8003de4:	4a06      	ldr	r2, [pc, #24]	; (8003e00 <CORE_InitGPIO+0xa8>)
 8003de6:	4b09      	ldr	r3, [pc, #36]	; (8003e0c <CORE_InitGPIO+0xb4>)
 8003de8:	0011      	movs	r1, r2
 8003dea:	0018      	movs	r0, r3
 8003dec:	f7ff ff32 	bl	8003c54 <GPIO_Deinit>
#endif
}
 8003df0:	46c0      	nop			; (mov r8, r8)
 8003df2:	46bd      	mov	sp, r7
 8003df4:	b004      	add	sp, #16
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	40021000 	.word	0x40021000
 8003dfc:	00009fff 	.word	0x00009fff
 8003e00:	0000ffff 	.word	0x0000ffff
 8003e04:	50000400 	.word	0x50000400
 8003e08:	50000800 	.word	0x50000800
 8003e0c:	50000c00 	.word	0x50000c00

08003e10 <SysTick_Handler>:
/*
 * INTERRUPT ROUTINES
 */

void SysTick_Handler(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	af00      	add	r7, sp, #0
	gTicks += MS_PER_SYSTICK;
 8003e14:	4b03      	ldr	r3, [pc, #12]	; (8003e24 <SysTick_Handler+0x14>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	1c5a      	adds	r2, r3, #1
 8003e1a:	4b02      	ldr	r3, [pc, #8]	; (8003e24 <SysTick_Handler+0x14>)
 8003e1c:	601a      	str	r2, [r3, #0]
	if (gTickCallback != NULL)
	{
		gTickCallback();
	}
#endif
}
 8003e1e:	46c0      	nop			; (mov r8, r8)
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	20000560 	.word	0x20000560

08003e28 <EEPROM_Write>:
/*
 * PUBLIC FUNCTIONS
 */

void EEPROM_Write(uint32_t offset, const void * data, uint32_t size)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b088      	sub	sp, #32
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
	uint8_t * bytes = (uint8_t *)data;
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	61bb      	str	r3, [r7, #24]
	uint8_t * eeprom = (uint8_t *)(DATA_EEPROM_BASE + offset);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	4a15      	ldr	r2, [pc, #84]	; (8003e90 <EEPROM_Write+0x68>)
 8003e3c:	4694      	mov	ip, r2
 8003e3e:	4463      	add	r3, ip
 8003e40:	617b      	str	r3, [r7, #20]

	EEPROM_Unlock();
 8003e42:	f000 f83f 	bl	8003ec4 <EEPROM_Unlock>
	for (uint32_t i = 0; i < size; i++)
 8003e46:	2300      	movs	r3, #0
 8003e48:	61fb      	str	r3, [r7, #28]
 8003e4a:	e016      	b.n	8003e7a <EEPROM_Write+0x52>
	{
		if (bytes[i] != eeprom[i])
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	18d3      	adds	r3, r2, r3
 8003e52:	781a      	ldrb	r2, [r3, #0]
 8003e54:	6979      	ldr	r1, [r7, #20]
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	18cb      	adds	r3, r1, r3
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d009      	beq.n	8003e74 <EEPROM_Write+0x4c>
		{
			eeprom[i] = bytes[i]; // This triggers an 8 bit write operation.
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	18d2      	adds	r2, r2, r3
 8003e66:	6979      	ldr	r1, [r7, #20]
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	18cb      	adds	r3, r1, r3
 8003e6c:	7812      	ldrb	r2, [r2, #0]
 8003e6e:	701a      	strb	r2, [r3, #0]
			EEPROM_WaitForOperation();
 8003e70:	f000 f856 	bl	8003f20 <EEPROM_WaitForOperation>
	for (uint32_t i = 0; i < size; i++)
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	3301      	adds	r3, #1
 8003e78:	61fb      	str	r3, [r7, #28]
 8003e7a:	69fa      	ldr	r2, [r7, #28]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d3e4      	bcc.n	8003e4c <EEPROM_Write+0x24>
		}
	}
	EEPROM_Lock();
 8003e82:	f000 f83f 	bl	8003f04 <EEPROM_Lock>
}
 8003e86:	46c0      	nop			; (mov r8, r8)
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	b008      	add	sp, #32
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	46c0      	nop			; (mov r8, r8)
 8003e90:	08080000 	.word	0x08080000

08003e94 <EEPROM_Read>:

void EEPROM_Read(uint32_t offset, void * data, uint32_t size)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
	uint8_t * eeprom = (uint8_t *)(DATA_EEPROM_BASE + offset);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	4a07      	ldr	r2, [pc, #28]	; (8003ec0 <EEPROM_Read+0x2c>)
 8003ea4:	4694      	mov	ip, r2
 8003ea6:	4463      	add	r3, ip
 8003ea8:	617b      	str	r3, [r7, #20]
	memcpy(data, eeprom, size);
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	6979      	ldr	r1, [r7, #20]
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	f001 f86b 	bl	8004f8c <memcpy>
}
 8003eb6:	46c0      	nop			; (mov r8, r8)
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	b006      	add	sp, #24
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	46c0      	nop			; (mov r8, r8)
 8003ec0:	08080000 	.word	0x08080000

08003ec4 <EEPROM_Unlock>:
/*
 * PRIVATE FUNCTIONS
 */

static void EEPROM_Unlock(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eca:	f3ef 8310 	mrs	r3, PRIMASK
 8003ece:	607b      	str	r3, [r7, #4]
  return(result);
 8003ed0:	687b      	ldr	r3, [r7, #4]
	// This sequence must not be interrupted.
	uint32_t primask_bit = __get_PRIMASK();
 8003ed2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ed4:	b672      	cpsid	i
}
 8003ed6:	46c0      	nop			; (mov r8, r8)
	__disable_irq();

	FLASH->PEKEYR = FLASH_PEKEY1;
 8003ed8:	4b07      	ldr	r3, [pc, #28]	; (8003ef8 <EEPROM_Unlock+0x34>)
 8003eda:	4a08      	ldr	r2, [pc, #32]	; (8003efc <EEPROM_Unlock+0x38>)
 8003edc:	60da      	str	r2, [r3, #12]
	FLASH->PEKEYR = FLASH_PEKEY2;
 8003ede:	4b06      	ldr	r3, [pc, #24]	; (8003ef8 <EEPROM_Unlock+0x34>)
 8003ee0:	4a07      	ldr	r2, [pc, #28]	; (8003f00 <EEPROM_Unlock+0x3c>)
 8003ee2:	60da      	str	r2, [r3, #12]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	f383 8810 	msr	PRIMASK, r3
}
 8003eee:	46c0      	nop			; (mov r8, r8)

	__set_PRIMASK(primask_bit);
}
 8003ef0:	46c0      	nop			; (mov r8, r8)
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	b004      	add	sp, #16
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	40022000 	.word	0x40022000
 8003efc:	89abcdef 	.word	0x89abcdef
 8003f00:	02030405 	.word	0x02030405

08003f04 <EEPROM_Lock>:

static inline void EEPROM_Lock(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
	SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8003f08:	4b04      	ldr	r3, [pc, #16]	; (8003f1c <EEPROM_Lock+0x18>)
 8003f0a:	685a      	ldr	r2, [r3, #4]
 8003f0c:	4b03      	ldr	r3, [pc, #12]	; (8003f1c <EEPROM_Lock+0x18>)
 8003f0e:	2101      	movs	r1, #1
 8003f10:	430a      	orrs	r2, r1
 8003f12:	605a      	str	r2, [r3, #4]
}
 8003f14:	46c0      	nop			; (mov r8, r8)
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	46c0      	nop			; (mov r8, r8)
 8003f1c:	40022000 	.word	0x40022000

08003f20 <EEPROM_WaitForOperation>:

static void EEPROM_WaitForOperation(void)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	af00      	add	r7, sp, #0
	while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY));
 8003f24:	46c0      	nop			; (mov r8, r8)
 8003f26:	4b09      	ldr	r3, [pc, #36]	; (8003f4c <EEPROM_WaitForOperation+0x2c>)
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d0f9      	beq.n	8003f26 <EEPROM_WaitForOperation+0x6>
	if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003f32:	4b06      	ldr	r3, [pc, #24]	; (8003f4c <EEPROM_WaitForOperation+0x2c>)
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	2202      	movs	r2, #2
 8003f38:	4013      	ands	r3, r2
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d102      	bne.n	8003f44 <EEPROM_WaitForOperation+0x24>
	{
		__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003f3e:	4b03      	ldr	r3, [pc, #12]	; (8003f4c <EEPROM_WaitForOperation+0x2c>)
 8003f40:	2202      	movs	r2, #2
 8003f42:	619a      	str	r2, [r3, #24]
	}
}
 8003f44:	46c0      	nop			; (mov r8, r8)
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	46c0      	nop			; (mov r8, r8)
 8003f4c:	40022000 	.word	0x40022000

08003f50 <GPIO_Set>:
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
	gpio->BSRR = (uint32_t)pin;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	619a      	str	r2, [r3, #24]
}
 8003f60:	46c0      	nop			; (mov r8, r8)
 8003f62:	46bd      	mov	sp, r7
 8003f64:	b002      	add	sp, #8
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <GPIO_Reset>:
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
	gpio->BRR = (uint32_t)pin;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f78:	46c0      	nop			; (mov r8, r8)
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	b002      	add	sp, #8
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <GPIO_Write>:
/*
 * PUBLIC FUNCTIONS
 */

void GPIO_Write(GPIO_t * gpio, uint32_t pin, GPIO_State_t state)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	1dfb      	adds	r3, r7, #7
 8003f8c:	701a      	strb	r2, [r3, #0]
	if (state)
 8003f8e:	1dfb      	adds	r3, r7, #7
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d006      	beq.n	8003fa4 <GPIO_Write+0x24>
	{
		GPIO_Set(gpio, pin);
 8003f96:	68ba      	ldr	r2, [r7, #8]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	0011      	movs	r1, r2
 8003f9c:	0018      	movs	r0, r3
 8003f9e:	f7ff ffd7 	bl	8003f50 <GPIO_Set>
	}
	else
	{
		GPIO_Reset(gpio, pin);
	}
}
 8003fa2:	e005      	b.n	8003fb0 <GPIO_Write+0x30>
		GPIO_Reset(gpio, pin);
 8003fa4:	68ba      	ldr	r2, [r7, #8]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	0011      	movs	r1, r2
 8003faa:	0018      	movs	r0, r3
 8003fac:	f7ff ffdc 	bl	8003f68 <GPIO_Reset>
}
 8003fb0:	46c0      	nop			; (mov r8, r8)
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	b004      	add	sp, #16
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <GPIO_EnableAlternate>:

void GPIO_EnableAlternate(GPIO_t * gpio, uint32_t pin, GPIO_Flag_t flags, uint32_t af)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	603b      	str	r3, [r7, #0]
 8003fc4:	1dbb      	adds	r3, r7, #6
 8003fc6:	801a      	strh	r2, [r3, #0]
	GPIO_ConfigAlternate(gpio, pin, af);
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	68b9      	ldr	r1, [r7, #8]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	0018      	movs	r0, r3
 8003fd0:	f000 f8ab 	bl	800412a <GPIO_ConfigAlternate>
	GPIO_Init(gpio, pin, GPIO_Mode_Alternate | GPIO_Speed_High | flags);
 8003fd4:	1dbb      	adds	r3, r7, #6
 8003fd6:	881b      	ldrh	r3, [r3, #0]
 8003fd8:	4a05      	ldr	r2, [pc, #20]	; (8003ff0 <GPIO_EnableAlternate+0x38>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	68b9      	ldr	r1, [r7, #8]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	0018      	movs	r0, r3
 8003fe4:	f000 f832 	bl	800404c <GPIO_Init>
}
 8003fe8:	46c0      	nop			; (mov r8, r8)
 8003fea:	46bd      	mov	sp, r7
 8003fec:	b004      	add	sp, #16
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	00000302 	.word	0x00000302

08003ff4 <GPIO_OnChange>:

#ifdef GPIO_USE_IRQS
void GPIO_OnChange(GPIO_t * gpio, uint32_t pin, GPIO_IT_Dir_t dir, VoidFunction_t callback)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	603b      	str	r3, [r7, #0]
 8004000:	1dfb      	adds	r3, r7, #7
 8004002:	701a      	strb	r2, [r3, #0]
	int n = 0;
 8004004:	2300      	movs	r3, #0
 8004006:	617b      	str	r3, [r7, #20]
	while ((pin & (1 << n)) == 0) { n++; }
 8004008:	e002      	b.n	8004010 <GPIO_OnChange+0x1c>
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	3301      	adds	r3, #1
 800400e:	617b      	str	r3, [r7, #20]
 8004010:	2201      	movs	r2, #1
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	409a      	lsls	r2, r3
 8004016:	0013      	movs	r3, r2
 8004018:	001a      	movs	r2, r3
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	4013      	ands	r3, r2
 800401e:	d0f4      	beq.n	800400a <GPIO_OnChange+0x16>

	gCallback[n] = callback;
 8004020:	4b09      	ldr	r3, [pc, #36]	; (8004048 <GPIO_OnChange+0x54>)
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	0092      	lsls	r2, r2, #2
 8004026:	6839      	ldr	r1, [r7, #0]
 8004028:	50d1      	str	r1, [r2, r3]

	GPIO_ConfigInterrupt(gpio, n, dir);
 800402a:	1dfb      	adds	r3, r7, #7
 800402c:	781a      	ldrb	r2, [r3, #0]
 800402e:	6979      	ldr	r1, [r7, #20]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	0018      	movs	r0, r3
 8004034:	f000 f8b2 	bl	800419c <GPIO_ConfigInterrupt>

	EXTIx_EnableIRQn(n);
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	0018      	movs	r0, r3
 800403c:	f000 f99e 	bl	800437c <EXTIx_EnableIRQn>
}
 8004040:	46c0      	nop			; (mov r8, r8)
 8004042:	46bd      	mov	sp, r7
 8004044:	b006      	add	sp, #24
 8004046:	bd80      	pop	{r7, pc}
 8004048:	20000564 	.word	0x20000564

0800404c <GPIO_Init>:
#endif //GPIO_USE_IRQS

void GPIO_Init(GPIO_t * gpio, uint32_t pins, GPIO_Flag_t mode)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b088      	sub	sp, #32
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	1dbb      	adds	r3, r7, #6
 8004058:	801a      	strh	r2, [r3, #0]
	uint32_t pinmask = GPIO_SWARBitDouble(pins);
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	0018      	movs	r0, r3
 800405e:	f000 f933 	bl	80042c8 <GPIO_SWARBitDouble>
 8004062:	0003      	movs	r3, r0
 8004064:	61fb      	str	r3, [r7, #28]

	GPIO_Mode_t dir = mode & GPIO_Mode_MASK;
 8004066:	1dbb      	adds	r3, r7, #6
 8004068:	881b      	ldrh	r3, [r3, #0]
 800406a:	b2da      	uxtb	r2, r3
 800406c:	201b      	movs	r0, #27
 800406e:	183b      	adds	r3, r7, r0
 8004070:	2103      	movs	r1, #3
 8004072:	400a      	ands	r2, r1
 8004074:	701a      	strb	r2, [r3, #0]

	if (dir == GPIO_Mode_Alternate || dir == GPIO_Mode_Output)
 8004076:	183b      	adds	r3, r7, r0
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	2b02      	cmp	r3, #2
 800407c:	d003      	beq.n	8004086 <GPIO_Init+0x3a>
 800407e:	183b      	adds	r3, r7, r0
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d126      	bne.n	80040d4 <GPIO_Init+0x88>
	{
		uint32_t speed = (mode & GPIO_Speed_MASK) >> GPIOCFG_SPEED_POS;
 8004086:	1dbb      	adds	r3, r7, #6
 8004088:	881b      	ldrh	r3, [r3, #0]
 800408a:	121b      	asrs	r3, r3, #8
 800408c:	001a      	movs	r2, r3
 800408e:	2303      	movs	r3, #3
 8004090:	4013      	ands	r3, r2
 8004092:	617b      	str	r3, [r7, #20]
		MODIFY_REG( gpio->OSPEEDR, pinmask * GPIO_OSPEEDER_OSPEED0, pinmask * speed );
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6899      	ldr	r1, [r3, #8]
 8004098:	69fa      	ldr	r2, [r7, #28]
 800409a:	0013      	movs	r3, r2
 800409c:	005b      	lsls	r3, r3, #1
 800409e:	189b      	adds	r3, r3, r2
 80040a0:	43db      	mvns	r3, r3
 80040a2:	400b      	ands	r3, r1
 80040a4:	001a      	movs	r2, r3
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	6979      	ldr	r1, [r7, #20]
 80040aa:	434b      	muls	r3, r1
 80040ac:	431a      	orrs	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	609a      	str	r2, [r3, #8]
		MODIFY_REG( gpio->OTYPER, pins, (mode & GPIO_Flag_OpenDrain) ? pins : 0 );
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	68ba      	ldr	r2, [r7, #8]
 80040b8:	43d2      	mvns	r2, r2
 80040ba:	401a      	ands	r2, r3
 80040bc:	1dbb      	adds	r3, r7, #6
 80040be:	8819      	ldrh	r1, [r3, #0]
 80040c0:	2380      	movs	r3, #128	; 0x80
 80040c2:	015b      	lsls	r3, r3, #5
 80040c4:	400b      	ands	r3, r1
 80040c6:	d001      	beq.n	80040cc <GPIO_Init+0x80>
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	e000      	b.n	80040ce <GPIO_Init+0x82>
 80040cc:	2300      	movs	r3, #0
 80040ce:	431a      	orrs	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	605a      	str	r2, [r3, #4]
	}

	MODIFY_REG( gpio->MODER, pinmask * GPIO_MODER_MODE0, pinmask * dir);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6819      	ldr	r1, [r3, #0]
 80040d8:	69fa      	ldr	r2, [r7, #28]
 80040da:	0013      	movs	r3, r2
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	189b      	adds	r3, r3, r2
 80040e0:	43db      	mvns	r3, r3
 80040e2:	400b      	ands	r3, r1
 80040e4:	001a      	movs	r2, r3
 80040e6:	231b      	movs	r3, #27
 80040e8:	18fb      	adds	r3, r7, r3
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	69f9      	ldr	r1, [r7, #28]
 80040ee:	434b      	muls	r3, r1
 80040f0:	431a      	orrs	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	601a      	str	r2, [r3, #0]
	uint32_t pull = (mode & GPIO_Pull_MASK) >> GPIOCFG_PULL_POS;
 80040f6:	1dbb      	adds	r3, r7, #6
 80040f8:	881b      	ldrh	r3, [r3, #0]
 80040fa:	111b      	asrs	r3, r3, #4
 80040fc:	001a      	movs	r2, r3
 80040fe:	2303      	movs	r3, #3
 8004100:	4013      	ands	r3, r2
 8004102:	613b      	str	r3, [r7, #16]
	MODIFY_REG( gpio->PUPDR, pinmask * GPIO_PUPDR_PUPD0, pinmask * pull);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	68d9      	ldr	r1, [r3, #12]
 8004108:	69fa      	ldr	r2, [r7, #28]
 800410a:	0013      	movs	r3, r2
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	189b      	adds	r3, r3, r2
 8004110:	43db      	mvns	r3, r3
 8004112:	400b      	ands	r3, r1
 8004114:	001a      	movs	r2, r3
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	6939      	ldr	r1, [r7, #16]
 800411a:	434b      	muls	r3, r1
 800411c:	431a      	orrs	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	60da      	str	r2, [r3, #12]
}
 8004122:	46c0      	nop			; (mov r8, r8)
 8004124:	46bd      	mov	sp, r7
 8004126:	b008      	add	sp, #32
 8004128:	bd80      	pop	{r7, pc}

0800412a <GPIO_ConfigAlternate>:
/*
 * PRIVATE FUNCTIONS
 */

static void GPIO_ConfigAlternate( GPIO_t * gpio, uint32_t pins, uint32_t af)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b086      	sub	sp, #24
 800412e:	af00      	add	r7, sp, #0
 8004130:	60f8      	str	r0, [r7, #12]
 8004132:	60b9      	str	r1, [r7, #8]
 8004134:	607a      	str	r2, [r7, #4]
	uint32_t pos = 0;
 8004136:	2300      	movs	r3, #0
 8004138:	617b      	str	r3, [r7, #20]
	while (pins)
 800413a:	e026      	b.n	800418a <GPIO_ConfigAlternate+0x60>
	{
		if (pins & 0x1)
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	2201      	movs	r2, #1
 8004140:	4013      	ands	r3, r2
 8004142:	d01c      	beq.n	800417e <GPIO_ConfigAlternate+0x54>
		{
			uint32_t alt_offset = (pos & 0x7) * 4;
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	2207      	movs	r2, #7
 8004148:	4013      	ands	r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	613b      	str	r3, [r7, #16]
			MODIFY_REG(gpio->AFR[pos >> 3], (0xF << alt_offset), (af << alt_offset));
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	08da      	lsrs	r2, r3, #3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	3208      	adds	r2, #8
 8004156:	0092      	lsls	r2, r2, #2
 8004158:	58d3      	ldr	r3, [r2, r3]
 800415a:	210f      	movs	r1, #15
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	4091      	lsls	r1, r2
 8004160:	000a      	movs	r2, r1
 8004162:	43d2      	mvns	r2, r2
 8004164:	401a      	ands	r2, r3
 8004166:	0011      	movs	r1, r2
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	409a      	lsls	r2, r3
 800416e:	0013      	movs	r3, r2
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	08d2      	lsrs	r2, r2, #3
 8004174:	4319      	orrs	r1, r3
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	3208      	adds	r2, #8
 800417a:	0092      	lsls	r2, r2, #2
 800417c:	50d1      	str	r1, [r2, r3]
		}
		pins >>= 1;
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	085b      	lsrs	r3, r3, #1
 8004182:	60bb      	str	r3, [r7, #8]
		pos++;
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	3301      	adds	r3, #1
 8004188:	617b      	str	r3, [r7, #20]
	while (pins)
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1d5      	bne.n	800413c <GPIO_ConfigAlternate+0x12>
	}
}
 8004190:	46c0      	nop			; (mov r8, r8)
 8004192:	46c0      	nop			; (mov r8, r8)
 8004194:	46bd      	mov	sp, r7
 8004196:	b006      	add	sp, #24
 8004198:	bd80      	pop	{r7, pc}
	...

0800419c <GPIO_ConfigInterrupt>:

#ifdef GPIO_USE_IRQS
static void GPIO_ConfigInterrupt( GPIO_t * gpio, int n, GPIO_IT_Dir_t dir)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b088      	sub	sp, #32
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	1dfb      	adds	r3, r7, #7
 80041a8:	701a      	strb	r2, [r3, #0]
	uint32_t pin = 1 << n;
 80041aa:	2201      	movs	r2, #1
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	409a      	lsls	r2, r3
 80041b0:	0013      	movs	r3, r2
 80041b2:	61fb      	str	r3, [r7, #28]
	if (dir == GPIO_IT_None)
 80041b4:	1dfb      	adds	r3, r7, #7
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d107      	bne.n	80041cc <GPIO_ConfigInterrupt+0x30>
	{
		// Disable the EXTI channel.
		CLEAR_BIT(EXTI->IMR, pin);
 80041bc:	4b3b      	ldr	r3, [pc, #236]	; (80042ac <GPIO_ConfigInterrupt+0x110>)
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	43d9      	mvns	r1, r3
 80041c4:	4b39      	ldr	r3, [pc, #228]	; (80042ac <GPIO_ConfigInterrupt+0x110>)
 80041c6:	400a      	ands	r2, r1
 80041c8:	601a      	str	r2, [r3, #0]
		// Configure the EXTI channel
		SET_BIT(EXTI->IMR, pin);
		MODIFY_REG(EXTI->RTSR, pin, (dir & GPIO_IT_Rising) ? pin : 0);
		MODIFY_REG(EXTI->FTSR, pin, (dir & GPIO_IT_Falling) ? pin : 0);
	}
}
 80041ca:	e06a      	b.n	80042a2 <GPIO_ConfigInterrupt+0x106>
		__HAL_RCC_SYSCFG_CLK_ENABLE();
 80041cc:	4b38      	ldr	r3, [pc, #224]	; (80042b0 <GPIO_ConfigInterrupt+0x114>)
 80041ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041d0:	4b37      	ldr	r3, [pc, #220]	; (80042b0 <GPIO_ConfigInterrupt+0x114>)
 80041d2:	2101      	movs	r1, #1
 80041d4:	430a      	orrs	r2, r1
 80041d6:	635a      	str	r2, [r3, #52]	; 0x34
		uint32_t gpio_index = GPIO_GET_INDEX(gpio);
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	23a0      	movs	r3, #160	; 0xa0
 80041dc:	05db      	lsls	r3, r3, #23
 80041de:	429a      	cmp	r2, r3
 80041e0:	d019      	beq.n	8004216 <GPIO_ConfigInterrupt+0x7a>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	4a33      	ldr	r2, [pc, #204]	; (80042b4 <GPIO_ConfigInterrupt+0x118>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d013      	beq.n	8004212 <GPIO_ConfigInterrupt+0x76>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	4a32      	ldr	r2, [pc, #200]	; (80042b8 <GPIO_ConfigInterrupt+0x11c>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d00d      	beq.n	800420e <GPIO_ConfigInterrupt+0x72>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	4a31      	ldr	r2, [pc, #196]	; (80042bc <GPIO_ConfigInterrupt+0x120>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d007      	beq.n	800420a <GPIO_ConfigInterrupt+0x6e>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	4a30      	ldr	r2, [pc, #192]	; (80042c0 <GPIO_ConfigInterrupt+0x124>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d101      	bne.n	8004206 <GPIO_ConfigInterrupt+0x6a>
 8004202:	2305      	movs	r3, #5
 8004204:	e008      	b.n	8004218 <GPIO_ConfigInterrupt+0x7c>
 8004206:	2306      	movs	r3, #6
 8004208:	e006      	b.n	8004218 <GPIO_ConfigInterrupt+0x7c>
 800420a:	2303      	movs	r3, #3
 800420c:	e004      	b.n	8004218 <GPIO_ConfigInterrupt+0x7c>
 800420e:	2302      	movs	r3, #2
 8004210:	e002      	b.n	8004218 <GPIO_ConfigInterrupt+0x7c>
 8004212:	2301      	movs	r3, #1
 8004214:	e000      	b.n	8004218 <GPIO_ConfigInterrupt+0x7c>
 8004216:	2300      	movs	r3, #0
 8004218:	61bb      	str	r3, [r7, #24]
		uint32_t offset = (n & 0x3) * 4;
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	2203      	movs	r2, #3
 800421e:	4013      	ands	r3, r2
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	617b      	str	r3, [r7, #20]
		MODIFY_REG(SYSCFG->EXTICR[n >> 2], 0xF << offset, gpio_index << offset);
 8004224:	4a27      	ldr	r2, [pc, #156]	; (80042c4 <GPIO_ConfigInterrupt+0x128>)
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	109b      	asrs	r3, r3, #2
 800422a:	3302      	adds	r3, #2
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	589b      	ldr	r3, [r3, r2]
 8004230:	210f      	movs	r1, #15
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	4091      	lsls	r1, r2
 8004236:	000a      	movs	r2, r1
 8004238:	43d2      	mvns	r2, r2
 800423a:	401a      	ands	r2, r3
 800423c:	0011      	movs	r1, r2
 800423e:	69ba      	ldr	r2, [r7, #24]
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	409a      	lsls	r2, r3
 8004244:	481f      	ldr	r0, [pc, #124]	; (80042c4 <GPIO_ConfigInterrupt+0x128>)
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	109b      	asrs	r3, r3, #2
 800424a:	430a      	orrs	r2, r1
 800424c:	3302      	adds	r3, #2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	501a      	str	r2, [r3, r0]
		SET_BIT(EXTI->IMR, pin);
 8004252:	4b16      	ldr	r3, [pc, #88]	; (80042ac <GPIO_ConfigInterrupt+0x110>)
 8004254:	6819      	ldr	r1, [r3, #0]
 8004256:	4b15      	ldr	r3, [pc, #84]	; (80042ac <GPIO_ConfigInterrupt+0x110>)
 8004258:	69fa      	ldr	r2, [r7, #28]
 800425a:	430a      	orrs	r2, r1
 800425c:	601a      	str	r2, [r3, #0]
		MODIFY_REG(EXTI->RTSR, pin, (dir & GPIO_IT_Rising) ? pin : 0);
 800425e:	4b13      	ldr	r3, [pc, #76]	; (80042ac <GPIO_ConfigInterrupt+0x110>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	69fa      	ldr	r2, [r7, #28]
 8004264:	43d2      	mvns	r2, r2
 8004266:	401a      	ands	r2, r3
 8004268:	0011      	movs	r1, r2
 800426a:	1dfb      	adds	r3, r7, #7
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	2201      	movs	r2, #1
 8004270:	4013      	ands	r3, r2
 8004272:	d001      	beq.n	8004278 <GPIO_ConfigInterrupt+0xdc>
 8004274:	69fa      	ldr	r2, [r7, #28]
 8004276:	e000      	b.n	800427a <GPIO_ConfigInterrupt+0xde>
 8004278:	2200      	movs	r2, #0
 800427a:	4b0c      	ldr	r3, [pc, #48]	; (80042ac <GPIO_ConfigInterrupt+0x110>)
 800427c:	430a      	orrs	r2, r1
 800427e:	609a      	str	r2, [r3, #8]
		MODIFY_REG(EXTI->FTSR, pin, (dir & GPIO_IT_Falling) ? pin : 0);
 8004280:	4b0a      	ldr	r3, [pc, #40]	; (80042ac <GPIO_ConfigInterrupt+0x110>)
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	69fa      	ldr	r2, [r7, #28]
 8004286:	43d2      	mvns	r2, r2
 8004288:	401a      	ands	r2, r3
 800428a:	0011      	movs	r1, r2
 800428c:	1dfb      	adds	r3, r7, #7
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	2202      	movs	r2, #2
 8004292:	4013      	ands	r3, r2
 8004294:	d001      	beq.n	800429a <GPIO_ConfigInterrupt+0xfe>
 8004296:	69fa      	ldr	r2, [r7, #28]
 8004298:	e000      	b.n	800429c <GPIO_ConfigInterrupt+0x100>
 800429a:	2200      	movs	r2, #0
 800429c:	4b03      	ldr	r3, [pc, #12]	; (80042ac <GPIO_ConfigInterrupt+0x110>)
 800429e:	430a      	orrs	r2, r1
 80042a0:	60da      	str	r2, [r3, #12]
}
 80042a2:	46c0      	nop			; (mov r8, r8)
 80042a4:	46bd      	mov	sp, r7
 80042a6:	b008      	add	sp, #32
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	46c0      	nop			; (mov r8, r8)
 80042ac:	40010400 	.word	0x40010400
 80042b0:	40021000 	.word	0x40021000
 80042b4:	50000400 	.word	0x50000400
 80042b8:	50000800 	.word	0x50000800
 80042bc:	50000c00 	.word	0x50000c00
 80042c0:	50001c00 	.word	0x50001c00
 80042c4:	40010000 	.word	0x40010000

080042c8 <GPIO_SWARBitDouble>:
#endif

static uint32_t GPIO_SWARBitDouble(uint32_t s)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
	s = (s & ~0xFF00FF00) | ((s & 0xFF00FF00) << 8);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a14      	ldr	r2, [pc, #80]	; (8004324 <GPIO_SWARBitDouble+0x5c>)
 80042d4:	401a      	ands	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	0219      	lsls	r1, r3, #8
 80042da:	23ff      	movs	r3, #255	; 0xff
 80042dc:	041b      	lsls	r3, r3, #16
 80042de:	400b      	ands	r3, r1
 80042e0:	4313      	orrs	r3, r2
 80042e2:	607b      	str	r3, [r7, #4]
	s = (s & ~0xF0F0F0F0) | ((s & 0xF0F0F0F0) << 4);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a10      	ldr	r2, [pc, #64]	; (8004328 <GPIO_SWARBitDouble+0x60>)
 80042e8:	401a      	ands	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	011b      	lsls	r3, r3, #4
 80042ee:	490f      	ldr	r1, [pc, #60]	; (800432c <GPIO_SWARBitDouble+0x64>)
 80042f0:	400b      	ands	r3, r1
 80042f2:	4313      	orrs	r3, r2
 80042f4:	607b      	str	r3, [r7, #4]
	s = (s & ~0xCCCCCCCC) | ((s & 0xCCCCCCCC) << 2);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a0d      	ldr	r2, [pc, #52]	; (8004330 <GPIO_SWARBitDouble+0x68>)
 80042fa:	401a      	ands	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	490c      	ldr	r1, [pc, #48]	; (8004334 <GPIO_SWARBitDouble+0x6c>)
 8004302:	400b      	ands	r3, r1
 8004304:	4313      	orrs	r3, r2
 8004306:	607b      	str	r3, [r7, #4]
	s = (s & ~0xAAAAAAAA) | ((s & 0xAAAAAAAA) << 1);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a0b      	ldr	r2, [pc, #44]	; (8004338 <GPIO_SWARBitDouble+0x70>)
 800430c:	401a      	ands	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	005b      	lsls	r3, r3, #1
 8004312:	490a      	ldr	r1, [pc, #40]	; (800433c <GPIO_SWARBitDouble+0x74>)
 8004314:	400b      	ands	r3, r1
 8004316:	4313      	orrs	r3, r2
 8004318:	607b      	str	r3, [r7, #4]
	return s;
 800431a:	687b      	ldr	r3, [r7, #4]
}
 800431c:	0018      	movs	r0, r3
 800431e:	46bd      	mov	sp, r7
 8004320:	b002      	add	sp, #8
 8004322:	bd80      	pop	{r7, pc}
 8004324:	00ff00ff 	.word	0x00ff00ff
 8004328:	0f0f0f0f 	.word	0x0f0f0f0f
 800432c:	0f0f0f00 	.word	0x0f0f0f00
 8004330:	33333333 	.word	0x33333333
 8004334:	33333330 	.word	0x33333330
 8004338:	55555555 	.word	0x55555555
 800433c:	55555554 	.word	0x55555554

08004340 <EXTIx_IRQHandler>:


#ifdef GPIO_USE_IRQS
static inline void EXTIx_IRQHandler(int n)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
	if (__HAL_GPIO_EXTI_GET_IT(1 << n) != RESET)
 8004348:	4b0a      	ldr	r3, [pc, #40]	; (8004374 <EXTIx_IRQHandler+0x34>)
 800434a:	695b      	ldr	r3, [r3, #20]
 800434c:	2101      	movs	r1, #1
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	4091      	lsls	r1, r2
 8004352:	000a      	movs	r2, r1
 8004354:	4013      	ands	r3, r2
 8004356:	d009      	beq.n	800436c <EXTIx_IRQHandler+0x2c>
	{
		__HAL_GPIO_EXTI_CLEAR_IT(1 << n);
 8004358:	2201      	movs	r2, #1
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	409a      	lsls	r2, r3
 800435e:	4b05      	ldr	r3, [pc, #20]	; (8004374 <EXTIx_IRQHandler+0x34>)
 8004360:	615a      	str	r2, [r3, #20]
		gCallback[n]();
 8004362:	4b05      	ldr	r3, [pc, #20]	; (8004378 <EXTIx_IRQHandler+0x38>)
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	0092      	lsls	r2, r2, #2
 8004368:	58d3      	ldr	r3, [r2, r3]
 800436a:	4798      	blx	r3
	}
}
 800436c:	46c0      	nop			; (mov r8, r8)
 800436e:	46bd      	mov	sp, r7
 8004370:	b002      	add	sp, #8
 8004372:	bd80      	pop	{r7, pc}
 8004374:	40010400 	.word	0x40010400
 8004378:	20000564 	.word	0x20000564

0800437c <EXTIx_EnableIRQn>:

static void EXTIx_EnableIRQn(int n)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
	if (n <= 1)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b01      	cmp	r3, #1
 8004388:	dc03      	bgt.n	8004392 <EXTIx_EnableIRQn+0x16>
	{
		HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800438a:	2005      	movs	r0, #5
 800438c:	f7fd fdc9 	bl	8001f22 <HAL_NVIC_EnableIRQ>
	}
	else
	{
		HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
	}
}
 8004390:	e009      	b.n	80043a6 <EXTIx_EnableIRQn+0x2a>
	else if (n <= 3)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b03      	cmp	r3, #3
 8004396:	dc03      	bgt.n	80043a0 <EXTIx_EnableIRQn+0x24>
		HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8004398:	2006      	movs	r0, #6
 800439a:	f7fd fdc2 	bl	8001f22 <HAL_NVIC_EnableIRQ>
}
 800439e:	e002      	b.n	80043a6 <EXTIx_EnableIRQn+0x2a>
		HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80043a0:	2007      	movs	r0, #7
 80043a2:	f7fd fdbe 	bl	8001f22 <HAL_NVIC_EnableIRQ>
}
 80043a6:	46c0      	nop			; (mov r8, r8)
 80043a8:	46bd      	mov	sp, r7
 80043aa:	b002      	add	sp, #8
 80043ac:	bd80      	pop	{r7, pc}

080043ae <EXTI2_3_IRQHandler>:
}
#endif

#if defined(GPIO_IRQ2_ENABLE) || defined(GPIO_IRQ3_ENABLE)
void EXTI2_3_IRQHandler(void)
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	af00      	add	r7, sp, #0
#ifdef GPIO_IRQ2_ENABLE
	EXTIx_IRQHandler(2);
 80043b2:	2002      	movs	r0, #2
 80043b4:	f7ff ffc4 	bl	8004340 <EXTIx_IRQHandler>
#endif
#ifdef GPIO_IRQ3_ENABLE
	EXTIx_IRQHandler(3);
#endif
}
 80043b8:	46c0      	nop			; (mov r8, r8)
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <EXTI4_15_IRQHandler>:
#if    defined(GPIO_IRQ4_ENABLE) || defined(GPIO_IRQ5_ENABLE) || defined(GPIO_IRQ6_ENABLE)   \
    || defined(GPIO_IRQ7_ENABLE) || defined(GPIO_IRQ8_ENABLE) || defined(GPIO_IRQ9_ENABLE)   \
	|| defined(GPIO_IRQ10_ENABLE) || defined(GPIO_IRQ11_ENABLE) || defined(GPIO_IRQ12_ENABLE)\
	|| defined(GPIO_IRQ13_ENABLE) || defined(GPIO_IRQ14_ENABLE) || defined(GPIO_IRQ15_ENABLE)
void EXTI4_15_IRQHandler(void)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	af00      	add	r7, sp, #0
#ifdef GPIO_IRQ4_ENABLE
	EXTIx_IRQHandler(4);
#endif
#ifdef GPIO_IRQ5_ENABLE
	EXTIx_IRQHandler(5);
 80043c2:	2005      	movs	r0, #5
 80043c4:	f7ff ffbc 	bl	8004340 <EXTIx_IRQHandler>
#endif
#ifdef GPIO_IRQ6_ENABLE
	EXTIx_IRQHandler(6);
 80043c8:	2006      	movs	r0, #6
 80043ca:	f7ff ffb9 	bl	8004340 <EXTIx_IRQHandler>
#endif
#ifdef GPIO_IRQ9_ENABLE
	EXTIx_IRQHandler(9);
#endif
#ifdef GPIO_IRQ10_ENABLE
	EXTIx_IRQHandler(10);
 80043ce:	200a      	movs	r0, #10
 80043d0:	f7ff ffb6 	bl	8004340 <EXTIx_IRQHandler>
#endif
#ifdef GPIO_IRQ11_ENABLE
	EXTIx_IRQHandler(11);
 80043d4:	200b      	movs	r0, #11
 80043d6:	f7ff ffb3 	bl	8004340 <EXTIx_IRQHandler>
	EXTIx_IRQHandler(14);
#endif
#ifdef GPIO_IRQ15_ENABLE
	EXTIx_IRQHandler(15);
#endif
}
 80043da:	46c0      	nop			; (mov r8, r8)
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <CLK_GetPCLKFreq>:

static inline uint32_t CLK_GetPCLKFreq(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	af00      	add	r7, sp, #0
	return CLK_SYSCLK_FREQ;
 80043e4:	4b01      	ldr	r3, [pc, #4]	; (80043ec <CLK_GetPCLKFreq+0xc>)
}
 80043e6:	0018      	movs	r0, r3
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	01e84800 	.word	0x01e84800

080043f0 <TIM_Init>:
/*
 * PUBLIC FUNCTIONS
 */

void TIM_Init(TIM_t * tim, uint32_t freq, uint32_t reload)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]
	TIMx_Init(tim);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	0018      	movs	r0, r3
 8004400:	f000 f9c6 	bl	8004790 <TIMx_Init>

	uint32_t cr1 = tim->Instance->CR1;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	617b      	str	r3, [r7, #20]
	cr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS | TIM_CR1_CKD | TIM_CR1_ARPE);
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	4a0d      	ldr	r2, [pc, #52]	; (8004444 <TIM_Init+0x54>)
 8004410:	4013      	ands	r3, r2
 8004412:	617b      	str	r3, [r7, #20]
	cr1 |= TIM_AUTORELOAD_PRELOAD_ENABLE | TIM_CLOCKDIVISION_DIV1 | TIM_COUNTERMODE_UP;
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	2280      	movs	r2, #128	; 0x80
 8004418:	4313      	orrs	r3, r2
 800441a:	617b      	str	r3, [r7, #20]
	tim->Instance->CR1 = cr1;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	697a      	ldr	r2, [r7, #20]
 8004422:	601a      	str	r2, [r3, #0]

	TIM_SetFreq(tim, freq);
 8004424:	68ba      	ldr	r2, [r7, #8]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	0011      	movs	r1, r2
 800442a:	0018      	movs	r0, r3
 800442c:	f000 f80c 	bl	8004448 <TIM_SetFreq>
	TIM_SetReload(tim, reload);
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	0011      	movs	r1, r2
 8004436:	0018      	movs	r0, r3
 8004438:	f000 f81d 	bl	8004476 <TIM_SetReload>
}
 800443c:	46c0      	nop			; (mov r8, r8)
 800443e:	46bd      	mov	sp, r7
 8004440:	b006      	add	sp, #24
 8004442:	bd80      	pop	{r7, pc}
 8004444:	fffffc0f 	.word	0xfffffc0f

08004448 <TIM_SetFreq>:

void TIM_SetFreq(TIM_t * tim, uint32_t freq)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
	uint32_t clk = CLK_GetPCLKFreq();
 8004452:	f7ff ffc5 	bl	80043e0 <CLK_GetPCLKFreq>
 8004456:	0003      	movs	r3, r0
 8004458:	60fb      	str	r3, [r7, #12]
	tim->Instance->PSC = (clk / freq) - 1;
 800445a:	6839      	ldr	r1, [r7, #0]
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f7fb fe53 	bl	8000108 <__udivsi3>
 8004462:	0003      	movs	r3, r0
 8004464:	001a      	movs	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	3a01      	subs	r2, #1
 800446c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800446e:	46c0      	nop			; (mov r8, r8)
 8004470:	46bd      	mov	sp, r7
 8004472:	b004      	add	sp, #16
 8004474:	bd80      	pop	{r7, pc}

08004476 <TIM_SetReload>:

void TIM_SetReload(TIM_t * tim, uint32_t reload)
{
 8004476:	b580      	push	{r7, lr}
 8004478:	b082      	sub	sp, #8
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
 800447e:	6039      	str	r1, [r7, #0]
	tim->Instance->ARR = reload;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	683a      	ldr	r2, [r7, #0]
 8004486:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004488:	46c0      	nop			; (mov r8, r8)
 800448a:	46bd      	mov	sp, r7
 800448c:	b002      	add	sp, #8
 800448e:	bd80      	pop	{r7, pc}

08004490 <TIM_OnReload>:

#ifdef TIM_USE_IRQS
void TIM_OnReload(TIM_t * tim, VoidFunction_t callback)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
	__HAL_TIM_ENABLE_IT(tim, TIM_IT_UPDATE);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68da      	ldr	r2, [r3, #12]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2101      	movs	r1, #1
 80044a6:	430a      	orrs	r2, r1
 80044a8:	60da      	str	r2, [r3, #12]
	tim->ReloadCallback = callback;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	683a      	ldr	r2, [r7, #0]
 80044ae:	605a      	str	r2, [r3, #4]
}
 80044b0:	46c0      	nop			; (mov r8, r8)
 80044b2:	46bd      	mov	sp, r7
 80044b4:	b002      	add	sp, #8
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <TIM_OnPulse>:

void TIM_OnPulse(TIM_t * tim, TIM_Channel_t ch, VoidFunction_t callback)
{
 80044b8:	b590      	push	{r4, r7, lr}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	607a      	str	r2, [r7, #4]
 80044c2:	240b      	movs	r4, #11
 80044c4:	193b      	adds	r3, r7, r4
 80044c6:	1c0a      	adds	r2, r1, #0
 80044c8:	701a      	strb	r2, [r3, #0]
	// WARN: This will fail horribly if ch is greater than 4.
	TIM_EnableOCx(tim, ch, TIM_OCMODE_ACTIVE);
 80044ca:	193b      	adds	r3, r7, r4
 80044cc:	7819      	ldrb	r1, [r3, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2210      	movs	r2, #16
 80044d2:	0018      	movs	r0, r3
 80044d4:	f000 f8b0 	bl	8004638 <TIM_EnableOCx>
	// Note that the channels IT's are 1 << 1 through 1 << 4
	__HAL_TIM_ENABLE_IT(tim, TIM_IT_CC1 << ch);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68d9      	ldr	r1, [r3, #12]
 80044de:	0020      	movs	r0, r4
 80044e0:	183b      	adds	r3, r7, r0
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	2202      	movs	r2, #2
 80044e6:	409a      	lsls	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	430a      	orrs	r2, r1
 80044ee:	60da      	str	r2, [r3, #12]
	tim->PulseCallback[ch] = callback;
 80044f0:	183b      	adds	r3, r7, r0
 80044f2:	781a      	ldrb	r2, [r3, #0]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	3202      	adds	r2, #2
 80044f8:	0092      	lsls	r2, r2, #2
 80044fa:	6879      	ldr	r1, [r7, #4]
 80044fc:	50d1      	str	r1, [r2, r3]
}
 80044fe:	46c0      	nop			; (mov r8, r8)
 8004500:	46bd      	mov	sp, r7
 8004502:	b005      	add	sp, #20
 8004504:	bd90      	pop	{r4, r7, pc}

08004506 <TIM_EnablePwm>:
#endif //TIM_USE_IRQS

void TIM_EnablePwm(TIM_t * tim, TIM_Channel_t ch, GPIO_t * gpio, uint32_t pin, uint32_t af)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b084      	sub	sp, #16
 800450a:	af00      	add	r7, sp, #0
 800450c:	60f8      	str	r0, [r7, #12]
 800450e:	607a      	str	r2, [r7, #4]
 8004510:	603b      	str	r3, [r7, #0]
 8004512:	200b      	movs	r0, #11
 8004514:	183b      	adds	r3, r7, r0
 8004516:	1c0a      	adds	r2, r1, #0
 8004518:	701a      	strb	r2, [r3, #0]
	// TIM_CCMR1_OC1PE is the output compare preload
	TIM_EnableOCx(tim, ch, TIM_OCMODE_PWM1 | TIM_CCMR1_OC1PE | TIM_OCFAST_ENABLE);
 800451a:	183b      	adds	r3, r7, r0
 800451c:	7819      	ldrb	r1, [r3, #0]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	226c      	movs	r2, #108	; 0x6c
 8004522:	0018      	movs	r0, r3
 8004524:	f000 f888 	bl	8004638 <TIM_EnableOCx>
	GPIO_EnableAlternate(gpio, pin, 0, af);
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	6839      	ldr	r1, [r7, #0]
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	f7ff fd42 	bl	8003fb8 <GPIO_EnableAlternate>
}
 8004534:	46c0      	nop			; (mov r8, r8)
 8004536:	46bd      	mov	sp, r7
 8004538:	b004      	add	sp, #16
 800453a:	bd80      	pop	{r7, pc}

0800453c <TIM_SetPulse>:


void TIM_SetPulse(TIM_t * tim, TIM_Channel_t ch, uint32_t pulse)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	607a      	str	r2, [r7, #4]
 8004546:	200b      	movs	r0, #11
 8004548:	183b      	adds	r3, r7, r0
 800454a:	1c0a      	adds	r2, r1, #0
 800454c:	701a      	strb	r2, [r3, #0]
	switch (ch)
 800454e:	183b      	adds	r3, r7, r0
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	2b03      	cmp	r3, #3
 8004554:	d017      	beq.n	8004586 <TIM_SetPulse+0x4a>
 8004556:	dc1b      	bgt.n	8004590 <TIM_SetPulse+0x54>
 8004558:	2b02      	cmp	r3, #2
 800455a:	d00f      	beq.n	800457c <TIM_SetPulse+0x40>
 800455c:	dc18      	bgt.n	8004590 <TIM_SetPulse+0x54>
 800455e:	2b00      	cmp	r3, #0
 8004560:	d002      	beq.n	8004568 <TIM_SetPulse+0x2c>
 8004562:	2b01      	cmp	r3, #1
 8004564:	d005      	beq.n	8004572 <TIM_SetPulse+0x36>
	case TIM_CH4:
		tim->Instance->CCR4 = pulse;
		break;
	}

}
 8004566:	e013      	b.n	8004590 <TIM_SetPulse+0x54>
		tim->Instance->CCR1 = pulse;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8004570:	e00e      	b.n	8004590 <TIM_SetPulse+0x54>
		tim->Instance->CCR2 = pulse;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 800457a:	e009      	b.n	8004590 <TIM_SetPulse+0x54>
		tim->Instance->CCR3 = pulse;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8004584:	e004      	b.n	8004590 <TIM_SetPulse+0x54>
		tim->Instance->CCR4 = pulse;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 800458e:	46c0      	nop			; (mov r8, r8)
}
 8004590:	46c0      	nop			; (mov r8, r8)
 8004592:	46bd      	mov	sp, r7
 8004594:	b004      	add	sp, #16
 8004596:	bd80      	pop	{r7, pc}

08004598 <TIM_Start>:

void TIM_Start(TIM_t * tim)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
	TIM_Reload(tim);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	0018      	movs	r0, r3
 80045a4:	f000 f8d6 	bl	8004754 <TIM_Reload>
	__HAL_TIM_ENABLE(tim);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2101      	movs	r1, #1
 80045b4:	430a      	orrs	r2, r1
 80045b6:	601a      	str	r2, [r3, #0]
}
 80045b8:	46c0      	nop			; (mov r8, r8)
 80045ba:	46bd      	mov	sp, r7
 80045bc:	b002      	add	sp, #8
 80045be:	bd80      	pop	{r7, pc}

080045c0 <TIM_Stop>:

void TIM_Stop(TIM_t * tim)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_DISABLE(tim);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	4a07      	ldr	r2, [pc, #28]	; (80045ec <TIM_Stop+0x2c>)
 80045d0:	4013      	ands	r3, r2
 80045d2:	d107      	bne.n	80045e4 <TIM_Stop+0x24>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2101      	movs	r1, #1
 80045e0:	438a      	bics	r2, r1
 80045e2:	601a      	str	r2, [r3, #0]
}
 80045e4:	46c0      	nop			; (mov r8, r8)
 80045e6:	46bd      	mov	sp, r7
 80045e8:	b002      	add	sp, #8
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	00001111 	.word	0x00001111

080045f0 <TIM_Deinit>:

void TIM_Deinit(TIM_t * tim)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_DISABLE(tim);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	4a0d      	ldr	r2, [pc, #52]	; (8004634 <TIM_Deinit+0x44>)
 8004600:	4013      	ands	r3, r2
 8004602:	d107      	bne.n	8004614 <TIM_Deinit+0x24>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2101      	movs	r1, #1
 8004610:	438a      	bics	r2, r1
 8004612:	601a      	str	r2, [r3, #0]
	__HAL_TIM_DISABLE_IT(tim, TIM_IT_UPDATE | TIM_IT_CC1 | TIM_IT_CC2 | TIM_IT_CC3 | TIM_IT_CC4);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68da      	ldr	r2, [r3, #12]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	211f      	movs	r1, #31
 8004620:	438a      	bics	r2, r1
 8004622:	60da      	str	r2, [r3, #12]
	TIMx_Deinit(tim);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	0018      	movs	r0, r3
 8004628:	f000 f8fc 	bl	8004824 <TIMx_Deinit>
}
 800462c:	46c0      	nop			; (mov r8, r8)
 800462e:	46bd      	mov	sp, r7
 8004630:	b002      	add	sp, #8
 8004632:	bd80      	pop	{r7, pc}
 8004634:	00001111 	.word	0x00001111

08004638 <TIM_EnableOCx>:
/*
 * PRIVATE FUNCTIONS
 */

static void TIM_EnableOCx(TIM_t * tim, uint32_t oc, uint32_t mode)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
	// Disable the channel during the update.
	TIM_DISABLE_CCx(tim, oc);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	6a1a      	ldr	r2, [r3, #32]
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	2101      	movs	r1, #1
 8004650:	4099      	lsls	r1, r3
 8004652:	000b      	movs	r3, r1
 8004654:	43d9      	mvns	r1, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	400a      	ands	r2, r1
 800465c:	621a      	str	r2, [r3, #32]
	switch (oc)
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	2b03      	cmp	r3, #3
 8004662:	d04c      	beq.n	80046fe <TIM_EnableOCx+0xc6>
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	2b03      	cmp	r3, #3
 8004668:	d85e      	bhi.n	8004728 <TIM_EnableOCx+0xf0>
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	2b02      	cmp	r3, #2
 800466e:	d032      	beq.n	80046d6 <TIM_EnableOCx+0x9e>
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	2b02      	cmp	r3, #2
 8004674:	d858      	bhi.n	8004728 <TIM_EnableOCx+0xf0>
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d003      	beq.n	8004684 <TIM_EnableOCx+0x4c>
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	2b01      	cmp	r3, #1
 8004680:	d014      	beq.n	80046ac <TIM_EnableOCx+0x74>
 8004682:	e051      	b.n	8004728 <TIM_EnableOCx+0xf0>
	{
	case 0:
		MODIFY_REG(tim->Instance->CCMR1, TIM_CCMRx_MSK, mode);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	227f      	movs	r2, #127	; 0x7f
 800468c:	4393      	bics	r3, r2
 800468e:	0019      	movs	r1, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	430a      	orrs	r2, r1
 8004698:	619a      	str	r2, [r3, #24]
		MODIFY_REG(tim->Instance->CCER, TIM_CCER_CC1P, TIM_OCPOLARITY_HIGH);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	6a1a      	ldr	r2, [r3, #32]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2102      	movs	r1, #2
 80046a6:	438a      	bics	r2, r1
 80046a8:	621a      	str	r2, [r3, #32]
		break;
 80046aa:	e03d      	b.n	8004728 <TIM_EnableOCx+0xf0>
	case 1:
		MODIFY_REG(tim->Instance->CCMR1, TIM_CCMRx_MSK << 8, mode << 8);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	4a25      	ldr	r2, [pc, #148]	; (8004748 <TIM_EnableOCx+0x110>)
 80046b4:	4013      	ands	r3, r2
 80046b6:	0019      	movs	r1, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	021a      	lsls	r2, r3, #8
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	430a      	orrs	r2, r1
 80046c2:	619a      	str	r2, [r3, #24]
		MODIFY_REG(tim->Instance->CCER, TIM_CCER_CC2P, TIM_OCPOLARITY_HIGH << 4);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6a1a      	ldr	r2, [r3, #32]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2120      	movs	r1, #32
 80046d0:	438a      	bics	r2, r1
 80046d2:	621a      	str	r2, [r3, #32]
		break;
 80046d4:	e028      	b.n	8004728 <TIM_EnableOCx+0xf0>
	case 2:
		MODIFY_REG(tim->Instance->CCMR2, TIM_CCMRx_MSK, mode);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	69db      	ldr	r3, [r3, #28]
 80046dc:	227f      	movs	r2, #127	; 0x7f
 80046de:	4393      	bics	r3, r2
 80046e0:	0019      	movs	r1, r3
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	430a      	orrs	r2, r1
 80046ea:	61da      	str	r2, [r3, #28]
		MODIFY_REG(tim->Instance->CCER, TIM_CCER_CC3P, TIM_OCPOLARITY_HIGH << 8);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6a1a      	ldr	r2, [r3, #32]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4915      	ldr	r1, [pc, #84]	; (800474c <TIM_EnableOCx+0x114>)
 80046f8:	400a      	ands	r2, r1
 80046fa:	621a      	str	r2, [r3, #32]
		break;
 80046fc:	e014      	b.n	8004728 <TIM_EnableOCx+0xf0>
	case 3:
		MODIFY_REG(tim->Instance->CCMR2, TIM_CCMRx_MSK << 8, mode << 8);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	69db      	ldr	r3, [r3, #28]
 8004704:	4a10      	ldr	r2, [pc, #64]	; (8004748 <TIM_EnableOCx+0x110>)
 8004706:	4013      	ands	r3, r2
 8004708:	0019      	movs	r1, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	021a      	lsls	r2, r3, #8
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	430a      	orrs	r2, r1
 8004714:	61da      	str	r2, [r3, #28]
		MODIFY_REG(tim->Instance->CCER, TIM_CCER_CC4P, TIM_OCPOLARITY_HIGH << 12);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	6a1a      	ldr	r2, [r3, #32]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	490b      	ldr	r1, [pc, #44]	; (8004750 <TIM_EnableOCx+0x118>)
 8004722:	400a      	ands	r2, r1
 8004724:	621a      	str	r2, [r3, #32]
		break;
 8004726:	46c0      	nop			; (mov r8, r8)
	}
	TIM_ENABLE_CCx(tim, oc);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6a19      	ldr	r1, [r3, #32]
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	2201      	movs	r2, #1
 8004734:	409a      	lsls	r2, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	430a      	orrs	r2, r1
 800473c:	621a      	str	r2, [r3, #32]
	//	MODIFY_REG(tmpcr2, TIM_CR2_OIS1 | TIM_CR2_OIS1N, TIM_OCIDLESTATE_SET | TIM_OCNIDLESTATE_SET);
	//	TIMx->CR2 = tmpcr2;
	//}


}
 800473e:	46c0      	nop			; (mov r8, r8)
 8004740:	46bd      	mov	sp, r7
 8004742:	b004      	add	sp, #16
 8004744:	bd80      	pop	{r7, pc}
 8004746:	46c0      	nop			; (mov r8, r8)
 8004748:	ffff80ff 	.word	0xffff80ff
 800474c:	fffffdff 	.word	0xfffffdff
 8004750:	ffffdfff 	.word	0xffffdfff

08004754 <TIM_Reload>:

static void TIM_Reload(TIM_t * tim)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
	// Disable all timer event sources.
	uint32_t itSources = tim->Instance->DIER;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	60fb      	str	r3, [r7, #12]
	tim->Instance->DIER = 0;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2200      	movs	r2, #0
 800476a:	60da      	str	r2, [r3, #12]

	// Update the prescalar
	tim->Instance->EGR = TIM_EGR_UG;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2201      	movs	r2, #1
 8004772:	615a      	str	r2, [r3, #20]

	// Clear the event before it occurrs.
	__HAL_TIM_CLEAR_IT(tim, TIM_IT_UPDATE);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2202      	movs	r2, #2
 800477a:	4252      	negs	r2, r2
 800477c:	611a      	str	r2, [r3, #16]
	tim->Instance->DIER = itSources;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	60da      	str	r2, [r3, #12]
}
 8004786:	46c0      	nop			; (mov r8, r8)
 8004788:	46bd      	mov	sp, r7
 800478a:	b004      	add	sp, #16
 800478c:	bd80      	pop	{r7, pc}
	...

08004790 <TIMx_Init>:

static void TIMx_Init(TIM_t * tim)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
		__HAL_RCC_TIM1_CLK_ENABLE();
	}

#endif
#ifdef TIM2_ENABLE
	if (tim == TIM_2)
 8004798:	4b1d      	ldr	r3, [pc, #116]	; (8004810 <TIMx_Init+0x80>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d108      	bne.n	80047b4 <TIMx_Init+0x24>
	{
		HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80047a2:	200f      	movs	r0, #15
 80047a4:	f7fd fbbd 	bl	8001f22 <HAL_NVIC_EnableIRQ>
		__HAL_RCC_TIM2_CLK_ENABLE();
 80047a8:	4b1a      	ldr	r3, [pc, #104]	; (8004814 <TIMx_Init+0x84>)
 80047aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047ac:	4b19      	ldr	r3, [pc, #100]	; (8004814 <TIMx_Init+0x84>)
 80047ae:	2101      	movs	r1, #1
 80047b0:	430a      	orrs	r2, r1
 80047b2:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_NVIC_EnableIRQ(TIM5_IRQn);
		__HAL_RCC_TIM5_CLK_ENABLE();
	}
#endif
#ifdef TIM6_ENABLE
	if (tim == TIM_6)
 80047b4:	4b18      	ldr	r3, [pc, #96]	; (8004818 <TIMx_Init+0x88>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d108      	bne.n	80047d0 <TIMx_Init+0x40>
	{
		HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80047be:	2011      	movs	r0, #17
 80047c0:	f7fd fbaf 	bl	8001f22 <HAL_NVIC_EnableIRQ>
		__HAL_RCC_TIM6_CLK_ENABLE();
 80047c4:	4b13      	ldr	r3, [pc, #76]	; (8004814 <TIMx_Init+0x84>)
 80047c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047c8:	4b12      	ldr	r3, [pc, #72]	; (8004814 <TIMx_Init+0x84>)
 80047ca:	2110      	movs	r1, #16
 80047cc:	430a      	orrs	r2, r1
 80047ce:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_NVIC_EnableIRQ(TIM17_IRQn);
		__HAL_RCC_TIM17_CLK_ENABLE();
	}
#endif
#ifdef TIM21_ENABLE
	if (tim == TIM_21)
 80047d0:	4b12      	ldr	r3, [pc, #72]	; (800481c <TIMx_Init+0x8c>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d108      	bne.n	80047ec <TIMx_Init+0x5c>
	{
		HAL_NVIC_EnableIRQ(TIM21_IRQn);
 80047da:	2014      	movs	r0, #20
 80047dc:	f7fd fba1 	bl	8001f22 <HAL_NVIC_EnableIRQ>
		__HAL_RCC_TIM21_CLK_ENABLE();
 80047e0:	4b0c      	ldr	r3, [pc, #48]	; (8004814 <TIMx_Init+0x84>)
 80047e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047e4:	4b0b      	ldr	r3, [pc, #44]	; (8004814 <TIMx_Init+0x84>)
 80047e6:	2104      	movs	r1, #4
 80047e8:	430a      	orrs	r2, r1
 80047ea:	635a      	str	r2, [r3, #52]	; 0x34
	}
#endif
#ifdef TIM22_ENABLE
	if (tim == TIM_22)
 80047ec:	4b0c      	ldr	r3, [pc, #48]	; (8004820 <TIMx_Init+0x90>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d108      	bne.n	8004808 <TIMx_Init+0x78>
	{
		HAL_NVIC_EnableIRQ(TIM22_IRQn);
 80047f6:	2016      	movs	r0, #22
 80047f8:	f7fd fb93 	bl	8001f22 <HAL_NVIC_EnableIRQ>
		__HAL_RCC_TIM22_CLK_ENABLE();
 80047fc:	4b05      	ldr	r3, [pc, #20]	; (8004814 <TIMx_Init+0x84>)
 80047fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004800:	4b04      	ldr	r3, [pc, #16]	; (8004814 <TIMx_Init+0x84>)
 8004802:	2120      	movs	r1, #32
 8004804:	430a      	orrs	r2, r1
 8004806:	635a      	str	r2, [r3, #52]	; 0x34
	}
#endif
}
 8004808:	46c0      	nop			; (mov r8, r8)
 800480a:	46bd      	mov	sp, r7
 800480c:	b002      	add	sp, #8
 800480e:	bd80      	pop	{r7, pc}
 8004810:	20000020 	.word	0x20000020
 8004814:	40021000 	.word	0x40021000
 8004818:	2000003c 	.word	0x2000003c
 800481c:	20000058 	.word	0x20000058
 8004820:	20000074 	.word	0x20000074

08004824 <TIMx_Deinit>:


static void TIMx_Deinit(TIM_t * tim)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
		HAL_NVIC_DisableIRQ(TIM1_CC_IRQn);
		__HAL_RCC_TIM1_CLK_DISABLE();
	}
#endif
#ifdef TIM2_ENABLE
	if (tim == TIM_2)
 800482c:	4b1d      	ldr	r3, [pc, #116]	; (80048a4 <TIMx_Deinit+0x80>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	429a      	cmp	r2, r3
 8004834:	d108      	bne.n	8004848 <TIMx_Deinit+0x24>
	{
		HAL_NVIC_DisableIRQ(TIM2_IRQn);
 8004836:	200f      	movs	r0, #15
 8004838:	f7fd fb83 	bl	8001f42 <HAL_NVIC_DisableIRQ>
		__HAL_RCC_TIM2_CLK_DISABLE();
 800483c:	4b1a      	ldr	r3, [pc, #104]	; (80048a8 <TIMx_Deinit+0x84>)
 800483e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004840:	4b19      	ldr	r3, [pc, #100]	; (80048a8 <TIMx_Deinit+0x84>)
 8004842:	2101      	movs	r1, #1
 8004844:	438a      	bics	r2, r1
 8004846:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_NVIC_DisableIRQ(TIM5_IRQn);
		__HAL_RCC_TIM5_CLK_DISABLE();
	}
#endif
#ifdef TIM6_ENABLE
	if (tim == TIM_6)
 8004848:	4b18      	ldr	r3, [pc, #96]	; (80048ac <TIMx_Deinit+0x88>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	429a      	cmp	r2, r3
 8004850:	d108      	bne.n	8004864 <TIMx_Deinit+0x40>
	{
		HAL_NVIC_DisableIRQ(TIM6_IRQn);
 8004852:	2011      	movs	r0, #17
 8004854:	f7fd fb75 	bl	8001f42 <HAL_NVIC_DisableIRQ>
		__HAL_RCC_TIM6_CLK_DISABLE();
 8004858:	4b13      	ldr	r3, [pc, #76]	; (80048a8 <TIMx_Deinit+0x84>)
 800485a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800485c:	4b12      	ldr	r3, [pc, #72]	; (80048a8 <TIMx_Deinit+0x84>)
 800485e:	2110      	movs	r1, #16
 8004860:	438a      	bics	r2, r1
 8004862:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_NVIC_DisableIRQ(TIM17_IRQn);
		__HAL_RCC_TIM17_CLK_DISABLE();
	}
#endif
#ifdef TIM21_ENABLE
	if (tim == TIM_21)
 8004864:	4b12      	ldr	r3, [pc, #72]	; (80048b0 <TIMx_Deinit+0x8c>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	429a      	cmp	r2, r3
 800486c:	d108      	bne.n	8004880 <TIMx_Deinit+0x5c>
	{
		HAL_NVIC_DisableIRQ(TIM21_IRQn);
 800486e:	2014      	movs	r0, #20
 8004870:	f7fd fb67 	bl	8001f42 <HAL_NVIC_DisableIRQ>
		__HAL_RCC_TIM21_CLK_DISABLE();
 8004874:	4b0c      	ldr	r3, [pc, #48]	; (80048a8 <TIMx_Deinit+0x84>)
 8004876:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004878:	4b0b      	ldr	r3, [pc, #44]	; (80048a8 <TIMx_Deinit+0x84>)
 800487a:	2104      	movs	r1, #4
 800487c:	438a      	bics	r2, r1
 800487e:	635a      	str	r2, [r3, #52]	; 0x34
	}
#endif
#ifdef TIM22_ENABLE
	if (tim == TIM_22)
 8004880:	4b0c      	ldr	r3, [pc, #48]	; (80048b4 <TIMx_Deinit+0x90>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	429a      	cmp	r2, r3
 8004888:	d108      	bne.n	800489c <TIMx_Deinit+0x78>
	{
		HAL_NVIC_DisableIRQ(TIM22_IRQn);
 800488a:	2016      	movs	r0, #22
 800488c:	f7fd fb59 	bl	8001f42 <HAL_NVIC_DisableIRQ>
		__HAL_RCC_TIM22_CLK_DISABLE();
 8004890:	4b05      	ldr	r3, [pc, #20]	; (80048a8 <TIMx_Deinit+0x84>)
 8004892:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004894:	4b04      	ldr	r3, [pc, #16]	; (80048a8 <TIMx_Deinit+0x84>)
 8004896:	2120      	movs	r1, #32
 8004898:	438a      	bics	r2, r1
 800489a:	635a      	str	r2, [r3, #52]	; 0x34
	}
#endif
}
 800489c:	46c0      	nop			; (mov r8, r8)
 800489e:	46bd      	mov	sp, r7
 80048a0:	b002      	add	sp, #8
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	20000020 	.word	0x20000020
 80048a8:	40021000 	.word	0x40021000
 80048ac:	2000003c 	.word	0x2000003c
 80048b0:	20000058 	.word	0x20000058
 80048b4:	20000074 	.word	0x20000074

080048b8 <TIM_IRQHandler>:
 */

#ifdef TIM_USE_IRQS

static void TIM_IRQHandler(TIM_t * tim)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
	uint32_t irqs = TIM_GET_IRQ_SOURCES(tim);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	691a      	ldr	r2, [r3, #16]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	4013      	ands	r3, r2
 80048ce:	60fb      	str	r3, [r7, #12]
	if(irqs & TIM_FLAG_CC1)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2202      	movs	r2, #2
 80048d4:	4013      	ands	r3, r2
 80048d6:	d007      	beq.n	80048e8 <TIM_IRQHandler+0x30>
	{
		__HAL_TIM_CLEAR_IT(tim, TIM_IT_CC1);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2203      	movs	r2, #3
 80048de:	4252      	negs	r2, r2
 80048e0:	611a      	str	r2, [r3, #16]
		tim->PulseCallback[0]();
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	4798      	blx	r3
	}
	if(irqs & TIM_FLAG_CC2)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2204      	movs	r2, #4
 80048ec:	4013      	ands	r3, r2
 80048ee:	d007      	beq.n	8004900 <TIM_IRQHandler+0x48>
	{
		__HAL_TIM_CLEAR_IT(tim, TIM_IT_CC2);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2205      	movs	r2, #5
 80048f6:	4252      	negs	r2, r2
 80048f8:	611a      	str	r2, [r3, #16]
		tim->PulseCallback[1]();
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	4798      	blx	r3
	}
	if(irqs & TIM_FLAG_CC3)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2208      	movs	r2, #8
 8004904:	4013      	ands	r3, r2
 8004906:	d007      	beq.n	8004918 <TIM_IRQHandler+0x60>
	{
		__HAL_TIM_CLEAR_IT(tim, TIM_IT_CC3);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2209      	movs	r2, #9
 800490e:	4252      	negs	r2, r2
 8004910:	611a      	str	r2, [r3, #16]
		tim->PulseCallback[2]();
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	4798      	blx	r3
	}
	if(irqs & TIM_FLAG_CC4)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2210      	movs	r2, #16
 800491c:	4013      	ands	r3, r2
 800491e:	d007      	beq.n	8004930 <TIM_IRQHandler+0x78>
	{
		__HAL_TIM_CLEAR_IT(tim, TIM_IT_CC4);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2211      	movs	r2, #17
 8004926:	4252      	negs	r2, r2
 8004928:	611a      	str	r2, [r3, #16]
		tim->PulseCallback[3]();
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	4798      	blx	r3
	}
	if(irqs & TIM_FLAG_UPDATE)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2201      	movs	r2, #1
 8004934:	4013      	ands	r3, r2
 8004936:	d007      	beq.n	8004948 <TIM_IRQHandler+0x90>
	{
		__HAL_TIM_CLEAR_IT(tim, TIM_IT_UPDATE);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2202      	movs	r2, #2
 800493e:	4252      	negs	r2, r2
 8004940:	611a      	str	r2, [r3, #16]
		tim->ReloadCallback();
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	4798      	blx	r3
	}
}
 8004948:	46c0      	nop			; (mov r8, r8)
 800494a:	46bd      	mov	sp, r7
 800494c:	b004      	add	sp, #16
 800494e:	bd80      	pop	{r7, pc}

08004950 <TIM2_IRQHandler>:
	TIM_IRQHandler(TIM_1);
}
#endif
#ifdef TIM2_ENABLE
void TIM2_IRQHandler(void)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	af00      	add	r7, sp, #0
	TIM_IRQHandler(TIM_2);
 8004954:	4b03      	ldr	r3, [pc, #12]	; (8004964 <TIM2_IRQHandler+0x14>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	0018      	movs	r0, r3
 800495a:	f7ff ffad 	bl	80048b8 <TIM_IRQHandler>
}
 800495e:	46c0      	nop			; (mov r8, r8)
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	20000020 	.word	0x20000020

08004968 <TIM6_IRQHandler>:
	TIM_IRQHandler(TIM_5);
}
#endif
#ifdef TIM6_ENABLE
void TIM6_IRQHandler(void)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	af00      	add	r7, sp, #0
	TIM_IRQHandler(TIM_6);
 800496c:	4b03      	ldr	r3, [pc, #12]	; (800497c <TIM6_IRQHandler+0x14>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	0018      	movs	r0, r3
 8004972:	f7ff ffa1 	bl	80048b8 <TIM_IRQHandler>
}
 8004976:	46c0      	nop			; (mov r8, r8)
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	2000003c 	.word	0x2000003c

08004980 <TIM21_IRQHandler>:
	TIM_IRQHandler(TIM_17);
}
#endif
#ifdef TIM21_ENABLE
void TIM21_IRQHandler(void)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	af00      	add	r7, sp, #0
	TIM_IRQHandler(TIM_21);
 8004984:	4b03      	ldr	r3, [pc, #12]	; (8004994 <TIM21_IRQHandler+0x14>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	0018      	movs	r0, r3
 800498a:	f7ff ff95 	bl	80048b8 <TIM_IRQHandler>
}
 800498e:	46c0      	nop			; (mov r8, r8)
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	20000058 	.word	0x20000058

08004998 <TIM22_IRQHandler>:
#endif
#ifdef TIM22_ENABLE
void TIM22_IRQHandler(void)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	af00      	add	r7, sp, #0
	TIM_IRQHandler(TIM_22);
 800499c:	4b03      	ldr	r3, [pc, #12]	; (80049ac <TIM22_IRQHandler+0x14>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	0018      	movs	r0, r3
 80049a2:	f7ff ff89 	bl	80048b8 <TIM_IRQHandler>
}
 80049a6:	46c0      	nop			; (mov r8, r8)
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	20000074 	.word	0x20000074

080049b0 <GPIO_Deinit>:
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
	GPIO_Init(gpio, pin, GPIO_Mode_Analog);
 80049ba:	6839      	ldr	r1, [r7, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2203      	movs	r2, #3
 80049c0:	0018      	movs	r0, r3
 80049c2:	f7ff fb43 	bl	800404c <GPIO_Init>
}
 80049c6:	46c0      	nop			; (mov r8, r8)
 80049c8:	46bd      	mov	sp, r7
 80049ca:	b002      	add	sp, #8
 80049cc:	bd80      	pop	{r7, pc}
	...

080049d0 <CLK_GetPCLKFreq>:
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	af00      	add	r7, sp, #0
	return CLK_SYSCLK_FREQ;
 80049d4:	4b01      	ldr	r3, [pc, #4]	; (80049dc <CLK_GetPCLKFreq+0xc>)
}
 80049d6:	0018      	movs	r0, r3
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	01e84800 	.word	0x01e84800

080049e0 <UART_Init>:
 * PUBLIC FUNCTIONS
 */


void UART_Init(UART_t * uart, uint32_t baud, UART_Mode_t mode)
{
 80049e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049e2:	b093      	sub	sp, #76	; 0x4c
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6278      	str	r0, [r7, #36]	; 0x24
 80049e8:	6239      	str	r1, [r7, #32]
 80049ea:	261f      	movs	r6, #31
 80049ec:	19bb      	adds	r3, r7, r6
 80049ee:	701a      	strb	r2, [r3, #0]
	uart->tx.head = uart->tx.tail = 0;
 80049f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049f2:	2382      	movs	r3, #130	; 0x82
 80049f4:	005b      	lsls	r3, r3, #1
 80049f6:	2100      	movs	r1, #0
 80049f8:	50d1      	str	r1, [r2, r3]
 80049fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049fc:	2382      	movs	r3, #130	; 0x82
 80049fe:	005b      	lsls	r3, r3, #1
 8004a00:	58d1      	ldr	r1, [r2, r3]
 8004a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a04:	2380      	movs	r3, #128	; 0x80
 8004a06:	005b      	lsls	r3, r3, #1
 8004a08:	50d1      	str	r1, [r2, r3]
	uart->rx.head = uart->rx.tail = 0;
 8004a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a0c:	2383      	movs	r3, #131	; 0x83
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	2100      	movs	r1, #0
 8004a12:	50d1      	str	r1, [r2, r3]
 8004a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a16:	2383      	movs	r3, #131	; 0x83
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	58d1      	ldr	r1, [r2, r3]
 8004a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a1e:	2382      	movs	r3, #130	; 0x82
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	50d1      	str	r1, [r2, r3]

	// Enable the uart specific GPIO and clocks.
	UARTx_Init(uart);
 8004a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a26:	0018      	movs	r0, r3
 8004a28:	f000 f994 	bl	8004d54 <UARTx_Init>

	__HAL_UART_DISABLE(uart);
 8004a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a2e:	2384      	movs	r3, #132	; 0x84
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	58d3      	ldr	r3, [r2, r3]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a38:	2384      	movs	r3, #132	; 0x84
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	58cb      	ldr	r3, [r1, r3]
 8004a3e:	2101      	movs	r1, #1
 8004a40:	438a      	bics	r2, r1
 8004a42:	601a      	str	r2, [r3, #0]
	// Configure to standard settings: 8N1, no flow control.
	uint32_t cr1 = (uint32_t)UART_WORDLENGTH_8B | UART_PARITY_NONE | UART_MODE_TX_RX | UART_OVERSAMPLING_16;
 8004a44:	230c      	movs	r3, #12
 8004a46:	643b      	str	r3, [r7, #64]	; 0x40
	const uint32_t cr1msk = USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8;
 8004a48:	4b56      	ldr	r3, [pc, #344]	; (8004ba4 <UART_Init+0x1c4>)
 8004a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
	MODIFY_REG(uart->Instance->CR1, cr1msk,	cr1);
 8004a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a4e:	2384      	movs	r3, #132	; 0x84
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	58d3      	ldr	r3, [r2, r3]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a58:	43d2      	mvns	r2, r2
 8004a5a:	401a      	ands	r2, r3
 8004a5c:	0011      	movs	r1, r2
 8004a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a60:	2384      	movs	r3, #132	; 0x84
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	58d3      	ldr	r3, [r2, r3]
 8004a66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	601a      	str	r2, [r3, #0]

	uint32_t cr2 = UART_STOPBITS_1;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	647b      	str	r3, [r7, #68]	; 0x44
	if (mode & UART_Mode_Inverted) 	{ cr2 |= USART_CR2_RXINV | USART_CR2_TXINV; }
 8004a70:	19bb      	adds	r3, r7, r6
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	2201      	movs	r2, #1
 8004a76:	4013      	ands	r3, r2
 8004a78:	d004      	beq.n	8004a84 <UART_Init+0xa4>
 8004a7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a7c:	22c0      	movs	r2, #192	; 0xc0
 8004a7e:	0292      	lsls	r2, r2, #10
 8004a80:	4313      	orrs	r3, r2
 8004a82:	647b      	str	r3, [r7, #68]	; 0x44
	if (mode & UART_Mode_Swap) 		{ cr2 |= USART_CR2_SWAP; }
 8004a84:	231f      	movs	r3, #31
 8004a86:	18fb      	adds	r3, r7, r3
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	d004      	beq.n	8004a9a <UART_Init+0xba>
 8004a90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a92:	2280      	movs	r2, #128	; 0x80
 8004a94:	0212      	lsls	r2, r2, #8
 8004a96:	4313      	orrs	r3, r2
 8004a98:	647b      	str	r3, [r7, #68]	; 0x44
	const uint32_t cr2msk = USART_CR2_STOP | USART_CR2_RXINV | USART_CR2_TXINV | USART_CR2_SWAP | USART_CR2_LINEN | USART_CR2_CLKEN;
 8004a9a:	23fe      	movs	r3, #254	; 0xfe
 8004a9c:	029b      	lsls	r3, r3, #10
 8004a9e:	63bb      	str	r3, [r7, #56]	; 0x38
	MODIFY_REG(uart->Instance->CR2, cr2msk, cr2);
 8004aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aa2:	2384      	movs	r3, #132	; 0x84
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	58d3      	ldr	r3, [r2, r3]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004aac:	43d2      	mvns	r2, r2
 8004aae:	401a      	ands	r2, r3
 8004ab0:	0011      	movs	r1, r2
 8004ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab4:	2384      	movs	r3, #132	; 0x84
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	58d3      	ldr	r3, [r2, r3]
 8004aba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004abc:	430a      	orrs	r2, r1
 8004abe:	605a      	str	r2, [r3, #4]

	uint32_t cr3 = (uint32_t)UART_HWCONTROL_NONE | UART_ONE_BIT_SAMPLE_DISABLE;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	637b      	str	r3, [r7, #52]	; 0x34
	const uint32_t cr3msk = USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT | USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN;
 8004ac4:	4b38      	ldr	r3, [pc, #224]	; (8004ba8 <UART_Init+0x1c8>)
 8004ac6:	633b      	str	r3, [r7, #48]	; 0x30
	MODIFY_REG(uart->Instance->CR3, cr3msk, cr3);
 8004ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aca:	2384      	movs	r3, #132	; 0x84
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	58d3      	ldr	r3, [r2, r3]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ad4:	43d2      	mvns	r2, r2
 8004ad6:	401a      	ands	r2, r3
 8004ad8:	0011      	movs	r1, r2
 8004ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004adc:	2384      	movs	r3, #132	; 0x84
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	58d3      	ldr	r3, [r2, r3]
 8004ae2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	609a      	str	r2, [r3, #8]

	// Calculate baud rate.
	uint32_t pclk = CLK_GetPCLKFreq();
 8004ae8:	f7ff ff72 	bl	80049d0 <CLK_GetPCLKFreq>
 8004aec:	0003      	movs	r3, r0
 8004aee:	62fb      	str	r3, [r7, #44]	; 0x2c

#ifdef UARTLP_GPIO
	if (UART_INSTANCE_LOWPOWER(uart))
 8004af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004af2:	2384      	movs	r3, #132	; 0x84
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	58d3      	ldr	r3, [r2, r3]
 8004af8:	4a2c      	ldr	r2, [pc, #176]	; (8004bac <UART_Init+0x1cc>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d128      	bne.n	8004b50 <UART_Init+0x170>
	{
		uart->Instance->BRR = UART_DIV_LPUART(pclk, baud);
 8004afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b00:	613b      	str	r3, [r7, #16]
 8004b02:	2300      	movs	r3, #0
 8004b04:	617b      	str	r3, [r7, #20]
 8004b06:	6939      	ldr	r1, [r7, #16]
 8004b08:	697a      	ldr	r2, [r7, #20]
 8004b0a:	000b      	movs	r3, r1
 8004b0c:	0e1b      	lsrs	r3, r3, #24
 8004b0e:	0010      	movs	r0, r2
 8004b10:	0205      	lsls	r5, r0, #8
 8004b12:	431d      	orrs	r5, r3
 8004b14:	000b      	movs	r3, r1
 8004b16:	021c      	lsls	r4, r3, #8
 8004b18:	6a3b      	ldr	r3, [r7, #32]
 8004b1a:	085b      	lsrs	r3, r3, #1
 8004b1c:	60bb      	str	r3, [r7, #8]
 8004b1e:	2300      	movs	r3, #0
 8004b20:	60fb      	str	r3, [r7, #12]
 8004b22:	68b8      	ldr	r0, [r7, #8]
 8004b24:	68f9      	ldr	r1, [r7, #12]
 8004b26:	1900      	adds	r0, r0, r4
 8004b28:	4169      	adcs	r1, r5
 8004b2a:	6a3b      	ldr	r3, [r7, #32]
 8004b2c:	603b      	str	r3, [r7, #0]
 8004b2e:	2300      	movs	r3, #0
 8004b30:	607b      	str	r3, [r7, #4]
 8004b32:	683a      	ldr	r2, [r7, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f7fb fc5d 	bl	80003f4 <__aeabi_uldivmod>
 8004b3a:	0002      	movs	r2, r0
 8004b3c:	000b      	movs	r3, r1
 8004b3e:	0010      	movs	r0, r2
 8004b40:	0019      	movs	r1, r3
 8004b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b44:	2384      	movs	r3, #132	; 0x84
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	58d3      	ldr	r3, [r2, r3]
 8004b4a:	0002      	movs	r2, r0
 8004b4c:	60da      	str	r2, [r3, #12]
 8004b4e:	e00c      	b.n	8004b6a <UART_Init+0x18a>
	}
	else
#endif
	{
		uart->Instance->BRR = UART_DIV_SAMPLING16(pclk, baud);
 8004b50:	6a3b      	ldr	r3, [r7, #32]
 8004b52:	085a      	lsrs	r2, r3, #1
 8004b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b56:	18d0      	adds	r0, r2, r3
 8004b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b5a:	2384      	movs	r3, #132	; 0x84
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	58d4      	ldr	r4, [r2, r3]
 8004b60:	6a39      	ldr	r1, [r7, #32]
 8004b62:	f7fb fad1 	bl	8000108 <__udivsi3>
 8004b66:	0003      	movs	r3, r0
 8004b68:	60e3      	str	r3, [r4, #12]
	}
	__HAL_UART_ENABLE(uart);
 8004b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b6c:	2384      	movs	r3, #132	; 0x84
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	58d3      	ldr	r3, [r2, r3]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b76:	2384      	movs	r3, #132	; 0x84
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	58cb      	ldr	r3, [r1, r3]
 8004b7c:	2101      	movs	r1, #1
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	601a      	str	r2, [r3, #0]

	// Enable RX IRQ.
	__UART_RX_ENABLE(uart);
 8004b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b84:	2384      	movs	r3, #132	; 0x84
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	58d3      	ldr	r3, [r2, r3]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b8e:	2384      	movs	r3, #132	; 0x84
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	58cb      	ldr	r3, [r1, r3]
 8004b94:	2120      	movs	r1, #32
 8004b96:	430a      	orrs	r2, r1
 8004b98:	601a      	str	r2, [r3, #0]
}
 8004b9a:	46c0      	nop			; (mov r8, r8)
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	b013      	add	sp, #76	; 0x4c
 8004ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ba2:	46c0      	nop			; (mov r8, r8)
 8004ba4:	1000960c 	.word	0x1000960c
 8004ba8:	00000b2a 	.word	0x00000b2a
 8004bac:	40004800 	.word	0x40004800

08004bb0 <UART_Deinit>:

void UART_Deinit(UART_t * uart)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
	// Disable RX IRQ, and TX IRQ in case a tx is underway.
	__UART_RX_DISABLE(uart);
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	2384      	movs	r3, #132	; 0x84
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	58d3      	ldr	r3, [r2, r3]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	6879      	ldr	r1, [r7, #4]
 8004bc4:	2384      	movs	r3, #132	; 0x84
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	58cb      	ldr	r3, [r1, r3]
 8004bca:	2120      	movs	r1, #32
 8004bcc:	438a      	bics	r2, r1
 8004bce:	601a      	str	r2, [r3, #0]
	__UART_TX_DISABLE(uart);
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	2384      	movs	r3, #132	; 0x84
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	58d3      	ldr	r3, [r2, r3]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	6879      	ldr	r1, [r7, #4]
 8004bdc:	2384      	movs	r3, #132	; 0x84
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	58cb      	ldr	r3, [r1, r3]
 8004be2:	2180      	movs	r1, #128	; 0x80
 8004be4:	438a      	bics	r2, r1
 8004be6:	601a      	str	r2, [r3, #0]

	__HAL_UART_DISABLE(uart);
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	2384      	movs	r3, #132	; 0x84
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	58d3      	ldr	r3, [r2, r3]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	6879      	ldr	r1, [r7, #4]
 8004bf4:	2384      	movs	r3, #132	; 0x84
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	58cb      	ldr	r3, [r1, r3]
 8004bfa:	2101      	movs	r1, #1
 8004bfc:	438a      	bics	r2, r1
 8004bfe:	601a      	str	r2, [r3, #0]
	// Clear all control registers.
	uart->Instance->CR1 = 0x0U;
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	2384      	movs	r3, #132	; 0x84
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	58d3      	ldr	r3, [r2, r3]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	601a      	str	r2, [r3, #0]
	uart->Instance->CR2 = 0x0U;
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	2384      	movs	r3, #132	; 0x84
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	58d3      	ldr	r3, [r2, r3]
 8004c14:	2200      	movs	r2, #0
 8004c16:	605a      	str	r2, [r3, #4]
	uart->Instance->CR3 = 0x0U;
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	2384      	movs	r3, #132	; 0x84
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	58d3      	ldr	r3, [r2, r3]
 8004c20:	2200      	movs	r2, #0
 8004c22:	609a      	str	r2, [r3, #8]

	// Disable uart specific GPIO and clocks.
	UARTx_Deinit(uart);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	0018      	movs	r0, r3
 8004c28:	f000 f8b8 	bl	8004d9c <UARTx_Deinit>
}
 8004c2c:	46c0      	nop			; (mov r8, r8)
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	b002      	add	sp, #8
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <UART_ReadCount>:
{
	UART_Write(uart, (const uint8_t *)str, strlen(str));
}

uint32_t UART_ReadCount(UART_t * uart)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
	__UART_RX_DISABLE(uart);
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	2384      	movs	r3, #132	; 0x84
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	58d3      	ldr	r3, [r2, r3]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	6879      	ldr	r1, [r7, #4]
 8004c48:	2384      	movs	r3, #132	; 0x84
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	58cb      	ldr	r3, [r1, r3]
 8004c4e:	2120      	movs	r1, #32
 8004c50:	438a      	bics	r2, r1
 8004c52:	601a      	str	r2, [r3, #0]
	// We have to disable the IRQs, as the IRQ may bump the tail.
	uint32_t count = UART_BFR_WRAP(uart->rx.head - uart->rx.tail);
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	2382      	movs	r3, #130	; 0x82
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	58d2      	ldr	r2, [r2, r3]
 8004c5c:	6879      	ldr	r1, [r7, #4]
 8004c5e:	2383      	movs	r3, #131	; 0x83
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	58cb      	ldr	r3, [r1, r3]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	22ff      	movs	r2, #255	; 0xff
 8004c68:	4013      	ands	r3, r2
 8004c6a:	60fb      	str	r3, [r7, #12]
	__UART_RX_ENABLE(uart);
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	2384      	movs	r3, #132	; 0x84
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	58d3      	ldr	r3, [r2, r3]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	6879      	ldr	r1, [r7, #4]
 8004c78:	2384      	movs	r3, #132	; 0x84
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	58cb      	ldr	r3, [r1, r3]
 8004c7e:	2120      	movs	r1, #32
 8004c80:	430a      	orrs	r2, r1
 8004c82:	601a      	str	r2, [r3, #0]
	return count;
 8004c84:	68fb      	ldr	r3, [r7, #12]
}
 8004c86:	0018      	movs	r0, r3
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	b004      	add	sp, #16
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <UART_Read>:

uint32_t UART_Read(UART_t * uart, uint8_t * data, uint32_t count)
{
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b088      	sub	sp, #32
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	60f8      	str	r0, [r7, #12]
 8004c96:	60b9      	str	r1, [r7, #8]
 8004c98:	607a      	str	r2, [r7, #4]
	uint32_t available = UART_ReadCount(uart);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	0018      	movs	r0, r3
 8004c9e:	f7ff ffc9 	bl	8004c34 <UART_ReadCount>
 8004ca2:	0003      	movs	r3, r0
 8004ca4:	617b      	str	r3, [r7, #20]
	if (available < count)
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d201      	bcs.n	8004cb2 <UART_Read+0x24>
	{
		count = available;
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	607b      	str	r3, [r7, #4]
	}

	// As long as we read faster than the tail is nudged, we should be fine.
	uint32_t tail = uart->rx.tail;
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	2383      	movs	r3, #131	; 0x83
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	58d3      	ldr	r3, [r2, r3]
 8004cba:	61fb      	str	r3, [r7, #28]
	for (uint32_t i = 0; i < count; i++)
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	61bb      	str	r3, [r7, #24]
 8004cc0:	e012      	b.n	8004ce8 <UART_Read+0x5a>
	{
		*data++ = uart->rx.buffer[tail];
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	1c5a      	adds	r2, r3, #1
 8004cc6:	60ba      	str	r2, [r7, #8]
 8004cc8:	68f8      	ldr	r0, [r7, #12]
 8004cca:	2284      	movs	r2, #132	; 0x84
 8004ccc:	0052      	lsls	r2, r2, #1
 8004cce:	69f9      	ldr	r1, [r7, #28]
 8004cd0:	1841      	adds	r1, r0, r1
 8004cd2:	188a      	adds	r2, r1, r2
 8004cd4:	7812      	ldrb	r2, [r2, #0]
 8004cd6:	701a      	strb	r2, [r3, #0]
		tail = UART_BFR_WRAP(tail + 1);
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	3301      	adds	r3, #1
 8004cdc:	22ff      	movs	r2, #255	; 0xff
 8004cde:	4013      	ands	r3, r2
 8004ce0:	61fb      	str	r3, [r7, #28]
	for (uint32_t i = 0; i < count; i++)
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	61bb      	str	r3, [r7, #24]
 8004ce8:	69ba      	ldr	r2, [r7, #24]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d3e8      	bcc.n	8004cc2 <UART_Read+0x34>
	}
	uart->rx.tail = tail;
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	2383      	movs	r3, #131	; 0x83
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	69f9      	ldr	r1, [r7, #28]
 8004cf8:	50d1      	str	r1, [r2, r3]

	return count;
 8004cfa:	687b      	ldr	r3, [r7, #4]
}
 8004cfc:	0018      	movs	r0, r3
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	b008      	add	sp, #32
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <UART_ReadFlush>:
	uart->rx.tail = UART_BFR_WRAP(tail + 1);
	return b;
}

void UART_ReadFlush(UART_t * uart)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
	__UART_RX_DISABLE(uart);
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	2384      	movs	r3, #132	; 0x84
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	58d3      	ldr	r3, [r2, r3]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	6879      	ldr	r1, [r7, #4]
 8004d18:	2384      	movs	r3, #132	; 0x84
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	58cb      	ldr	r3, [r1, r3]
 8004d1e:	2120      	movs	r1, #32
 8004d20:	438a      	bics	r2, r1
 8004d22:	601a      	str	r2, [r3, #0]
	uart->rx.tail = uart->rx.head;
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	2382      	movs	r3, #130	; 0x82
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	58d1      	ldr	r1, [r2, r3]
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	2383      	movs	r3, #131	; 0x83
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	50d1      	str	r1, [r2, r3]
	__UART_RX_ENABLE(uart);
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	2384      	movs	r3, #132	; 0x84
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	58d3      	ldr	r3, [r2, r3]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	6879      	ldr	r1, [r7, #4]
 8004d40:	2384      	movs	r3, #132	; 0x84
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	58cb      	ldr	r3, [r1, r3]
 8004d46:	2120      	movs	r1, #32
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	601a      	str	r2, [r3, #0]
}
 8004d4c:	46c0      	nop			; (mov r8, r8)
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	b002      	add	sp, #8
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <UARTx_Init>:
/*
 * PRIVATE FUNCTIONS
 */

static void UARTx_Init(UART_t * uart)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
#ifdef UARTLP_GPIO
	if (uart == UART_LP)
 8004d5c:	4b0c      	ldr	r3, [pc, #48]	; (8004d90 <UARTx_Init+0x3c>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d110      	bne.n	8004d88 <UARTx_Init+0x34>
	{
		__HAL_RCC_LPUART1_CLK_ENABLE();
 8004d66:	4b0b      	ldr	r3, [pc, #44]	; (8004d94 <UARTx_Init+0x40>)
 8004d68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d6a:	4b0a      	ldr	r3, [pc, #40]	; (8004d94 <UARTx_Init+0x40>)
 8004d6c:	2180      	movs	r1, #128	; 0x80
 8004d6e:	02c9      	lsls	r1, r1, #11
 8004d70:	430a      	orrs	r2, r1
 8004d72:	639a      	str	r2, [r3, #56]	; 0x38
		GPIO_EnableAlternate(UARTLP_GPIO, UARTLP_PINS, 0, UARTLP_AF);
 8004d74:	2380      	movs	r3, #128	; 0x80
 8004d76:	0119      	lsls	r1, r3, #4
 8004d78:	4807      	ldr	r0, [pc, #28]	; (8004d98 <UARTx_Init+0x44>)
 8004d7a:	2304      	movs	r3, #4
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f7ff f91b 	bl	8003fb8 <GPIO_EnableAlternate>
		HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8004d82:	201d      	movs	r0, #29
 8004d84:	f7fd f8cd 	bl	8001f22 <HAL_NVIC_EnableIRQ>
		__HAL_RCC_USART5_CLK_ENABLE();
		GPIO_EnableAlternate(UART5_GPIO, UART5_PINS, 0, UART5_AF);
		HAL_NVIC_EnableIRQ(USART4_5_IRQn);
	}
#endif
}
 8004d88:	46c0      	nop			; (mov r8, r8)
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	b002      	add	sp, #8
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	2000028c 	.word	0x2000028c
 8004d94:	40021000 	.word	0x40021000
 8004d98:	50000400 	.word	0x50000400

08004d9c <UARTx_Deinit>:

static void UARTx_Deinit(UART_t * uart)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
#ifdef UARTLP_GPIO
	if (uart == UART_LP)
 8004da4:	4b0c      	ldr	r3, [pc, #48]	; (8004dd8 <UARTx_Deinit+0x3c>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d10f      	bne.n	8004dce <UARTx_Deinit+0x32>
	{
		HAL_NVIC_DisableIRQ(LPUART1_IRQn);
 8004dae:	201d      	movs	r0, #29
 8004db0:	f7fd f8c7 	bl	8001f42 <HAL_NVIC_DisableIRQ>
		__HAL_RCC_LPUART1_CLK_DISABLE();
 8004db4:	4b09      	ldr	r3, [pc, #36]	; (8004ddc <UARTx_Deinit+0x40>)
 8004db6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004db8:	4b08      	ldr	r3, [pc, #32]	; (8004ddc <UARTx_Deinit+0x40>)
 8004dba:	4909      	ldr	r1, [pc, #36]	; (8004de0 <UARTx_Deinit+0x44>)
 8004dbc:	400a      	ands	r2, r1
 8004dbe:	639a      	str	r2, [r3, #56]	; 0x38
		GPIO_Deinit(UARTLP_GPIO, UARTLP_PINS);
 8004dc0:	2380      	movs	r3, #128	; 0x80
 8004dc2:	011b      	lsls	r3, r3, #4
 8004dc4:	4a07      	ldr	r2, [pc, #28]	; (8004de4 <UARTx_Deinit+0x48>)
 8004dc6:	0019      	movs	r1, r3
 8004dc8:	0010      	movs	r0, r2
 8004dca:	f7ff fdf1 	bl	80049b0 <GPIO_Deinit>
		HAL_NVIC_DisableIRQ(USART4_5_IRQn);
		__HAL_RCC_USART5_CLK_DISABLE();
		GPIO_Deinit(UART5_GPIO, UART5_PINS);
	}
#endif
}
 8004dce:	46c0      	nop			; (mov r8, r8)
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	b002      	add	sp, #8
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	46c0      	nop			; (mov r8, r8)
 8004dd8:	2000028c 	.word	0x2000028c
 8004ddc:	40021000 	.word	0x40021000
 8004de0:	fffbffff 	.word	0xfffbffff
 8004de4:	50000400 	.word	0x50000400

08004de8 <UART_IRQHandler>:
 * INTERRUPT ROUTINES
 */


void UART_IRQHandler(UART_t *uart)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
	uint32_t flags = uart->Instance->ISR;
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	2384      	movs	r3, #132	; 0x84
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	58d3      	ldr	r3, [r2, r3]
 8004df8:	69db      	ldr	r3, [r3, #28]
 8004dfa:	60fb      	str	r3, [r7, #12]

	if (flags & USART_ISR_RXNE)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2220      	movs	r2, #32
 8004e00:	4013      	ands	r3, r2
 8004e02:	d032      	beq.n	8004e6a <UART_IRQHandler+0x82>
	{
		// New RX data. Put it in the RX buffer.
		uart->rx.buffer[uart->rx.head] = uart->Instance->RDR;
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	2384      	movs	r3, #132	; 0x84
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	58d3      	ldr	r3, [r2, r3]
 8004e0c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	2382      	movs	r3, #130	; 0x82
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	58d2      	ldr	r2, [r2, r3]
 8004e16:	b2c8      	uxtb	r0, r1
 8004e18:	6879      	ldr	r1, [r7, #4]
 8004e1a:	2384      	movs	r3, #132	; 0x84
 8004e1c:	005b      	lsls	r3, r3, #1
 8004e1e:	188a      	adds	r2, r1, r2
 8004e20:	18d3      	adds	r3, r2, r3
 8004e22:	1c02      	adds	r2, r0, #0
 8004e24:	701a      	strb	r2, [r3, #0]
		uart->rx.head = UART_BFR_WRAP(uart->rx.head + 1);
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	2382      	movs	r3, #130	; 0x82
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	58d3      	ldr	r3, [r2, r3]
 8004e2e:	3301      	adds	r3, #1
 8004e30:	22ff      	movs	r2, #255	; 0xff
 8004e32:	4013      	ands	r3, r2
 8004e34:	0019      	movs	r1, r3
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	2382      	movs	r3, #130	; 0x82
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	50d1      	str	r1, [r2, r3]
		if (uart->rx.head == uart->rx.tail) {
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	2382      	movs	r3, #130	; 0x82
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	58d2      	ldr	r2, [r2, r3]
 8004e46:	6879      	ldr	r1, [r7, #4]
 8004e48:	2383      	movs	r3, #131	; 0x83
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	58cb      	ldr	r3, [r1, r3]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d10b      	bne.n	8004e6a <UART_IRQHandler+0x82>
			// The head just caught up with the tail. Uh oh. Increment the tail.
			// Note, this causes flaming huge issues.
			uart->rx.tail = UART_BFR_WRAP(uart->rx.tail + 1);
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	2383      	movs	r3, #131	; 0x83
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	58d3      	ldr	r3, [r2, r3]
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	22ff      	movs	r2, #255	; 0xff
 8004e5e:	4013      	ands	r3, r2
 8004e60:	0019      	movs	r1, r3
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	2383      	movs	r3, #131	; 0x83
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	50d1      	str	r1, [r2, r3]
		}
	}

	if (flags & USART_ISR_TXE)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2280      	movs	r2, #128	; 0x80
 8004e6e:	4013      	ands	r3, r2
 8004e70:	d02e      	beq.n	8004ed0 <UART_IRQHandler+0xe8>
	{
		// No byte being transmitted..
		if (uart->tx.head != uart->tx.tail)
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	2380      	movs	r3, #128	; 0x80
 8004e76:	005b      	lsls	r3, r3, #1
 8004e78:	58d2      	ldr	r2, [r2, r3]
 8004e7a:	6879      	ldr	r1, [r7, #4]
 8004e7c:	2382      	movs	r3, #130	; 0x82
 8004e7e:	005b      	lsls	r3, r3, #1
 8004e80:	58cb      	ldr	r3, [r1, r3]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d018      	beq.n	8004eb8 <UART_IRQHandler+0xd0>
		{
			// Send a byte out.
			uart->Instance->TDR = uart->tx.buffer[uart->tx.tail];
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	2382      	movs	r3, #130	; 0x82
 8004e8a:	005b      	lsls	r3, r3, #1
 8004e8c:	58d3      	ldr	r3, [r2, r3]
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	5cd1      	ldrb	r1, [r2, r3]
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	2384      	movs	r3, #132	; 0x84
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	58d3      	ldr	r3, [r2, r3]
 8004e9a:	000a      	movs	r2, r1
 8004e9c:	629a      	str	r2, [r3, #40]	; 0x28
			uart->tx.tail = UART_BFR_WRAP(uart->tx.tail + 1);
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	2382      	movs	r3, #130	; 0x82
 8004ea2:	005b      	lsls	r3, r3, #1
 8004ea4:	58d3      	ldr	r3, [r2, r3]
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	22ff      	movs	r2, #255	; 0xff
 8004eaa:	4013      	ands	r3, r2
 8004eac:	0019      	movs	r1, r3
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	2382      	movs	r3, #130	; 0x82
 8004eb2:	005b      	lsls	r3, r3, #1
 8004eb4:	50d1      	str	r1, [r2, r3]
 8004eb6:	e00b      	b.n	8004ed0 <UART_IRQHandler+0xe8>
		}
		else
		{
			// Tail caught up with head: no bytes remain.
			// Disable the TX IRQ.
			__UART_TX_DISABLE(uart);
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	2384      	movs	r3, #132	; 0x84
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	58d3      	ldr	r3, [r2, r3]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	6879      	ldr	r1, [r7, #4]
 8004ec4:	2384      	movs	r3, #132	; 0x84
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	58cb      	ldr	r3, [r1, r3]
 8004eca:	2180      	movs	r1, #128	; 0x80
 8004ecc:	438a      	bics	r2, r1
 8004ece:	601a      	str	r2, [r3, #0]
		}
	}

	if (flags & (USART_ISR_ORE | USART_ISR_PE | USART_ISR_NE | USART_ISR_FE))
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	220f      	movs	r2, #15
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	d00b      	beq.n	8004ef0 <UART_IRQHandler+0x108>
	{
		__UART_CLEAR_FLAGS(uart, (UART_CLEAR_PEF | UART_CLEAR_FEF | UART_CLEAR_NEF | UART_CLEAR_OREF));
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	2384      	movs	r3, #132	; 0x84
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	58d3      	ldr	r3, [r2, r3]
 8004ee0:	6a1a      	ldr	r2, [r3, #32]
 8004ee2:	6879      	ldr	r1, [r7, #4]
 8004ee4:	2384      	movs	r3, #132	; 0x84
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	58cb      	ldr	r3, [r1, r3]
 8004eea:	210f      	movs	r1, #15
 8004eec:	430a      	orrs	r2, r1
 8004eee:	621a      	str	r2, [r3, #32]
	}
}
 8004ef0:	46c0      	nop			; (mov r8, r8)
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	b004      	add	sp, #16
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <LPUART1_IRQHandler>:


#ifdef UARTLP_GPIO
void LPUART1_IRQHandler(void)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	af00      	add	r7, sp, #0
	UART_IRQHandler(UART_LP);
 8004efc:	4b03      	ldr	r3, [pc, #12]	; (8004f0c <LPUART1_IRQHandler+0x14>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	0018      	movs	r0, r3
 8004f02:	f7ff ff71 	bl	8004de8 <UART_IRQHandler>
}
 8004f06:	46c0      	nop			; (mov r8, r8)
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	2000028c 	.word	0x2000028c

08004f10 <CLK_GetHCLKFreq>:
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	af00      	add	r7, sp, #0
	return CLK_SYSCLK_FREQ;
 8004f14:	4b01      	ldr	r3, [pc, #4]	; (8004f1c <CLK_GetHCLKFreq+0xc>)
}
 8004f16:	0018      	movs	r0, r3
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	01e84800 	.word	0x01e84800

08004f20 <US_Delay>:
}

#else //US_ENABLE

void __attribute__((optimize("-Os"))) US_Delay(uint32_t us)
{
 8004f20:	b513      	push	{r0, r1, r4, lr}
 8004f22:	0004      	movs	r4, r0
	// -Os will generate a straight forward output.
	// 11225 is our tuned factor.
	volatile uint32_t i = (us * (CLK_GetHCLKFreq() >> 10)) / 11225;
 8004f24:	f7ff fff4 	bl	8004f10 <CLK_GetHCLKFreq>
 8004f28:	0a80      	lsrs	r0, r0, #10
 8004f2a:	4360      	muls	r0, r4
 8004f2c:	4904      	ldr	r1, [pc, #16]	; (8004f40 <US_Delay+0x20>)
 8004f2e:	f7fb f8eb 	bl	8000108 <__udivsi3>
 8004f32:	9001      	str	r0, [sp, #4]
	while(i--);
 8004f34:	9b01      	ldr	r3, [sp, #4]
 8004f36:	1e5a      	subs	r2, r3, #1
 8004f38:	9201      	str	r2, [sp, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1fa      	bne.n	8004f34 <US_Delay+0x14>
}
 8004f3e:	bd13      	pop	{r0, r1, r4, pc}
 8004f40:	00002bd9 	.word	0x00002bd9

08004f44 <__libc_init_array>:
 8004f44:	b570      	push	{r4, r5, r6, lr}
 8004f46:	2600      	movs	r6, #0
 8004f48:	4d0c      	ldr	r5, [pc, #48]	; (8004f7c <__libc_init_array+0x38>)
 8004f4a:	4c0d      	ldr	r4, [pc, #52]	; (8004f80 <__libc_init_array+0x3c>)
 8004f4c:	1b64      	subs	r4, r4, r5
 8004f4e:	10a4      	asrs	r4, r4, #2
 8004f50:	42a6      	cmp	r6, r4
 8004f52:	d109      	bne.n	8004f68 <__libc_init_array+0x24>
 8004f54:	2600      	movs	r6, #0
 8004f56:	f000 f82b 	bl	8004fb0 <_init>
 8004f5a:	4d0a      	ldr	r5, [pc, #40]	; (8004f84 <__libc_init_array+0x40>)
 8004f5c:	4c0a      	ldr	r4, [pc, #40]	; (8004f88 <__libc_init_array+0x44>)
 8004f5e:	1b64      	subs	r4, r4, r5
 8004f60:	10a4      	asrs	r4, r4, #2
 8004f62:	42a6      	cmp	r6, r4
 8004f64:	d105      	bne.n	8004f72 <__libc_init_array+0x2e>
 8004f66:	bd70      	pop	{r4, r5, r6, pc}
 8004f68:	00b3      	lsls	r3, r6, #2
 8004f6a:	58eb      	ldr	r3, [r5, r3]
 8004f6c:	4798      	blx	r3
 8004f6e:	3601      	adds	r6, #1
 8004f70:	e7ee      	b.n	8004f50 <__libc_init_array+0xc>
 8004f72:	00b3      	lsls	r3, r6, #2
 8004f74:	58eb      	ldr	r3, [r5, r3]
 8004f76:	4798      	blx	r3
 8004f78:	3601      	adds	r6, #1
 8004f7a:	e7f2      	b.n	8004f62 <__libc_init_array+0x1e>
 8004f7c:	08004fd8 	.word	0x08004fd8
 8004f80:	08004fd8 	.word	0x08004fd8
 8004f84:	08004fd8 	.word	0x08004fd8
 8004f88:	08004fdc 	.word	0x08004fdc

08004f8c <memcpy>:
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	b510      	push	{r4, lr}
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d100      	bne.n	8004f96 <memcpy+0xa>
 8004f94:	bd10      	pop	{r4, pc}
 8004f96:	5ccc      	ldrb	r4, [r1, r3]
 8004f98:	54c4      	strb	r4, [r0, r3]
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	e7f8      	b.n	8004f90 <memcpy+0x4>

08004f9e <memset>:
 8004f9e:	0003      	movs	r3, r0
 8004fa0:	1882      	adds	r2, r0, r2
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d100      	bne.n	8004fa8 <memset+0xa>
 8004fa6:	4770      	bx	lr
 8004fa8:	7019      	strb	r1, [r3, #0]
 8004faa:	3301      	adds	r3, #1
 8004fac:	e7f9      	b.n	8004fa2 <memset+0x4>
	...

08004fb0 <_init>:
 8004fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fb2:	46c0      	nop			; (mov r8, r8)
 8004fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fb6:	bc08      	pop	{r3}
 8004fb8:	469e      	mov	lr, r3
 8004fba:	4770      	bx	lr

08004fbc <_fini>:
 8004fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fbe:	46c0      	nop			; (mov r8, r8)
 8004fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fc2:	bc08      	pop	{r3}
 8004fc4:	469e      	mov	lr, r3
 8004fc6:	4770      	bx	lr
